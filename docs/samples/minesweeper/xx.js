
var Module;

if (typeof Module === 'undefined') Module = {};

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = '/Users/reuben/oaknut/samples/minesweeper/build/web/release/webroot/xx.data';
    var REMOTE_PACKAGE_BASE = 'xx.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onerror = function(event) {
        throw new Error("NetworkError for: " + packageName);
      }
      xhr.onload = function(event) {
        if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
          var packageData = xhr.response;
          callback(packageData);
        } else {
          throw new Error(xhr.statusText + " : " + xhr.responseURL);
        }
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetchedCallback = null;
      var fetched = Module['getPreloadedPackage'] ? Module['getPreloadedPackage'](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;

      if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'assets', true, true);
Module['FS_createPath']('/assets', 'images', true, true);
Module['FS_createPath']('/assets', 'layout', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        Module['removeRunDependency']('fp ' + that.name);

        this.requests[this.name] = null;
      }
    };

        var files = metadata.files;
        for (var i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].crunched, files[i].audio).open('GET', files[i].filename);
        }

  
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        if (Module['SPLIT_MEMORY']) Module.printErr('warning: you should run the file packager with --no-heap-copy when SPLIT_MEMORY is used, otherwise copying into the heap may fail due to the splitting');
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
  
          var files = metadata.files;
          for (var i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_/Users/reuben/oaknut/samples/minesweeper/build/web/release/webroot/xx.data');

    };
    Module['addRunDependency']('datafile_/Users/reuben/oaknut/samples/minesweeper/build/web/release/webroot/xx.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"audio": 0, "start": 0, "crunched": 0, "end": 90, "filename": "/assets/styles.res"}, {"audio": 0, "start": 90, "crunched": 0, "end": 6238, "filename": "/assets/.DS_Store"}, {"audio": 0, "start": 6238, "crunched": 0, "end": 9416, "filename": "/assets/images/flag.png"}, {"audio": 0, "start": 9416, "crunched": 0, "end": 21599, "filename": "/assets/images/face_won.png"}, {"audio": 0, "start": 21599, "crunched": 0, "end": 27747, "filename": "/assets/images/.DS_Store"}, {"audio": 0, "start": 27747, "crunched": 0, "end": 31263, "filename": "/assets/images/8.png"}, {"audio": 0, "start": 31263, "crunched": 0, "end": 34589, "filename": "/assets/images/boom.png"}, {"audio": 0, "start": 34589, "crunched": 0, "end": 38332, "filename": "/assets/images/mine.png"}, {"audio": 0, "start": 38332, "crunched": 0, "end": 39888, "filename": "/assets/images/unknown.png"}, {"audio": 0, "start": 39888, "crunched": 0, "end": 52837, "filename": "/assets/images/face_normal.png"}, {"audio": 0, "start": 52837, "crunched": 0, "end": 66597, "filename": "/assets/images/face_lost.png"}, {"audio": 0, "start": 66597, "crunched": 0, "end": 70542, "filename": "/assets/images/4.png"}, {"audio": 0, "start": 70542, "crunched": 0, "end": 73724, "filename": "/assets/images/5.png"}, {"audio": 0, "start": 73724, "crunched": 0, "end": 78294, "filename": "/assets/images/7.png"}, {"audio": 0, "start": 78294, "crunched": 0, "end": 83186, "filename": "/assets/images/6.png"}, {"audio": 0, "start": 83186, "crunched": 0, "end": 88534, "filename": "/assets/images/2.png"}, {"audio": 0, "start": 88534, "crunched": 0, "end": 91997, "filename": "/assets/images/3.png"}, {"audio": 0, "start": 91997, "crunched": 0, "end": 94492, "filename": "/assets/images/1.png"}, {"audio": 0, "start": 94492, "crunched": 0, "end": 95079, "filename": "/assets/images/0.png"}, {"audio": 0, "start": 95079, "crunched": 0, "end": 95705, "filename": "/assets/layout/main.res"}], "remote_package_size": 95705, "package_uuid": "aeb226c3-ef13-4418-8287-53687993fcb3"});

})();

// Route URL GET parameters to argc+argv
if (typeof window === "object") {
  Module['arguments'] = window.location.search.substr(1).trim().split('&');
  // If no args were passed arguments = [''], in which case kill the single empty string.
  if (!Module['arguments'][0])
    Module['arguments'] = [];
}
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function shell_read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    if (!func) return; // on null pointer, return undefined
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - Module['asm'].stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [function($0) { updateFps($0); },
 function($0, $1, $2) { var bitmap=$0; var OnImageLoadedFromData=$2; var img = GlobalObjectTracker[4]; img.onload = function() { Runtime.dynCall('vi', OnImageLoadedFromData, [bitmap]); }; img.src = Pointer_stringify($1); },
 function($0) { var style = document.createElement("style"); style.type = "text/css"; style.innerHTML = Pointer_stringify($0); document.getElementsByTagName('head')[0].appendChild(style); },
 function($0, $1, $2, $3) { var ctxt = GlobalObjectTracker[7]; var jstr = UTF8ToString($2); var textMetrics = ctxt.measureText(jstr); Runtime.dynCall('viii', $3, [$0,$1,textMetrics.width]); },
 function($0, $1, $2) { var ctxt = GlobalObjectTracker[7]; ctxt.clearRect(0,0,$1, $2); ctxt.fillText(UTF8ToString($0), 0,0); },
 function($0, $1, $2, $3, $4) { var ctxt = GlobalObjectTracker[7]; var targetBuff = GlobalObjectTracker[8]; var imgdata = ctxt.getImageData(0, 0, $2, $3); var o = 0; for (y=0 ; y<$3 ; y++) { for (x=0 ; x<$2 ; x++) { targetBuff[(y+$1)* $4 + $0+x] = imgdata.data[o+3]; o+=4; } } },
 function($0, $1, $2, $3) { var req=$0; var url=Pointer_stringify($1); var onImageLoad=$2; var onError=$3; var img = GlobalObjectTracker[1]; img.onload = function() { Runtime.dynCall('vi', onImageLoad, [req]); }; img.onerror = function() { Runtime.dynCall('vi', onError, [req]); }; img.crossOrigin = 'Anonymous'; img.src = url; },
 function($0, $1, $2, $3, $4) { var req=$0; var url=Pointer_stringify($1); var onprogress=$2; var onload=$3; var onerror=$4; var xhr = GlobalObjectTracker[1]; xhr.open("GET", url, true); xhr.responseType='arraybuffer'; xhr.onprogress=function http_onprogress(e) { switch(xhr.status) { case 200: case 206: case 300: case 301: case 302: { var date=xhr.getResponseHeader('Last-Modified'); date=((date!=null) ? new Date(date).getTime()/1000 : 0); Runtime.dynCall('viiii', onprogress, [req, e.loaded, e.total, date]); } break; } }; xhr.onload=function http_onload(e) { switch(xhr.status) { case 200: case 206: case 300: case 301: case 302: var date=xhr.getResponseHeader('Last-Modified'); date=((date!=null) ? new Date(date).getTime()/1000 : 0); var byteArray=new Uint8Array(xhr.response); var buffer=_malloc(byteArray.length); HEAPU8.set(byteArray, buffer); Runtime.dynCall('viiii', onload, [req, buffer, byteArray.length, date]); _free(buffer); break; default: Runtime.dynCall('vi', onerror, [req]); break; } }; xhr.onerror=function http_onerror(e) { Runtime.dynCall('vi', onerror, [req]); }; try{if(xhr.channel instanceof Ci.nsIHttpChannel)xhr.channel.redirectionLimit=0;}catch(ex){} xhr.send(null); },
 function() { requestAnimationFrame( function() { _dispatchMainWindowDraw(); }) },
 function($0, $1, $2) { return setInterval(function() { Runtime.dynCall('vi', $2, [$0]); }, $1); },
 function($0) { clearInterval($0); },
 function() { gl = Module.canvas.getContext('webgl'); }];

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}

function _emscripten_asm_const_iddiii(code, a0, a1, a2, a3, a4) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiiii(code, a0, a1, a2, a3) {
  return ASM_CONSTS[code](a0, a1, a2, a3);
}

function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}



STATIC_BASE = Runtime.GLOBAL_BASE;

STATICTOP = STATIC_BASE + 32768;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_gameview_cpp() } }, { func: function() { __GLOBAL__sub_I_app_cpp() } }, { func: function() { __GLOBAL__sub_I_styles_cpp() } }, { func: function() { __GLOBAL__sub_I_urlrequest_cpp() } }, { func: function() { __GLOBAL__sub_I_userdefaults_cpp() } }, { func: function() { __GLOBAL__sub_I_object_cpp() } }, { func: function() { __GLOBAL__sub_I_font_cpp() } }, { func: function() { __GLOBAL__sub_I_renderop_blur_cpp() } }, { func: function() { __GLOBAL__sub_I_renderop_fillrect_cpp() } }, { func: function() { __GLOBAL__sub_I_renderop_roundrect_cpp() } }, { func: function() { __GLOBAL__sub_I_renderop_text_cpp() } }, { func: function() { __GLOBAL__sub_I_renderop_texture_cpp() } }, { func: function() { __GLOBAL__sub_I_canvas_cpp() } }, { func: function() { __GLOBAL__sub_I_web_cpp() } }, { func: function() { __GLOBAL__sub_I_button_cpp() } }, { func: function() { __GLOBAL__sub_I_edittext_cpp() } }, { func: function() { __GLOBAL__sub_I_imageview_cpp() } }, { func: function() { __GLOBAL__sub_I_label_cpp() } }, { func: function() { __GLOBAL__sub_I_linearlayout_cpp() } }, { func: function() { __GLOBAL__sub_I_listview_cpp() } }, { func: function() { __GLOBAL__sub_I_navigationbar_cpp() } }, { func: function() { __GLOBAL__sub_I_searchbox_cpp() } }, { func: function() { __GLOBAL__sub_I_segmentedcontrol_cpp() } }, { func: function() { __GLOBAL__sub_I_view_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } });


/* memory initializer */ allocate([188,36,0,0,64,38,0,0,160,37,0,0,43,38,0,0,0,0,0,0,2,0,0,0,232,0,0,0,2,0,0,0,8,0,0,0,0,24,0,0,188,36,0,0,187,38,0,0,228,36,0,0,81,38,0,0,48,0,0,0,0,0,0,0,188,36,0,0,235,38,0,0,228,36,0,0,215,39,0,0,120,6,0,0,0,0,0,0,228,36,0,0,88,39,0,0,120,0,0,0,0,0,0,0,188,36,0,0,47,39,0,0,188,36,0,0,181,39,0,0,228,36,0,0,153,40,0,0,8,1,0,0,0,0,0,0,228,36,0,0,158,40,0,0,8,1,0,0,0,0,0,0,188,36,0,0,175,40,0,0,228,36,0,0,40,44,0,0,8,1,0,0,0,0,0,0,228,36,0,0,57,44,0,0,8,1,0,0,0,0,0,0,228,36,0,0,144,45,0,0,8,1,0,0,0,0,0,0,228,36,0,0,230,45,0,0,8,1,0,0,0,0,0,0,228,36,0,0,12,46,0,0,8,1,0,0,0,0,0,0,188,36,0,0,29,46,0,0,188,36,0,0,73,46,0,0,188,36,0,0,107,46,0,0,228,36,0,0,175,46,0,0,88,7,0,0,0,0,0,0,228,36,0,0,3,47,0,0,8,1,0,0,0,0,0,0,160,37,0,0,10,47,0,0,0,0,0,0,2,0,0,0,8,1,0,0,2,0,0,0,80,1,0,0,0,8,0,0,188,36,0,0,16,47,0,0,228,36,0,0,46,47,0,0,80,1,0,0,0,0,0,0,160,37,0,0,32,47,0,0,0,0,0,0,2,0,0,0,8,1,0,0,2,0,0,0,80,1,0,0,0,8,0,0,228,36,0,0,175,47,0,0,8,1,0,0,0,0,0,0,228,36,0,0,186,47,0,0,136,1,0,0,0,0,0,0,228,36,0,0,203,47,0,0,136,1,0,0,0,0,0,0,160,37,0,0,223,47,0,0,0,0,0,0,2,0,0,0,8,1,0,0,2,0,0,0,216,1,0,0,0,8,0,0,188,36,0,0,231,47,0,0,228,36,0,0,58,48,0,0,8,1,0,0,0,0,0,0,228,36,0,0,116,48,0,0,8,1,0,0,0,0,0,0,228,36,0,0,225,50,0,0,8,1,0,0,0,0,0,0,228,36,0,0,246,50,0,0,32,2,0,0,0,0,0,0,228,36,0,0,236,50,0,0,8,1,0,0,0,0,0,0,228,36,0,0,91,51,0,0,8,1,0,0,0,0,0,0,228,36,0,0,214,51,0,0,8,1,0,0,0,0,0,0,228,36,0,0,224,51,0,0,64,2,0,0,0,0,0,0,228,36,0,0,244,51,0,0,64,2,0,0,0,0,0,0,228,36,0,0,236,54,0,0,0,2,0,0,0,0,0,0,228,36,0,0,139,56,0,0,0,2,0,0,0,0,0,0,228,36,0,0,159,56,0,0,160,2,0,0,0,0,0,0,228,36,0,0,172,56,0,0,176,2,0,0,0,0,0,0,188,36,0,0,192,56,0,0,228,36,0,0,201,56,0,0,200,2,0,0,0,0,0,0,228,36,0,0,216,56,0,0,176,2,0,0,0,0,0,0,228,36,0,0,54,57,0,0,0,2,0,0,0,0,0,0,228,36,0,0,75,57,0,0,64,2,0,0,0,0,0,0,228,36,0,0,99,57,0,0,64,2,0,0,0,0,0,0,228,36,0,0,134,57,0,0,0,2,0,0,0,0,0,0,228,36,0,0,207,59,0,0,8,3,0,0,0,0,0,0,228,36,0,0,125,62,0,0,8,3,0,0,0,0,0,0,228,36,0,0,149,62,0,0,72,3,0,0,0,0,0,0,228,36,0,0,165,62,0,0,176,2,0,0,0,0,0,0,228,36,0,0,192,62,0,0,160,2,0,0,0,0,0,0,228,36,0,0,208,62,0,0,80,2,0,0,0,0,0,0,228,36,0,0,191,63,0,0,0,2,0,0,0,0,0,0,228,36,0,0,212,63,0,0,152,3,0,0,0,0,0,0,228,36,0,0,235,63,0,0,8,1,0,0,0,0,0,0,228,36,0,0,252,63,0,0,152,3,0,0,0,0,0,0,160,37,0,0,18,64,0,0,0,0,0,0,2,0,0,0,64,2,0,0,2,0,0,0,216,3,0,0,2,72,0,0,188,36,0,0,36,64,0,0,228,36,0,0,184,64,0,0,0,2,0,0,0,0,0,0,228,36,0,0,175,65,0,0,0,4,0,0,0,0,0,0,228,36,0,0,203,65,0,0,0,2,0,0,0,0,0,0,228,36,0,0,62,67,0,0,224,3,0,0,0,0,0,0,228,36,0,0,121,67,0,0,160,0,0,0,0,0,0,0,188,36,0,0,86,67,0,0,228,36,0,0,253,67,0,0,160,0,0,0,0,0,0,0,188,36,0,0,215,67,0,0,228,36,0,0,94,68,0,0,8,1,0,0,0,0,0,0,228,36,0,0,103,68,0,0,184,3,0,0,0,0,0,0,228,36,0,0,183,69,0,0,8,1,0,0,0,0,0,0,228,36,0,0,101,70,0,0,8,1,0,0,0,0,0,0,228,36,0,0,112,70,0,0,8,1,0,0,0,0,0,0,228,36,0,0,123,70,0,0,8,1,0,0,0,0,0,0,228,36,0,0,107,71,0,0,8,1,0,0,0,0,0,0,228,36,0,0,220,70,0,0,120,0,0,0,0,0,0,0,188,36,0,0,137,70,0,0,228,36,0,0,168,72,0,0,184,1,0,0,0,0,0,0,188,36,0,0,246,71,0,0,188,36,0,0,137,72,0,0,160,37,0,0,91,75,0,0,0,0,0,0,1,0,0,0,16,5,0,0,0,0,0,0,188,36,0,0,154,75,0,0,228,36,0,0,200,77,0,0,224,1,0,0,0,0,0,0,228,36,0,0,231,83,0,0,8,1,0,0,0,0,0,0,228,36,0,0,26,85,0,0,32,1,0,0,0,0,0,0,228,36,0,0,52,86,0,0,240,5,0,0,0,0,0,0,228,36,0,0,60,86,0,0,120,6,0,0,0,0,0,0,160,37,0,0,74,87,0,0,0,0,0,0,2,0,0,0,240,5,0,0,2,0,0,0,192,5,0,0,0,188,1,0,228,36,0,0,244,86,0,0,120,0,0,0,0,0,0,0,228,36,0,0,123,86,0,0,168,5,0,0,0,0,0,0,228,36,0,0,161,86,0,0,184,5,0,0,0,0,0,0,188,36,0,0,206,86,0,0,188,36,0,0,84,87,0,0,160,37,0,0,141,87,0,0,0,0,0,0,2,0,0,0,120,6,0,0,2,0,0,0,232,5,0,0,0,68,1,0,188,36,0,0,152,87,0,0,228,36,0,0,67,88,0,0,120,6,0,0,0,0,0,0,228,36,0,0,119,88,0,0,120,6,0,0,0,0,0,0,228,36,0,0,19,89,0,0,120,6,0,0,0,0,0,0,228,36,0,0,91,89,0,0,120,6,0,0,0,0,0,0,228,36,0,0,152,89,0,0,8,1,0,0,0,0,0,0,228,36,0,0,43,90,0,0,104,5,0,0,0,0,0,0,228,36,0,0,205,89,0,0,0,1,0,0,0,0,0,0,188,36,0,0,163,89,0,0,228,36,0,0,82,90,0,0,120,6,0,0,0,0,0,0,228,36,0,0,239,94,0,0,8,1,0,0,0,0,0,0,228,36,0,0,190,92,0,0,248,0,0,0,0,0,0,0,188,36,0,0,160,92,0,0,228,36,0,0,239,93,0,0,120,0,0,0,0,0,0,0,188,36,0,0,206,93,0,0,228,36,0,0,104,94,0,0,0,1,0,0,0,0,0,0,188,36,0,0,68,94,0,0,188,36,0,0,18,98,0,0,188,36,0,0,49,98,0,0,188,36,0,0,80,98,0,0,188,36,0,0,111,98,0,0,188,36,0,0,142,98,0,0,188,36,0,0,173,98,0,0,188,36,0,0,204,98,0,0,188,36,0,0,235,98,0,0,188,36,0,0,10,99,0,0,188,36,0,0,41,99,0,0,188,36,0,0,72,99,0,0,160,37,0,0,103,99,0,0,0,0,0,0,1,0,0,0,16,5,0,0,0,0,0,0,160,37,0,0,166,99,0,0,0,0,0,0,1,0,0,0,16,5,0,0,0,0,0,0,188,36,0,0,39,110,0,0,228,36,0,0,135,110,0,0,112,7,0,0,0,0,0,0,228,36,0,0,52,110,0,0,128,7,0,0,0,0,0,0,188,36,0,0,85,110,0,0,228,36,0,0,98,110,0,0,96,7,0,0,0,0,0,0,228,36,0,0,170,111,0,0,88,7,0,0,0,0,0,0,228,36,0,0,198,111,0,0,88,7,0,0,0,0,0,0,228,36,0,0,214,111,0,0,88,7,0,0,0,0,0,0,228,36,0,0,232,111,0,0,168,7,0,0,0,0,0,0,228,36,0,0,249,111,0,0,168,7,0,0,0,0,0,0,228,36,0,0,10,112,0,0,184,7,0,0,0,0,0,0,228,36,0,0,65,112,0,0,112,7,0,0,0,0,0,0,228,36,0,0,29,112,0,0,248,7,0,0,0,0,0,0,228,36,0,0,99,112,0,0,112,7,0,0,0,0,0,0,132,37,0,0,139,112,0,0,132,37,0,0,141,112,0,0,132,37,0,0,143,112,0,0,132,37,0,0,145,112,0,0,132,37,0,0,147,112,0,0,132,37,0,0,149,112,0,0,132,37,0,0,151,112,0,0,132,37,0,0,153,112,0,0,132,37,0,0,155,112,0,0,132,37,0,0,157,112,0,0,132,37,0,0,159,112,0,0,132,37,0,0,161,112,0,0,132,37,0,0,163,112,0,0,228,36,0,0,165,112,0,0,96,7,0,0,0,0,0,0,0,0,0,0,16,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,232,255,255,255,16,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,0,0,0,0,56,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,0,0,0,0,80,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,0,0,0,0,96,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,0,0,0,0,128,0,0,0,102,0,0,0,103,0,0,0,0,0,0,0,144,0,0,0,104,0,0,0,105,0,0,0,0,0,0,0,184,0,0,0,106,0,0,0,107,0,0,0,0,0,0,0,168,0,0,0,108,0,0,0,109,0,0,0,0,0,0,0,200,0,0,0,110,0,0,0,111,0,0,0,0,0,0,0,216,0,0,0,112,0,0,0,113,0,0,0,0,0,0,0,232,0,0,0,114,0,0,0,115,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,8,1,0,0,116,0,0,0,117,0,0,0,0,0,0,0,16,1,0,0,118,0,0,0,119,0,0,0,120,0,0,0,0,0,0,0,32,1,0,0,121,0,0,0,122,0,0,0,123,0,0,0,0,0,0,0,48,1,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,248,255,255,255,48,1,0,0,128,0,0,0,129,0,0,0,0,0,0,0,88,1,0,0,130,0,0,0,131,0,0,0,0,0,0,0,104,1,0,0,132,0,0,0,133,0,0,0,134,0,0,0,135,0,0,0,248,255,255,255,104,1,0,0,136,0,0,0,137,0,0,0,0,0,0,0,136,1,0,0,138,0,0,0,139,0,0,0,140,0,0,0,141,0,0,0,142,0,0,0,143,0,0,0,144,0,0,0,145,0,0,0,146,0,0,0,0,0,0,0,152,1,0,0,147,0,0,0,148,0,0,0,140,0,0,0,141,0,0,0,149,0,0,0,143,0,0,0,144,0,0,0,145,0,0,0,150,0,0,0,0,0,0,0,168,1,0,0,151,0,0,0,152,0,0,0,140,0,0,0,141,0,0,0,142,0,0,0,143,0,0,0,144,0,0,0,145,0,0,0,153,0,0,0,0,0,0,0,184,1,0,0,154,0,0,0,155,0,0,0,146,0,0,0,146,0,0,0,156,0,0,0,157,0,0,0,158,0,0,0,248,255,255,255,184,1,0,0,159,0,0,0,160,0,0,0,0,0,0,0,224,1,0,0,161,0,0,0,162,0,0,0,146,0,0,0,0,0,0,0,240,1,0,0,116,0,0,0,163,0,0,0,123,48,0,0,58,49,0,0,0,0,0,0,16,2,0,0,164,0,0,0,165,0,0,0,166,0,0,0,0,0,0,0,32,2,0,0,164,0,0,0,167,0,0,0,168,0,0,0,0,0,0,0,48,2,0,0,169,0,0,0,170,0,0,0,0,0,0,0,64,2,0,0,171,0,0,0,172,0,0,0,173,0,0,0,174,0,0,0,175,0,0,0,176,0,0,0,177,0,0,0,178,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,0,0,0,0,80,2,0,0,182,0,0,0,183,0,0,0,184,0,0,0,174,0,0,0,175,0,0,0,176,0,0,0,177,0,0,0,185,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,0,0,0,0,96,2,0,0,186,0,0,0,187,0,0,0,173,0,0,0,174,0,0,0,188,0,0,0,189,0,0,0,177,0,0,0,190,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,0,0,0,0,112,2,0,0,116,0,0,0,191,0,0,0,192,0,0,0,193,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,198,0,0,0,199,0,0,0,0,0,0,0,128,2,0,0,116,0,0,0,200,0,0,0,201,0,0,0,193,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,198,0,0,0,0,0,0,0,184,2,0,0,202,0,0,0,203,0,0,0,204,0,0,0,0,0,0,0,144,2,0,0,205,0,0,0,206,0,0,0,207,0,0,0,0,0,0,0,216,2,0,0,116,0,0,0,208,0,0,0,209,0,0,0,193,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,198,0,0,0,0,0,0,0,232,2,0,0,171,0,0,0,210,0,0,0,173,0,0,0,174,0,0,0,175,0,0,0,176,0,0,0,177,0,0,0,178,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,0,0,0,0,248,2,0,0,171,0,0,0,211,0,0,0,173,0,0,0,212,0,0,0,213,0,0,0,214,0,0,0,177,0,0,0,215,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,216,0,0,0,0,0,0,0,24,3,0,0,116,0,0,0,217,0,0,0,218,0,0,0,219,0,0,0,194,0,0,0,195,0,0,0,220,0,0,0,197,0,0,0,198,0,0,0,221,0,0,0,0,0,0,0,40,3,0,0,116,0,0,0,222,0,0,0,223,0,0,0,224,0,0,0,194,0,0,0,195,0,0,0,220,0,0,0,197,0,0,0,198,0,0,0,225,0,0,0,0,0,0,0,88,3,0,0,205,0,0,0,206,0,0,0,226,0,0,0,0,0,0,0,56,3,0,0,227,0,0,0,228,0,0,0,229,0,0,0,0,0,0,0,104,3,0,0,230,0,0,0,231,0,0,0,184,0,0,0,232,0,0,0,175,0,0,0,233,0,0,0,177,0,0,0,234,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,0,0,0,0,120,3,0,0,116,0,0,0,235,0,0,0,236,0,0,0,193,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,198,0,0,0,0,0,0,0,136,3,0,0,237,0,0,0,238,0,0,0,239,0,0,0,240,0,0,0,241,0,0,0,0,0,0,0,168,3,0,0,242,0,0,0,243,0,0,0,244,0,0,0,245,0,0,0,246,0,0,0,0,0,0,0,184,3,0,0,247,0,0,0,248,0,0,0,173,0,0,0,249,0,0,0,175,0,0,0,250,0,0,0,177,0,0,0,251,0,0,0,179,0,0,0,252,0,0,0,253,0,0,0,254,0,0,0,255,0,0,0,0,1,0,0,1,1,0,0,184,255,255,255,184,3,0,0,2,1,0,0,0,0,0,0,224,3,0,0,116,0,0,0,3,1,0,0,4,1,0,0,193,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,198,0,0,0,0,0,0,0,16,4,0,0,116,0,0,0,5,1,0,0,6,1,0,0,193,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,198,0,0,0,0,0,0,0,0,4,0,0,116,0,0,0,7,1,0,0,8,1,0,0,193,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,198,0,0,0,0,0,0,0,240,3,0,0,116,0,0,0,9,1,0,0,10,1,0,0,193,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,198,0,0,0,0,0,0,0,32,4,0,0,11,1,0,0,12,1,0,0,13,1,0,0,14,1,0,0,15,1,0,0,16,1,0,0,17,1,0,0,18,1,0,0,19,1,0,0,0,0,0,0,56,4,0,0,11,1,0,0,20,1,0,0,21,1,0,0,22,1,0,0,23,1,0,0,24,1,0,0,25,1,0,0,26,1,0,0,27,1,0,0,0,0,0,0,80,4,0,0,28,1,0,0,29,1,0,0,0,0,0,0,96,4,0,0,30,1,0,0,31,1,0,0,173,0,0,0,249,0,0,0,175,0,0,0,32,1,0,0,177,0,0,0,251,0,0,0,33,1,0,0,252,0,0,0,253,0,0,0,254,0,0,0,255,0,0,0,0,1,0,0,1,1,0,0,184,255,255,255,96,4,0,0,2,1,0,0,0,0,0,0,112,4,0,0,34,1,0,0,35,1,0,0,0,0,0,0,128,4,0,0,116,0,0,0,36,1,0,0,0,0,0,0,144,4,0,0,37,1,0,0,38,1,0,0,0,0,0,0,160,4,0,0,39,1,0,0,40,1,0,0,0,0,0,0,176,4,0,0,41,1,0,0,42,1,0,0,43,1,0,0,44,1,0,0,45,1,0,0,46,1,0,0,47,1,0,0,48,1,0,0,49,1,0,0,50,1,0,0,0,0,0,0,192,4,0,0,93,0,0,0,51,1,0,0,52,1,0,0,53,1,0,0,54,1,0,0,55,1,0,0,56,1,0,0,57,1,0,0,58,1,0,0,0,0,0,0,216,4,0,0,59,1,0,0,60,1,0,0,61,1,0,0,62,1,0,0,63,1,0,0,157,0,0,0,158,0,0,0,248,255,255,255,216,4,0,0,159,0,0,0,160,0,0,0,40,8,0,0,96,8,0,0,96,8,0,0,96,8,0,0,96,8,0,0,96,8,0,0,96,8,0,0,96,8,0,0,96,8,0,0,232,4,0,0,40,8,0,0,96,8,0,0,96,8,0,0,96,8,0,0,96,8,0,0,96,8,0,0,232,4,0,0,40,8,0,0,232,4,0,0,232,4,0,0,232,4,0,0,232,4,0,0,232,4,0,0,232,4,0,0,40,8,0,0,232,4,0,0,232,4,0,0,232,4,0,0,232,4,0,0,232,4,0,0,232,4,0,0,232,4,0,0,0,0,0,0,24,5,0,0,64,1,0,0,65,1,0,0,66,1,0,0,40,8,0,0,0,0,0,0,40,5,0,0,67,1,0,0,68,1,0,0,40,8,0,0,96,8,0,0,96,8,0,0,96,8,0,0,40,8,0,0,96,8,0,0,96,8,0,0,96,8,0,0,96,8,0,0,0,0,0,0,56,5,0,0,121,0,0,0,69,1,0,0,70,1,0,0,0,0,0,0,72,5,0,0,71,1,0,0,72,1,0,0,31,0,0,0,32,0,0,0,73,1,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,74,1,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,75,1,0,0,49,0,0,0,76,1,0,0,77,1,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,78,1,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,79,1,0,0,80,1,0,0,92,0,0,0,81,1,0,0,82,1,0,0,83,1,0,0,84,1,0,0,85,1,0,0,86,1,0,0,87,1,0,0,0,0,0,0,88,5,0,0,88,1,0,0,89,1,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,90,1,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,91,1,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,0,0,0,0,104,5,0,0,92,1,0,0,93,1,0,0,31,0,0,0,32,0,0,0,94,1,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,74,1,0,0,41,0,0,0,42,0,0,0,95,1,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,96,1,0,0,49,0,0,0,76,1,0,0,77,1,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,97,1,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,98,1,0,0,99,1,0,0,100,1,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,101,1,0,0,92,0,0,0,81,1,0,0,82,1,0,0,83,1,0,0,84,1,0,0,85,1,0,0,86,1,0,0,87,1,0,0,102,1,0,0,103,1,0,0,104,1,0,0,105,1,0,0,106,1,0,0,107,1,0,0,108,1,0,0,109,1,0,0,68,254,255,255,104,5,0,0,110,1,0,0,111,1,0,0,112,1,0,0,113,1,0,0,114,1,0,0,115,1,0,0,116,1,0,0,0,0,0,0,136,5,0,0,93,0,0,0,117,1,0,0,118,1,0,0,119,1,0,0,120,1,0,0,121,1,0,0,122,1,0,0,123,1,0,0,124,1,0,0,0,0,0,0,200,5,0,0,125,1,0,0,126,1,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,127,1,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,128,1,0,0,49,0,0,0,90,1,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,129,1,0,0,130,1,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,131,1,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,132,1,0,0,188,254,255,255,200,5,0,0,133,1,0,0,0,0,0,0,240,5,0,0,134,1,0,0,135,1,0,0,31,0,0,0,32,0,0,0,73,1,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,74,1,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,75,1,0,0,49,0,0,0,76,1,0,0,77,1,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,131,1,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,101,1,0,0,92,0,0,0,81,1,0,0,82,1,0,0,83,1,0,0,84,1,0,0,85,1,0,0,86,1,0,0,87,1,0,0,0,0,0,0,0,6,0,0,136,1,0,0,137,1,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,138,1,0,0,139,1,0,0,49,0,0,0,90,1,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,140,1,0,0,63,0,0,0,141,1,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,131,1,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,142,1,0,0,143,1,0,0,144,1,0,0,0,0,0,0,16,6,0,0,145,1,0,0,146,1,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,147,1,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,148,1,0,0,48,0,0,0,49,0,0,0,149,1,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,150,1,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,151,1,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,152,1,0,0,153,1,0,0,154,1,0,0,155,1,0,0,156,1,0,0,157,1,0,0,158,1,0,0,159,1,0,0,0,0,0,0,32,6,0,0,160,1,0,0,161,1,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,90,1,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,162,1,0,0,59,0,0,0,163,1,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,131,1,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,164,1,0,0,165,1,0,0,166,1,0,0,0,0,0,0,48,6,0,0,116,0,0,0,167,1,0,0,168,1,0,0,169,1,0,0,170,1,0,0,171,1,0,0,0,0,0,0,64,6,0,0,172,1,0,0,173,1,0,0,31,0,0,0,32,0,0,0,94,1,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,74,1,0,0,41,0,0,0,42,0,0,0,174,1,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,175,1,0,0,49,0,0,0,76,1,0,0,77,1,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,97,1,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,98,1,0,0,99,1,0,0,176,1,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,101,1,0,0,92,0,0,0,81,1,0,0,82,1,0,0,83,1,0,0,84,1,0,0,85,1,0,0,86,1,0,0,87,1,0,0,177,1,0,0,103,1,0,0,104,1,0,0,105,1,0,0,106,1,0,0,107,1,0,0,108,1,0,0,109,1,0,0,178,1,0,0,68,254,255,255,64,6,0,0,110,1,0,0,111,1,0,0,112,1,0,0,113,1,0,0,114,1,0,0,115,1,0,0,116,1,0,0,0,0,0,0,80,6,0,0,179,1,0,0,180,1,0,0,181,1,0,0,182,1,0,0,183,1,0,0,184,1,0,0,185,1,0,0,186,1,0,0,187,1,0,0,0,0,0,0,104,6,0,0,188,1,0,0,189,1,0,0,31,0,0,0,32,0,0,0,190,1,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,191,1,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,192,1,0,0,193,1,0,0,49,0,0,0,194,1,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,195,1,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,196,1,0,0,197,1,0,0,198,1,0,0,199,1,0,0,200,1,0,0,201,1,0,0,202,1,0,0,0,0,0,0,120,6,0,0,160,1,0,0,203,1,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,90,1,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,131,1,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,0,0,0,0,136,6,0,0,204,1,0,0,205,1,0,0,206,1,0,0,207,1,0,0,208,1,0,0,209,1,0,0,210,1,0,0,211,1,0,0,212,1,0,0,0,0,0,0,160,6,0,0,93,0,0,0,213,1,0,0,214,1,0,0,215,1,0,0,216,1,0,0,217,1,0,0,218,1,0,0,219,1,0,0,220,1,0,0,0,0,0,0,184,6,0,0,179,1,0,0,221,1,0,0,222,1,0,0,223,1,0,0,224,1,0,0,225,1,0,0,226,1,0,0,227,1,0,0,228,1,0,0,148,32,0,0,5,0,0,0,0,0,0,0,0,0,0,0,229,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,1,0,0,231,1,0,0,237,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,34,0,0,5,0,0,0,0,0,0,0,0,0,0,0,229,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,1,0,0,231,1,0,0,245,123,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,95,112,137,0,255,9,47,15,0,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,7,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,211,0,0,0,1,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,121,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,143,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,169,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,187,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,209,0,0,0,234,1,0,0,30,110,0,0,0,0,0,0,96,7,0,0,235,1,0,0,236,1,0,0,237,1,0,0,238,1,0,0,239,1,0,0,240,1,0,0,241,1,0,0,242,1,0,0,0,0,0,0,136,7,0,0,235,1,0,0,243,1,0,0,237,1,0,0,238,1,0,0,239,1,0,0,244,1,0,0,245,1,0,0,246,1,0,0,0,0,0,0,152,7,0,0,247,1,0,0,248,1,0,0,249,1,0,0,0,0,0,0,168,7,0,0,250,1,0,0,251,1,0,0,252,1,0,0,0,0,0,0,184,7,0,0,253,1,0,0,254,1,0,0,255,1,0,0,0,0,0,0,200,7,0,0,250,1,0,0,0,2,0,0,252,1,0,0,0,0,0,0,216,7,0,0,250,1,0,0,1,2,0,0,252,1,0,0,0,0,0,0,232,7,0,0,253,1,0,0,2,2,0,0,255,1,0,0,0,0,0,0,24,8,0,0,235,1,0,0,3,2,0,0,237,1,0,0,238,1,0,0,4,2,0,0,0,0,0,0,144,8,0,0,235,1,0,0,5,2,0,0,237,1,0,0,238,1,0,0,239,1,0,0,6,2,0,0,7,2,0,0,8,2,0,0,115,116,121,108,101,115,46,114,101,115,0,105,109,97,103,101,115,47,102,97,99,101,95,110,111,114,109,97,108,46,112,110,103,0,105,109,97,103,101,115,47,102,97,99,101,95,119,111,110,46,112,110,103,0,105,109,97,103,101,115,47,102,97,99,101,95,108,111,115,116,46,112,110,103,0,108,97,121,111,117,116,47,109,97,105,110,46,114,101,115,0,102,108,97,103,115,0,114,101,109,97,105,110,105,110,103,0,49,56,77,97,105,110,86,105,101,119,67,111,110,116,114,111,108,108,101,114,0,78,52,71,97,109,101,56,67,97,108,108,98,97,99,107,69,0,78,83,116,51,95,95,50,49,48,95,95,102,117,110,99,116,105,111,110,54,95,95,102,117,110,99,73,90,78,49,56,77,97,105,110,86,105,101,119,67,111,110,116,114,111,108,108,101,114,67,49,69,118,69,85,108,80,52,86,105,101,119,105,105,54,95,80,79,73,78,84,69,95,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,54,95,69,69,70,98,83,52,95,105,105,83,53,95,69,69,69,0,78,83,116,51,95,95,50,49,48,95,95,102,117,110,99,116,105,111,110,54,95,95,98,97,115,101,73,70,98,80,52,86,105,101,119,105,105,54,95,80,79,73,78,84,69,69,69,0,90,78,49,56,77,97,105,110,86,105,101,119,67,111,110,116,114,111,108,108,101,114,67,49,69,118,69,85,108,80,52,86,105,101,119,105,105,54,95,80,79,73,78,84,69,95,0,77,105,110,101,115,58,32,37,100,0,67,108,111,115,101,100,58,32,37,100,0,90,78,56,71,97,109,101,86,105,101,119,49,50,111,110,84,111,117,99,104,69,118,101,110,116,69,105,105,54,95,80,79,73,78,84,69,51,36,95,48,0,78,83,116,51,95,95,50,49,48,95,95,102,117,110,99,116,105,111,110,54,95,95,102,117,110,99,73,90,78,56,71,97,109,101,86,105,101,119,49,50,111,110,84,111,117,99,104,69,118,101,110,116,69,105,105,54,95,80,79,73,78,84,69,51,36,95,48,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,52,95,69,69,70,118,118,69,69,69,0,78,83,116,51,95,95,50,49,48,95,95,102,117,110,99,116,105,111,110,54,95,95,98,97,115,101,73,70,118,118,69,69,69,0,56,71,97,109,101,86,105,101,119,0,105,109,97,103,101,115,47,117,110,107,110,111,119,110,46,112,110,103,0,105,109,97,103,101,115,47,109,105,110,101,46,112,110,103,0,105,109,97,103], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([101,115,47,98,111,111,109,46,112,110,103,0,105,109,97,103,101,115,47,102,108,97,103,46,112,110,103,0,105,109,97,103,101,115,47,48,46,112,110,103,0,105,109,97,103,101,115,47,49,46,112,110,103,0,105,109,97,103,101,115,47,50,46,112,110,103,0,105,109,97,103,101,115,47,51,46,112,110,103,0,105,109,97,103,101,115,47,52,46,112,110,103,0,105,109,97,103,101,115,47,53,46,112,110,103,0,105,109,97,103,101,115,47,54,46,112,110,103,0,105,109,97,103,101,115,47,55,46,112,110,103,0,105,109,97,103,101,115,47,56,46,112,110,103,0,51,65,112,112,0,49,52,78,97,118,105,103,97,116,105,111,110,73,116,101,109,0,78,83,116,51,95,95,50,49,48,95,95,102,117,110,99,116,105,111,110,54,95,95,98,97,115,101,73,70,118,80,54,66,105,116,109,97,112,69,69,69,0,123,10,102,111,110,116,45,115,105,122,101,58,32,49,55,100,112,10,10,99,111,108,111,117,114,115,58,32,123,10,32,32,32,32,116,97,98,108,101,95,98,107,103,110,100,58,32,48,120,102,102,101,102,101,102,102,52,10,32,32,32,32,116,97,98,108,101,95,98,111,114,100,101,114,58,32,48,120,102,102,99,56,99,55,99,99,10,32,32,32,32,116,97,98,108,101,95,99,104,101,118,114,111,110,58,32,32,48,120,102,102,99,55,99,55,99,99,10,32,32,32,32,116,97,98,108,101,95,115,101,108,101,99,116,105,111,110,95,98,107,103,110,100,58,32,48,120,102,102,100,57,100,57,100,57,10,32,32,32,32,116,101,120,116,95,108,105,110,107,95,100,101,102,97,117,108,116,58,32,48,120,102,102,48,48,55,65,70,70,10,125,10,10,108,105,115,116,118,105,101,119,58,32,123,10,32,32,32,32,115,101,108,101,99,116,101,100,45,98,107,103,110,100,45,99,111,108,111,117,114,58,32,48,120,102,102,100,57,100,57,100,57,10,32,32,32,32,100,105,118,105,100,101,114,45,99,111,108,111,117,114,58,32,48,120,102,102,99,99,99,99,99,99,10,32,32,32,32,105,116,101,109,45,116,105,116,108,101,58,32,123,10,32,32,32,32,32,32,32,32,102,111,114,101,99,111,108,111,117,114,58,32,48,120,102,102,51,51,51,51,51,51,10,32,32,32,32,125,10,32,32,32,32,105,116,101,109,45,115,117,98,116,105,116,108,101,58,32,123,10,32,32,32,32,32,32,32,32,102,111,114,101,99,111,108,111,117,114,58,32,48,120,102,102,55,55,55,55,55,55,10,32,32,32,32,125,10,125,10,10,115,116,97,116,117,115,98,97,114,58,32,123,10,32,32,32,32,104,101,105,103,104,116,58,32,48,100,112,10,32,32,32,32,104,101,105,103,104,116,64,97,110,100,114,111,105,100,58,32,50,48,100,112,10,32,32,32,32,104,101,105,103,104,116,64,105,79,83,58,32,50,48,100,112,10,125,10,10,110,97,118,98,97,114,58,32,123,10,32,32,32,32,104,101,105,103,104,116,58,32,52,52,100,112,10,32,32,32,32,98,97,99,107,103,114,111,117,110,100,58,32,48,120,102,102,102,54,102,54,102,57,10,32,32,32,32,116,105,116,108,101,58,32,123,10,32,32,32,32,32,32,32,32,102,111,110,116,45,115,105,122,101,58,32,49,55,100,112,10,32,32,32,32,32,32,32,32,102,111,114,101,99,111,108,111,117,114,58,32,48,120,102,102,48,48,48,48,48,48,10,32,32,32,32,125,10,32,32,32,32,98,111,116,116,111,109,45,100,105,118,105,100,101,114,45,99,111,108,111,117,114,58,32,48,120,102,102,97,55,97,55,97,97,10,125,10,10,115,101,103,109,101,110,116,101,100,99,111,110,116,114,111,108,58,32,123,10,32,32,32,32,115,116,114,111,107,101,45,119,105,100,116,104,58,32,49,100,112,10,125,10,10,125,10,0,69,114,114,111,114,58,32,101,120,112,101,99,116,101,100,32,39,123,39,0,69,114,114,111,114,58,32,101,120,112,101,99,116,101,100,32,97,32,102,105,101,108,100,32,110,97,109,101,0,35,0,69,114,114,111,114,58,32,101,120,112,101,99,116,101,100,32,39,58,39,32,97,102,116,101,114,32,105,100,101,110,116,105,102,105,101,114,32,39,37,115,39,0,69,114,114,111,114,58,32,101,120,112,101,99,116,101,100,32,97,32,118,97,108,117,101,0,47,85,115,101,114,115,47,114,101,117,98,101,110,47,111,97,107,110,117,116,47,115,114,99,47,97,112,112,47,115,116,121,108,101,115,46,99,112,112,0,112,97,114,115,101,0,49,52,83,116,121,108,101,86,97,108,117,101,85,98,101,114,0,56,83,116,121,108,101,77,97,112,0,87,97,114,110,105,110,103,58,32,109,105,115,115,105,110,103,32,115,116,114,105,110,103,32,115,116,121,108,101,32,105,110,102,111,32,39,37,115,39,0,69,114,114,111,114,58,32,109,97,112,32,119,97,115,32,101,120,112,101,99,116,101,100,32,102,111,114,32,39,37,115,39,0,105,79,83,0,79,83,88,0,97,110,100,114,111,105,100,0,87,97,114,110,105,110,103,58,32,117,110,115,117,112,112,111,114,116,101,100,32,113,117,97,108,105,102,105,101,114,32,39,37,115,39,0,87,97,114,110,105,110,103,58,32,109,105,115,115,105,110,103,32,102,108,111,97,116,32,115,116,121,108,101,32,105,110,102,111,32,39,37,115,39,0,103,101,116,65,115,70,108,111,97,116,0,37,102,45,37,115,0,87,97,114,110,105,110,103,58,32,109,105,115,115,105,110,103,32,99,111,108,111,117,114,32,115,116,121,108,101,32,105,110,102,111,32,39,37,115,39,0,112,97,114,115,101,100,0,108,97,121,111,117,116,73,110,102,108,97,116,101,0,108,97,121,111,117,116,82,111,111,116,46,95,118,97,108,117,101,115,46,115,105,122,101,40,41,61,61,49,0,112,114,111,112,115,45,62,116,121,112,101,32,61,61,32,83,116,121,108,101,86,97,108,117,101,58,58,84,121,112,101,58,58,83,116,121,108,101,77,97,112,0,105,110,102,108,97,116,101,70,114,111,109,82,101,115,111,117,114,99,101,0,55,85,82,76,68,97,116,97,0,95,100,101,108,101,103,97,116,101,115,46,115,105,122,101,40,41,61,61,48,0,47,85,115,101,114,115,47,114,101,117,98,101,110,47,111,97,107,110,117,116,47,115,114,99,47,97,112,112,47,117,114,108,114,101,113,117,101,115,116,46,99,112,112,0,126,85,82,76,82,101,113,117,101,115,116,0,49,48,85,82,76,82,101,113,117,101,115,116,0,33,95,111,115,111,98,106,0,115,116,97,114,116,0,95,111,115,111,98,106,0,71,69,84,0,49,52,86,105,101,119,67,111,110,116,114,111,108,108,101,114,0,78,83,116,51,95,95,50,49,48,95,95,102,117,110,99,116,105,111,110,54,95,95,98,97,115,101,73,70,118,80,57,65,110,105,109,97,116,105,111,110,69,69,69,0,78,83,116,51,95,95,50,49,48,95,95,102,117,110,99,116,105,111,110,54,95,95,98,97,115,101,73,70,118,102,69,69,69,0,54,79,98,106,101,99,116,0,95,114,101,102,115,32,62,61,32,48,0,47,85,115,101,114,115,47,114,101,117,98,101,110,47,111,97,107,110,117,116,47,115,114,99,47,98,97,115,101,47,111,98,106,101,99,116,46,99,112,112,0,114,101,108,101,97,115,101,0,78,83,116,51,95,95,50,49,55,98,97,100,95,102,117,110,99,116,105,111,110,95,99,97,108,108,69,0,33,95,97,99,116,105,118,101,0,47,85,115,101,114,115,47,114,101,117,98,101,110,47,111,97,107,110,117,116,47,115,114,99,47,98,97,115,101,47,116,105,109,101,114,46,99,112,112,0,126,84,105,109,101,114,0,53,84,105,109,101,114,0,52,68,97,116,97,0,49,51,73,83,101,114,105,97,108,105,122,97,98,108,101,0,49,49,75,101,121,86,97,108,117,101,77,97,112,0,78,49,49,75,101,121,86,97,108,117,101,77,97,112,55,86,97,114,105,97,110,116,69,0,87,97,114,110,105,110,103,58,32,112,111,115,115,105,98,108,101,32,100,97,116,97,32,108,111,115,115,32,116,114,117,110,99,97,116,105,110,103,32,105,110,116,54,52,32,116,111,32,105,110,116,0,87,97,114,110,105,110,103,58,32,112,111,115,115,105,98,108,101,32,100,97,116,97,32,108,111,115,115,32,116,114,117,110,99,97,116,105,110,103,32,117,105,110,116,54,52,32,116,111,32,105,110,116,0,57,65,110,105,109,97,116,105,111,110,0,49,52,65,108,112,104,97,65,110,105,109,97,116,105,111,110,0,49,55,68,101,108,101,103,97,116,101,65,110,105,109,97,116,105,111,110,0,54,66,105,116,109,97,112,0,49,56,73,83,101,114,105,97,108,105,122,97,98,108,101,75,101,121,101,100,0,47,85,115,101,114,115,47,114,101,117,98,101,110,47,111,97,107,110,117,116,47,115,114,99,47,103,114,97,112,104,105,99,115,47,98,105,116,109,97,112,46,99,112,112,0,103,101,116,66,121,116,101,115,80,101,114,80,105,120,101,108,0,52,70,111,110,116,0,47,85,115,101,114,115,47,114,101,117,98,101,110,47,111,97,107,110,117,116,47,115,114,99,47,103,114,97,112,104,105,99,115,47,102,111,110,116,46,99,112,112,0,103,101,116,71,108,121,112,104,0,53,71,108,121,112,104,0,97,116,116,114,105,98,117,116,101,32,104,105,103,104,112,32,118,101,99,50,32,118,80,111,115,105,116,105,111,110,59,10,117,110,105,102,111,114,109,32,104,105,103,104,112,32,109,97,116,52,32,109,118,112,59,10,97,116,116,114,105,98,117,116,101,32,108,111,119,112,32,118,101,99,52,32,99,111,108,111,117,114,59,10,118,97,114,121,105,110,103,32,108,111,119,112,32,118,101,99,52,32,118,95,99,111,108,111,117,114,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,103,108,95,80,111,115,105,116,105,111,110,32,61,32,109,118,112,32,42,32,118,101,99,52,40,118,80,111,115,105,116,105,111,110,44,48,44,49,41,59,10,32,32,118,95,99,111,108,111,117,114,61,99,111,108,111,117,114,59,10,125,10,0,97,116,116,114,105,98,117,116,101,32,104,105,103,104,112,32,118,101,99,50,32,118,80,111,115,105,116,105,111,110,59,10,117,110,105,102,111,114,109,32,104,105,103,104,112,32,109,97,116,52,32,109,118,112,59,10,97,116,116,114,105,98,117,116,101,32,108,111,119,112,32,118,101,99,52,32,99,111,108,111,117,114,59,10,118,97,114,121,105,110,103,32,108,111,119,112,32,118,101,99,52,32,118,95,99,111,108,111,117,114,59,10,97,116,116,114,105,98,117,116,101,32,118,101,99,50,32,116,101,120,99,111,111,114,100,59,10,118,97,114,121,105,110,103,32,118,101,99,50,32,118,95,116,101,120,99,111,111,114,100,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,103,108,95,80,111,115,105,116,105,111,110,32,61,32,109,118,112,32,42,32,118,101,99,52,40,118,80,111,115,105,116,105,111,110,44,48,44,49,41,59,10,32,32,118,95,116,101,120,99,111,111,114,100,32,61,32,116,101,120,99,111,111,114,100,59,10,32,32,118,95,99,111,108,111,117,114,61,99,111,108,111,117,114,59,10,125,10,0,118,80,111,115,105,116,105,111,110,0,116,101,120,99,111,111,114,100,0,99,111,108,111,117,114,0,67,111,117,108,100,32,110,111,116,32,108,105,110,107,32,112,114,111,103,114,97,109,58,10,37,115,10,0,67,111,117,108,100,32,110,111,116,32,99,114,101,97,116,101,32,112,114,111,103,114,97,109,46,0,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,102,108,111,97,116,59,10,0,67,111,117,108,100,32,110,111,116,32,99,111,109,112,105,108,101,32,115,104,97,100,101,114,32,37,100,58,10,37,115,10,0,109,118,112,0,116,101,120,116,117,114,101,0,97,108,112,104,97,0,57,71,76,80,114,111,103,114,97,109,0,56,73,116,101,109,80,111,111,108,0,49,48,81,117,97,100,66,117,102,102,101,114,0,97,45,62,111,102,102,115,101,116,43,97,45,62,99,111,117,110,116,32,60,61,32,95,105,116,101,109,67,111,117,110,116,0,47,85,115,101,114,115,47,114,101,117,98,101,110,47,111,97,107,110,117,116,47,115,114,99,47,103,114,97,112,104,105,99,115,47,113,117,97,100,98,117,102,102,101,114,46,99,112,112,0,97,108,108,111,99,0,49,49,82,101,110,100,101,114,66,97,116,99,104,0,99,117,114,114,101,110,116,79,112,45,62,95,114,101,110,100,101,114,67,111,117,110,116,101,114,32,33,61,32,119,105,110,100,111,119,45,62,95,114,101,110,100,101,114,67,111,117,110,116,101,114,0,47,85,115,101,114,115,47,114,101,117,98,101,110,47,111,97,107,110,117,116,47,115,114,99,47,103,114,97,112,104,105,99,115,47,114,101,110,100,101,114,98,97,116,99,104,46,99,112,112,0,114,101,110,100,101,114,0,56,82,101,110,100,101,114,79,112,0,49,55,82,101,110,100,101,114,79,112,77,117,108,116,105,82,101,99,116,0,49,50,66,108,117,114,82,101,110,100,101,114,79,112,0,97,116,116,114,105,98,117,116,101,32,104,105,103,104,112,32,118,101,99,50,32,118,80,111,115,105,116,105,111,110,59,10,117,110,105,102,111,114,109,32,104,105,103,104,112,32,109,97,116,52,32,109,118,112,59,10,97,116,116,114,105,98,117,116,101,32,118,101,99,50,32,116,101,120,99,111,111,114,100,59,10,117,110,105,102,111,114,109,32,118,101,99,50,32,116,101,120,79,102,102,115,101,116,59,10,0,118,97,114,121,105,110,103,32,118,101,99,50,32,98,108,117,114,67,111,111,114,100,105,110,97,116,101,115,91,37,100,93,59,10,0,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,103,108,95,80,111,115,105,116,105,111,110,32,61,32,109,118,112,32,42,32,118,101,99,52,40,118,80,111,115,105,116,105,111,110,44,48,44,49,41,59,10,0,32,32,32,98,108,117,114,67,111,111,114,100,105,110,97,116,101,115,91,48,93,32,61,32,116,101,120,99,111,111,114,100,46,120,121,59,10,0,32,32,32,98,108,117,114,67,111,111,114,100,105,110,97,116,101,115,91,37,108,117,93,32,61,32,116,101,120,99,111,111,114,100,46,120,121,32,43,32,116,101,120,79,102,102,115,101,116,32,42,32,37,102,59,10,32,32,32,98,108,117,114,67,111,111,114,100,105,110,97,116,101,115,91,37,108,117,93,32,61,32,116,101,120,99,111,111,114,100,46,120,121,32,45,32,116,101,120,79,102,102,115,101,116,32,42,32,37,102,59,10,0,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,116,101,120,116,117,114,101,59,10,117,110,105,102,111,114,109,32,118,101,99,50,32,116,101,120,79,102,102,115,101,116,59,10,0,118,97,114,121,105,110,103,32,104,105,103,104,112,32,118,101,99,50,32,98,108,117,114,67,111,111,114,100,105,110,97,116,101,115,91,37,100,93,59,10,0,118,111,105,100,32,109,97,105,110,40,41,32,123,10,0,108,111,119,112,32,118,101,99,52,32,99,32,61,32,116,101,120,116,117,114,101,50,68,40,116,101,120,116,117,114,101,44,32,98,108,117,114,67,111,111,114,100,105,110,97,116,101,115,91,48,93,41,32,42,32,37,102,59,10,0,99,32,43,61,32,116,101,120,116,117,114,101,50,68,40,116,101,120,116,117,114,101,44,32,98,108,117,114,67,111,111,114,100,105,110,97,116,101,115,91,37,108,117,93,41,32,42,32,37,102,59,10,0,99,32,43,61,32,116,101,120,116,117,114,101,50,68,40,116,101,120,116,117,114,101,44,32,98,108,117,114,67,111,111,114,100,105,110,97,116,101,115,91,48,93,32,45,32,116,101,120,79,102,102,115,101,116,32,42,32,37,102,41,32,42,32,37,102,59,10,0,99,32,43,61,32,116,101,120,116,117,114,101,50,68,40,116,101,120,116,117,114,101,44,32,98,108,117,114,67,111,111,114,100,105,110,97,116,101,115,91,48,93,32,43,32,116,101,120,79,102,102,115,101,116,32,42,32,37,102,41,32,42,32,37,102,59,10,0,116,101,120,79,102,102,115,101,116,0,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,99,59,10,125,10,0,125,10,0,49,51,71,76,80,114,111,103,114,97,109,66,108,117,114,0,118,97,114,121,105,110,103,32,118,101,99,50,32,118,95,116,101,120,99,111,111,114,100,59,10,118,97,114,121,105,110,103,32,108,111,119,112,32,118,101,99,52,32,118,95,99,111,108,111,117,114,59,10,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,116,101,120,116,117,114,101,59,10,99,111,110,115,116,32,108,111,119,112,32,118,101,99,51,32,108,117,109,105,110,97,110,99,101,87,101,105,103,104,116,105,110,103,32,61,32,118,101,99,51,40,48,46,50,49,50,53,44,32,48,46,55,49,53,52,44,32,48,46,48,55,50,49,41,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,108,111,119,112,32,118,101,99,52,32,99,32,61,32,109,105,120,40,116,101,120,116,117,114,101,50,68,40,116,101,120,116,117,114,101,44,32,118,95,116,101,120,99,111,111,114,100,41,44,32,118,95,99,111,108,111,117,114,44,32,48,46,57,41,59,10,32,32,32,108,111,119,112,32,102,108,111,97,116,32,108,117,109,32,61,32,100,111,116,40,99,46,114,103,98,44,32,108,117,109,105,110,97,110,99,101,87,101,105,103,104,116,105,110,103,41,59,10,32,32,32,108,111,119,112,32,102,108,111,97,116,32,108,117,109,82,97,116,105,111,32,61,32,40,40,48,46,53,32,45,32,108,117,109,41,32,42,32,48,46,49,41,59,10,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,118,101,99,52,40,109,105,120,40,118,101,99,51,40,108,117,109,41,44,32,99,46,114,103,98,44,32,48,46,56,41,32,43,32,108,117,109,82,97,116,105,111,44,32,49,46,48,41,59,10,125,10,0,49,55,71,76,80,114,111,103,114,97,109,80,111,115,116,66,108,117,114,0,49,48,85,110,105,102,111,114,109,73,110,116,0,49,52,67,97,99,104,101,100,85,110,105,102,111,114,109,50,73,105,69,0,55,85,110,105,102,111,114,109,0,49,50,85,110,105,102,111,114,109,70,108,111,97,116,0,49,52,67,97,99,104,101,100,85,110,105,102,111,114,109,50,73,102,69,0,118,97,114,121,105,110,103,32,108,111,119,112,32,118,101,99,52,32,118,95,99,111,108,111,117,114,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,118,95,99,111,108,111,117,114,59,10,125,10,0,49,56,71,76,80,114,111,103,114,97,109,83,111,108,105,100,70,105,108,108,0,50,49,67,111,108,111,114,82,101,99,116,70,105,108,108,82,101,110,100,101,114,79,112,0,49,55,82,111,117,110,100,82,101,99,116,82,101,110,100,101,114,79,112,0,115,116,114,111,107,101,67,111,108,111,117,114,0,117,0,49,56,71,76,80,114,111,103,114,97,109,82,111,117,110,100,82,101,99,116,0,114,97,100,105,117,115,0,118,97,114,121,105,110,103,32,108,111,119,112,32,118,101,99,52,32,118,95,99,111,108,111,117,114,59,10,117,110,105,102,111,114,109,32,109,101,100,105,117,109,112,32,102,108,111,97,116,32,97,108,112,104,97,59,10,118,97,114,121,105,110,103,32,118,101,99,50,32,118,95,116,101,120,99,111,111,114,100,59,10,117,110,105,102,111,114,109,32,118,101,99,52,32,117,59,10,117,110,105,102,111,114,109,32,109,101,100,105,117,109,112,32,102,108,111,97,116,32,114,97,100,105,117,115,59,10,117,110,105,102,111,114,109,32,108,111,119,112,32,118,101,99,52,32,115,116,114,111,107,101,67,111,108,111,117,114,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,32,118,101,99,50,32,98,32,61,32,117,46,120,121,32,45,32,118,101,99,50,40,114,97,100,105,117,115,41,59,32,10,32,32,32,32,102,108,111,97,116,32,100,105,115,116,32,61,32,108,101,110,103,116,104,40,109,97,120,40,97,98,115,40,118,95,116,101,120,99,111,111,114,100,41,45,98,44,32,48,46,48,41,41,32,45,32,114,97,100,105,117,115,59,32,10,32,32,32,32,108,111,119,112,32,118,101,99,52,32,99,111,108,32,61,32,118,95,99,111,108,111,117,114,59,10,32,32,32,32,47,47,99,111,108,46,97,32,42,61,32,40,49,46,48,45,100,105,115,116,41,59,10,32,32,32,32,105,102,32,40,117,46,119,32,62,32,48,46,48,41,32,123,10,32,32,32,32,32,32,32,32,102,108,111,97,116,32,97,108,112,104,97,49,32,61,32,99,108,97,109,112,40,100,105,115,116,32,43,32,117,46,119,44,32,48,46,48,44,32,49,46,48,41,59,10,32,32,32,32,32,32,32,32,102,108,111,97,116,32,97,108,112,104,97,50,32,61,32,99,108,97,109,112,40,100,105,115,116,44,32,48,46,48,44,32,49,46,48,41,59,10,32,32,32,32,32,32,32,32,99,111,108,32,61,32,109,105,120,40,99,111,108,44,32,115,116,114,111,107,101,67,111,108,111,117,114,44,32,97,108,112,104,97,49,32,45,32,97,108,112,104,97,50,41,59,10,32,32,32,32,125,10,32,32,32,32,99,111,108,46,97,32,42,61,32,97,108,112,104,97,59,10,32,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,99,111,108,59,10,125,10,0,50,49,71,76,80,114,111,103,114,97,109,82,111,117,110,100,82,101,99,116,79,110,101,0,114,97,100,105,105,0,118,97,114,121,105,110,103,32,108,111,119,112,32,118,101,99,52,32,118,95,99,111,108,111,117,114,59,10,117,110,105,102,111,114,109,32,109,101,100,105,117,109,112,32,102,108,111,97,116,32,97,108,112,104,97,59,10,118,97,114,121,105,110,103,32,118,101,99,50,32,118,95,116,101,120,99,111,111,114,100,59,10,117,110,105,102,111,114,109,32,118,101,99,52,32,117,59,10,117,110,105,102,111,114,109,32,109,101,100,105,117,109,112,32,118,101,99,50,32,114,97,100,105,105,59,10,117,110,105,102,111,114,109,32,108,111,119,112,32,118,101,99,52,32,115,116,114,111,107,101,67,111,108,111,117,114,59,10,102,108,111,97,116,32,98,111,120,68,105,115,116,40,118,101,99,50,32,112,44,32,118,101,99,50,32,115,105,122,101,44,32,118,101,99,50,32,114,41,32,123,10,32,32,32,102,108,111,97,116,32,115,61,115,116,101,112,40,112,46,120,44,48,46,48,41,59,32,32,32,102,108,111,97,116,32,114,97,100,105,117,115,32,61,32,115,42,114,46,120,32,43,32,40,49,46,48,45,115,41,42,114,46,121,59,10,32,32,32,115,105,122,101,32,45,61,32,118,101,99,50,40,114,97,100,105,117,115,41,59,10,32,32,32,118,101,99,50,32,100,32,61,32,97,98,115,40,112,41,32,45,32,115,105,122,101,59,10,32,32,32,114,101,116,117,114,110,32,109,105,110,40,109,97,120,40,100,46,120,44,32,100,46,121,41,44,32,48,46,48,41,32,43,32,108,101,110,103,116,104,40,109,97,120,40,100,44,32,48,46,48,41,41,32,45,32,114,97,100,105,117,115,59,10,125,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,32,102,108,111,97,116,32,100,105,115,116,32,61,32,98,111,120,68,105,115,116,40,118,95,116,101,120,99,111,111,114,100,44,32,117,46,120,121,44,32,114,97,100,105,105,41,32,45,32,48,46,53,59,10,32,32,32,32,118,101,99,52,32,99,111,108,32,61,32,115,116,114,111,107,101,67,111,108,111,117,114,59,10,32,32,32,32,99,111,108,46,97,32,61,32,109,105,120,40,48,46,48,44,32,115,116,114,111,107,101,67,111,108,111,117,114,46,97,44,32,99,108,97,109,112,40,45,100,105,115,116,44,32,48,46,48,44,32,49,46,48,41,41,59,10,32,32,32,32,99,111,108,32,61,32,109,105,120,40,99,111,108,44,32,118,95,99,111,108,111,117,114,44,32,99,108,97,109,112,40,45,40,100,105,115,116,32,43,32,117,46,119,41,44,32,48,46,48,44,32,49,46,48,41,41,59,10,32,32,32,32,99,111,108,46,97,32,42,61,32,97,108,112,104,97,59,10,32,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,99,111,108,59,10,125,10,0,50,49,71,76,80,114,111,103,114,97,109,82,111,117,110,100,82,101,99,116,84,119,111,0,49,51,85,110,105,102,111,114,109,70,108,111,97,116,52,0,49,52,67,97,99,104,101,100,85,110,105,102,111,114,109,50,73,55,86,101,99,116,111,114,52,69,0,49,51,85,110,105,102,111,114,109,67,111,108,111,117,114,0,49,50,84,101,120,116,82,101,110,100,101,114,79,112,0,118,97,114,121,105,110,103,32,118,101,99,50,32,118,95,116,101,120,99,111,111,114,100,59,10,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,116,101,120,116,117,114,101,59,10,117,110,105,102,111,114,109,32,109,101,100,105,117,109,112,32,102,108,111,97,116,32,97,108,112,104,97,59,10,118,97,114,121,105,110,103,32,108,111,119,112,32,118,101,99,52,32,118,95,99,111,108,111,117,114,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,46,114,103,98,32,61,32,118,95,99,111,108,111,117,114,46,114,103,98,59,10,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,46,97,32,61,32,116,101,120,116,117,114,101,50,68,40,116,101,120,116,117,114,101,44,32,118,95,116,101,120,99,111,111,114,100,41,46,97,32,42,32,97,108,112,104,97,59,10,125,10,0,49,56,71,76,80,114,111,103,114,97,109,84,101,120,116,71,108,121,112,104,0,50,48,83,105,109,112,108,101,66,105,116,109,97,112,80,114,111,118,105,100,101,114,0,49,52,66,105,116,109,97,112,80,114,111,118,105,100,101,114,0,49,57,65,115,121,110,99,66,105,116,109,97,112,80,114,111,118,105,100,101,114,0,49,53,84,101,120,116,117,114,101,82,101,110,100,101,114,79,112,0,78,49,52,66,105,116,109,97,112,80,114,111,118,105,100,101,114,56,67,97,108,108,98,97,99,107,69,0,118,97,114,121,105,110,103,32,118,101,99,50,32,118,95,116,101,120,99,111,111,114,100,59,10,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,116,101,120,116,117,114,101,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,116,101,120,116,117,114,101,50,68,40,116,101,120,116,117,114,101,44,32,118,95,116,101,120,99,111,111,114,100,41,59,10,125,10,0,49,54,71,76,80,114,111,103,114,97,109,84,101,120,116,117,114,101,0,118,97,114,121,105,110,103,32,118,101,99,50,32,118,95,116,101,120,99,111,111,114,100,59,10,118,97,114,121,105,110,103,32,108,111,119,112,32,118,101,99,52,32,118,95,99,111,108,111,117,114,59,10,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,116,101,120,116,117,114,101,59,10,117,110,105,102,111,114,109,32,109,101,100,105,117,109,112,32,102,108,111,97,116,32,97,108,112,104,97,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,118,101,99,52,40,118,95,99,111,108,111,117,114,46,114,103,98,44,32,116,101,120,116,117,114,101,50,68,40,116,101,120,116,117,114,101,44,32,118,95,116,101,120,99,111,111,114,100,41,46,97,41,59,10,32,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,46,97,32,42,61,32,97,108,112,104,97,59,10,125,10,0,50,53,71,76,80,114,111,103,114,97,109,84,101,120,116,117,114,101,84,105,110,116,65,108,112,104,97,0,50,48,71,76,80,114,111,103,114,97,109,84,101,120,116,117,114,101,84,105,110,116,0,118,97,114,121,105,110,103,32,118,101,99,50,32,118,95,116,101,120,99,111,111,114,100,59,10,118,97,114,121,105,110,103,32,108,111,119,112,32,118,101,99,52,32,118,95,99,111,108,111,117,114,59,10,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,116,101,120,116,117,114,101,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,118,101,99,52,40,118,95,99,111,108,111,117,114,46,114,103,98,44,32,116,101,120,116,117,114,101,50,68,40,116,101,120,116,117,114,101,44,32,118,95,116,101,120,99,111,111,114,100,41,46,97,41,59,10,125,10,0,118,97,114,121,105,110,103,32,118,101,99,50,32,118,95,116,101,120,99,111,111,114,100,59,10,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,116,101,120,116,117,114,101,59,10,117,110,105,102,111,114,109,32,109,101,100,105,117,109,112,32,102,108,111,97,116,32,97,108,112,104,97,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,116,101,120,116,117,114,101,50,68,40,116,101,120,116,117,114,101,44,32,118,95,116,101,120,99,111,111,114,100,41,59,10,32,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,46,97,32,42,61,32,97,108,112,104,97,59,10,125,10,0,50,49,71,76,80,114,111,103,114,97,109,84,101,120,116,117,114,101,65,108,112,104,97,0,90,78,49,57,65,115,121,110,99,66,105,116,109,97,112,80,114,111,118,105,100,101,114,67,49,69,80,75,99,69,51,36,95,48,0,78,83,116,51,95,95,50,49,48,95,95,102,117,110,99,116,105,111,110,54,95,95,102,117,110,99,73,90,78,49,57,65,115,121,110,99,66,105,116,109,97,112,80,114,111,118,105,100,101,114,67,49,69,80,75,99,69,51,36,95,48,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,53,95,69,69,70,118,80,54,66,105,116,109,97,112,69,69,69,0,90,78,49,53,84,101,120,116,117,114,101,82,101,110,100,101,114,79,112,67,49,69,80,52,86,105,101,119,80,75,99,105,69,51,36,95,49,0,78,83,116,51,95,95,50,49,48,95,95,102,117,110,99,116,105,111,110,54,95,95,102,117,110,99,73,90,78,49,53,84,101,120,116,117,114,101,82,101,110,100,101,114,79,112,67,49,69,80,52,86,105,101,119,80,75,99,105,69,51,36,95,49,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,55,95,69,69,70,118,80,54,66,105,116,109,97,112,69,69,69,0,55,83,117,114,102,97,99,101,0,50,50,80,114,105,118,97,116,101,83,117,114,102,97,99,101,82,101,110,100,101,114,79,112,0,71,76,95,70,82,65,77,69,66,85,70,70,69,82,95,67,79,77,80,76,69,84,69,32,61,61,32,103,108,67,104,101,99,107,70,114,97,109,101,98,117,102,102,101,114,83,116,97,116,117,115,40,71,76,95,70,82,65,77,69,66,85,70,70,69,82,41,0,47,85,115,101,114,115,47,114,101,117,98,101,110,47,111,97,107,110,117,116,47,115,114,99,47,103,114,97,112,104,105,99,115,47,115,117,114,102,97,99,101,46,99,112,112,0,115,101,116,117,112,80,114,105,118,97,116,101,70,98,111,0,98,97,116,99,104,0,114,101,109,111,118,101,82,101,110,100,101,114,79,112,0,98,97,116,99,104,45,62,95,115,117,114,102,97,99,101,32,61,61,32,116,104,105,115,0,33,111,112,45,62,95,98,97,116,99,104,0,97,100,100,82,101,110,100,101,114,79,112,0,118,105,101,119,45,62,95,119,105,100,116,104,77,101,97,115,117,114,101,83,112,101,99,46,114,101,102,84,121,112,101,33,61,82,69,70,84,89,80,69,95,67,79,78,84,69,78,84,0,114,101,110,100,101,114,80,104,97,115,101,49,0,118,105,101,119,45,62,95,104,101,105,103,104,116,77,101,97,115,117,114,101,83,112,101,99,46,114,101,102,84,121,112,101,33,61,82,69,70,84,89,80,69,95,67,79,78,84,69,78,84,0,49,50,84,101,120,116,82,101,110,100,101,114,101,114,0,33,95,109,101,97,115,117,114,101,100,83,105,122,101,86,97,108,105,100,0,47,85,115,101,114,115,47,114,101,117,98,101,110,47,111,97,107,110,117,116,47,115,114,99,47,103,114,97,112,104,105,99,115,47,116,101,120,116,114,101,110,100,101,114,101,114,46,99,112,112,0,109,101,97,115,117,114,101,0,116,111,100,111,58,32,116,97,98,115,116,111,112,115,33,0,103,108,121,112,104,0,84,79,68,79,58,32,115,111,102,116,32,108,105,110,101,32,98,114,101,97,107,115,33,0,95,109,101,97,115,117,114,101,100,83,105,122,101,86,97,108,105,100,0,103,101,116,71,108,121,112,104,79,114,105,103,105,110,0,57,65,116,108,97,115,78,111,100,101,0,57,65,116,108,97,115,80,97,103,101,0,53,65,116,108,97,115,0,116,97,112,32,37,100,0,90,78,54,87,105,110,100,111,119,49,51,77,111,116,105,111,110,84,114,97,99,107,101,114,49,56,100,105,115,112,97,116,99,104,73,110,112,117,116,69,118,101,110,116,69,105,108,54,95,80,79,73,78,84,80,83,95,69,51,36,95,48,0,116,97,112,32,99,111,110,102,105,114,109,101,100,32,97,116,32,37,100,0,78,83,116,51,95,95,50,49,48,95,95,102,117,110,99,116,105,111,110,54,95,95,102,117,110,99,73,90,78,54,87,105,110,100,111,119,49,51,77,111,116,105,111,110,84,114,97,99,107,101,114,49,56,100,105,115,112,97,116,99,104,73,110,112,117,116,69,118,101,110,116,69,105,108,54,95,80,79,73,78,84,80,83,50,95,69,51,36,95,48,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,54,95,69,69,70,118,118,69,69,69,0,123,32,117,112,100,97,116,101,70,112,115,40,36,48,41,59,32,125,0,37,100,32,102,112,115,10,0,54,87,105,110,100,111,119,0,103,108,0,47,85,115,101,114,115,47,114,101,117,98,101,110,47,111,97,107,110,117,116,47,115,114,99,47,112,108,97,116,102,111,114,109,47,119,101,98,47,98,105,116,109,97,112,46,99,112,112,0,103,108,102,111,114,109,97,116,70,111,114,70,111,114,109,97,116,0,103,108,116,121,112,101,70,111,114,70,111,114,109,97,116,0,116,101,120,73,109,97,103,101,50,68,0,98,105,110,100,40,41,32,99,97,108,108,101,100,32,111,110,32,100,97,116,97,45,108,101,115,115,32,98,105,116,109,97,112,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,100,114,97,119,73,109,97,103,101,0,103,101,116,73,109,97,103,101,68,97,116,97,0,95,102,111,114,109,97,116,32,61,61,32,66,73,84,77,65,80,70,79,82,77,65,84,95,82,71,66,65,51,50,0,108,111,99,107,0,100,97,116,97,0,108,101,110,103,116,104,0,115,101,116,0,111,111,45,101,114,44,32,108,111,99,107,40,41,32,99,97,108,108,101,100,32,111,110,32,98,105,116,109,97,112,32,119,105,116,104,32,110,111,32,100,97,116,97,32,111,114,32,105,109,97,103,101,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,104,69,69,0,56,79,83,66,105,116,109,97,112,0,98,121,116,101,115,80,101,114,80,105,120,101,108,70,111,114,70,111,114,109,97,116,0,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47,0,100,97,116,97,58,105,109,97,103,101,47,112,110,103,59,98,97,115,101,54,52,44,0,123,32,118,97,114,32,98,105,116,109,97,112,61,36,48,59,32,118,97,114,32,79,110,73,109,97,103,101,76,111,97,100,101,100,70,114,111,109,68,97,116,97,61,36,50,59,32,118,97,114,32,105,109,103,32,61,32,71,108,111,98,97,108,79,98,106,101,99,116,84,114,97,99,107,101,114,91,52,93,59,32,105,109,103,46,111,110,108,111,97,100,32,61,32,102,117,110,99,116,105,111,110,40,41,32,123,32,82,117,110,116,105,109,101,46,100,121,110,67,97,108,108,40,39,118,105,39,44,32,79,110,73,109,97,103,101,76,111,97,100,101,100,70,114,111,109,68,97,116,97,44,32,91,98,105,116,109,97,112,93,41,59,32,125,59,32,105,109,103,46,115,114,99,32,61,32,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,49,41,59,32,125,0,87,97,114,110,105,110,103,58,32,98,105,116,109,97,112,32,102,97,105,108,101,100,32,116,111,32,100,101,99,111,100,101,0,100,111,99,117,109,101,110,116,0,99,97,110,118,97,115,0,99,114,101,97,116,101,69,108,101,109,101,110,116,0,115,97,110,115,45,115,101,114,105,102,0,64,102,111,110,116,45,102,97,99,101,32,123,32,102,111,110,116,45,102,97,109,105,108,121,58,34,0,34,59,32,115,114,99,58,32,117,114,108,40,100,97,116,97,58,97,112,112,108,105,99,97,116,105,111,110,47,102,111,110,116,45,115,102,110,116,59,98,97,115,101,54,52,44,0,41,59,32,125,0,123,32,118,97,114,32,115,116,121,108,101,32,61,32,100,111,99,117,109,101,110,116,46,99,114,101,97,116,101,69,108,101,109,101,110,116,40,34,115,116,121,108,101,34,41,59,32,115,116,121,108,101,46,116,121,112,101,32,61,32,34,116,101,120,116,47,99,115,115,34,59,32,115,116,121,108,101,46,105,110,110,101,114,72,84,77,76,32,61,32,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,48,41,59,32,100,111,99,117,109,101,110,116,46,103,101,116,69,108,101,109,101,110,116,115,66,121,84,97,103,78,97,109,101,40,39,104,101,97,100,39,41,91,48,93,46,97,112,112,101,110,100,67,104,105,108,100,40,115,116,121,108,101,41,59,32,125,0,50,100,0,103,101,116,67,111,110,116,101,120,116,0,37,100,112,120,32,37,115,0,102,111,110,116,0,116,101,120,116,66,97,115,101,108,105,110,101,0,78,83,116,51,95,95,50,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,78,83,116,51,95,95,50,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,123,32,118,97,114,32,99,116,120,116,32,61,32,71,108,111,98,97,108,79,98,106,101,99,116,84,114,97,99,107,101,114,91,55,93,59,32,118,97,114,32,106,115,116,114,32,61,32,85,84,70,56,84,111,83,116,114,105,110,103,40,36,50,41,59,32,118,97,114,32,116,101,120,116,77,101,116,114,105,99,115,32,61,32,99,116,120,116,46,109,101,97,115,117,114,101,84,101,120,116,40,106,115,116,114,41,59,32,82,117,110,116,105,109,101,46,100,121,110,67,97,108,108,40,39,118,105,105,105,39,44,32,36,51,44,32,91,36,48,44,36,49,44,116,101,120,116,77,101,116,114,105,99,115,46,119,105,100,116,104,93,41,59,32,125,0,123,32,118,97,114,32,99,116,120,116,32,61,32,71,108,111,98,97,108,79,98,106,101,99,116,84,114,97,99,107,101,114,91,55,93,59,32,99,116,120,116,46,99,108,101,97,114,82,101,99,116,40,48,44,48,44,36,49,44,32,36,50,41,59,32,99,116,120,116,46,102,105,108,108,84,101,120,116,40,85,84,70,56,84,111,83,116,114,105,110,103,40,36,48,41,44,32,48,44,48,41,59,32,125,0,123,32,118,97,114,32,99,116,120,116,32,61,32,71,108,111,98,97,108,79,98,106,101,99,116,84,114,97,99,107,101,114,91,55,93,59,32,118,97,114,32,116,97,114,103,101,116,66,117,102,102,32,61,32,71,108,111,98,97,108,79,98,106,101,99,116,84,114,97,99,107,101,114,91,56,93,59,32,118,97,114,32,105,109,103,100,97,116,97,32,61,32,99,116,120,116,46,103,101,116,73,109,97,103,101,68,97,116,97,40,48,44,32,48,44,32,36,50,44,32,36,51,41,59,32,118,97,114,32,111,32,61,32,48,59,32,102,111,114,32,40,121,61,48,32,59,32,121,60,36,51,32,59,32,121,43,43,41,32,123,32,102,111,114,32,40,120,61,48,32,59,32,120,60,36,50,32,59,32,120,43,43,41,32,123,32,116,97,114,103,101,116,66,117,102,102,91,40,121,43,36,49,41,42,32,36,52,32,43,32,36,48,43,120,93,32,61,32,105,109,103,100,97,116,97,46,100,97,116,97,91,111,43,51,93,59,32,111,43,61,52,59,32,125,32,125,32,125,0,55,87,101,98,70,111,110,116,0,73,109,97,103,101,0,71,108,111,98,97,108,79,98,106,101,99,116,84,114,97,99,107,101,114,0,123,32,118,97,114,32,114,101,113,61,36,48,59,32,118,97,114,32,117,114,108,61,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,49,41,59,32,118,97,114,32,111,110,73,109,97,103,101,76,111,97,100,61,36,50,59,32,118,97,114,32,111,110,69,114,114,111,114,61,36,51,59,32,118,97,114,32,105,109,103,32,61,32,71,108,111,98,97,108,79,98,106,101,99,116,84,114,97,99,107,101,114,91,49,93,59,32,105,109,103,46,111,110,108,111,97,100,32,61,32,102,117,110,99,116,105,111,110,40,41,32,123,32,82,117,110,116,105,109,101,46,100,121,110,67,97,108,108,40,39,118,105,39,44,32,111,110,73,109,97,103,101,76,111,97,100,44,32,91,114,101,113,93,41,59,32,125,59,32,105,109,103,46,111,110,101,114,114,111,114,32,61,32,102,117,110,99,116,105,111,110,40,41,32,123,32,82,117,110,116,105,109,101,46,100,121,110,67,97,108,108,40,39,118,105,39,44,32,111,110,69,114,114,111,114,44,32,91,114,101,113,93,41,59,32,125,59,32,105,109,103,46,99,114,111,115,115,79,114,105,103,105,110,32,61,32,39,65,110,111,110,121,109,111,117,115,39,59,32,105,109,103,46,115,114,99,32,61,32,117,114,108,59,32,125,0,88,77,76,72,116,116,112,82,101,113,117,101,115,116,0,123,32,118,97,114,32,114,101,113,61,36,48,59,32,118,97,114,32,117,114,108,61,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,49,41,59,32,118,97,114,32,111,110,112,114,111,103,114,101,115,115,61,36,50,59,32,118,97,114,32,111,110,108,111,97,100,61,36,51,59,32,118,97,114,32,111,110,101,114,114,111,114,61,36,52,59,32,118,97,114,32,120,104,114,32,61,32,71,108,111,98,97,108,79,98,106,101,99,116,84,114,97,99,107,101,114,91,49,93,59,32,120,104,114,46,111,112,101,110,40,34,71,69,84,34,44,32,117,114,108,44,32,116,114,117,101,41,59,32,120,104,114,46,114,101,115,112,111,110,115,101,84,121,112,101,61,39,97,114,114,97,121,98,117,102,102,101,114,39,59,32,120,104,114,46,111,110,112,114,111,103,114,101,115,115,61,102,117,110,99,116,105,111,110,32,104,116,116,112,95,111,110,112,114], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([111,103,114,101,115,115,40,101,41,32,123,32,115,119,105,116,99,104,40,120,104,114,46,115,116,97,116,117,115,41,32,123,32,99,97,115,101,32,50,48,48,58,32,99,97,115,101,32,50,48,54,58,32,99,97,115,101,32,51,48,48,58,32,99,97,115,101,32,51,48,49,58,32,99,97,115,101,32,51,48,50,58,32,123,32,118,97,114,32,100,97,116,101,61,120,104,114,46,103,101,116,82,101,115,112,111,110,115,101,72,101,97,100,101,114,40,39,76,97,115,116,45,77,111,100,105,102,105,101,100,39,41,59,32,100,97,116,101,61,40,40,100,97,116,101,33,61,110,117,108,108,41,32,63,32,110,101,119,32,68,97,116,101,40,100,97,116,101,41,46,103,101,116,84,105,109,101,40,41,47,49,48,48,48,32,58,32,48,41,59,32,82,117,110,116,105,109,101,46,100,121,110,67,97,108,108,40,39,118,105,105,105,105,39,44,32,111,110,112,114,111,103,114,101,115,115,44,32,91,114,101,113,44,32,101,46,108,111,97,100,101,100,44,32,101,46,116,111,116,97,108,44,32,100,97,116,101,93,41,59,32,125,32,98,114,101,97,107,59,32,125,32,125,59,32,120,104,114,46,111,110,108,111,97,100,61,102,117,110,99,116,105,111,110,32,104,116,116,112,95,111,110,108,111,97,100,40,101,41,32,123,32,115,119,105,116,99,104,40,120,104,114,46,115,116,97,116,117,115,41,32,123,32,99,97,115,101,32,50,48,48,58,32,99,97,115,101,32,50,48,54,58,32,99,97,115,101,32,51,48,48,58,32,99,97,115,101,32,51,48,49,58,32,99,97,115,101,32,51,48,50,58,32,118,97,114,32,100,97,116,101,61,120,104,114,46,103,101,116,82,101,115,112,111,110,115,101,72,101,97,100,101,114,40,39,76,97,115,116,45,77,111,100,105,102,105,101,100,39,41,59,32,100,97,116,101,61,40,40,100,97,116,101,33,61,110,117,108,108,41,32,63,32,110,101,119,32,68,97,116,101,40,100,97,116,101,41,46,103,101,116,84,105,109,101,40,41,47,49,48,48,48,32,58,32,48,41,59,32,118,97,114,32,98,121,116,101,65,114,114,97,121,61,110,101,119,32,85,105,110,116,56,65,114,114,97,121,40,120,104,114,46,114,101,115,112,111,110,115,101,41,59,32,118,97,114,32,98,117,102,102,101,114,61,95,109,97,108,108,111,99,40,98,121,116,101,65,114,114,97,121,46,108,101,110,103,116,104,41,59,32,72,69,65,80,85,56,46,115,101,116,40,98,121,116,101,65,114,114,97,121,44,32,98,117,102,102,101,114,41,59,32,82,117,110,116,105,109,101,46,100,121,110,67,97,108,108,40,39,118,105,105,105,105,39,44,32,111,110,108,111,97,100,44,32,91,114,101,113,44,32,98,117,102,102,101,114,44,32,98,121,116,101,65,114,114,97,121,46,108,101,110,103,116,104,44,32,100,97,116,101,93,41,59,32,95,102,114,101,101,40,98,117,102,102,101,114,41,59,32,98,114,101,97,107,59,32,100,101,102,97,117,108,116,58,32,82,117,110,116,105,109,101,46,100,121,110,67,97,108,108,40,39,118,105,39,44,32,111,110,101,114,114,111,114,44,32,91,114,101,113,93,41,59,32,98,114,101,97,107,59,32,125,32,125,59,32,120,104,114,46,111,110,101,114,114,111,114,61,102,117,110,99,116,105,111,110,32,104,116,116,112,95,111,110,101,114,114,111,114,40,101,41,32,123,32,82,117,110,116,105,109,101,46,100,121,110,67,97,108,108,40,39,118,105,39,44,32,111,110,101,114,114,111,114,44,32,91,114,101,113,93,41,59,32,125,59,32,116,114,121,123,105,102,40,120,104,114,46,99,104,97,110,110,101,108,32,105,110,115,116,97,110,99,101,111,102,32,67,105,46,110,115,73,72,116,116,112,67,104,97,110,110,101,108,41,120,104,114,46,99,104,97,110,110,101,108,46,114,101,100,105,114,101,99,116,105,111,110,76,105,109,105,116,61,48,59,125,99,97,116,99,104,40,101,120,41,123,125,32,120,104,114,46,115,101,110,100,40,110,117,108,108,41,59,32,125,0,101,114,114,111,114,32,108,111,97,100,105,110,103,32,117,114,108,58,32,37,115,10,0,79,110,73,109,97,103,101,76,111,97,100,32,37,115,0,46,112,110,103,0,49,51,78,97,116,105,118,101,82,101,113,117,101,115,116,0,111,110,108,111,97,100,0,111,110,101,114,114,111,114,0,97,98,111,114,116,0,111,97,107,95,115,101,116,87,105,110,100,111,119,83,105,122,101,0,118,105,105,105,105,0,111,97,107,95,117,115,101,114,69,118,101,110,116,0,118,105,105,105,105,105,0,111,97,107,95,109,97,105,110,0,118,105,0,103,101,116,84,105,109,101,115,116,97,109,112,0,119,105,110,100,111,119,32,115,105,122,101,32,37,100,32,120,32,37,100,44,32,115,99,97,108,101,61,37,100,0,123,32,114,101,113,117,101,115,116,65,110,105,109,97,116,105,111,110,70,114,97,109,101,40,32,102,117,110,99,116,105,111,110,40,41,32,123,32,95,100,105,115,112,97,116,99,104,77,97,105,110,87,105,110,100,111,119,68,114,97,119,40,41,59,32,125,41,32,125,0,123,32,114,101,116,117,114,110,32,115,101,116,73,110,116,101,114,118,97,108,40,102,117,110,99,116,105,111,110,40,41,32,123,32,82,117,110,116,105,109,101,46,100,121,110,67,97,108,108,40,39,118,105,39,44,32,36,50,44,32,91,36,48,93,41,59,32,125,44,32,36,49,41,59,32,125,0,123,32,99,108,101,97,114,73,110,116,101,114,118,97,108,40,36,48,41,59,32,125,0,55,79,83,84,105,109,101,114,0,109,97,105,110,40,41,10,0,103,108,32,61,32,77,111,100,117,108,101,46,99,97,110,118,97,115,46,103,101,116,67,111,110,116,101,120,116,40,39,119,101,98,103,108,39,41,59,0,114,98,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,97,115,115,101,116,58,32,37,115,0,114,101,97,100,32,61,61,32,100,97,116,97,45,62,99,98,0,47,85,115,101,114,115,47,114,101,117,98,101,110,47,111,97,107,110,117,116,47,115,114,99,47,112,108,97,116,102,111,114,109,47,119,101,98,47,119,101,98,46,99,112,112,0,108,111,97,100,65,115,115,101,116,0,37,100,0,37,108,102,0,87,97,114,110,105,110,103,58,32,105,110,118,97,108,105,100,32,99,104,97,114,32,39,37,99,39,0,47,85,115,101,114,115,47,114,101,117,98,101,110,47,111,97,107,110,117,116,47,115,114,99,47,116,101,120,116,47,117,116,102,56,46,99,112,112,0,115,116,114,105,110,103,65,112,112,101,110,100,67,111,100,101,112,111,105,110,116,0,98,111,114,100,101,114,45,99,111,108,111,117,114,0,112,114,101,115,115,101,100,45,99,111,108,111,117,114,0,54,66,117,116,116,111,110,0,49,51,84,111,111,108,98,97,114,66,117,116,116,111,110,0,66,117,116,116,111,110,0,84,111,111,108,98,97,114,66,117,116,116,111,110,0,105,109,97,103,101,115,47,101,100,105,116,116,101,120,116,95,99,108,101,97,114,46,112,110,103,0,78,83,116,51,95,95,50,54,95,95,98,105,110,100,73,77,56,69,100,105,116,84,101,120,116,70,118,118,69,74,80,83,49,95,69,69,69,0,78,83,116,51,95,95,50,49,56,95,95,119,101,97,107,95,114,101,115,117,108,116,95,116,121,112,101,73,77,56,69,100,105,116,84,101,120,116,70,118,118,69,69,69,0,78,83,116,51,95,95,50,49,52,117,110,97,114,121,95,102,117,110,99,116,105,111,110,73,80,56,69,100,105,116,84,101,120,116,118,69,69,0,78,83,116,51,95,95,50,49,48,95,95,102,117,110,99,116,105,111,110,54,95,95,102,117,110,99,73,78,83,95,54,95,95,98,105,110,100,73,77,56,69,100,105,116,84,101,120,116,70,118,118,69,74,80,83,51,95,69,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,55,95,69,69,70,118,118,69,69,69,0,56,69,100,105,116,84,101,120,116,0,50,49,73,75,101,121,98,111,97,114,100,73,110,112,117,116,72,97,110,100,108,101,114,0,87,97,114,110,105,110,103,58,32,85,110,101,120,112,101,99,116,101,100,32,117,114,108,100,97,116,97,32,116,121,112,101,0,57,73,109,97,103,101,86,105,101,119,0,49,57,73,85,82,76,82,101,113,117,101,115,116,68,101,108,101,103,97,116,101,0,73,109,97,103,101,86,105,101,119,0,46,102,111,110,116,45,110,97,109,101,0,46,102,111,110,116,45,115,105,122,101,0,46,102,111,114,101,99,111,108,111,117,114,0,102,111,110,116,45,110,97,109,101,0,102,111,110,116,45,115,105,122,101,0,102,111,114,101,99,111,108,111,117,114,0,116,101,120,116,0,109,97,120,76,105,110,101,115,0,103,114,97,118,105,116,121,88,0,48,0,47,85,115,101,114,115,47,114,101,117,98,101,110,47,111,97,107,110,117,116,47,115,114,99,47,118,105,101,119,47,108,97,98,101,108,46,99,112,112,0,103,114,97,118,105,116,121,89,0,53,76,97,98,101,108,0,76,97,98,101,108,0,119,101,105,103,104,116,0,111,114,105,101,110,116,97,116,105,111,110,0,104,111,114,105,122,111,110,116,97,108,0,118,101,114,116,105,99,97,108,0,49,50,76,105,110,101,97,114,76,97,121,111,117,116,0,76,105,110,101,97,114,76,97,121,111,117,116,0,105,116,101,109,86,105,101,119,0,47,85,115,101,114,115,47,114,101,117,98,101,110,47,111,97,107,110,117,116,47,115,114,99,47,118,105,101,119,47,108,105,115,116,118,105,101,119,46,99,112,112,0,99,114,101,97,116,101,73,116,101,109,86,105,101,119,0,104,101,97,100,101,114,86,105,101,119,0,117,112,100,97,116,101,86,105,115,105,98,108,101,73,116,101,109,115,0,108,105,115,116,118,105,101,119,46,115,101,108,101,99,116,101,100,45,98,107,103,110,100,45,99,111,108,111,117,114,0,56,76,105,115,116,86,105,101,119,0,47,85,115,101,114,115,47,114,101,117,98,101,110,47,111,97,107,110,117,116,47,115,114,99,47,118,105,101,119,47,110,97,118,105,103,97,116,105,111,110,98,97,114,46,99,112,112,0,115,101,116,66,97,99,107,103,114,111,117,110,100,0,49,51,78,97,118,105,103,97,116,105,111,110,66,97,114,0,78,97,118,105,103,97,116,105,111,110,66,97,114,0,115,116,97,116,117,115,98,97,114,46,104,101,105,103,104,116,0,110,97,118,98,97,114,46,104,101,105,103,104,116,0,57,83,99,114,111,108,108,98,97,114,0,90,78,57,83,101,97,114,99,104,66,111,120,50,48,98,101,99,111,109,101,70,105,114,115,116,82,101,115,112,111,110,100,101,114,69,118,69,51,36,95,48,0,78,83,116,51,95,95,50,49,48,95,95,102,117,110,99,116,105,111,110,54,95,95,102,117,110,99,73,90,78,57,83,101,97,114,99,104,66,111,120,50,48,98,101,99,111,109,101,70,105,114,115,116,82,101,115,112,111,110,100,101,114,69,118,69,51,36,95,48,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,51,95,69,69,70,118,102,69,69,69,0,57,83,101,97,114,99,104,66,111,120,0,83,101,97,114,99,104,66,111,120,0,105,109,97,103,101,115,47,115,101,97,114,99,104,46,112,110,103,0,49,54,83,101,103,109,101,110,116,101,100,67,111,110,116,114,111,108,0,83,101,103,109,101,110,116,101,100,67,111,110,116,114,111,108,0,115,101,103,109,101,110,116,101,100,99,111,110,116,114,111,108,0,115,101,103,109,101,110,116,101,100,99,111,110,116,114,111,108,46,115,116,114,111,107,101,45,119,105,100,116,104,0,105,100,0,115,116,121,108,101,0,104,101,105,103,104,116,0,119,105,100,116,104,0,97,108,105,103,110,88,0,97,108,105,103,110,89,0,98,97,99,107,103,114,111,117,110,100,0,118,97,108,117,101,45,62,116,121,112,101,32,61,61,32,83,116,121,108,101,86,97,108,117,101,58,58,84,121,112,101,58,58,73,110,116,0,47,85,115,101,114,115,47,114,101,117,98,101,110,47,111,97,107,110,117,116,47,115,114,99,47,118,105,101,119,47,118,105,101,119,46,99,112,112,0,97,112,112,108,121,83,116,121,108,101,86,97,108,117,101,0,112,97,100,100,105,110,103,0,112,97,100,100,105,110,103,72,111,114,122,0,112,97,100,100,105,110,103,86,101,114,116,0,116,105,110,116,0,118,97,108,117,101,45,62,116,121,112,101,32,61,61,32,83,116,121,108,101,86,97,108,117,101,58,58,84,121,112,101,58,58,83,116,114,105,110,103,0,97,108,105,103,110,115,112,101,99,70,114,111,109,82,101,115,111,117,114,99,101,86,97,108,0,99,101,110,116,101,114,0,99,101,110,116,114,101,0,108,101,102,116,0,114,105,103,104,116,0,116,111,112,0,98,111,116,116,111,109,0,116,111,76,101,102,116,79,102,0,116,111,82,105,103,104,116,79,102,0,97,98,111,118,101,0,98,101,108,111,119,0,102,97,108,115,101,0,115,112,101,99,46,97,110,99,104,111,114,0,109,101,97,115,117,114,101,115,112,101,99,70,114,111,109,82,101,115,111,117,114,99,101,86,97,108,0,119,114,97,112,95,99,111,110,116,101,110,116,0,102,105,108,108,95,112,97,114,101,110,116,0,109,97,116,99,104,95,112,97,114,101,110,116,0,97,115,112,101,99,116,40,0,97,108,108,111,99,97,116,111,114,60,84,62,58,58,97,108,108,111,99,97,116,101,40,115,105,122,101,95,116,32,110,41,32,39,110,39,32,101,120,99,101,101,100,115,32,109,97,120,105,109,117,109,32,115,117,112,112,111,114,116,101,100,32,115,105,122,101,0,87,97,114,110,105,110,103,58,32,105,103,110,111,114,101,100,32,117,110,107,110,111,119,110,32,97,116,116,114,105,98,117,116,101,32,39,37,115,39,0,90,78,52,86,105,101,119,49,50,97,110,105,109,97,116,101,65,108,112,104,97,69,102,102,69,51,36,95,50,0,78,83,116,51,95,95,50,49,48,95,95,102,117,110,99,116,105,111,110,54,95,95,102,117,110,99,73,90,78,52,86,105,101,119,49,50,97,110,105,109,97,116,101,65,108,112,104,97,69,102,102,69,51,36,95,50,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,51,95,69,69,70,118,80,57,65,110,105,109,97,116,105,111,110,69,69,69,0,115,117,98,118,105,101,119,45,62,95,112,97,114,101,110,116,32,61,61,32,116,104,105,115,0,114,101,109,111,118,101,83,117,98,118,105,101,119,0,105,62,61,48,0,115,117,98,118,105,101,119,45,62,95,112,114,101,118,105,111,117,115,86,105,101,119,32,61,61,32,116,104,105,115,0,33,114,105,103,104,116,109,111,115,116,45,62,95,110,101,120,116,86,105,101,119,0,105,110,115,101,114,116,83,117,98,118,105,101,119,0,87,97,114,110,105,110,103,33,32,86,105,101,119,58,58,108,97,121,111,117,116,40,41,32,105,115,32,110,111,116,32,99,108,101,118,101,114,32,101,110,111,117,103,104,32,102,111,114,32,110,111,110,45,115,105,98,108,105,110,103,32,97,110,99,104,111,114,115,0,90,78,52,86,105,101,119,49,54,117,112,100,97,116,101,83,99,114,111,108,108,98,97,114,115,69,118,69,51,36,95,49,0,78,83,116,51,95,95,50,49,48,95,95,102,117,110,99,116,105,111,110,54,95,95,102,117,110,99,73,90,78,52,86,105,101,119,49,54,117,112,100,97,116,101,83,99,114,111,108,108,98,97,114,115,69,118,69,51,36,95,49,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,51,95,69,69,70,118,118,69,69,69,0,90,78,52,86,105,101,119,49,57,115,99,114,111,108,108,83,116,97,114,116,70,97,100,101,65,110,105,109,69,102,69,51,36,95,48,0,78,83,116,51,95,95,50,49,48,95,95,102,117,110,99,116,105,111,110,54,95,95,102,117,110,99,73,90,78,52,86,105,101,119,49,57,115,99,114,111,108,108,83,116,97,114,116,70,97,100,101,65,110,105,109,69,102,69,51,36,95,48,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,51,95,69,69,70,118,102,69,69,69,0,117,112,100,97,116,101,82,101,110,100,101,114,79,112,115,0,33,95,115,117,114,102,97,99,101,0,117,112,100,97,116,101,80,114,105,118,97,116,101,83,117,114,102,97,99,101,0,52,86,105,101,119,0,118,111,105,100,0,98,111,111,108,0,99,104,97,114,0,115,105,103,110,101,100,32,99,104,97,114,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,115,104,111,114,116,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,105,110,116,0,117,110,115,105,103,110,101,100,32,105,110,116,0,108,111,110,103,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,102,108,111,97,116,0,100,111,117,98,108,101,0,115,116,100,58,58,115,116,114,105,110,103,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,115,116,100,58,58,119,115,116,114,105,110,103,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,108,111,110,103,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,102,108,111,97,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,100,111,117,98,108,101,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,32,100,111,117,98,108,101,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,101,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,100,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,102,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,109,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,108,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,106,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,105,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,116,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,115,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,97,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,99,69,69,0,78,83,116,51,95,95,50,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,78,83,116,51,95,95,50,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,104,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,104,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,105,110,102,105,110,105,116,121,0,110,97,110,0,114,119,97,0,95,95,110,101,120,116,95,112,114,105,109,101,32,111,118,101,114,102,108,111,119,0,118,101,99,116,111,114,0,98,97,115,105,99,95,115,116,114,105,110,103,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,83,116,57,101,120,99,101,112,116,105,111,110,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,83,116,57,98,97,100,95,97,108,108,111,99,0,115,116,100,58,58,101,120,99,101,112,116,105,111,110,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,83,116,49,50,111,117,116,95,111,102,95,114,97,110,103,101,0,83,116,49,52,111,118,101,114,102,108,111,119,95,101,114,114,111,114,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,118,0,98,0,99,0,104,0,97,0,115,0,116,0,105,0,106,0,108,0,109,0,102,0,100,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

  
  
  
  var registeredTypes={};
  
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }function __emval_lookupTypes(argCount, argTypes, argWireTypes) {
      var a = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
          a[i] = requireRegisteredType(
              HEAP32[(argTypes >> 2) + i],
              "parameter " + i);
      }
      return a;
    }
  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  
  function requireHandle(handle) {
      if (!handle) {
          throwBindingError('Cannot use deleted val. handle = ' + handle);
      }
      return emval_handle_array[handle].value;
    }function __emval_call(handle, argCount, argTypes, argv) {
      handle = requireHandle(handle);
      var types = __emval_lookupTypes(argCount, argTypes);
  
      var args = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
          var type = types[i];
          args[i] = type['readValueFromPointer'](argv);
          argv += type['argPackAdvance'];
      }
  
      var rv = handle.apply(undefined, args);
      return __emval_register(rv);
    }

   

  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},tempFixedLengthArray:[],packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
  
        // For functions such as glDrawBuffers, glInvalidateFramebuffer and glInvalidateSubFramebuffer that need to pass a short array to the WebGL API,
        // create a set of short fixed-length arrays to avoid having to generate any garbage when calling those functions.
        for (var i = 0; i < 32; i++) {
          GL.tempFixedLengthArray.push(new Array(i));
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes['majorVersion'] === 'undefined' && typeof webGLContextAttributes['minorVersion'] === 'undefined') {
          webGLContextAttributes['majorVersion'] = 1;
          webGLContextAttributes['minorVersion'] = 0;
        }
  
  
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes['majorVersion'] == 1 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes['majorVersion'] == 2 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
  
        if (!ctx) return 0;
        var context = GL.registerContext(ctx, webGLContextAttributes);
        return context;
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes['majorVersion'],
          GLctx: ctx
        };
  
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes['enableExtensionsByDefault']) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod", "EXT_color_buffer_float"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          if (loc != null)
          {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;
  
            for (var j = 1; j < u.size; ++j) {
              var n = name + '['+j+']';
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
  
              GL.uniforms[id] = loc;
            }
          }
        }
      }};function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

   

  
  
  var emval_methodCallers=[];function __emval_addMethodCaller(caller) {
      var id = emval_methodCallers.length;
      emval_methodCallers.push(caller);
      return id;
    }
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }function __emval_get_method_caller(argCount, argTypes) {
      var types = __emval_lookupTypes(argCount, argTypes);
  
      var retType = types[0];
      var signatureName = retType.name + "_$" + types.slice(1).map(function (t) { return t.name; }).join("_") + "$";
  
      var params = ["retType"];
      var args = [retType];
  
      var argsList = ""; // 'arg0, arg1, arg2, ... , argN'
      for (var i = 0; i < argCount - 1; ++i) {
          argsList += (i !== 0 ? ", " : "") + "arg" + i;
          params.push("argType" + i);
          args.push(types[1 + i]);
      }
  
      var functionName = makeLegalFunctionName("methodCaller_" + signatureName);
      var functionBody =
          "return function " + functionName + "(handle, name, destructors, args) {\n";
  
      var offset = 0;
      for (var i = 0; i < argCount - 1; ++i) {
          functionBody +=
          "    var arg" + i + " = argType" + i + ".readValueFromPointer(args" + (offset ? ("+"+offset) : "") + ");\n";
          offset += types[i + 1]['argPackAdvance'];
      }
      functionBody +=
          "    var rv = handle[name](" + argsList + ");\n";
      for (var i = 0; i < argCount - 1; ++i) {
          if (types[i + 1]['deleteObject']) {
              functionBody +=
              "    argType" + i + ".deleteObject(arg" + i + ");\n";
          }
      }
      if (!retType.isVoid) {
          functionBody +=
          "    return retType.toWireType(destructors, rv);\n";
      }
      functionBody +=
          "};\n";
  
      params.push(functionBody);
      var invokerFunction = new_(Function, params).apply(null, args);
      return __emval_addMethodCaller(invokerFunction);
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((Runtime.setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((Runtime.setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((Runtime.setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((Runtime.setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  
  var emval_symbols={};function getStringOrSymbol(address) {
      var symbol = emval_symbols[address];
      if (symbol === undefined) {
          return readLatin1String(address);
      } else {
          return symbol;
      }
    }function __emval_new_cstring(v) {
      return __emval_register(getStringOrSymbol(v));
    }

  
  function craftEmvalAllocator(argCount) {
      /*This function returns a new function that looks like this:
      function emval_allocator_3(constructor, argTypes, args) {
          var argType0 = requireRegisteredType(HEAP32[(argTypes >> 2)], "parameter 0");
          var arg0 = argType0.readValueFromPointer(args);
          var argType1 = requireRegisteredType(HEAP32[(argTypes >> 2) + 1], "parameter 1");
          var arg1 = argType1.readValueFromPointer(args + 8);
          var argType2 = requireRegisteredType(HEAP32[(argTypes >> 2) + 2], "parameter 2");
          var arg2 = argType2.readValueFromPointer(args + 16);
          var obj = new constructor(arg0, arg1, arg2);
          return __emval_register(obj);
      } */
      var argsList = "";
      for(var i = 0; i < argCount; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i; // 'arg0, arg1, ..., argn'
      }
  
      var functionBody =
          "return function emval_allocator_"+argCount+"(constructor, argTypes, args) {\n";
  
      for(var i = 0; i < argCount; ++i) {
          functionBody +=
              "var argType"+i+" = requireRegisteredType(HEAP32[(argTypes >> 2) + "+i+"], \"parameter "+i+"\");\n" +
              "var arg"+i+" = argType"+i+".readValueFromPointer(args);\n" +
              "args += argType"+i+"['argPackAdvance'];\n";
      }
      functionBody +=
          "var obj = new constructor("+argsList+");\n" +
          "return __emval_register(obj);\n" +
          "}\n";
  
      /*jshint evil:true*/
      return (new Function("requireRegisteredType", "HEAP32", "__emval_register", functionBody))(
          requireRegisteredType, HEAP32, __emval_register);
    }
  
  var emval_newers={};function __emval_new(handle, argCount, argTypes, args) {
      handle = requireHandle(handle);
  
      var newer = emval_newers[argCount];
      if (!newer) {
          newer = craftEmvalAllocator(argCount);
          emval_newers[argCount] = newer;
      }
  
      return newer(handle, argTypes, args);
    }

  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      // Clear state flag.
      Module['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  
  
  var awaitingDependencies={};
  
  var typeDependencies={};
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by enlargeMemory().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Uint8ClampedArray) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

   

  function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }

  var _emscripten_asm_const_int=true;

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  
  var PTHREAD_SPECIFIC={};
  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _glClear(x0) { GLctx['clear'](x0) }

  function __emval_take_value(type, argv) {
      type = requireRegisteredType(type, '_emval_take_value');
      var v = type['readValueFromPointer'](argv);
      return __emval_register(v);
    }

  function _glDepthMask(flag) {
      GLctx.depthMask(!!flag);
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function _glUniform2fv(location, count, value) {
  
  
      var view;
      if (2*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[2*count-1];
        for (var i = 0; i < 2*count; i += 2) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(GL.uniforms[location], view);
    }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

   

  function _glBufferData(target, size, data, usage) {
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  
  var JSEvents={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,lastGamepadState:null,lastGamepadStateFrame:null,numGamepadsConnected:0,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:false,staticInit:function () {
        if (typeof window !== 'undefined') {
          window.addEventListener("gamepadconnected", function() { ++JSEvents.numGamepadsConnected; });
          window.addEventListener("gamepaddisconnected", function() { --JSEvents.numGamepadsConnected; });
          
          // Chromium does not fire the gamepadconnected event on reload, so we need to get the number of gamepads here as a workaround.
          // See https://bugs.chromium.org/p/chromium/issues/detail?id=502824
          var firstState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : null);
          if (firstState) {
            JSEvents.numGamepadsConnected = firstState.length;
          }
        }
      },registerRemoveEventListeners:function () {
        if (!JSEvents.removeEventListenersRegistered) {
        __ATEXIT__.push(function() {
            for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
              JSEvents._removeHandler(i);
            }
           });
          JSEvents.removeEventListenersRegistered = true;
        }
      },findEventTarget:function (target) {
        if (target) {
          if (typeof target == "number") {
            target = Pointer_stringify(target);
          }
          if (target == '#window') return window;
          else if (target == '#document') return document;
          else if (target == '#screen') return window.screen;
          else if (target == '#canvas') return Module['canvas'];
  
          if (typeof target == 'string') return document.getElementById(target);
          else return target;
        } else {
          // The sensible target varies between events, but use window as the default
          // since DOM events mostly can default to that. Specific callback registrations
          // override their own defaults.
          return window;
        }
      },deferredCalls:[],deferCall:function (targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function (targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function () {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function () {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(this, call.argsList);
        }
      },inEventHandler:0,currentEventHandler:null,eventHandlers:[],isInternetExplorer:function () { return navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0; },removeAllHandlersOnTarget:function (target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function (i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function (eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        }
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },registerKeyEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.keyEvent) {
          JSEvents.keyEvent = _malloc( 164 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
          stringToUTF8(e.key ? e.key : "", JSEvents.keyEvent + 0, 32);
          stringToUTF8(e.code ? e.code : "", JSEvents.keyEvent + 32, 32);
          HEAP32[(((JSEvents.keyEvent)+(64))>>2)]=e.location;
          HEAP32[(((JSEvents.keyEvent)+(68))>>2)]=e.ctrlKey;
          HEAP32[(((JSEvents.keyEvent)+(72))>>2)]=e.shiftKey;
          HEAP32[(((JSEvents.keyEvent)+(76))>>2)]=e.altKey;
          HEAP32[(((JSEvents.keyEvent)+(80))>>2)]=e.metaKey;
          HEAP32[(((JSEvents.keyEvent)+(84))>>2)]=e.repeat;
          stringToUTF8(e.locale ? e.locale : "", JSEvents.keyEvent + 88, 32);
          stringToUTF8(e.char ? e.char : "", JSEvents.keyEvent + 120, 32);
          HEAP32[(((JSEvents.keyEvent)+(152))>>2)]=e.charCode;
          HEAP32[(((JSEvents.keyEvent)+(156))>>2)]=e.keyCode;
          HEAP32[(((JSEvents.keyEvent)+(160))>>2)]=e.which;
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.keyEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: JSEvents.isInternetExplorer() ? false : true, // MSIE doesn't allow fullscreen and pointerlock requests from key handlers, others do.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getBoundingClientRectOrZeros:function (target) {
        return target.getBoundingClientRect ? target.getBoundingClientRect() : { left: 0, top: 0 };
      },fillMouseEventData:function (eventStruct, e, target) {
        HEAPF64[((eventStruct)>>3)]=JSEvents.tick();
        HEAP32[(((eventStruct)+(8))>>2)]=e.screenX;
        HEAP32[(((eventStruct)+(12))>>2)]=e.screenY;
        HEAP32[(((eventStruct)+(16))>>2)]=e.clientX;
        HEAP32[(((eventStruct)+(20))>>2)]=e.clientY;
        HEAP32[(((eventStruct)+(24))>>2)]=e.ctrlKey;
        HEAP32[(((eventStruct)+(28))>>2)]=e.shiftKey;
        HEAP32[(((eventStruct)+(32))>>2)]=e.altKey;
        HEAP32[(((eventStruct)+(36))>>2)]=e.metaKey;
        HEAP16[(((eventStruct)+(40))>>1)]=e.button;
        HEAP16[(((eventStruct)+(42))>>1)]=e.buttons;
        HEAP32[(((eventStruct)+(44))>>2)]=e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || (e.screenX-JSEvents.previousScreenX);
        HEAP32[(((eventStruct)+(48))>>2)]=e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || (e.screenY-JSEvents.previousScreenY);
  
        if (Module['canvas']) {
          var rect = Module['canvas'].getBoundingClientRect();
          HEAP32[(((eventStruct)+(60))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(64))>>2)]=e.clientY - rect.top;
        } else { // Canvas is not initialized, return 0.
          HEAP32[(((eventStruct)+(60))>>2)]=0;
          HEAP32[(((eventStruct)+(64))>>2)]=0;
        }
        if (target) {
          var rect = JSEvents.getBoundingClientRectOrZeros(target);
          HEAP32[(((eventStruct)+(52))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(56))>>2)]=e.clientY - rect.top;        
        } else { // No specific target passed, return 0.
          HEAP32[(((eventStruct)+(52))>>2)]=0;
          HEAP32[(((eventStruct)+(56))>>2)]=0;
        }
        // wheel and mousewheel events contain wrong screenX/screenY on chrome/opera
        // https://github.com/kripken/emscripten/pull/4997
        // https://bugs.chromium.org/p/chromium/issues/detail?id=699956
        if (e.type !== 'wheel' && e.type !== 'mousewheel') {
          JSEvents.previousScreenX = e.screenX;
          JSEvents.previousScreenY = e.screenY;
        }
      },registerMouseEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.mouseEvent) {
          JSEvents.mouseEvent = _malloc( 72 );
        }
        target = JSEvents.findEventTarget(target);
        var handlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.mouseEvent, e, target);
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.mouseEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        // In IE, mousedown events don't either allow deferred calls to be run!
        if (JSEvents.isInternetExplorer() && eventTypeString == 'mousedown') eventHandler.allowsDeferredCalls = false;
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWheelEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.wheelEvent) {
          JSEvents.wheelEvent = _malloc( 104 );
        }
        target = JSEvents.findEventTarget(target);
        // The DOM Level 3 events spec event 'wheel'
        var wheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["deltaX"];
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=e["deltaY"];
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=e["deltaZ"];
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=e["deltaMode"];
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.wheelEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
        // The 'mousewheel' event as implemented in Safari 6.0.5
        var mouseWheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["wheelDeltaX"] || 0;
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=-(e["wheelDeltaY"] ? e["wheelDeltaY"] : e["wheelDelta"]) /* 1. Invert to unify direction with the DOM Level 3 wheel event. 2. MSIE does not provide wheelDeltaY, so wheelDelta is used as a fallback. */;
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=0 /* Not available */;
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=0 /* DOM_DELTA_PIXEL */;
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.wheelEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: (eventTypeString == 'wheel') ? wheelHandlerFunc : mouseWheelHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },pageScrollPos:function () {
        if (window.pageXOffset > 0 || window.pageYOffset > 0) {
          return [window.pageXOffset, window.pageYOffset];
        }
        if (typeof document.documentElement.scrollLeft !== 'undefined' || typeof document.documentElement.scrollTop !== 'undefined') {
          return [document.documentElement.scrollLeft, document.documentElement.scrollTop];
        }
        return [document.body.scrollLeft|0, document.body.scrollTop|0];
      },registerUiEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.uiEvent) {
          JSEvents.uiEvent = _malloc( 36 );
        }
  
        if (eventTypeString == "scroll" && !target) {
          target = document; // By default read scroll events on document rather than window.
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
          if (e.target != target) {
            // Never take ui events such as scroll via a 'bubbled' route, but always from the direct element that
            // was targeted. Otherwise e.g. if app logs a message in response to a page scroll, the Emscripten log
            // message box could cause to scroll, generating a new (bubbled) scroll message, causing a new log print,
            // causing a new scroll, etc..
            return;
          }
          var scrollPos = JSEvents.pageScrollPos();
          HEAP32[((JSEvents.uiEvent)>>2)]=e.detail;
          HEAP32[(((JSEvents.uiEvent)+(4))>>2)]=document.body.clientWidth;
          HEAP32[(((JSEvents.uiEvent)+(8))>>2)]=document.body.clientHeight;
          HEAP32[(((JSEvents.uiEvent)+(12))>>2)]=window.innerWidth;
          HEAP32[(((JSEvents.uiEvent)+(16))>>2)]=window.innerHeight;
          HEAP32[(((JSEvents.uiEvent)+(20))>>2)]=window.outerWidth;
          HEAP32[(((JSEvents.uiEvent)+(24))>>2)]=window.outerHeight;
          HEAP32[(((JSEvents.uiEvent)+(28))>>2)]=scrollPos[0];
          HEAP32[(((JSEvents.uiEvent)+(32))>>2)]=scrollPos[1];
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.uiEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false, // Neither scroll or resize events allow running requests inside them.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getNodeNameForTarget:function (target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == window.screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },registerFocusEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.focusEvent) {
          JSEvents.focusEvent = _malloc( 256 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var nodeName = JSEvents.getNodeNameForTarget(e.target);
          var id = e.target.id ? e.target.id : '';
          stringToUTF8(nodeName, JSEvents.focusEvent + 0, 128);
          stringToUTF8(id, JSEvents.focusEvent + 128, 128);
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.focusEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },tick:function () {
        if (window['performance'] && window['performance']['now']) return window['performance']['now']();
        else return Date.now();
      },registerDeviceOrientationEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceOrientationEvent) {
          JSEvents.deviceOrientationEvent = _malloc( 40 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceOrientationEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(8))>>3)]=e.alpha;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(16))>>3)]=e.beta;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(24))>>3)]=e.gamma;
          HEAP32[(((JSEvents.deviceOrientationEvent)+(32))>>2)]=e.absolute;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.deviceOrientationEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerDeviceMotionEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceMotionEvent) {
          JSEvents.deviceMotionEvent = _malloc( 80 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceMotionEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceMotionEvent)+(8))>>3)]=e.acceleration.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(16))>>3)]=e.acceleration.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(24))>>3)]=e.acceleration.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(32))>>3)]=e.accelerationIncludingGravity.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(40))>>3)]=e.accelerationIncludingGravity.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(48))>>3)]=e.accelerationIncludingGravity.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(56))>>3)]=e.rotationRate.alpha;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(64))>>3)]=e.rotationRate.beta;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(72))>>3)]=e.rotationRate.gamma;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.deviceMotionEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },screenOrientation:function () {
        if (!window.screen) return undefined;
        return window.screen.orientation || window.screen.mozOrientation || window.screen.webkitOrientation || window.screen.msOrientation;
      },fillOrientationChangeEventData:function (eventStruct, e) {
        var orientations  = ["portrait-primary", "portrait-secondary", "landscape-primary", "landscape-secondary"];
        var orientations2 = ["portrait",         "portrait",           "landscape",         "landscape"];
  
        var orientationString = JSEvents.screenOrientation();
        var orientation = orientations.indexOf(orientationString);
        if (orientation == -1) {
          orientation = orientations2.indexOf(orientationString);
        }
  
        HEAP32[((eventStruct)>>2)]=1 << orientation;
        HEAP32[(((eventStruct)+(4))>>2)]=window.orientation;
      },registerOrientationChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.orientationChangeEvent) {
          JSEvents.orientationChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = window.screen; // Orientation events need to be captured from 'window.screen' instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillOrientationChangeEventData(JSEvents.orientationChangeEvent, e);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.orientationChangeEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        if (eventTypeString == "orientationchange" && window.screen.mozOrientation !== undefined) {
          eventTypeString = "mozorientationchange";
        }
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fullscreenEnabled:function () {
        return document.fullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
      },fillFullscreenChangeEventData:function (eventStruct, e) {
        var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
        var isFullscreen = !!fullscreenElement;
        HEAP32[((eventStruct)>>2)]=isFullscreen;
        HEAP32[(((eventStruct)+(4))>>2)]=JSEvents.fullscreenEnabled();
        // If transitioning to fullscreen, report info about the element that is now fullscreen.
        // If transitioning to windowed mode, report info about the element that just was fullscreen.
        var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
        var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
        var id = (reportedElement && reportedElement.id) ? reportedElement.id : '';
        stringToUTF8(nodeName, eventStruct + 8, 128);
        stringToUTF8(id, eventStruct + 136, 128);
        HEAP32[(((eventStruct)+(264))>>2)]=reportedElement ? reportedElement.clientWidth : 0;
        HEAP32[(((eventStruct)+(268))>>2)]=reportedElement ? reportedElement.clientHeight : 0;
        HEAP32[(((eventStruct)+(272))>>2)]=screen.width;
        HEAP32[(((eventStruct)+(276))>>2)]=screen.height;
        if (isFullscreen) {
          JSEvents.previousFullscreenElement = fullscreenElement;
        }
      },registerFullscreenChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.fullscreenChangeEvent) {
          JSEvents.fullscreenChangeEvent = _malloc( 280 );
        }
  
        if (!target) {
          target = document; // Fullscreen change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillFullscreenChangeEventData(JSEvents.fullscreenChangeEvent, e);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.fullscreenChangeEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },resizeCanvasForFullscreen:function (target, strategy) {
        var restoreOldStyle = __registerRestoreOldStyle(target);
        var cssWidth = strategy.softFullscreen ? window.innerWidth : screen.width;
        var cssHeight = strategy.softFullscreen ? window.innerHeight : screen.height;
        var rect = target.getBoundingClientRect();
        var windowedCssWidth = rect.right - rect.left;
        var windowedCssHeight = rect.bottom - rect.top;
        var windowedRttWidth = target.width;
        var windowedRttHeight = target.height;
  
        if (strategy.scaleMode == 3) {
          __setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
          cssWidth = windowedCssWidth;
          cssHeight = windowedCssHeight;
        } else if (strategy.scaleMode == 2) {
          if (cssWidth*windowedRttHeight < windowedRttWidth*cssHeight) {
            var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
            __setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
            cssHeight = desiredCssHeight;
          } else {
            var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
            __setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
            cssWidth = desiredCssWidth;
          }
        }
  
        // If we are adding padding, must choose a background color or otherwise Chrome will give the
        // padding a default white color. Do it only if user has not customized their own background color.
        if (!target.style.backgroundColor) target.style.backgroundColor = 'black';
        // IE11 does the same, but requires the color to be set in the document body.
        if (!document.body.style.backgroundColor) document.body.style.backgroundColor = 'black'; // IE11
        // Firefox always shows black letterboxes independent of style color.
  
        target.style.width = cssWidth + 'px';
        target.style.height = cssHeight + 'px';
  
        if (strategy.filteringMode == 1) {
          target.style.imageRendering = 'optimizeSpeed';
          target.style.imageRendering = '-moz-crisp-edges';
          target.style.imageRendering = '-o-crisp-edges';
          target.style.imageRendering = '-webkit-optimize-contrast';
          target.style.imageRendering = 'optimize-contrast';
          target.style.imageRendering = 'crisp-edges';
          target.style.imageRendering = 'pixelated';
        }
  
        var dpiScale = (strategy.canvasResolutionScaleMode == 2) ? window.devicePixelRatio : 1;
        if (strategy.canvasResolutionScaleMode != 0) {
          target.width = cssWidth * dpiScale;
          target.height = cssHeight * dpiScale;
          if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, target.width, target.height);
        }
        return restoreOldStyle;
      },requestFullscreen:function (target, strategy) {
        // EMSCRIPTEN_FULLSCREEN_SCALE_DEFAULT + EMSCRIPTEN_FULLSCREEN_CANVAS_SCALE_NONE is a mode where no extra logic is performed to the DOM elements.
        if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
          JSEvents.resizeCanvasForFullscreen(target, strategy);
        }
  
        if (target.requestFullscreen) {
          target.requestFullscreen();
        } else if (target.msRequestFullscreen) {
          target.msRequestFullscreen();
        } else if (target.mozRequestFullScreen) {
          target.mozRequestFullScreen();
        } else if (target.mozRequestFullscreen) {
          target.mozRequestFullscreen();
        } else if (target.webkitRequestFullscreen) {
          target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
        } else {
          if (typeof JSEvents.fullscreenEnabled() === 'undefined') {
            return -1;
          } else {
            return -3;
          }
        }
  
        if (strategy.canvasResizedCallback) {
          Module['dynCall_iiii'](strategy.canvasResizedCallback, 37, 0, strategy.canvasResizedCallbackUserData);
        }
  
        return 0;
      },fillPointerlockChangeEventData:function (eventStruct, e) {
        var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
        var isPointerlocked = !!pointerLockElement;
        HEAP32[((eventStruct)>>2)]=isPointerlocked;
        var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
        var id = (pointerLockElement && pointerLockElement.id) ? pointerLockElement.id : '';
        stringToUTF8(nodeName, eventStruct + 4, 128);
        stringToUTF8(id, eventStruct + 132, 128);
      },registerPointerlockChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.pointerlockChangeEvent) {
          JSEvents.pointerlockChangeEvent = _malloc( 260 );
        }
  
        if (!target) {
          target = document; // Pointer lock change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillPointerlockChangeEventData(JSEvents.pointerlockChangeEvent, e);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.pointerlockChangeEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerPointerlockErrorEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!target) {
          target = document; // Pointer lock events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, 0, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },requestPointerLock:function (target) {
        if (target.requestPointerLock) {
          target.requestPointerLock();
        } else if (target.mozRequestPointerLock) {
          target.mozRequestPointerLock();
        } else if (target.webkitRequestPointerLock) {
          target.webkitRequestPointerLock();
        } else if (target.msRequestPointerLock) {
          target.msRequestPointerLock();
        } else {
          // document.body is known to accept pointer lock, so use that to differentiate if the user passed a bad element,
          // or if the whole browser just doesn't support the feature.
          if (document.body.requestPointerLock || document.body.mozRequestPointerLock || document.body.webkitRequestPointerLock || document.body.msRequestPointerLock) {
            return -3;
          } else {
            return -1;
          }
        }
        return 0;
      },fillVisibilityChangeEventData:function (eventStruct, e) {
        var visibilityStates = [ "hidden", "visible", "prerender", "unloaded" ];
        var visibilityState = visibilityStates.indexOf(document.visibilityState);
  
        HEAP32[((eventStruct)>>2)]=document.hidden;
        HEAP32[(((eventStruct)+(4))>>2)]=visibilityState;
      },registerVisibilityChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.visibilityChangeEvent) {
          JSEvents.visibilityChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = document; // Visibility change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillVisibilityChangeEventData(JSEvents.visibilityChangeEvent, e);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.visibilityChangeEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerTouchEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.touchEvent) {
          JSEvents.touchEvent = _malloc( 1684 );
        }
  
        target = JSEvents.findEventTarget(target);
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var touches = {};
          for(var i = 0; i < e.touches.length; ++i) {
            var touch = e.touches[i];
            touches[touch.identifier] = touch;
          }
          for(var i = 0; i < e.changedTouches.length; ++i) {
            var touch = e.changedTouches[i];
            touches[touch.identifier] = touch;
            touch.changed = true;
          }
          for(var i = 0; i < e.targetTouches.length; ++i) {
            var touch = e.targetTouches[i];
            touches[touch.identifier].onTarget = true;
          }
          
          var ptr = JSEvents.touchEvent;
          HEAP32[(((ptr)+(4))>>2)]=e.ctrlKey;
          HEAP32[(((ptr)+(8))>>2)]=e.shiftKey;
          HEAP32[(((ptr)+(12))>>2)]=e.altKey;
          HEAP32[(((ptr)+(16))>>2)]=e.metaKey;
          ptr += 20; // Advance to the start of the touch array.
          var canvasRect = Module['canvas'] ? Module['canvas'].getBoundingClientRect() : undefined;
          var targetRect = JSEvents.getBoundingClientRectOrZeros(target);
          var numTouches = 0;
          for(var i in touches) {
            var t = touches[i];
            HEAP32[((ptr)>>2)]=t.identifier;
            HEAP32[(((ptr)+(4))>>2)]=t.screenX;
            HEAP32[(((ptr)+(8))>>2)]=t.screenY;
            HEAP32[(((ptr)+(12))>>2)]=t.clientX;
            HEAP32[(((ptr)+(16))>>2)]=t.clientY;
            HEAP32[(((ptr)+(20))>>2)]=t.pageX;
            HEAP32[(((ptr)+(24))>>2)]=t.pageY;
            HEAP32[(((ptr)+(28))>>2)]=t.changed;
            HEAP32[(((ptr)+(32))>>2)]=t.onTarget;
            if (canvasRect) {
              HEAP32[(((ptr)+(44))>>2)]=t.clientX - canvasRect.left;
              HEAP32[(((ptr)+(48))>>2)]=t.clientY - canvasRect.top;
            } else {
              HEAP32[(((ptr)+(44))>>2)]=0;
              HEAP32[(((ptr)+(48))>>2)]=0;            
            }
            HEAP32[(((ptr)+(36))>>2)]=t.clientX - targetRect.left;
            HEAP32[(((ptr)+(40))>>2)]=t.clientY - targetRect.top;
            
            ptr += 52;
  
            if (++numTouches >= 32) {
              break;
            }
          }
          HEAP32[((JSEvents.touchEvent)>>2)]=numTouches;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.touchEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: eventTypeString == 'touchstart' || eventTypeString == 'touchend',
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fillGamepadEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.timestamp;
        for(var i = 0; i < e.axes.length; ++i) {
          HEAPF64[(((eventStruct+i*8)+(16))>>3)]=e.axes[i];
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i].value;
          } else {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i];
          }
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i].pressed;
          } else {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i] == 1.0;
          }
        }
        HEAP32[(((eventStruct)+(1296))>>2)]=e.connected;
        HEAP32[(((eventStruct)+(1300))>>2)]=e.index;
        HEAP32[(((eventStruct)+(8))>>2)]=e.axes.length;
        HEAP32[(((eventStruct)+(12))>>2)]=e.buttons.length;
        stringToUTF8(e.id, eventStruct + 1304, 64);
        stringToUTF8(e.mapping, eventStruct + 1368, 64);
      },registerGamepadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.gamepadEvent) {
          JSEvents.gamepadEvent = _malloc( 1432 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillGamepadEventData(JSEvents.gamepadEvent, e.gamepad);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.gamepadEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerBeforeUnloadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var confirmationMessage = Module['dynCall_iiii'](callbackfunc, eventTypeId, 0, userData);
          
          if (confirmationMessage) {
            confirmationMessage = Pointer_stringify(confirmationMessage);
          }
          if (confirmationMessage) {
            e.preventDefault();
            e.returnValue = confirmationMessage;
            return confirmationMessage;
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },battery:function () { return navigator.battery || navigator.mozBattery || navigator.webkitBattery; },fillBatteryEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.chargingTime;
        HEAPF64[(((eventStruct)+(8))>>3)]=e.dischargingTime;
        HEAPF64[(((eventStruct)+(16))>>3)]=e.level;
        HEAP32[(((eventStruct)+(24))>>2)]=e.charging;
      },registerBatteryEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.batteryEvent) {
          JSEvents.batteryEvent = _malloc( 32 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillBatteryEventData(JSEvents.batteryEvent, JSEvents.battery());
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.batteryEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWebGlEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!target) {
          target = Module['canvas'];
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, 0, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      }};function _emscripten_webgl_create_context(target, attributes) {
      var contextAttributes = {};
      contextAttributes['alpha'] = !!HEAP32[((attributes)>>2)];
      contextAttributes['depth'] = !!HEAP32[(((attributes)+(4))>>2)];
      contextAttributes['stencil'] = !!HEAP32[(((attributes)+(8))>>2)];
      contextAttributes['antialias'] = !!HEAP32[(((attributes)+(12))>>2)];
      contextAttributes['premultipliedAlpha'] = !!HEAP32[(((attributes)+(16))>>2)];
      contextAttributes['preserveDrawingBuffer'] = !!HEAP32[(((attributes)+(20))>>2)];
      contextAttributes['preferLowPowerToHighPerformance'] = !!HEAP32[(((attributes)+(24))>>2)];
      contextAttributes['failIfMajorPerformanceCaveat'] = !!HEAP32[(((attributes)+(28))>>2)];
      contextAttributes['majorVersion'] = HEAP32[(((attributes)+(32))>>2)];
      contextAttributes['minorVersion'] = HEAP32[(((attributes)+(36))>>2)];
      var enableExtensionsByDefault = HEAP32[(((attributes)+(40))>>2)];
      contextAttributes['explicitSwapControl'] = HEAP32[(((attributes)+(44))>>2)];
  
      target = Pointer_stringify(target);
      var canvas;
      if ((!target || target === '#canvas') && Module['canvas']) {
        canvas = Module['canvas'].id ? (GL.offscreenCanvases[Module['canvas'].id] || JSEvents.findEventTarget(Module['canvas'].id)) : Module['canvas'];
      } else {
        canvas = GL.offscreenCanvases[target] || JSEvents.findEventTarget(target);
      }
      if (!canvas) {
        return 0;
      }
      if (contextAttributes['explicitSwapControl']) {
        console.error('emscripten_webgl_create_context failed: explicitSwapControl is not supported, please rebuild with -s OFFSCREENCANVAS_SUPPORT=1 to enable targeting the experimental OffscreenCanvas specification!');
        return 0;
      }
  
      var contextHandle = GL.createContext(canvas, contextAttributes);
      return contextHandle;
    }

  
  function __emval_allocateDestructors(destructorsRef) {
      var destructors = [];
      HEAP32[destructorsRef >> 2] = __emval_register(destructors);
      return destructors;
    }function __emval_call_void_method(caller, handle, methodName, args) {
      caller = emval_methodCallers[caller];
      handle = requireHandle(handle);
      methodName = getStringOrSymbol(methodName);
      caller(handle, methodName, null, args);
    }

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_find_matching_catch_3() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function __emval_run_destructors(handle) {
      var destructors = emval_handle_array[handle].value;
      runDestructors(destructors);
      __emval_decref(handle);
    }

  
    

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _glGenFramebuffers(n, ids) {
      for (var i = 0; i < n; ++i) {
        var framebuffer = GLctx.createFramebuffer();
        if (!framebuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((ids)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.framebuffers);
        framebuffer.name = id;
        GL.framebuffers[id] = framebuffer;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

  
  function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch(name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type !== 'Integer' && type !== 'Integer64') {
            GL.recordError(0x0500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats.length;
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof(result)) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch(name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x0500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                  case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                  default: throw 'internal glGet error, bad type: ' + type;
                }
              }
              return;
            } else if (result instanceof WebGLBuffer ||
                       result instanceof WebGLProgram ||
                       result instanceof WebGLFramebuffer ||
                       result instanceof WebGLRenderbuffer ||
                       result instanceof WebGLTexture) {
              ret = result.name | 0;
            } else {
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            }
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
        }
      }
  
      switch (type) {
        case 'Integer64': (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((p)>>2)]=tempI64[0],HEAP32[(((p)+(4))>>2)]=tempI64[1]);    break;
        case 'Integer': HEAP32[((p)>>2)]=ret;    break;
        case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
        case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
        default: throw 'internal glGet error, bad type: ' + type;
      }
    }function _glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Integer');
    }

   

   

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function ___gxx_personality_v0() {
    }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function _glUniform1f(location, v0) {
      GLctx.uniform1f(GL.uniforms[location], v0);
    }

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

   

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }


  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function __emval_incref(handle) {
      if (handle > 4) {
          emval_handle_array[handle].refcount += 1;
      }
    }

  function _glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexSubImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  function emscriptenWebGLComputeImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return Math.floor((x + y - 1) / y) * y
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return (height <= 0) ? 0 :
               ((height - 1) * alignedRowSize + plainRowSize);
    }function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel;
      var numChannels;
      switch(format) {
        case 0x1906 /* GL_ALPHA */:
        case 0x1909 /* GL_LUMINANCE */:
        case 0x1902 /* GL_DEPTH_COMPONENT */:
          numChannels = 1;
          break;
        case 0x190A /* GL_LUMINANCE_ALPHA */:
          numChannels = 2;
          break;
        case 0x1907 /* GL_RGB */:
        case 0x8C40 /* GL_SRGB_EXT */:
          numChannels = 3;
          break;
        case 0x1908 /* GL_RGBA */:
        case 0x8C42 /* GL_SRGB_ALPHA_EXT */:
          numChannels = 4;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
      switch (type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          sizePerPixel = numChannels*1;
          break;
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          sizePerPixel = numChannels*2;
          break;
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x1406 /* GL_FLOAT */:
          sizePerPixel = numChannels*4;
          break;
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          sizePerPixel = 4;
          break;
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
          sizePerPixel = 2;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
      var bytes = emscriptenWebGLComputeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      switch(type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8.subarray((pixels),(pixels+bytes));
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          return HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          return HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
    }function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
  
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }

  function _glDisable(x0) { GLctx['disable'](x0) }

  function _glUniform2f(location, v0, v1) {
      GLctx.uniform2f(GL.uniforms[location], v0, v1);
    }

   

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          var program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          var program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, GLctx.ACTIVE_UNIFORM_BLOCKS);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

   

  function _abort() {
      Module['abort']();
    }

  function __emval_as(handle, returnType, destructorsRef) {
      handle = requireHandle(handle);
      returnType = requireRegisteredType(returnType, 'emval::as');
      var destructors = [];
      var rd = __emval_register(destructors);
      HEAP32[destructorsRef >> 2] = rd;
      return returnType['toWireType'](destructors, handle);
    }

  function __emval_call_method(caller, handle, methodName, destructorsRef, args) {
      caller = emval_methodCallers[caller];
      handle = requireHandle(handle);
      methodName = getStringOrSymbol(methodName);
      return caller(handle, methodName, __emval_allocateDestructors(destructorsRef), args);
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }


  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
    }

  function ___lock() {}

  function ___unlock() {}

  function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  function _glEnable(x0) { GLctx['enable'](x0) }

  function _glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  
  function emval_get_global() { return (function(){return Function;})()('return this')(); }function __emval_get_global(name) {
      if(name===0){
        return __emval_register(emval_get_global());
      } else {
        name = getStringOrSymbol(name);
        return __emval_register(emval_get_global()[name]);
      }
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
      
      var fromWireType = function(value) {
          return value;
      };
      
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function _glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function __emval_set_property(handle, key, value) {
      handle = requireHandle(handle);
      key = requireHandle(key);
      value = requireHandle(value);
      handle[key] = value;
    }

  function _glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function _glCheckFramebufferStatus(x0) { return GLctx['checkFramebufferStatus'](x0) }

  var _llvm_ctlz_i32=true;

  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              window.postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else window.postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }

  function _glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  
  function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = Module["asm"]['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = Module["asm"]['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
      
      rawInvoker = requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _emscripten_webgl_init_context_attributes(attributes) {
      HEAP32[((attributes)>>2)]=1;
      HEAP32[(((attributes)+(4))>>2)]=1;
      HEAP32[(((attributes)+(8))>>2)]=0;
      HEAP32[(((attributes)+(12))>>2)]=1;
      HEAP32[(((attributes)+(16))>>2)]=1;
      HEAP32[(((attributes)+(20))>>2)]=0;
      HEAP32[(((attributes)+(24))>>2)]=0;
      HEAP32[(((attributes)+(28))>>2)]=0;
      HEAP32[(((attributes)+(32))>>2)]=1;
      HEAP32[(((attributes)+(36))>>2)]=0;
      HEAP32[(((attributes)+(40))>>2)]=1;
      HEAP32[(((attributes)+(44))>>2)]=0;
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function __emval_get_property(handle, key) {
      handle = requireHandle(handle);
      key = requireHandle(key);
      return __emval_register(handle[key]);
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
  
  
      var view;
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   

  function _glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _glTexParameterf(x0, x1, x2) { GLctx['texParameterf'](x0, x1, x2) }

  function _glGetError() {
      // First return any GL error generated by the emscripten library_gl.js interop layer.
      if (GL.lastError) {
        var error = GL.lastError;
        GL.lastError = 0/*GL_NO_ERROR*/;
        return error;
      } else { // If there were none, return the GL error from the browser GL context.
        return GLctx.getError();
      }
    }

  function _glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _emscripten_webgl_make_context_current(contextHandle) {
      var success = GL.makeContextCurrent(contextHandle);
      return success ? 0 : -5;
    }

  function _glScissor(x0, x1, x2, x3) { GLctx['scissor'](x0, x1, x2, x3) }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _glGenerateMipmap(x0) { GLctx['generateMipmap'](x0) }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var ___dso_handle=STATICTOP; STATICTOP += 16;;
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
init_emval();;
var GLctx; GL.init();
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
JSEvents.staticInit();;
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");


function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiidid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiidid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiidii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiidii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ddddd(x) { Module["printErr"]("Invalid function pointer called with signature 'ddddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiidd(x) { Module["printErr"]("Invalid function pointer called with signature 'viiidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viddi(x) { Module["printErr"]("Invalid function pointer called with signature 'viddi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiidd(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iid(x) { Module["printErr"]("Invalid function pointer called with signature 'iid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiddd(x) { Module["printErr"]("Invalid function pointer called with signature 'viiddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dii(x) { Module["printErr"]("Invalid function pointer called with signature 'dii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_d(x) { Module["printErr"]("Invalid function pointer called with signature 'd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_did(x) { Module["printErr"]("Invalid function pointer called with signature 'did'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viid(x) { Module["printErr"]("Invalid function pointer called with signature 'viid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiidid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiidid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiidii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiidii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ddddd(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_ddddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    Module["dynCall_viiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiidd(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiidd"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viddi(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viddi"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vidd(index,a1,a2,a3) {
  try {
    Module["dynCall_vidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiidd(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiidd"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vidddd(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_vidddd"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iid(index,a1,a2) {
  try {
    return Module["dynCall_iid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiddd(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiddd"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_dii(index,a1,a2) {
  try {
    return Module["dynCall_dii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_d(index) {
  try {
    return Module["dynCall_d"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_did(index,a1,a2) {
  try {
    return Module["dynCall_did"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiid(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiid"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vid": nullFunc_vid, "nullFunc_viiidid": nullFunc_viiidid, "nullFunc_vi": nullFunc_vi, "nullFunc_viiidii": nullFunc_viiidii, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_ddddd": nullFunc_ddddd, "nullFunc_viiiiiiiiiii": nullFunc_viiiiiiiiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_viiidd": nullFunc_viiidd, "nullFunc_viddi": nullFunc_viddi, "nullFunc_vidd": nullFunc_vidd, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_diii": nullFunc_diii, "nullFunc_viiiiidd": nullFunc_viiiiidd, "nullFunc_di": nullFunc_di, "nullFunc_vidddd": nullFunc_vidddd, "nullFunc_iid": nullFunc_iid, "nullFunc_viiddd": nullFunc_viiddd, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_dii": nullFunc_dii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_d": nullFunc_d, "nullFunc_did": nullFunc_did, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_i": nullFunc_i, "nullFunc_viiid": nullFunc_viiid, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_viid": nullFunc_viid, "nullFunc_viiii": nullFunc_viiii, "invoke_viiiii": invoke_viiiii, "invoke_vid": invoke_vid, "invoke_viiidid": invoke_viiidid, "invoke_vi": invoke_vi, "invoke_viiidii": invoke_viiidii, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_ddddd": invoke_ddddd, "invoke_viiiiiiiiiii": invoke_viiiiiiiiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiidd": invoke_viiidd, "invoke_viddi": invoke_viddi, "invoke_vidd": invoke_vidd, "invoke_iiii": invoke_iiii, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_diii": invoke_diii, "invoke_viiiiidd": invoke_viiiiidd, "invoke_di": invoke_di, "invoke_vidddd": invoke_vidddd, "invoke_iid": invoke_iid, "invoke_viiddd": invoke_viiddd, "invoke_viiiiiii": invoke_viiiiiii, "invoke_iii": invoke_iii, "invoke_dii": invoke_dii, "invoke_viiiiii": invoke_viiiiii, "invoke_d": invoke_d, "invoke_did": invoke_did, "invoke_iiiii": invoke_iiiii, "invoke_i": invoke_i, "invoke_viiid": invoke_viiid, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_viid": invoke_viid, "invoke_viiii": invoke_viiii, "_glUseProgram": _glUseProgram, "___syscall221": ___syscall221, "floatReadValueFromPointer": floatReadValueFromPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "__emval_call_void_method": __emval_call_void_method, "throwInternalError": throwInternalError, "get_first_emval": get_first_emval, "_glUniformMatrix4fv": _glUniformMatrix4fv, "_glUniform2fv": _glUniform2fv, "___assert_fail": ___assert_fail, "_glDeleteProgram": _glDeleteProgram, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "getShiftFromSize": getShiftFromSize, "_glBindBuffer": _glBindBuffer, "_glGetShaderInfoLog": _glGetShaderInfoLog, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_glBlendFunc": _glBlendFunc, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "__emval_get_property": __emval_get_property, "__emval_get_global": __emval_get_global, "emscriptenWebGLComputeImageSize": emscriptenWebGLComputeImageSize, "_glUniform4f": _glUniform4f, "getStringOrSymbol": getStringOrSymbol, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "_emscripten_webgl_make_context_current": _emscripten_webgl_make_context_current, "_glGenBuffers": _glGenBuffers, "_glShaderSource": _glShaderSource, "___cxa_atexit": ___cxa_atexit, "__emval_allocateDestructors": __emval_allocateDestructors, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "_glGenerateMipmap": _glGenerateMipmap, "_glVertexAttribPointer": _glVertexAttribPointer, "_emscripten_asm_const_iiiii": _emscripten_asm_const_iiiii, "__embind_register_std_wstring": __embind_register_std_wstring, "craftEmvalAllocator": craftEmvalAllocator, "_glGetProgramInfoLog": _glGetProgramInfoLog, "throwBindingError": throwBindingError, "__emval_incref": __emval_incref, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_glDrawElements": _glDrawElements, "_glDepthMask": _glDepthMask, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_glViewport": _glViewport, "___setErrNo": ___setErrNo, "_glDeleteTextures": _glDeleteTextures, "__embind_register_bool": __embind_register_bool, "___resumeException": ___resumeException, "_glBufferData": _glBufferData, "createNamedFunction": createNamedFunction, "embind_init_charCodes": embind_init_charCodes, "__emval_decref": __emval_decref, "_pthread_once": _pthread_once, "_glGenTextures": _glGenTextures, "_glGetIntegerv": _glGetIntegerv, "_glEnable": _glEnable, "__emval_addMethodCaller": __emval_addMethodCaller, "emscriptenWebGLGet": emscriptenWebGLGet, "__emval_lookupTypes": __emval_lookupTypes, "_emscripten_get_now": _emscripten_get_now, "__emval_call_method": __emval_call_method, "__emval_run_destructors": __emval_run_destructors, "_glCreateProgram": _glCreateProgram, "___lock": ___lock, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "ensureOverloadTable": ensureOverloadTable, "__embind_register_emval": __embind_register_emval, "_time": _time, "_glBindFramebuffer": _glBindFramebuffer, "new_": new_, "_glGenFramebuffers": _glGenFramebuffers, "_glUniform2f": _glUniform2f, "replacePublicSymbol": replacePublicSymbol, "_glDeleteFramebuffers": _glDeleteFramebuffers, "___syscall54": ___syscall54, "_glCheckFramebufferStatus": _glCheckFramebufferStatus, "_emscripten_webgl_create_context": _emscripten_webgl_create_context, "heap32VectorToArray": heap32VectorToArray, "__embind_register_integer": __embind_register_integer, "___cxa_allocate_exception": ___cxa_allocate_exception, "__emval_take_value": __emval_take_value, "emval_get_global": emval_get_global, "_glClearColor": _glClearColor, "_glBindTexture": _glBindTexture, "_glUniform1f": _glUniform1f, "___cxa_end_catch": ___cxa_end_catch, "_glUniform1i": _glUniform1i, "getTypeName": getTypeName, "__emval_call": __emval_call, "_glCreateShader": _glCreateShader, "_glAttachShader": _glAttachShader, "throwUnboundTypeError": throwUnboundTypeError, "craftInvokerFunction": craftInvokerFunction, "_glBufferSubData": _glBufferSubData, "_emscripten_webgl_init_context_attributes": _emscripten_webgl_init_context_attributes, "runDestructors": runDestructors, "requireRegisteredType": requireRegisteredType, "makeLegalFunctionName": makeLegalFunctionName, "_pthread_key_create": _pthread_key_create, "__emval_set_property": __emval_set_property, "_glActiveTexture": _glActiveTexture, "init_emval": init_emval, "_emscripten_asm_const_iiiiii": _emscripten_asm_const_iiiiii, "_glCompileShader": _glCompileShader, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "__embind_register_function": __embind_register_function, "_abort": _abort, "requireHandle": requireHandle, "_embind_repr": _embind_repr, "_glTexImage2D": _glTexImage2D, "exposePublicSymbol": exposePublicSymbol, "__embind_register_std_string": __embind_register_std_string, "___cxa_pure_virtual": ___cxa_pure_virtual, "__emval_get_method_caller": __emval_get_method_caller, "_pthread_getspecific": _pthread_getspecific, "_glDeleteShader": _glDeleteShader, "_glGetProgramiv": _glGetProgramiv, "__embind_register_memory_view": __embind_register_memory_view, "_glScissor": _glScissor, "___gxx_personality_v0": ___gxx_personality_v0, "extendError": extendError, "__embind_register_void": __embind_register_void, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "_emscripten_asm_const_iddiii": _emscripten_asm_const_iddiii, "_glLinkProgram": _glLinkProgram, "_glClear": _glClear, "_glGetError": _glGetError, "_glGetShaderiv": _glGetShaderiv, "__emval_register": __emval_register, "_glGetUniformLocation": _glGetUniformLocation, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "_glBindAttribLocation": _glBindAttribLocation, "readLatin1String": readLatin1String, "__embind_register_float": __embind_register_float, "integerReadValueFromPointer": integerReadValueFromPointer, "___unlock": ___unlock, "_glFramebufferTexture2D": _glFramebufferTexture2D, "_emscripten_set_main_loop": _emscripten_set_main_loop, "__emval_new": __emval_new, "_pthread_setspecific": _pthread_setspecific, "__emval_as": __emval_as, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "registerType": registerType, "___cxa_throw": ___cxa_throw, "__emval_new_cstring": __emval_new_cstring, "_glCopyTexSubImage2D": _glCopyTexSubImage2D, "_glDisable": _glDisable, "requireFunction": requireFunction, "_glTexParameteri": _glTexParameteri, "_atexit": _atexit, "_glTexParameterf": _glTexParameterf, "count_emval_handles": count_emval_handles, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_viiidid=env.nullFunc_viiidid;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_viiidii=env.nullFunc_viiidii;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_ddddd=env.nullFunc_ddddd;
  var nullFunc_viiiiiiiiiii=env.nullFunc_viiiiiiiiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_viiidd=env.nullFunc_viiidd;
  var nullFunc_viddi=env.nullFunc_viddi;
  var nullFunc_vidd=env.nullFunc_vidd;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_viiiiidd=env.nullFunc_viiiiidd;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_vidddd=env.nullFunc_vidddd;
  var nullFunc_iid=env.nullFunc_iid;
  var nullFunc_viiddd=env.nullFunc_viiddd;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_dii=env.nullFunc_dii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_d=env.nullFunc_d;
  var nullFunc_did=env.nullFunc_did;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_viiid=env.nullFunc_viiid;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viid=env.nullFunc_viid;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vid=env.invoke_vid;
  var invoke_viiidid=env.invoke_viiidid;
  var invoke_vi=env.invoke_vi;
  var invoke_viiidii=env.invoke_viiidii;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_ddddd=env.invoke_ddddd;
  var invoke_viiiiiiiiiii=env.invoke_viiiiiiiiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiidd=env.invoke_viiidd;
  var invoke_viddi=env.invoke_viddi;
  var invoke_vidd=env.invoke_vidd;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_diii=env.invoke_diii;
  var invoke_viiiiidd=env.invoke_viiiiidd;
  var invoke_di=env.invoke_di;
  var invoke_vidddd=env.invoke_vidddd;
  var invoke_iid=env.invoke_iid;
  var invoke_viiddd=env.invoke_viiddd;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_dii=env.invoke_dii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_d=env.invoke_d;
  var invoke_did=env.invoke_did;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_i=env.invoke_i;
  var invoke_viiid=env.invoke_viiid;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_viid=env.invoke_viid;
  var invoke_viiii=env.invoke_viiii;
  var _glUseProgram=env._glUseProgram;
  var ___syscall221=env.___syscall221;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var __emval_call_void_method=env.__emval_call_void_method;
  var throwInternalError=env.throwInternalError;
  var get_first_emval=env.get_first_emval;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var _glUniform2fv=env._glUniform2fv;
  var ___assert_fail=env.___assert_fail;
  var _glDeleteProgram=env._glDeleteProgram;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var getShiftFromSize=env.getShiftFromSize;
  var _glBindBuffer=env._glBindBuffer;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _glBlendFunc=env._glBlendFunc;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var __emval_get_property=env.__emval_get_property;
  var __emval_get_global=env.__emval_get_global;
  var emscriptenWebGLComputeImageSize=env.emscriptenWebGLComputeImageSize;
  var _glUniform4f=env._glUniform4f;
  var getStringOrSymbol=env.getStringOrSymbol;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var _emscripten_webgl_make_context_current=env._emscripten_webgl_make_context_current;
  var _glGenBuffers=env._glGenBuffers;
  var _glShaderSource=env._glShaderSource;
  var ___cxa_atexit=env.___cxa_atexit;
  var __emval_allocateDestructors=env.__emval_allocateDestructors;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var _glGenerateMipmap=env._glGenerateMipmap;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _emscripten_asm_const_iiiii=env._emscripten_asm_const_iiiii;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var craftEmvalAllocator=env.craftEmvalAllocator;
  var _glGetProgramInfoLog=env._glGetProgramInfoLog;
  var throwBindingError=env.throwBindingError;
  var __emval_incref=env.__emval_incref;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _glDrawElements=env._glDrawElements;
  var _glDepthMask=env._glDepthMask;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _glViewport=env._glViewport;
  var ___setErrNo=env.___setErrNo;
  var _glDeleteTextures=env._glDeleteTextures;
  var __embind_register_bool=env.__embind_register_bool;
  var ___resumeException=env.___resumeException;
  var _glBufferData=env._glBufferData;
  var createNamedFunction=env.createNamedFunction;
  var embind_init_charCodes=env.embind_init_charCodes;
  var __emval_decref=env.__emval_decref;
  var _pthread_once=env._pthread_once;
  var _glGenTextures=env._glGenTextures;
  var _glGetIntegerv=env._glGetIntegerv;
  var _glEnable=env._glEnable;
  var __emval_addMethodCaller=env.__emval_addMethodCaller;
  var emscriptenWebGLGet=env.emscriptenWebGLGet;
  var __emval_lookupTypes=env.__emval_lookupTypes;
  var _emscripten_get_now=env._emscripten_get_now;
  var __emval_call_method=env.__emval_call_method;
  var __emval_run_destructors=env.__emval_run_destructors;
  var _glCreateProgram=env._glCreateProgram;
  var ___lock=env.___lock;
  var emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var ensureOverloadTable=env.ensureOverloadTable;
  var __embind_register_emval=env.__embind_register_emval;
  var _time=env._time;
  var _glBindFramebuffer=env._glBindFramebuffer;
  var new_=env.new_;
  var _glGenFramebuffers=env._glGenFramebuffers;
  var _glUniform2f=env._glUniform2f;
  var replacePublicSymbol=env.replacePublicSymbol;
  var _glDeleteFramebuffers=env._glDeleteFramebuffers;
  var ___syscall54=env.___syscall54;
  var _glCheckFramebufferStatus=env._glCheckFramebufferStatus;
  var _emscripten_webgl_create_context=env._emscripten_webgl_create_context;
  var heap32VectorToArray=env.heap32VectorToArray;
  var __embind_register_integer=env.__embind_register_integer;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var __emval_take_value=env.__emval_take_value;
  var emval_get_global=env.emval_get_global;
  var _glClearColor=env._glClearColor;
  var _glBindTexture=env._glBindTexture;
  var _glUniform1f=env._glUniform1f;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _glUniform1i=env._glUniform1i;
  var getTypeName=env.getTypeName;
  var __emval_call=env.__emval_call;
  var _glCreateShader=env._glCreateShader;
  var _glAttachShader=env._glAttachShader;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var craftInvokerFunction=env.craftInvokerFunction;
  var _glBufferSubData=env._glBufferSubData;
  var _emscripten_webgl_init_context_attributes=env._emscripten_webgl_init_context_attributes;
  var runDestructors=env.runDestructors;
  var requireRegisteredType=env.requireRegisteredType;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var _pthread_key_create=env._pthread_key_create;
  var __emval_set_property=env.__emval_set_property;
  var _glActiveTexture=env._glActiveTexture;
  var init_emval=env.init_emval;
  var _emscripten_asm_const_iiiiii=env._emscripten_asm_const_iiiiii;
  var _glCompileShader=env._glCompileShader;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var __embind_register_function=env.__embind_register_function;
  var _abort=env._abort;
  var requireHandle=env.requireHandle;
  var _embind_repr=env._embind_repr;
  var _glTexImage2D=env._glTexImage2D;
  var exposePublicSymbol=env.exposePublicSymbol;
  var __embind_register_std_string=env.__embind_register_std_string;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var __emval_get_method_caller=env.__emval_get_method_caller;
  var _pthread_getspecific=env._pthread_getspecific;
  var _glDeleteShader=env._glDeleteShader;
  var _glGetProgramiv=env._glGetProgramiv;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var _glScissor=env._glScissor;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var extendError=env.extendError;
  var __embind_register_void=env.__embind_register_void;
  var ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3;
  var _emscripten_asm_const_iddiii=env._emscripten_asm_const_iddiii;
  var _glLinkProgram=env._glLinkProgram;
  var _glClear=env._glClear;
  var _glGetError=env._glGetError;
  var _glGetShaderiv=env._glGetShaderiv;
  var __emval_register=env.__emval_register;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var _glBindAttribLocation=env._glBindAttribLocation;
  var readLatin1String=env.readLatin1String;
  var __embind_register_float=env.__embind_register_float;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var ___unlock=env.___unlock;
  var _glFramebufferTexture2D=env._glFramebufferTexture2D;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var __emval_new=env.__emval_new;
  var _pthread_setspecific=env._pthread_setspecific;
  var __emval_as=env.__emval_as;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var registerType=env.registerType;
  var ___cxa_throw=env.___cxa_throw;
  var __emval_new_cstring=env.__emval_new_cstring;
  var _glCopyTexSubImage2D=env._glCopyTexSubImage2D;
  var _glDisable=env._glDisable;
  var requireFunction=env.requireFunction;
  var _glTexParameteri=env._glTexParameteri;
  var _atexit=env._atexit;
  var _glTexParameterf=env._glTexParameterf;
  var count_emval_handles=env.count_emval_handles;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZN3App4mainEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($1)) + 11|0);
 HEAP8[$2>>0] = 10;
 dest=$1; src=9664; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $3 = ((($1)) + 10|0);
 HEAP8[$3>>0] = 0;
 __THREW__ = 0;
 invoke_vi(521,($1|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $17 = ___cxa_find_matching_catch_2()|0;
  $18 = tempRet0;
  $19 = HEAP8[$2>>0]|0;
  $20 = ($19<<24>>24)<(0);
  if ($20) {
   $21 = HEAP32[$1>>2]|0;
   __ZdlPv($21);
  }
  $$0 = $17;$$04 = $18;
  ___resumeException($$0|0);
  // unreachable;
 }
 $6 = HEAP8[$2>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = HEAP32[$1>>2]|0;
  __ZdlPv($8);
 }
 $9 = (__ZN6ObjectnwEj(60)|0);
 __THREW__ = 0;
 invoke_vi(522,($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  FUNCTION_TABLE_vii[$16 & 1023]($13,$9);
  STACKTOP = sp;return;
 }
 $22 = ___cxa_find_matching_catch_2()|0;
 $23 = tempRet0;
 __ZdlPv($9);
 $$0 = $22;$$04 = $23;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZN18MainViewControllerC2Ev($0) {
 $0 = $0|0;
 var $$0 = 0, $$09 = 0, $$6 = 0, $$615 = 0, $$pre = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $1 = sp;
 $2 = sp + 72|0;
 $3 = sp + 60|0;
 $4 = sp + 48|0;
 $5 = sp + 36|0;
 $6 = sp + 24|0;
 __ZN14ViewControllerC2Ev($0);
 $7 = ((($0)) + 24|0);
 HEAP32[$0>>2] = (2216);
 HEAP32[$7>>2] = (2284);
 $8 = ((($0)) + 48|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 52|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 56|0);
 HEAP32[$10>>2] = 0;
 __THREW__ = 0;
 $11 = (invoke_ii(523,24)|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 L1: do {
  if ($13) {
   label = 48;
  } else {
   __THREW__ = 0;
   invoke_vii(524,($11|0),(9675|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $144 = ___cxa_find_matching_catch_2()|0;
    $145 = tempRet0;
    __ZdlPv($11);
    $$6 = $144;$$615 = $145;
    break;
   }
   $16 = HEAP32[$8>>2]|0;
   $17 = ($16|0)==($11|0);
   if (!($17)) {
    $18 = ($16|0)==(0|0);
    if (!($18)) {
     __THREW__ = 0;
     invoke_vi(525,($16|0));
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if ($20) {
      label = 48;
      break;
     }
    }
    HEAP32[$8>>2] = $11;
    $21 = ($11|0)==(0|0);
    if (!($21)) {
     __THREW__ = 0;
     invoke_vi(526,($11|0));
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      label = 48;
      break;
     }
    }
   }
   __THREW__ = 0;
   $24 = (invoke_ii(523,24)|0);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    label = 48;
   } else {
    __THREW__ = 0;
    invoke_vii(524,($24|0),(9698|0));
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     $146 = ___cxa_find_matching_catch_2()|0;
     $147 = tempRet0;
     __ZdlPv($24);
     $$6 = $146;$$615 = $147;
     break;
    }
    $29 = HEAP32[$9>>2]|0;
    $30 = ($29|0)==($24|0);
    if (!($30)) {
     $31 = ($29|0)==(0|0);
     if (!($31)) {
      __THREW__ = 0;
      invoke_vi(525,($29|0));
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       label = 48;
       break;
      }
     }
     HEAP32[$9>>2] = $24;
     $34 = ($24|0)==(0|0);
     if (!($34)) {
      __THREW__ = 0;
      invoke_vi(526,($24|0));
      $35 = __THREW__; __THREW__ = 0;
      $36 = $35&1;
      if ($36) {
       label = 48;
       break;
      }
     }
    }
    __THREW__ = 0;
    $37 = (invoke_ii(523,24)|0);
    $38 = __THREW__; __THREW__ = 0;
    $39 = $38&1;
    if ($39) {
     label = 48;
    } else {
     __THREW__ = 0;
     invoke_vii(524,($37|0),(9718|0));
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if ($41) {
      $148 = ___cxa_find_matching_catch_2()|0;
      $149 = tempRet0;
      __ZdlPv($37);
      $$6 = $148;$$615 = $149;
      break;
     }
     $42 = HEAP32[$10>>2]|0;
     $43 = ($42|0)==($37|0);
     if (!($43)) {
      $44 = ($42|0)==(0|0);
      if (!($44)) {
       __THREW__ = 0;
       invoke_vi(525,($42|0));
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if ($46) {
        label = 48;
        break;
       }
      }
      HEAP32[$10>>2] = $37;
      $47 = ($37|0)==(0|0);
      if (!($47)) {
       __THREW__ = 0;
       invoke_vi(526,($37|0));
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if ($49) {
        label = 48;
        break;
       }
      }
     }
     ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
     __THREW__ = 0;
     $50 = (invoke_ii(527,16)|0);
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     do {
      if ($52) {
       $150 = ___cxa_find_matching_catch_2()|0;
       $151 = tempRet0;
       $$0 = $150;$$09 = $151;
      } else {
       HEAP32[$2>>2] = $50;
       $53 = ((($2)) + 8|0);
       HEAP32[$53>>2] = -2147483632;
       $54 = ((($2)) + 4|0);
       HEAP32[$54>>2] = 15;
       dest=$50; src=9739; stop=dest+15|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
       $55 = ((($50)) + 15|0);
       HEAP8[$55>>0] = 0;
       __THREW__ = 0;
       $56 = (invoke_ii(528,($2|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        $152 = ___cxa_find_matching_catch_2()|0;
        $153 = tempRet0;
        $154 = ((($2)) + 11|0);
        $155 = HEAP8[$154>>0]|0;
        $156 = ($155<<24>>24)<(0);
        if (!($156)) {
         $$0 = $152;$$09 = $153;
         break;
        }
        $157 = HEAP32[$2>>2]|0;
        __ZdlPv($157);
        $$0 = $152;$$09 = $153;
        break;
       }
       $59 = ((($2)) + 11|0);
       $60 = HEAP8[$59>>0]|0;
       $61 = ($60<<24>>24)<(0);
       if ($61) {
        $62 = HEAP32[$2>>2]|0;
        __ZdlPv($62);
       }
       $63 = HEAP32[$56>>2]|0;
       $64 = ((($63)) + 156|0);
       $65 = HEAP32[$64>>2]|0;
       ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
       $66 = ((($3)) + 11|0);
       HEAP8[$66>>0] = 4;
       HEAP32[$3>>2] = 1701667175;
       $67 = ((($3)) + 4|0);
       HEAP8[$67>>0] = 0;
       __THREW__ = 0;
       $68 = (invoke_iii($65|0,($56|0),($3|0))|0);
       $69 = __THREW__; __THREW__ = 0;
       $70 = $69&1;
       if ($70) {
        $158 = ___cxa_find_matching_catch_2()|0;
        $159 = tempRet0;
        $160 = HEAP8[$66>>0]|0;
        $161 = ($160<<24>>24)<(0);
        if ($161) {
         $162 = HEAP32[$3>>2]|0;
         __ZdlPv($162);
        }
        $$6 = $158;$$615 = $159;
        break L1;
       }
       $71 = ((($0)) + 32|0);
       HEAP32[$71>>2] = $68;
       $72 = HEAP8[$66>>0]|0;
       $73 = ($72<<24>>24)<(0);
       if ($73) {
        $74 = HEAP32[$3>>2]|0;
        __ZdlPv($74);
       }
       $75 = HEAP32[$56>>2]|0;
       $76 = ((($75)) + 156|0);
       $77 = HEAP32[$76>>2]|0;
       ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
       $78 = ((($4)) + 11|0);
       HEAP8[$78>>0] = 5;
       ;HEAP8[$4>>0]=HEAP8[9755>>0]|0;HEAP8[$4+1>>0]=HEAP8[9755+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[9755+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[9755+3>>0]|0;HEAP8[$4+4>>0]=HEAP8[9755+4>>0]|0;
       $79 = ((($4)) + 5|0);
       HEAP8[$79>>0] = 0;
       __THREW__ = 0;
       $80 = (invoke_iii($77|0,($56|0),($4|0))|0);
       $81 = __THREW__; __THREW__ = 0;
       $82 = $81&1;
       if ($82) {
        $163 = ___cxa_find_matching_catch_2()|0;
        $164 = tempRet0;
        $165 = HEAP8[$78>>0]|0;
        $166 = ($165<<24>>24)<(0);
        if ($166) {
         $167 = HEAP32[$4>>2]|0;
         __ZdlPv($167);
        }
        $$6 = $163;$$615 = $164;
        break L1;
       }
       $83 = ((($0)) + 36|0);
       HEAP32[$83>>2] = $80;
       $84 = HEAP8[$78>>0]|0;
       $85 = ($84<<24>>24)<(0);
       if ($85) {
        $86 = HEAP32[$4>>2]|0;
        __ZdlPv($86);
       }
       $87 = HEAP32[$56>>2]|0;
       $88 = ((($87)) + 156|0);
       $89 = HEAP32[$88>>2]|0;
       ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
       $90 = ((($5)) + 11|0);
       HEAP8[$90>>0] = 4;
       HEAP32[$5>>2] = 1701011814;
       $91 = ((($5)) + 4|0);
       HEAP8[$91>>0] = 0;
       __THREW__ = 0;
       $92 = (invoke_iii($89|0,($56|0),($5|0))|0);
       $93 = __THREW__; __THREW__ = 0;
       $94 = $93&1;
       if ($94) {
        $168 = ___cxa_find_matching_catch_2()|0;
        $169 = tempRet0;
        $170 = HEAP8[$90>>0]|0;
        $171 = ($170<<24>>24)<(0);
        if ($171) {
         $172 = HEAP32[$5>>2]|0;
         __ZdlPv($172);
        }
        $$6 = $168;$$615 = $169;
        break L1;
       }
       $95 = ((($0)) + 40|0);
       HEAP32[$95>>2] = $92;
       $96 = HEAP8[$90>>0]|0;
       $97 = ($96<<24>>24)<(0);
       if ($97) {
        $98 = HEAP32[$5>>2]|0;
        __ZdlPv($98);
        $$pre = HEAP32[$95>>2]|0;
        $101 = $$pre;
       } else {
        $101 = $92;
       }
       $99 = $0;
       $100 = ((($101)) + 280|0);
       $102 = ((($1)) + 16|0);
       HEAP32[$1>>2] = (2308);
       $103 = ((($1)) + 4|0);
       HEAP32[$103>>2] = $99;
       HEAP32[$102>>2] = $1;
       __ZNSt3__28functionIFbP4Viewii6_POINTEE4swapERS5_($1,$100);
       $104 = HEAP32[$102>>2]|0;
       $105 = ($104|0)==($1|0);
       do {
        if ($105) {
         $106 = HEAP32[$104>>2]|0;
         $107 = ((($106)) + 16|0);
         $108 = HEAP32[$107>>2]|0;
         FUNCTION_TABLE_vi[$108 & 1023]($104);
        } else {
         $109 = ($104|0)==(0|0);
         if ($109) {
          break;
         }
         $110 = HEAP32[$104>>2]|0;
         $111 = ((($110)) + 20|0);
         $112 = HEAP32[$111>>2]|0;
         FUNCTION_TABLE_vi[$112 & 1023]($104);
        }
       } while(0);
       $113 = HEAP32[$56>>2]|0;
       $114 = ((($113)) + 156|0);
       $115 = HEAP32[$114>>2]|0;
       ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
       $116 = ((($6)) + 11|0);
       HEAP8[$116>>0] = 9;
       dest=$6; src=9761; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
       $117 = ((($6)) + 9|0);
       HEAP8[$117>>0] = 0;
       __THREW__ = 0;
       $118 = (invoke_iii($115|0,($56|0),($6|0))|0);
       $119 = __THREW__; __THREW__ = 0;
       $120 = $119&1;
       if ($120) {
        $173 = ___cxa_find_matching_catch_2()|0;
        $174 = tempRet0;
        $175 = HEAP8[$116>>0]|0;
        $176 = ($175<<24>>24)<(0);
        if ($176) {
         $177 = HEAP32[$6>>2]|0;
         __ZdlPv($177);
        }
        $$6 = $173;$$615 = $174;
        break L1;
       }
       $121 = ((($0)) + 44|0);
       HEAP32[$121>>2] = $118;
       $122 = HEAP8[$116>>0]|0;
       $123 = ($122<<24>>24)<(0);
       if ($123) {
        $124 = HEAP32[$6>>2]|0;
        __ZdlPv($124);
       }
       $125 = HEAP32[$0>>2]|0;
       $126 = ((($125)) + 8|0);
       $127 = HEAP32[$126>>2]|0;
       __THREW__ = 0;
       invoke_vii($127|0,($0|0),($56|0));
       $128 = __THREW__; __THREW__ = 0;
       $129 = $128&1;
       do {
        if (!($129)) {
         __THREW__ = 0;
         $130 = (invoke_ii(527,28)|0);
         $131 = __THREW__; __THREW__ = 0;
         $132 = $131&1;
         if ($132) {
          break;
         }
         __THREW__ = 0;
         invoke_viiii(529,($130|0),($7|0),10,10);
         $133 = __THREW__; __THREW__ = 0;
         $134 = $133&1;
         if ($134) {
          $180 = ___cxa_find_matching_catch_2()|0;
          $181 = tempRet0;
          __ZdlPv($130);
          $$6 = $180;$$615 = $181;
          break L1;
         }
         $135 = ((($0)) + 28|0);
         HEAP32[$135>>2] = $130;
         $136 = HEAP32[$71>>2]|0;
         __THREW__ = 0;
         invoke_vii(530,($136|0),($130|0));
         $137 = __THREW__; __THREW__ = 0;
         $138 = $137&1;
         if ($138) {
          break;
         }
         $139 = HEAP32[$135>>2]|0;
         __THREW__ = 0;
         invoke_vi(531,($139|0));
         $140 = __THREW__; __THREW__ = 0;
         $141 = $140&1;
         if ($141) {
          break;
         }
         STACKTOP = sp;return;
        }
       } while(0);
       $178 = ___cxa_find_matching_catch_2()|0;
       $179 = tempRet0;
       $$6 = $178;$$615 = $179;
       break L1;
      }
     } while(0);
     $$6 = $$0;$$615 = $$09;
    }
   }
  }
 } while(0);
 if ((label|0) == 48) {
  $142 = ___cxa_find_matching_catch_2()|0;
  $143 = tempRet0;
  $$6 = $142;$$615 = $143;
 }
 $182 = HEAP32[$10>>2]|0;
 $183 = ($182|0)==(0|0);
 if (!($183)) {
  __THREW__ = 0;
  invoke_vi(525,($182|0));
  $184 = __THREW__; __THREW__ = 0;
  $185 = $184&1;
  if ($185) {
   $186 = ___cxa_find_matching_catch_3(0|0)|0;
   $187 = tempRet0;
   ___clang_call_terminate($186);
   // unreachable;
  }
 }
 $188 = HEAP32[$9>>2]|0;
 $189 = ($188|0)==(0|0);
 if (!($189)) {
  __THREW__ = 0;
  invoke_vi(525,($188|0));
  $190 = __THREW__; __THREW__ = 0;
  $191 = $190&1;
  if ($191) {
   $192 = ___cxa_find_matching_catch_3(0|0)|0;
   $193 = tempRet0;
   ___clang_call_terminate($192);
   // unreachable;
  }
 }
 $194 = HEAP32[$8>>2]|0;
 $195 = ($194|0)==(0|0);
 if ($195) {
  __ZN14ViewControllerD2Ev($0);
  ___resumeException($$6|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(525,($194|0));
 $196 = __THREW__; __THREW__ = 0;
 $197 = $196&1;
 if ($197) {
  $198 = ___cxa_find_matching_catch_3(0|0)|0;
  $199 = tempRet0;
  ___clang_call_terminate($198);
  // unreachable;
 } else {
  __ZN14ViewControllerD2Ev($0);
  ___resumeException($$6|0);
  // unreachable;
 }
}
function __ZN18MainViewControllerD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2216);
 $1 = ((($0)) + 24|0);
 HEAP32[$1>>2] = (2284);
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  __THREW__ = 0;
  invoke_vi(525,($3|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   $7 = ___cxa_find_matching_catch_3(0|0)|0;
   $8 = tempRet0;
   ___clang_call_terminate($7);
   // unreachable;
  }
 }
 $9 = ((($0)) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  __THREW__ = 0;
  invoke_vi(525,($10|0));
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  }
 }
 $16 = ((($0)) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  __ZN14ViewControllerD2Ev($0);
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($17|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch_3(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  __ZN14ViewControllerD2Ev($0);
  return;
 }
}
function __ZN18MainViewControllerD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2216);
 $1 = ((($0)) + 24|0);
 HEAP32[$1>>2] = (2284);
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  __THREW__ = 0;
  invoke_vi(525,($3|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   $7 = ___cxa_find_matching_catch_3(0|0)|0;
   $8 = tempRet0;
   ___clang_call_terminate($7);
   // unreachable;
  }
 }
 $9 = ((($0)) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  __THREW__ = 0;
  invoke_vi(525,($10|0));
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  }
 }
 $16 = ((($0)) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  __ZN14ViewControllerD2Ev($0);
  __ZdlPv($0);
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($17|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch_3(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  __ZN14ViewControllerD2Ev($0);
  __ZdlPv($0);
  return;
 }
}
function __ZN18MainViewController18onGameStateChangedEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 switch ($3|0) {
 case 0:  {
  $4 = ((($0)) + 40|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 48|0);
  $7 = HEAP32[$6>>2]|0;
  __ZN9ImageView17setBitmapProviderEP14BitmapProvider($5,$7);
  return;
  break;
 }
 case 1:  {
  $8 = ((($0)) + 40|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($0)) + 52|0);
  $11 = HEAP32[$10>>2]|0;
  __ZN9ImageView17setBitmapProviderEP14BitmapProvider($9,$11);
  return;
  break;
 }
 case 2:  {
  $12 = ((($0)) + 40|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($0)) + 56|0);
  $15 = HEAP32[$14>>2]|0;
  __ZN9ImageView17setBitmapProviderEP14BitmapProvider($13,$15);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function __ZN18MainViewController21onGameNumFlagsChangedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 264|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$vararg_buffer>>2] = $9;
 FUNCTION_TABLE_viii[$5 & 1023]($2,10010,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZN18MainViewController25onGameNumRemainingChangedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 264|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$vararg_buffer>>2] = $9;
 FUNCTION_TABLE_viii[$5 & 1023]($2,10020,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZN18MainViewController18onCellStateChangedER4Cell($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN8GameView10updateCellER4Cell($3,$1);
 return;
}
function __ZThn24_N18MainViewController18onGameStateChangedEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + -24|0);
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 switch ($4|0) {
 case 0:  {
  $5 = ((($1)) + 40|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($1)) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  __ZN9ImageView17setBitmapProviderEP14BitmapProvider($6,$8);
  return;
  break;
 }
 case 1:  {
  $9 = ((($1)) + 40|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($1)) + 52|0);
  $12 = HEAP32[$11>>2]|0;
  __ZN9ImageView17setBitmapProviderEP14BitmapProvider($10,$12);
  return;
  break;
 }
 case 2:  {
  $13 = ((($1)) + 40|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($1)) + 56|0);
  $16 = HEAP32[$15>>2]|0;
  __ZN9ImageView17setBitmapProviderEP14BitmapProvider($14,$16);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function __ZThn24_N18MainViewController21onGameNumFlagsChangedEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + -24|0);
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 264|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$vararg_buffer>>2] = $10;
 FUNCTION_TABLE_viii[$6 & 1023]($3,10010,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZThn24_N18MainViewController25onGameNumRemainingChangedEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + -24|0);
 $2 = ((($1)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 264|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$vararg_buffer>>2] = $10;
 FUNCTION_TABLE_viii[$6 & 1023]($3,10020,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZThn24_N18MainViewController18onCellStateChangedER4Cell($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + -24|0);
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 __ZN8GameView10updateCellER4Cell($4,$1);
 return;
}
function __ZNSt3__28functionIFbP4Viewii6_POINTEE4swapERS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ($1|0)==($0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($0|0);
 $7 = $5;
 if ($6) {
  $8 = ((($1)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==($1|0);
  if ($10) {
   $11 = HEAP32[$5>>2]|0;
   $12 = ((($11)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   __THREW__ = 0;
   invoke_vii($13|0,($5|0),($2|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $38 = ___cxa_find_matching_catch_3(0|0)|0;
    $39 = tempRet0;
    ___clang_call_terminate($38);
    // unreachable;
   }
   $16 = HEAP32[$4>>2]|0;
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($17)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_vi[$19 & 1023]($16);
   HEAP32[$4>>2] = 0;
   $20 = HEAP32[$8>>2]|0;
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($21)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   __THREW__ = 0;
   invoke_vii($23|0,($20|0),($0|0));
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $38 = ___cxa_find_matching_catch_3(0|0)|0;
    $39 = tempRet0;
    ___clang_call_terminate($38);
    // unreachable;
   }
   $26 = HEAP32[$8>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 16|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_vi[$29 & 1023]($26);
   HEAP32[$8>>2] = 0;
   HEAP32[$4>>2] = $0;
   $30 = HEAP32[$2>>2]|0;
   $31 = ((($30)) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   __THREW__ = 0;
   invoke_vii($32|0,($2|0),($1|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    $38 = ___cxa_find_matching_catch_3(0|0)|0;
    $39 = tempRet0;
    ___clang_call_terminate($38);
    // unreachable;
   }
   $35 = HEAP32[$2>>2]|0;
   $36 = ((($35)) + 16|0);
   $37 = HEAP32[$36>>2]|0;
   FUNCTION_TABLE_vi[$37 & 1023]($2);
   HEAP32[$8>>2] = $1;
   STACKTOP = sp;return;
  }
 }
 $40 = ($5|0)==($0|0);
 if ($40) {
  $41 = HEAP32[$5>>2]|0;
  $42 = ((($41)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  __THREW__ = 0;
  invoke_vii($43|0,($5|0),($1|0));
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if ($45) {
   $66 = ___cxa_find_matching_catch_3(0|0)|0;
   $67 = tempRet0;
   ___clang_call_terminate($66);
   // unreachable;
  }
  $46 = HEAP32[$4>>2]|0;
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($47)) + 16|0);
  $49 = HEAP32[$48>>2]|0;
  FUNCTION_TABLE_vi[$49 & 1023]($46);
  $50 = ((($1)) + 16|0);
  $51 = HEAP32[$50>>2]|0;
  HEAP32[$4>>2] = $51;
  HEAP32[$50>>2] = $1;
  STACKTOP = sp;return;
 }
 $52 = ((($1)) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)==($1|0);
 if (!($54)) {
  $65 = $53;
  HEAP32[$4>>2] = $65;
  HEAP32[$52>>2] = $7;
  STACKTOP = sp;return;
 }
 $55 = HEAP32[$53>>2]|0;
 $56 = ((($55)) + 12|0);
 $57 = HEAP32[$56>>2]|0;
 __THREW__ = 0;
 invoke_vii($57|0,($53|0),($0|0));
 $58 = __THREW__; __THREW__ = 0;
 $59 = $58&1;
 if ($59) {
  $66 = ___cxa_find_matching_catch_3(0|0)|0;
  $67 = tempRet0;
  ___clang_call_terminate($66);
  // unreachable;
 }
 $60 = HEAP32[$52>>2]|0;
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($61)) + 16|0);
 $63 = HEAP32[$62>>2]|0;
 FUNCTION_TABLE_vi[$63 & 1023]($60);
 $64 = HEAP32[$4>>2]|0;
 HEAP32[$52>>2] = $64;
 HEAP32[$4>>2] = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__baseIFbP4Viewii6_POINTEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__210__function6__funcIZN18MainViewControllerC1EvEUlP4Viewii6_POINTE_NS_9allocatorIS6_EEFbS4_iiS5_EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210__function6__funcIZN18MainViewControllerC1EvEUlP4Viewii6_POINTE_NS_9allocatorIS6_EEFbS4_iiS5_EE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $2 = ((($0)) + 4|0);
 HEAP32[$1>>2] = (2308);
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 return ($1|0);
}
function __ZNKSt3__210__function6__funcIZN18MainViewControllerC1EvEUlP4Viewii6_POINTE_NS_9allocatorIS6_EEFbS4_iiS5_EE7__cloneEPNS0_6__baseIS9_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 HEAP32[$1>>2] = (2308);
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 return;
}
function __ZNSt3__210__function6__funcIZN18MainViewControllerC1EvEUlP4Viewii6_POINTE_NS_9allocatorIS6_EEFbS4_iiS5_EE7destroyEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__210__function6__funcIZN18MainViewControllerC1EvEUlP4Viewii6_POINTE_NS_9allocatorIS6_EEFbS4_iiS5_EE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__210__function6__funcIZN18MainViewControllerC1EvEUlP4Viewii6_POINTE_NS_9allocatorIS6_EEFbS4_iiS5_EEclEOS4_OiSC_OS5_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)==(6);
 if (!($6)) {
  return 1;
 }
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  return 1;
 }
 __ZN4Game7restartEv($10);
 return 1;
}
function __ZNKSt3__210__function6__funcIZN18MainViewControllerC1EvEUlP4Viewii6_POINTE_NS_9allocatorIS6_EEFbS4_iiS5_EE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(9963|0);
 $5 = ((($0)) + 4|0);
 $$0 = $4 ? $5 : 0;
 return ($$0|0);
}
function __ZNKSt3__210__function6__funcIZN18MainViewControllerC1EvEUlP4Viewii6_POINTE_NS_9allocatorIS6_EEFbS4_iiS5_EE11target_typeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (72|0);
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZN4GameC2EPNS_8CallbackEii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$arith = 0, $$arith2 = 0, $$overflow = 0, $$overflow3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 24|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($0)) + 8|0);
 HEAP32[$6>>2] = $3;
 $7 = Math_imul($3, $2)|0;
 $$arith2 = $7<<4;
 $$overflow3 = ($7>>>0)>(268435455);
 $$arith = (($$arith2) + 4)|0;
 $$overflow = ($$arith2>>>0)>(4294967291);
 $8 = $$overflow3 | $$overflow;
 $9 = $8 ? -1 : $$arith;
 $10 = (__Znaj($9)|0);
 HEAP32[$10>>2] = $7;
 $11 = ((($10)) + 4|0);
 $12 = ($7|0)==(0);
 if ($12) {
  $20 = ((($0)) + 20|0);
  HEAP32[$20>>2] = $11;
  return;
 }
 $13 = (($11) + ($7<<4)|0);
 $14 = $11;
 while(1) {
  HEAP32[$14>>2] = 0;
  $15 = ((($14)) + 4|0);
  HEAP8[$15>>0] = 0;
  $16 = ((($14)) + 8|0);
  HEAP32[$16>>2] = 0;
  $17 = ((($14)) + 12|0);
  HEAP32[$17>>2] = 0;
  $18 = ((($14)) + 16|0);
  $19 = ($18|0)==($13|0);
  if ($19) {
   break;
  } else {
   $14 = $18;
  }
 }
 $20 = ((($0)) + 20|0);
 HEAP32[$20>>2] = $11;
 return;
}
function __ZN4Game7restartEv($0) {
 $0 = $0|0;
 var $$05966 = 0, $$06073 = 0, $$06270 = 0, $$06369 = 0, $$065 = 0, $$065$us = 0, $$065$us$us = 0, $$1 = 0, $$pre = 0, $$pre78 = 0, $$pre80 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $or$cond = 0, $or$cond$us = 0, $or$cond$us$us = 0, $or$cond84 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 $4 = ((($0)) + 8|0);
 if ($3) {
  $5 = ((($0)) + 20|0);
  $6 = ((($0)) + 24|0);
  $$pre = HEAP32[$4>>2]|0;
  $$06073 = 0;$8 = $$pre;$91 = $2;
  while(1) {
   $7 = ($8|0)>(0);
   if ($7) {
    $$06270 = 0;$23 = $8;
    while(1) {
     $21 = HEAP32[$5>>2]|0;
     $22 = Math_imul($23, $$06073)|0;
     $24 = (($22) + ($$06270))|0;
     $25 = (($21) + ($24<<4)|0);
     $26 = (((($21) + ($24<<4)|0)) + 8|0);
     HEAP32[$26>>2] = 0;
     $27 = (((($21) + ($24<<4)|0)) + 4|0);
     HEAP8[$27>>0] = 0;
     HEAP32[$25>>2] = 0;
     $28 = HEAP32[$6>>2]|0;
     $29 = HEAP32[$28>>2]|0;
     $30 = ((($29)) + 12|0);
     $31 = HEAP32[$30>>2]|0;
     FUNCTION_TABLE_vii[$31 & 1023]($28,$25);
     $32 = (($$06270) + 1)|0;
     $33 = HEAP32[$4>>2]|0;
     $34 = ($32|0)<($33|0);
     if ($34) {
      $$06270 = $32;$23 = $33;
     } else {
      break;
     }
    }
    $$pre78 = HEAP32[$1>>2]|0;
    $20 = $$pre78;$92 = $33;
   } else {
    $20 = $91;$92 = $8;
   }
   $18 = (($$06073) + 1)|0;
   $19 = ($18|0)<($20|0);
   if ($19) {
    $$06073 = $18;$8 = $92;$91 = $20;
   } else {
    break;
   }
  }
 }
 $9 = (__ZN3App13currentMillisEv(28952)|0);
 _srand($9);
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = Math_imul($11, $10)|0;
 $13 = (($12|0) / 7)&-1;
 $14 = (($12) - ($13))|0;
 $15 = ((($0)) + 16|0);
 HEAP32[$15>>2] = $14;
 $16 = ($12|0)>(6);
 if (!($16)) {
  $35 = ((($0)) + 12|0);
  HEAP32[$35>>2] = $13;
  $36 = ((($0)) + 24|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP32[$38>>2]|0;
  FUNCTION_TABLE_vi[$39 & 1023]($37);
  $40 = HEAP32[$36>>2]|0;
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($41)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  FUNCTION_TABLE_vi[$43 & 1023]($40);
  $44 = HEAP32[$36>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  FUNCTION_TABLE_vi[$47 & 1023]($44);
  return;
 }
 $17 = ((($0)) + 20|0);
 $$06369 = 0;
 while(1) {
  $48 = (_rand()|0);
  $49 = HEAP32[$1>>2]|0;
  $50 = (($48|0) % ($49|0))&-1;
  $51 = (_rand()|0);
  $52 = HEAP32[$4>>2]|0;
  $53 = (($51|0) % ($52|0))&-1;
  $54 = HEAP32[$17>>2]|0;
  $55 = Math_imul($52, $50)|0;
  $56 = (($55) + ($53))|0;
  $57 = (((($54) + ($56<<4)|0)) + 4|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = ($58<<24>>24)==(0);
  if ($59) {
   HEAP8[$57>>0] = 1;
   $61 = (($50) + -1)|0;
   $62 = (($53) + -1)|0;
   $$05966 = $61;
   while(1) {
    $63 = ($$05966|0)>(-1);
    L20: do {
     if ($63) {
      $64 = ($$05966|0)==($50|0);
      $$pre80 = HEAP32[$1>>2]|0;
      if (!($64)) {
       $65 = ($$05966|0)<($$pre80|0);
       $66 = Math_imul($52, $$05966)|0;
       $$065$us = $62;
       while(1) {
        $77 = ($$065$us|0)>(-1);
        $or$cond$us = $77 & $65;
        $78 = ($$065$us|0)<($52|0);
        $or$cond84 = $or$cond$us & $78;
        if ($or$cond84) {
         $79 = (($66) + ($$065$us))|0;
         $80 = (((($54) + ($79<<4)|0)) + 8|0);
         $81 = HEAP32[$80>>2]|0;
         $82 = (($81) + 1)|0;
         HEAP32[$80>>2] = $82;
        }
        $83 = (($$065$us) + 1)|0;
        $84 = ($$065$us|0)>($53|0);
        if ($84) {
         break L20;
        } else {
         $$065$us = $83;
        }
       }
      }
      $67 = ($50|0)<($$pre80|0);
      $$065$us$us = $62;
      while(1) {
       $68 = ($$065$us$us|0)>(-1);
       $or$cond$us$us = $68 & $67;
       if ($or$cond$us$us) {
        $69 = ($$065$us$us|0)>=($52|0);
        $70 = ($$065$us$us|0)==($53|0);
        $or$cond = $69 | $70;
        if (!($or$cond)) {
         $71 = (($55) + ($$065$us$us))|0;
         $72 = (((($54) + ($71<<4)|0)) + 8|0);
         $73 = HEAP32[$72>>2]|0;
         $74 = (($73) + 1)|0;
         HEAP32[$72>>2] = $74;
        }
       }
       $75 = (($$065$us$us) + 1)|0;
       $76 = ($$065$us$us|0)>($53|0);
       if ($76) {
        break;
       } else {
        $$065$us$us = $75;
       }
      }
     } else {
      $$065 = $62;
      while(1) {
       $87 = (($$065) + 1)|0;
       $88 = ($$065|0)>($53|0);
       if ($88) {
        break;
       } else {
        $$065 = $87;
       }
      }
     }
    } while(0);
    $85 = (($$05966) + 1)|0;
    $86 = ($$05966|0)>($50|0);
    if ($86) {
     $$1 = $$06369;
     break;
    } else {
     $$05966 = $85;
    }
   }
  } else {
   $60 = (($$06369) + -1)|0;
   $$1 = $60;
  }
  $89 = (($$1) + 1)|0;
  $90 = ($89|0)<($13|0);
  if ($90) {
   $$06369 = $89;
  } else {
   break;
  }
 }
 $35 = ((($0)) + 12|0);
 HEAP32[$35>>2] = $13;
 $36 = ((($0)) + 24|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP32[$38>>2]|0;
 FUNCTION_TABLE_vi[$39 & 1023]($37);
 $40 = HEAP32[$36>>2]|0;
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 FUNCTION_TABLE_vi[$43 & 1023]($40);
 $44 = HEAP32[$36>>2]|0;
 $45 = HEAP32[$44>>2]|0;
 $46 = ((($45)) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 FUNCTION_TABLE_vi[$47 & 1023]($44);
 return;
}
function __ZN4Game6cellAtEii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = Math_imul($6, $2)|0;
 $8 = (($7) + ($1))|0;
 $9 = (($4) + ($8<<4)|0);
 return ($9|0);
}
function __ZN4Game8openCellEii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = Math_imul($6, $2)|0;
 $8 = (($7) + ($1))|0;
 $9 = (($4) + ($8<<4)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if (!($11)) {
  return;
 }
 $12 = (((($4) + ($8<<4)|0)) + 4|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)==(0);
 if ($14) {
  __ZN4Game10revealCellEii($0,$1,$2);
  return;
 } else {
  HEAP32[$9>>2] = 4;
  $15 = ((($0)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  FUNCTION_TABLE_vii[$19 & 1023]($16,$9);
  HEAP32[$0>>2] = 2;
  $20 = HEAP32[$15>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$21>>2]|0;
  FUNCTION_TABLE_vi[$22 & 1023]($20);
  return;
 }
}
function __ZN4Game10revealCellEii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$03033 = 0, $$032 = 0, $$032$us = 0, $$032$us$us = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond$us = 0, $or$cond$us$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = Math_imul($6, $2)|0;
 $8 = (($7) + ($1))|0;
 $9 = (($4) + ($8<<4)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if (!($11)) {
  return;
 }
 HEAP32[$9>>2] = 1;
 $12 = ((($0)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 FUNCTION_TABLE_vii[$16 & 1023]($13,$9);
 $17 = ((($0)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + -1)|0;
 HEAP32[$17>>2] = $19;
 $20 = HEAP32[$12>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 FUNCTION_TABLE_vi[$23 & 1023]($20);
 $24 = HEAP32[$17>>2]|0;
 $25 = ($24|0)==(0);
 if ($25) {
  $26 = ((($0)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0);
  if ($28) {
   HEAP32[$0>>2] = 1;
   $29 = HEAP32[$12>>2]|0;
   $30 = HEAP32[$29>>2]|0;
   $31 = HEAP32[$30>>2]|0;
   FUNCTION_TABLE_vi[$31 & 1023]($29);
  }
 }
 $32 = (((($4) + ($8<<4)|0)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0);
 if (!($34)) {
  return;
 }
 $35 = (((($4) + ($8<<4)|0)) + 4|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = ($36<<24>>24)==(0);
 if (!($37)) {
  return;
 }
 $38 = (($2) + -1)|0;
 $39 = (($1) + -1)|0;
 $40 = ((($0)) + 4|0);
 $$03033 = $38;
 while(1) {
  $41 = ($$03033|0)>(-1);
  if ($41) {
   $42 = ($$03033|0)==($2|0);
   if ($42) {
    $$032$us$us = $39;
    while(1) {
     $43 = HEAP32[$40>>2]|0;
     $44 = ($43|0)>($2|0);
     $45 = ($$032$us$us|0)>(-1);
     $or$cond$us$us = $45 & $44;
     if ($or$cond$us$us) {
      $46 = HEAP32[$5>>2]|0;
      $47 = ($$032$us$us|0)>=($46|0);
      $48 = ($$032$us$us|0)==($1|0);
      $or$cond = $47 | $48;
      if (!($or$cond)) {
       __ZN4Game10revealCellEii($0,$$032$us$us,$2);
      }
     }
     $49 = (($$032$us$us) + 1)|0;
     $50 = ($$032$us$us|0)>($1|0);
     if ($50) {
      break;
     } else {
      $$032$us$us = $49;
     }
    }
   } else {
    $$032$us = $39;
    while(1) {
     $51 = HEAP32[$40>>2]|0;
     $52 = ($$03033|0)<($51|0);
     $53 = ($$032$us|0)>(-1);
     $or$cond$us = $53 & $52;
     if ($or$cond$us) {
      $54 = HEAP32[$5>>2]|0;
      $55 = ($$032$us|0)<($54|0);
      if ($55) {
       __ZN4Game10revealCellEii($0,$$032$us,$$03033);
      }
     }
     $56 = (($$032$us) + 1)|0;
     $57 = ($$032$us|0)>($1|0);
     if ($57) {
      break;
     } else {
      $$032$us = $56;
     }
    }
   }
  } else {
   $$032 = $39;
   while(1) {
    $60 = (($$032) + 1)|0;
    $61 = ($$032|0)>($1|0);
    if ($61) {
     break;
    } else {
     $$032 = $60;
    }
   }
  }
  $58 = (($$03033) + 1)|0;
  $59 = ($$03033|0)>($2|0);
  if ($59) {
   break;
  } else {
   $$03033 = $58;
  }
 }
 return;
}
function __ZN4Game10toggleFlagEii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = Math_imul($6, $2)|0;
 $8 = (($7) + ($1))|0;
 $9 = (($4) + ($8<<4)|0);
 $10 = HEAP32[$9>>2]|0;
 switch ($10|0) {
 case 2:  {
  HEAP32[$9>>2] = 0;
  $11 = ((($0)) + 24|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_vii[$15 & 1023]($12,$9);
  $16 = ((($0)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$16>>2] = $18;
  break;
 }
 case 0:  {
  $19 = ((($0)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)>(0);
  if ($21) {
   HEAP32[$9>>2] = 2;
   $22 = ((($0)) + 24|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($24)) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_vii[$26 & 1023]($23,$9);
   $27 = HEAP32[$19>>2]|0;
   $28 = (($27) + -1)|0;
   HEAP32[$19>>2] = $28;
   $29 = ((($0)) + 16|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $30 | $28;
   $32 = ($31|0)==(0);
   if ($32) {
    HEAP32[$0>>2] = 1;
    $33 = HEAP32[$22>>2]|0;
    $34 = HEAP32[$33>>2]|0;
    $35 = HEAP32[$34>>2]|0;
    FUNCTION_TABLE_vi[$35 & 1023]($33);
   }
  }
  break;
 }
 default: {
 }
 }
 $36 = ((($0)) + 24|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 FUNCTION_TABLE_vi[$40 & 1023]($37);
 return;
}
function __ZN8GameViewD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2352);
 $1 = ((($0)) + 384|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __THREW__ = 0;
  invoke_vi(525,($2|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $6 = ___cxa_find_matching_catch_3(0|0)|0;
   $7 = tempRet0;
   ___clang_call_terminate($6);
   // unreachable;
  }
 }
 $8 = ((($0)) + 376|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  label = 7;
 } else {
  __THREW__ = 0;
  invoke_vi(525,($9|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   label = 7;
  }
 }
 do {
  if ((label|0) == 7) {
   $15 = ((($0)) + 372|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0|0);
   if (!($17)) {
    __THREW__ = 0;
    invoke_vi(525,($16|0));
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     break;
    }
   }
   $46 = ((($0)) + 368|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==(0|0);
   if (!($48)) {
    __THREW__ = 0;
    invoke_vi(525,($47|0));
    $49 = __THREW__; __THREW__ = 0;
    $50 = $49&1;
    if ($50) {
     break;
    }
   }
   $51 = ((($0)) + 364|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52|0)==(0|0);
   if (!($53)) {
    __THREW__ = 0;
    invoke_vi(525,($52|0));
    $54 = __THREW__; __THREW__ = 0;
    $55 = $54&1;
    if ($55) {
     break;
    }
   }
   $56 = ((($0)) + 360|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)==(0|0);
   if (!($58)) {
    __THREW__ = 0;
    invoke_vi(525,($57|0));
    $59 = __THREW__; __THREW__ = 0;
    $60 = $59&1;
    if ($60) {
     break;
    }
   }
   $61 = ((($0)) + 356|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)==(0|0);
   if (!($63)) {
    __THREW__ = 0;
    invoke_vi(525,($62|0));
    $64 = __THREW__; __THREW__ = 0;
    $65 = $64&1;
    if ($65) {
     break;
    }
   }
   $66 = ((($0)) + 352|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($67|0)==(0|0);
   if (!($68)) {
    __THREW__ = 0;
    invoke_vi(525,($67|0));
    $69 = __THREW__; __THREW__ = 0;
    $70 = $69&1;
    if ($70) {
     break;
    }
   }
   $71 = ((($0)) + 348|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($72|0)==(0|0);
   if (!($73)) {
    __THREW__ = 0;
    invoke_vi(525,($72|0));
    $74 = __THREW__; __THREW__ = 0;
    $75 = $74&1;
    if ($75) {
     break;
    }
   }
   $76 = ((($0)) + 344|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($77|0)==(0|0);
   if (!($78)) {
    __THREW__ = 0;
    invoke_vi(525,($77|0));
    $79 = __THREW__; __THREW__ = 0;
    $80 = $79&1;
    if ($80) {
     break;
    }
   }
   $81 = ((($0)) + 340|0);
   $18 = HEAP32[$81>>2]|0;
   $82 = ($18|0)==(0|0);
   if (!($82)) {
    __THREW__ = 0;
    invoke_vi(525,($18|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch_3(0|0)|0;
     $22 = tempRet0;
     ___clang_call_terminate($21);
     // unreachable;
    }
   }
   $23 = ((($0)) + 336|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0|0);
   if (!($25)) {
    __THREW__ = 0;
    invoke_vi(525,($24|0));
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     $28 = ___cxa_find_matching_catch_3(0|0)|0;
     $29 = tempRet0;
     ___clang_call_terminate($28);
     // unreachable;
    }
   }
   $30 = ((($0)) + 332|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(0|0);
   if (!($32)) {
    __THREW__ = 0;
    invoke_vi(525,($31|0));
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if ($34) {
     $35 = ___cxa_find_matching_catch_3(0|0)|0;
     $36 = tempRet0;
     ___clang_call_terminate($35);
     // unreachable;
    }
   }
   $37 = ((($0)) + 328|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)==(0|0);
   if ($39) {
    __ZN4ViewD2Ev($0);
    return;
   }
   __THREW__ = 0;
   invoke_vi(525,($38|0));
   $40 = __THREW__; __THREW__ = 0;
   $41 = $40&1;
   if ($41) {
    $42 = ___cxa_find_matching_catch_3(0|0)|0;
    $43 = tempRet0;
    ___clang_call_terminate($42);
    // unreachable;
   } else {
    __ZN4ViewD2Ev($0);
    return;
   }
  }
 } while(0);
 $13 = ___cxa_find_matching_catch_3(0|0)|0;
 $14 = tempRet0;
 ___clang_call_terminate($13);
 // unreachable;
}
function __ZN8GameViewD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8GameViewD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN8GameView17updateContentSizeEff($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 380|0);
 $4 = +HEAPF32[$3>>2];
 $5 = ((($0)) + 324|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (+($8|0));
 $10 = $4 * $9;
 $11 = ((($0)) + 196|0);
 HEAPF32[$11>>2] = $10;
 $12 = ((($6)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (+($13|0));
 $15 = $4 * $14;
 $16 = ((($0)) + 200|0);
 HEAPF32[$16>>2] = $15;
 $17 = ((($0)) + 228|0);
 HEAP8[$17>>0] = 1;
 return;
}
function __ZN8GameView12onTouchEventEii6_POINT($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$sroa$018$0$$sroa_idx = 0, $$sroa$4$0$$sroa_idx = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0;
 var $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $5 = ((($0)) + 324|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 switch ($1|0) {
 case 0: case 2: case 3: case 4:  {
  $9 = ((($0)) + 384|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   $12 = HEAP32[$10>>2]|0;
   $13 = ((($12)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   FUNCTION_TABLE_vi[$14 & 1023]($10);
   $15 = HEAP32[$9>>2]|0;
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    __ZN6Object7releaseEv($15);
    HEAP32[$9>>2] = 0;
   }
  }
  $cond = ($1|0)==(0);
  if (!($cond)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $17 = ((($0)) + 388|0);
  HEAP8[$17>>0] = 0;
  $18 = $3;
  $19 = $18;
  $20 = HEAPU8[$19>>0]|(HEAPU8[$19+1>>0]<<8)|(HEAPU8[$19+2>>0]<<16)|(HEAPU8[$19+3>>0]<<24);
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAPU8[$22>>0]|(HEAPU8[$22+1>>0]<<8)|(HEAPU8[$22+2>>0]<<16)|(HEAPU8[$22+3>>0]<<24);
  $24 = ((($4)) + 16|0);
  HEAP32[$4>>2] = (2616);
  $$sroa$018$0$$sroa_idx = ((($4)) + 4|0);
  HEAP32[$$sroa$018$0$$sroa_idx>>2] = $0;
  $$sroa$4$0$$sroa_idx = ((($4)) + 8|0);
  $25 = $$sroa$4$0$$sroa_idx;
  $26 = $25;
  HEAP32[$26>>2] = $20;
  $27 = (($25) + 4)|0;
  $28 = $27;
  HEAP32[$28>>2] = $23;
  HEAP32[$24>>2] = $4;
  __THREW__ = 0;
  $29 = (invoke_iiii(532,($4|0),800,0)|0);
  $30 = __THREW__; __THREW__ = 0;
  $31 = $30&1;
  do {
   if (!($31)) {
    $32 = HEAP32[$9>>2]|0;
    $33 = ($32|0)==($29|0);
    if (!($33)) {
     $34 = ($32|0)==(0|0);
     if (!($34)) {
      __THREW__ = 0;
      invoke_vi(525,($32|0));
      $35 = __THREW__; __THREW__ = 0;
      $36 = $35&1;
      if ($36) {
       break;
      }
     }
     HEAP32[$9>>2] = $29;
     $37 = ($29|0)==(0|0);
     if (!($37)) {
      __THREW__ = 0;
      invoke_vi(526,($29|0));
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       break;
      }
     }
    }
    $40 = HEAP32[$24>>2]|0;
    $41 = ($40|0)==($4|0);
    if ($41) {
     $42 = HEAP32[$40>>2]|0;
     $43 = ((($42)) + 16|0);
     $44 = HEAP32[$43>>2]|0;
     FUNCTION_TABLE_vi[$44 & 1023]($40);
    } else {
     $45 = ($40|0)==(0|0);
     if (!($45)) {
      $46 = HEAP32[$40>>2]|0;
      $47 = ((($46)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      FUNCTION_TABLE_vi[$48 & 1023]($40);
     }
    }
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  $49 = ___cxa_find_matching_catch_2()|0;
  $50 = tempRet0;
  $51 = HEAP32[$24>>2]|0;
  $52 = ($51|0)==($4|0);
  if ($52) {
   $53 = HEAP32[$51>>2]|0;
   $54 = ((($53)) + 16|0);
   $55 = HEAP32[$54>>2]|0;
   FUNCTION_TABLE_vi[$55 & 1023]($51);
   ___resumeException($49|0);
   // unreachable;
  }
  $56 = ($51|0)==(0|0);
  if ($56) {
   ___resumeException($49|0);
   // unreachable;
  }
  $57 = HEAP32[$51>>2]|0;
  $58 = ((($57)) + 20|0);
  $59 = HEAP32[$58>>2]|0;
  FUNCTION_TABLE_vi[$59 & 1023]($51);
  ___resumeException($49|0);
  // unreachable;
  break;
 }
 case 6:  {
  $60 = ((($0)) + 388|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = ($61<<24>>24)==(0);
  if (!($62)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[tempDoublePtr>>0]=HEAP8[$3>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$3+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$3+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$3+3>>0];$63 = +HEAPF32[tempDoublePtr>>2];
  $64 = ((($0)) + 380|0);
  $65 = +HEAPF32[$64>>2];
  $66 = $63 / $65;
  $67 = (~~(($66)));
  $68 = ((($3)) + 4|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$68>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$68+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$68+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$68+3>>0];$69 = +HEAPF32[tempDoublePtr>>2];
  $70 = $69 / $65;
  $71 = (~~(($70)));
  $72 = $71 | $67;
  $73 = ($72|0)>(-1);
  if (!($73)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $74 = ((($6)) + 8|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($67|0)<($75|0);
  if (!($76)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $77 = ((($6)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($71|0)<($78|0);
  if (!($79)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  __ZN4Game8openCellEii($6,$67,$71);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return (0)|0;
}
function __ZNSt3__210__function6__baseIFvvEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__210__function6__funcIZN8GameView12onTouchEventEii6_POINTE3__0NS_9allocatorIS4_EEFvvEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210__function6__funcIZN8GameView12onTouchEventEii6_POINTE3__0NS_9allocatorIS4_EEFvvEE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(16)|0);
 $2 = ((($0)) + 4|0);
 HEAP32[$1>>2] = (2616);
 $3 = ((($1)) + 4|0);
 ;HEAP32[$3>>2]=HEAP32[$2>>2]|0;HEAP32[$3+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$2+8>>2]|0;
 return ($1|0);
}
function __ZNKSt3__210__function6__funcIZN8GameView12onTouchEventEii6_POINTE3__0NS_9allocatorIS4_EEFvvEE7__cloneEPNS0_6__baseIS7_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 HEAP32[$1>>2] = (2616);
 $3 = ((($1)) + 4|0);
 ;HEAP32[$3>>2]=HEAP32[$2>>2]|0;HEAP32[$3+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$2+8>>2]|0;
 return;
}
function __ZNSt3__210__function6__funcIZN8GameView12onTouchEventEii6_POINTE3__0NS_9allocatorIS4_EEFvvEE7destroyEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__210__function6__funcIZN8GameView12onTouchEventEii6_POINTE3__0NS_9allocatorIS4_EEFvvEE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__210__function6__funcIZN8GameView12onTouchEventEii6_POINTE3__0NS_9allocatorIS4_EEFvvEEclEv($0) {
 $0 = $0|0;
 var $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0.0, $$idx2 = 0, $$idx2$val = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx = ((($0)) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx1 = ((($0)) + 8|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$$idx1>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$idx1+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$idx1+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$idx1+3>>0];$$idx1$val = +HEAPF32[tempDoublePtr>>2];
 $$idx2 = ((($0)) + 12|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$$idx2>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$idx2+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$idx2+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$idx2+3>>0];$$idx2$val = +HEAPF32[tempDoublePtr>>2];
 $1 = ((($$idx$val)) + 388|0);
 HEAP8[$1>>0] = 1;
 $2 = ((($$idx$val)) + 380|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $$idx1$val / $3;
 $5 = (~~(($4)));
 $6 = $$idx2$val / $3;
 $7 = (~~(($6)));
 $8 = $7 | $5;
 $9 = ($8|0)>(-1);
 if (!($9)) {
  return;
 }
 $10 = ((($$idx$val)) + 324|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($5|0)<($13|0);
 if (!($14)) {
  return;
 }
 $15 = ((($11)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($7|0)<($16|0);
 if (!($17)) {
  return;
 }
 __ZN4Game10toggleFlagEii($11,$5,$7);
 return;
}
function __ZNKSt3__210__function6__funcIZN8GameView12onTouchEventEii6_POINTE3__0NS_9allocatorIS4_EEFvvEE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(10031|0);
 $5 = ((($0)) + 4|0);
 $$0 = $4 ? $5 : 0;
 return ($$0|0);
}
function __ZNKSt3__210__function6__funcIZN8GameView12onTouchEventEii6_POINTE3__0NS_9allocatorIS4_EEFvvEE11target_typeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (112|0);
}
function __GLOBAL__sub_I_gameview_cpp() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $1 = ((($0)) + 11|0);
 HEAP8[$1>>0] = 8;
 $2 = $0;
 $3 = $2;
 HEAP32[$3>>2] = 1701667143;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 2003134806;
 $6 = ((($0)) + 8|0);
 HEAP8[$6>>0] = 0;
 __THREW__ = 0;
 invoke_vii(533,(31700|0),($0|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = tempRet0;
  $14 = HEAP8[$1>>0]|0;
  $15 = ($14<<24>>24)<(0);
  if (!($15)) {
   ___resumeException($12|0);
   // unreachable;
  }
  $16 = HEAP32[$0>>2]|0;
  __ZdlPv($16);
  ___resumeException($12|0);
  // unreachable;
 } else {
  $9 = HEAP8[$1>>0]|0;
  $10 = ($9<<24>>24)<(0);
  if (!($10)) {
   STACKTOP = sp;return;
  }
  $11 = HEAP32[$0>>2]|0;
  __ZdlPv($11);
  STACKTOP = sp;return;
 }
}
function __ZN14ClassRegistrarI8GameViewEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp;
 $4 = HEAP32[7778]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (__Znwj(12)|0);
  $7 = ((($6)) + 4|0);
  HEAP32[$7>>2] = 0;
  $8 = ((($6)) + 8|0);
  HEAP32[$8>>2] = 0;
  HEAP32[$6>>2] = $7;
  HEAP32[7778] = $6;
  $10 = $6;
 } else {
  $10 = $4;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 $9 = ((($3)) + 12|0);
 HEAP32[$9>>2] = (534);
 __THREW__ = 0;
 $11 = (invoke_iiii(535,($10|0),($2|0),($3|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if (!($13)) {
   $14 = HEAP32[$11>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    __THREW__ = 0;
    $16 = (invoke_ii(527,32)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     break;
    }
    $19 = ((($16)) + 16|0);
    ;HEAP32[$19>>2]=HEAP32[$3>>2]|0;HEAP32[$19+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$3+8>>2]|0;
    ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
    $20 = ((($16)) + 28|0);
    $21 = HEAP32[$9>>2]|0;
    HEAP32[$20>>2] = $21;
    $22 = HEAP32[$2>>2]|0;
    HEAP32[$16>>2] = 0;
    $23 = ((($16)) + 4|0);
    HEAP32[$23>>2] = 0;
    $24 = ((($16)) + 8|0);
    HEAP32[$24>>2] = $22;
    HEAP32[$11>>2] = $16;
    $25 = HEAP32[$10>>2]|0;
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0|0);
    if ($27) {
     $31 = $16;
    } else {
     $28 = $26;
     HEAP32[$10>>2] = $28;
     $$pre$i$i$i$i$i$i = HEAP32[$11>>2]|0;
     $31 = $$pre$i$i$i$i$i$i;
    }
    $29 = ((($10)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($30,$31);
    $32 = ((($10)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + 1)|0;
    HEAP32[$32>>2] = $34;
   }
   $35 = ((($3)) + 11|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = ($36<<24>>24)<(0);
   if (!($37)) {
    STACKTOP = sp;return;
   }
   $38 = HEAP32[$3>>2]|0;
   __ZdlPv($38);
   STACKTOP = sp;return;
  }
 } while(0);
 $39 = ___cxa_find_matching_catch_2()|0;
 $40 = tempRet0;
 $41 = ((($3)) + 11|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = ($42<<24>>24)<(0);
 if (!($43)) {
  ___resumeException($39|0);
  // unreachable;
 }
 $44 = HEAP32[$3>>2]|0;
 __ZdlPv($44);
 ___resumeException($39|0);
 // unreachable;
}
function __ZN14ClassRegistrarI8GameViewE7createTEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN6ObjectnwEj(392)|0);
 __THREW__ = 0;
 invoke_vi(536,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZdlPv($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  return ($0|0);
 }
 return (0)|0;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFP4ViewvEEENS_19__map_value_compareIS7_SC_NS_4lessIS7_EELb1EEENS5_ISC_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISN_EERKT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$ph = 0, $$024 = 0, $$025 = 0, $$in = 0, $$sroa$speculated$i$i$i$i$i = 0, $$sroa$speculated$i$i$i$i$i26 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$1>>2] = $3;
  $$025 = $3;
  return ($$025|0);
 }
 $6 = ((($0)) + 4|0);
 $7 = ((($2)) + 11|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)<(0);
 $10 = ((($2)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $8&255;
 $13 = $9 ? $11 : $12;
 $14 = HEAP32[$2>>2]|0;
 $15 = $9 ? $14 : $2;
 $$0 = $6;$$024 = $4;
 while(1) {
  $16 = ((($$024)) + 16|0);
  $17 = ((($16)) + 11|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)<(0);
  $20 = ((($$024)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $18&255;
  $23 = $19 ? $21 : $22;
  $24 = ($23>>>0)<($13>>>0);
  $$sroa$speculated$i$i$i$i$i26 = $24 ? $23 : $13;
  $25 = ($$sroa$speculated$i$i$i$i$i26|0)==(0);
  if ($25) {
   label = 6;
  } else {
   $26 = HEAP32[$16>>2]|0;
   $27 = $19 ? $26 : $16;
   $28 = (_memcmp($15,$27,$$sroa$speculated$i$i$i$i$i26)|0);
   $29 = ($28|0)==(0);
   if ($29) {
    label = 6;
   } else {
    $31 = ($28|0)<(0);
    if ($31) {
     label = 8;
    } else {
     label = 10;
    }
   }
  }
  if ((label|0) == 6) {
   label = 0;
   $30 = ($13>>>0)<($23>>>0);
   if ($30) {
    label = 8;
   } else {
    label = 10;
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $32 = HEAP32[$$024>>2]|0;
   $33 = ($32|0)==(0|0);
   if ($33) {
    label = 9;
    break;
   } else {
    $$0$ph = $$024;$$in = $32;
   }
  }
  else if ((label|0) == 10) {
   label = 0;
   $34 = ($13>>>0)<($23>>>0);
   $$sroa$speculated$i$i$i$i$i = $34 ? $13 : $23;
   $35 = ($$sroa$speculated$i$i$i$i$i|0)==(0);
   if ($35) {
    label = 12;
   } else {
    $36 = HEAP32[$16>>2]|0;
    $37 = $19 ? $36 : $16;
    $38 = (_memcmp($37,$15,$$sroa$speculated$i$i$i$i$i)|0);
    $39 = ($38|0)==(0);
    if ($39) {
     label = 12;
    } else {
     $40 = ($38|0)<(0);
     if (!($40)) {
      label = 16;
      break;
     }
    }
   }
   if ((label|0) == 12) {
    label = 0;
    if (!($24)) {
     label = 16;
     break;
    }
   }
   $41 = ((($$024)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(0|0);
   if ($43) {
    label = 15;
    break;
   } else {
    $$0$ph = $41;$$in = $42;
   }
  }
  $$0 = $$0$ph;$$024 = $$in;
 }
 if ((label|0) == 9) {
  HEAP32[$1>>2] = $$024;
  $$025 = $$024;
  return ($$025|0);
 }
 else if ((label|0) == 15) {
  HEAP32[$1>>2] = $$024;
  $$025 = $41;
  return ($$025|0);
 }
 else if ((label|0) == 16) {
  HEAP32[$1>>2] = $$024;
  $$025 = $$0;
  return ($$025|0);
 }
 return (0)|0;
}
function __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$$i50 = 0, $$$i51 = 0, $$$i53 = 0, $$061 = 0, $$phi$trans$insert76 = 0, $$phi$trans$insert82 = 0, $$pre = 0, $$pre78 = 0, $$pre81 = 0, $$pre84 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==($0|0);
 $3 = ((($1)) + 12|0);
 $4 = $2&1;
 HEAP8[$3>>0] = $4;
 if ($2) {
  return;
 } else {
  $$061 = $1;
 }
 while(1) {
  $5 = ((($$061)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 12|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)==(0);
  if (!($9)) {
   label = 23;
   break;
  }
  $10 = ((($6)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==($6|0);
  if ($13) {
   $14 = ((($11)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0|0);
   if ($16) {
    label = 7;
    break;
   }
   $17 = ((($15)) + 12|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = ($18<<24>>24)==(0);
   if ($19) {
    $$sink = $17;
   } else {
    label = 7;
    break;
   }
  } else {
   $53 = ($12|0)==(0|0);
   if ($53) {
    label = 16;
    break;
   }
   $54 = ((($12)) + 12|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $$sink = $54;
   } else {
    label = 16;
    break;
   }
  }
  HEAP8[$7>>0] = 1;
  $20 = ($11|0)==($0|0);
  $21 = ((($11)) + 12|0);
  $22 = $20&1;
  HEAP8[$21>>0] = $22;
  HEAP8[$$sink>>0] = 1;
  if ($20) {
   label = 23;
   break;
  } else {
   $$061 = $11;
  }
 }
 if ((label|0) == 7) {
  $23 = HEAP32[$6>>2]|0;
  $24 = ($23|0)==($$061|0);
  if ($24) {
   $38 = $6;$40 = $11;
  } else {
   $25 = $11;
   $26 = ((($6)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP32[$27>>2]|0;
   HEAP32[$26>>2] = $28;
   $29 = ($28|0)==(0|0);
   if ($29) {
    $32 = $25;
   } else {
    $30 = ((($28)) + 8|0);
    HEAP32[$30>>2] = $6;
    $$pre81 = HEAP32[$10>>2]|0;
    $32 = $$pre81;
   }
   $31 = ((($27)) + 8|0);
   HEAP32[$31>>2] = $32;
   $33 = HEAP32[$10>>2]|0;
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==($6|0);
   $36 = ((($33)) + 4|0);
   $$$i53 = $35 ? $33 : $36;
   HEAP32[$$$i53>>2] = $27;
   HEAP32[$27>>2] = $6;
   HEAP32[$10>>2] = $27;
   $$phi$trans$insert82 = ((($27)) + 8|0);
   $$pre84 = HEAP32[$$phi$trans$insert82>>2]|0;
   $38 = $27;$40 = $$pre84;
  }
  $37 = ((($38)) + 12|0);
  HEAP8[$37>>0] = 1;
  $39 = ((($40)) + 12|0);
  HEAP8[$39>>0] = 0;
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($41)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  HEAP32[$40>>2] = $43;
  $44 = ($43|0)==(0|0);
  if (!($44)) {
   $45 = ((($43)) + 8|0);
   HEAP32[$45>>2] = $40;
  }
  $46 = ((($40)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($41)) + 8|0);
  HEAP32[$48>>2] = $47;
  $49 = HEAP32[$46>>2]|0;
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)==($40|0);
  $52 = ((($49)) + 4|0);
  $$$i51 = $51 ? $49 : $52;
  HEAP32[$$$i51>>2] = $41;
  HEAP32[$42>>2] = $40;
  HEAP32[$46>>2] = $41;
  return;
 }
 else if ((label|0) == 16) {
  $57 = HEAP32[$6>>2]|0;
  $58 = ($57|0)==($$061|0);
  if ($58) {
   $59 = $11;
   $60 = HEAP32[$6>>2]|0;
   $61 = ((($60)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   HEAP32[$6>>2] = $62;
   $63 = ($62|0)==(0|0);
   if ($63) {
    $66 = $59;
   } else {
    $64 = ((($62)) + 8|0);
    HEAP32[$64>>2] = $6;
    $$pre = HEAP32[$10>>2]|0;
    $66 = $$pre;
   }
   $65 = ((($60)) + 8|0);
   HEAP32[$65>>2] = $66;
   $67 = HEAP32[$10>>2]|0;
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68|0)==($6|0);
   $70 = ((($67)) + 4|0);
   $$$i50 = $69 ? $67 : $70;
   HEAP32[$$$i50>>2] = $60;
   HEAP32[$61>>2] = $6;
   HEAP32[$10>>2] = $60;
   $$phi$trans$insert76 = ((($60)) + 8|0);
   $$pre78 = HEAP32[$$phi$trans$insert76>>2]|0;
   $72 = $60;$74 = $$pre78;
  } else {
   $72 = $6;$74 = $11;
  }
  $71 = ((($72)) + 12|0);
  HEAP8[$71>>0] = 1;
  $73 = ((($74)) + 12|0);
  HEAP8[$73>>0] = 0;
  $75 = ((($74)) + 4|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = HEAP32[$76>>2]|0;
  HEAP32[$75>>2] = $77;
  $78 = ($77|0)==(0|0);
  if (!($78)) {
   $79 = ((($77)) + 8|0);
   HEAP32[$79>>2] = $74;
  }
  $80 = ((($74)) + 8|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ((($76)) + 8|0);
  HEAP32[$82>>2] = $81;
  $83 = HEAP32[$80>>2]|0;
  $84 = HEAP32[$83>>2]|0;
  $85 = ($84|0)==($74|0);
  $86 = ((($83)) + 4|0);
  $$$i = $85 ? $83 : $86;
  HEAP32[$$$i>>2] = $76;
  HEAP32[$76>>2] = $74;
  HEAP32[$80>>2] = $76;
  return;
 }
 else if ((label|0) == 23) {
  return;
 }
}
function __ZN8GameViewC2Ev($0) {
 $0 = $0|0;
 var $$0 = 0, $$02 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 __ZN4ViewC2Ev($0);
 HEAP32[$0>>2] = (2352);
 $1 = ((($0)) + 328|0);
 $2 = ((($0)) + 332|0);
 $3 = ((($0)) + 336|0);
 $4 = ((($0)) + 340|0);
 $5 = ((($0)) + 344|0);
 $6 = ((($0)) + 384|0);
 HEAP32[$6>>2] = 0;
 dest=$1; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __THREW__ = 0;
 $7 = (invoke_ii(523,24)|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L1: do {
  if ($9) {
   label = 94;
  } else {
   __THREW__ = 0;
   invoke_vii(524,($7|0),(10209|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $190 = ___cxa_find_matching_catch_2()|0;
    $191 = tempRet0;
    __ZdlPv($7);
    $$0 = $191;$$02 = $190;
    break;
   }
   $12 = HEAP32[$1>>2]|0;
   $13 = ($12|0)==($7|0);
   if (!($13)) {
    $14 = ($12|0)==(0|0);
    if (!($14)) {
     __THREW__ = 0;
     invoke_vi(525,($12|0));
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if ($16) {
      label = 94;
      break;
     }
    }
    HEAP32[$1>>2] = $7;
    $17 = ($7|0)==(0|0);
    if (!($17)) {
     __THREW__ = 0;
     invoke_vi(526,($7|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      label = 94;
      break;
     }
    }
   }
   __THREW__ = 0;
   $20 = (invoke_ii(523,24)|0);
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    label = 94;
   } else {
    __THREW__ = 0;
    invoke_vii(524,($20|0),(10228|0));
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if ($24) {
     $192 = ___cxa_find_matching_catch_2()|0;
     $193 = tempRet0;
     __ZdlPv($20);
     $$0 = $193;$$02 = $192;
     break;
    }
    $25 = HEAP32[$2>>2]|0;
    $26 = ($25|0)==($20|0);
    if (!($26)) {
     $27 = ($25|0)==(0|0);
     if (!($27)) {
      __THREW__ = 0;
      invoke_vi(525,($25|0));
      $28 = __THREW__; __THREW__ = 0;
      $29 = $28&1;
      if ($29) {
       label = 94;
       break;
      }
     }
     HEAP32[$2>>2] = $20;
     $30 = ($20|0)==(0|0);
     if (!($30)) {
      __THREW__ = 0;
      invoke_vi(526,($20|0));
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       label = 94;
       break;
      }
     }
    }
    __THREW__ = 0;
    $33 = (invoke_ii(523,24)|0);
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     label = 94;
    } else {
     __THREW__ = 0;
     invoke_vii(524,($33|0),(10244|0));
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if ($37) {
      $194 = ___cxa_find_matching_catch_2()|0;
      $195 = tempRet0;
      __ZdlPv($33);
      $$0 = $195;$$02 = $194;
      break;
     }
     $38 = HEAP32[$4>>2]|0;
     $39 = ($38|0)==($33|0);
     if (!($39)) {
      $40 = ($38|0)==(0|0);
      if (!($40)) {
       __THREW__ = 0;
       invoke_vi(525,($38|0));
       $41 = __THREW__; __THREW__ = 0;
       $42 = $41&1;
       if ($42) {
        label = 94;
        break;
       }
      }
      HEAP32[$4>>2] = $33;
      $43 = ($33|0)==(0|0);
      if (!($43)) {
       __THREW__ = 0;
       invoke_vi(526,($33|0));
       $44 = __THREW__; __THREW__ = 0;
       $45 = $44&1;
       if ($45) {
        label = 94;
        break;
       }
      }
     }
     __THREW__ = 0;
     $46 = (invoke_ii(523,24)|0);
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     if ($48) {
      label = 94;
     } else {
      __THREW__ = 0;
      invoke_vii(524,($46|0),(10260|0));
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       $196 = ___cxa_find_matching_catch_2()|0;
       $197 = tempRet0;
       __ZdlPv($46);
       $$0 = $197;$$02 = $196;
       break;
      }
      $51 = HEAP32[$3>>2]|0;
      $52 = ($51|0)==($46|0);
      if (!($52)) {
       $53 = ($51|0)==(0|0);
       if (!($53)) {
        __THREW__ = 0;
        invoke_vi(525,($51|0));
        $54 = __THREW__; __THREW__ = 0;
        $55 = $54&1;
        if ($55) {
         label = 94;
         break;
        }
       }
       HEAP32[$3>>2] = $46;
       $56 = ($46|0)==(0|0);
       if (!($56)) {
        __THREW__ = 0;
        invoke_vi(526,($46|0));
        $57 = __THREW__; __THREW__ = 0;
        $58 = $57&1;
        if ($58) {
         label = 94;
         break;
        }
       }
      }
      __THREW__ = 0;
      $59 = (invoke_ii(523,24)|0);
      $60 = __THREW__; __THREW__ = 0;
      $61 = $60&1;
      if ($61) {
       label = 94;
      } else {
       __THREW__ = 0;
       invoke_vii(524,($59|0),(10276|0));
       $62 = __THREW__; __THREW__ = 0;
       $63 = $62&1;
       if ($63) {
        $198 = ___cxa_find_matching_catch_2()|0;
        $199 = tempRet0;
        __ZdlPv($59);
        $$0 = $199;$$02 = $198;
        break;
       }
       $64 = HEAP32[$5>>2]|0;
       $65 = ($64|0)==($59|0);
       if (!($65)) {
        $66 = ($64|0)==(0|0);
        if (!($66)) {
         __THREW__ = 0;
         invoke_vi(525,($64|0));
         $67 = __THREW__; __THREW__ = 0;
         $68 = $67&1;
         if ($68) {
          label = 94;
          break;
         }
        }
        HEAP32[$5>>2] = $59;
        $69 = ($59|0)==(0|0);
        if (!($69)) {
         __THREW__ = 0;
         invoke_vi(526,($59|0));
         $70 = __THREW__; __THREW__ = 0;
         $71 = $70&1;
         if ($71) {
          label = 94;
          break;
         }
        }
       }
       __THREW__ = 0;
       $72 = (invoke_ii(523,24)|0);
       $73 = __THREW__; __THREW__ = 0;
       $74 = $73&1;
       if ($74) {
        label = 94;
       } else {
        __THREW__ = 0;
        invoke_vii(524,($72|0),(10289|0));
        $75 = __THREW__; __THREW__ = 0;
        $76 = $75&1;
        if ($76) {
         $200 = ___cxa_find_matching_catch_2()|0;
         $201 = tempRet0;
         __ZdlPv($72);
         $$0 = $201;$$02 = $200;
         break;
        }
        $77 = ((($0)) + 348|0);
        $78 = HEAP32[$77>>2]|0;
        $79 = ($78|0)==($72|0);
        do {
         if (!($79)) {
          $80 = ($78|0)==(0|0);
          if (!($80)) {
           __THREW__ = 0;
           invoke_vi(525,($78|0));
           $81 = __THREW__; __THREW__ = 0;
           $82 = $81&1;
           if ($82) {
            label = 94;
            break L1;
           }
          }
          HEAP32[$77>>2] = $72;
          $83 = ($72|0)==(0|0);
          if ($83) {
           break;
          }
          __THREW__ = 0;
          invoke_vi(526,($72|0));
          $84 = __THREW__; __THREW__ = 0;
          $85 = $84&1;
          if ($85) {
           label = 94;
           break L1;
          }
         }
        } while(0);
        __THREW__ = 0;
        $86 = (invoke_ii(523,24)|0);
        $87 = __THREW__; __THREW__ = 0;
        $88 = $87&1;
        if ($88) {
         label = 94;
        } else {
         __THREW__ = 0;
         invoke_vii(524,($86|0),(10302|0));
         $89 = __THREW__; __THREW__ = 0;
         $90 = $89&1;
         if ($90) {
          $202 = ___cxa_find_matching_catch_2()|0;
          $203 = tempRet0;
          __ZdlPv($86);
          $$0 = $203;$$02 = $202;
          break;
         }
         $91 = ((($0)) + 352|0);
         $92 = HEAP32[$91>>2]|0;
         $93 = ($92|0)==($86|0);
         do {
          if (!($93)) {
           $94 = ($92|0)==(0|0);
           if (!($94)) {
            __THREW__ = 0;
            invoke_vi(525,($92|0));
            $95 = __THREW__; __THREW__ = 0;
            $96 = $95&1;
            if ($96) {
             label = 94;
             break L1;
            }
           }
           HEAP32[$91>>2] = $86;
           $97 = ($86|0)==(0|0);
           if ($97) {
            break;
           }
           __THREW__ = 0;
           invoke_vi(526,($86|0));
           $98 = __THREW__; __THREW__ = 0;
           $99 = $98&1;
           if ($99) {
            label = 94;
            break L1;
           }
          }
         } while(0);
         __THREW__ = 0;
         $100 = (invoke_ii(523,24)|0);
         $101 = __THREW__; __THREW__ = 0;
         $102 = $101&1;
         if ($102) {
          label = 94;
          break;
         }
         __THREW__ = 0;
         invoke_vii(524,($100|0),(10315|0));
         $103 = __THREW__; __THREW__ = 0;
         $104 = $103&1;
         if ($104) {
          $204 = ___cxa_find_matching_catch_2()|0;
          $205 = tempRet0;
          __ZdlPv($100);
          $$0 = $205;$$02 = $204;
          break;
         }
         $105 = ((($0)) + 356|0);
         $106 = HEAP32[$105>>2]|0;
         $107 = ($106|0)==($100|0);
         do {
          if (!($107)) {
           $108 = ($106|0)==(0|0);
           if (!($108)) {
            __THREW__ = 0;
            invoke_vi(525,($106|0));
            $109 = __THREW__; __THREW__ = 0;
            $110 = $109&1;
            if ($110) {
             label = 94;
             break L1;
            }
           }
           HEAP32[$105>>2] = $100;
           $111 = ($100|0)==(0|0);
           if ($111) {
            break;
           }
           __THREW__ = 0;
           invoke_vi(526,($100|0));
           $112 = __THREW__; __THREW__ = 0;
           $113 = $112&1;
           if ($113) {
            label = 94;
            break L1;
           }
          }
         } while(0);
         __THREW__ = 0;
         $114 = (invoke_ii(523,24)|0);
         $115 = __THREW__; __THREW__ = 0;
         $116 = $115&1;
         if ($116) {
          label = 94;
          break;
         }
         __THREW__ = 0;
         invoke_vii(524,($114|0),(10328|0));
         $117 = __THREW__; __THREW__ = 0;
         $118 = $117&1;
         if ($118) {
          $206 = ___cxa_find_matching_catch_2()|0;
          $207 = tempRet0;
          __ZdlPv($114);
          $$0 = $207;$$02 = $206;
          break;
         }
         $119 = ((($0)) + 360|0);
         $120 = HEAP32[$119>>2]|0;
         $121 = ($120|0)==($114|0);
         do {
          if (!($121)) {
           $122 = ($120|0)==(0|0);
           if (!($122)) {
            __THREW__ = 0;
            invoke_vi(525,($120|0));
            $123 = __THREW__; __THREW__ = 0;
            $124 = $123&1;
            if ($124) {
             label = 94;
             break L1;
            }
           }
           HEAP32[$119>>2] = $114;
           $125 = ($114|0)==(0|0);
           if ($125) {
            break;
           }
           __THREW__ = 0;
           invoke_vi(526,($114|0));
           $126 = __THREW__; __THREW__ = 0;
           $127 = $126&1;
           if ($127) {
            label = 94;
            break L1;
           }
          }
         } while(0);
         __THREW__ = 0;
         $128 = (invoke_ii(523,24)|0);
         $129 = __THREW__; __THREW__ = 0;
         $130 = $129&1;
         if ($130) {
          label = 94;
          break;
         }
         __THREW__ = 0;
         invoke_vii(524,($128|0),(10341|0));
         $131 = __THREW__; __THREW__ = 0;
         $132 = $131&1;
         if ($132) {
          $208 = ___cxa_find_matching_catch_2()|0;
          $209 = tempRet0;
          __ZdlPv($128);
          $$0 = $209;$$02 = $208;
          break;
         }
         $133 = ((($0)) + 364|0);
         $134 = HEAP32[$133>>2]|0;
         $135 = ($134|0)==($128|0);
         do {
          if (!($135)) {
           $136 = ($134|0)==(0|0);
           if (!($136)) {
            __THREW__ = 0;
            invoke_vi(525,($134|0));
            $137 = __THREW__; __THREW__ = 0;
            $138 = $137&1;
            if ($138) {
             label = 94;
             break L1;
            }
           }
           HEAP32[$133>>2] = $128;
           $139 = ($128|0)==(0|0);
           if ($139) {
            break;
           }
           __THREW__ = 0;
           invoke_vi(526,($128|0));
           $140 = __THREW__; __THREW__ = 0;
           $141 = $140&1;
           if ($141) {
            label = 94;
            break L1;
           }
          }
         } while(0);
         __THREW__ = 0;
         $142 = (invoke_ii(523,24)|0);
         $143 = __THREW__; __THREW__ = 0;
         $144 = $143&1;
         if ($144) {
          label = 94;
          break;
         }
         __THREW__ = 0;
         invoke_vii(524,($142|0),(10354|0));
         $145 = __THREW__; __THREW__ = 0;
         $146 = $145&1;
         if ($146) {
          $210 = ___cxa_find_matching_catch_2()|0;
          $211 = tempRet0;
          __ZdlPv($142);
          $$0 = $211;$$02 = $210;
          break;
         }
         $147 = ((($0)) + 368|0);
         $148 = HEAP32[$147>>2]|0;
         $149 = ($148|0)==($142|0);
         do {
          if (!($149)) {
           $150 = ($148|0)==(0|0);
           if (!($150)) {
            __THREW__ = 0;
            invoke_vi(525,($148|0));
            $151 = __THREW__; __THREW__ = 0;
            $152 = $151&1;
            if ($152) {
             label = 94;
             break L1;
            }
           }
           HEAP32[$147>>2] = $142;
           $153 = ($142|0)==(0|0);
           if ($153) {
            break;
           }
           __THREW__ = 0;
           invoke_vi(526,($142|0));
           $154 = __THREW__; __THREW__ = 0;
           $155 = $154&1;
           if ($155) {
            label = 94;
            break L1;
           }
          }
         } while(0);
         __THREW__ = 0;
         $156 = (invoke_ii(523,24)|0);
         $157 = __THREW__; __THREW__ = 0;
         $158 = $157&1;
         if ($158) {
          label = 94;
          break;
         }
         __THREW__ = 0;
         invoke_vii(524,($156|0),(10367|0));
         $159 = __THREW__; __THREW__ = 0;
         $160 = $159&1;
         if ($160) {
          $212 = ___cxa_find_matching_catch_2()|0;
          $213 = tempRet0;
          __ZdlPv($156);
          $$0 = $213;$$02 = $212;
          break;
         }
         $161 = ((($0)) + 372|0);
         $162 = HEAP32[$161>>2]|0;
         $163 = ($162|0)==($156|0);
         do {
          if (!($163)) {
           $164 = ($162|0)==(0|0);
           if (!($164)) {
            __THREW__ = 0;
            invoke_vi(525,($162|0));
            $165 = __THREW__; __THREW__ = 0;
            $166 = $165&1;
            if ($166) {
             label = 94;
             break L1;
            }
           }
           HEAP32[$161>>2] = $156;
           $167 = ($156|0)==(0|0);
           if ($167) {
            break;
           }
           __THREW__ = 0;
           invoke_vi(526,($156|0));
           $168 = __THREW__; __THREW__ = 0;
           $169 = $168&1;
           if ($169) {
            label = 94;
            break L1;
           }
          }
         } while(0);
         __THREW__ = 0;
         $170 = (invoke_ii(523,24)|0);
         $171 = __THREW__; __THREW__ = 0;
         $172 = $171&1;
         if ($172) {
          label = 94;
          break;
         }
         __THREW__ = 0;
         invoke_vii(524,($170|0),(10380|0));
         $173 = __THREW__; __THREW__ = 0;
         $174 = $173&1;
         if ($174) {
          $214 = ___cxa_find_matching_catch_2()|0;
          $215 = tempRet0;
          __ZdlPv($170);
          $$0 = $215;$$02 = $214;
          break;
         }
         $175 = ((($0)) + 376|0);
         $176 = HEAP32[$175>>2]|0;
         $177 = ($176|0)==($170|0);
         do {
          if (!($177)) {
           $178 = ($176|0)==(0|0);
           if (!($178)) {
            __THREW__ = 0;
            invoke_vi(525,($176|0));
            $179 = __THREW__; __THREW__ = 0;
            $180 = $179&1;
            if ($180) {
             label = 94;
             break L1;
            }
           }
           HEAP32[$175>>2] = $170;
           $181 = ($170|0)==(0|0);
           if ($181) {
            break;
           }
           __THREW__ = 0;
           invoke_vi(526,($170|0));
           $182 = __THREW__; __THREW__ = 0;
           $183 = $182&1;
           if ($183) {
            label = 94;
            break L1;
           }
          }
         } while(0);
         __THREW__ = 0;
         $184 = (+invoke_did(537,(28952|0),25.0));
         $185 = __THREW__; __THREW__ = 0;
         $186 = $185&1;
         if ($186) {
          label = 94;
          break;
         }
         $187 = ((($0)) + 380|0);
         HEAPF32[$187>>2] = $184;
         return;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 94) {
  $188 = ___cxa_find_matching_catch_2()|0;
  $189 = tempRet0;
  $$0 = $189;$$02 = $188;
 }
 $216 = HEAP32[$6>>2]|0;
 $217 = ($216|0)==(0|0);
 if (!($217)) {
  __THREW__ = 0;
  invoke_vi(525,($216|0));
  $218 = __THREW__; __THREW__ = 0;
  $219 = $218&1;
  if ($219) {
   $223 = ___cxa_find_matching_catch_3(0|0)|0;
   $224 = tempRet0;
   ___clang_call_terminate($223);
   // unreachable;
  }
 }
 $220 = ((($0)) + 376|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = ($221|0)==(0|0);
 if (!($222)) {
  __THREW__ = 0;
  invoke_vi(525,($221|0));
  $225 = __THREW__; __THREW__ = 0;
  $226 = $225&1;
  if ($226) {
   $227 = ___cxa_find_matching_catch_3(0|0)|0;
   $228 = tempRet0;
   ___clang_call_terminate($227);
   // unreachable;
  }
 }
 $229 = ((($0)) + 372|0);
 $230 = HEAP32[$229>>2]|0;
 $231 = ($230|0)==(0|0);
 if (!($231)) {
  __THREW__ = 0;
  invoke_vi(525,($230|0));
  $255 = __THREW__; __THREW__ = 0;
  $256 = $255&1;
  if ($256) {
   $227 = ___cxa_find_matching_catch_3(0|0)|0;
   $228 = tempRet0;
   ___clang_call_terminate($227);
   // unreachable;
  }
 }
 $257 = ((($0)) + 368|0);
 $258 = HEAP32[$257>>2]|0;
 $259 = ($258|0)==(0|0);
 if (!($259)) {
  __THREW__ = 0;
  invoke_vi(525,($258|0));
  $260 = __THREW__; __THREW__ = 0;
  $261 = $260&1;
  if ($261) {
   $227 = ___cxa_find_matching_catch_3(0|0)|0;
   $228 = tempRet0;
   ___clang_call_terminate($227);
   // unreachable;
  }
 }
 $262 = ((($0)) + 364|0);
 $263 = HEAP32[$262>>2]|0;
 $264 = ($263|0)==(0|0);
 if (!($264)) {
  __THREW__ = 0;
  invoke_vi(525,($263|0));
  $265 = __THREW__; __THREW__ = 0;
  $266 = $265&1;
  if ($266) {
   $227 = ___cxa_find_matching_catch_3(0|0)|0;
   $228 = tempRet0;
   ___clang_call_terminate($227);
   // unreachable;
  }
 }
 $267 = ((($0)) + 360|0);
 $268 = HEAP32[$267>>2]|0;
 $269 = ($268|0)==(0|0);
 if (!($269)) {
  __THREW__ = 0;
  invoke_vi(525,($268|0));
  $270 = __THREW__; __THREW__ = 0;
  $271 = $270&1;
  if ($271) {
   $227 = ___cxa_find_matching_catch_3(0|0)|0;
   $228 = tempRet0;
   ___clang_call_terminate($227);
   // unreachable;
  }
 }
 $272 = ((($0)) + 356|0);
 $273 = HEAP32[$272>>2]|0;
 $274 = ($273|0)==(0|0);
 if (!($274)) {
  __THREW__ = 0;
  invoke_vi(525,($273|0));
  $275 = __THREW__; __THREW__ = 0;
  $276 = $275&1;
  if ($276) {
   $227 = ___cxa_find_matching_catch_3(0|0)|0;
   $228 = tempRet0;
   ___clang_call_terminate($227);
   // unreachable;
  }
 }
 $277 = ((($0)) + 352|0);
 $278 = HEAP32[$277>>2]|0;
 $279 = ($278|0)==(0|0);
 if (!($279)) {
  __THREW__ = 0;
  invoke_vi(525,($278|0));
  $280 = __THREW__; __THREW__ = 0;
  $281 = $280&1;
  if ($281) {
   $227 = ___cxa_find_matching_catch_3(0|0)|0;
   $228 = tempRet0;
   ___clang_call_terminate($227);
   // unreachable;
  }
 }
 $282 = ((($0)) + 348|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = ($283|0)==(0|0);
 if (!($284)) {
  __THREW__ = 0;
  invoke_vi(525,($283|0));
  $285 = __THREW__; __THREW__ = 0;
  $286 = $285&1;
  if ($286) {
   $227 = ___cxa_find_matching_catch_3(0|0)|0;
   $228 = tempRet0;
   ___clang_call_terminate($227);
   // unreachable;
  }
 }
 $287 = ((($0)) + 344|0);
 $288 = HEAP32[$287>>2]|0;
 $289 = ($288|0)==(0|0);
 if (!($289)) {
  __THREW__ = 0;
  invoke_vi(525,($288|0));
  $290 = __THREW__; __THREW__ = 0;
  $291 = $290&1;
  if ($291) {
   $227 = ___cxa_find_matching_catch_3(0|0)|0;
   $228 = tempRet0;
   ___clang_call_terminate($227);
   // unreachable;
  }
 }
 $232 = HEAP32[$4>>2]|0;
 $292 = ($232|0)==(0|0);
 if (!($292)) {
  __THREW__ = 0;
  invoke_vi(525,($232|0));
  $233 = __THREW__; __THREW__ = 0;
  $234 = $233&1;
  if ($234) {
   $235 = ___cxa_find_matching_catch_3(0|0)|0;
   $236 = tempRet0;
   ___clang_call_terminate($235);
   // unreachable;
  }
 }
 $237 = HEAP32[$3>>2]|0;
 $238 = ($237|0)==(0|0);
 if (!($238)) {
  __THREW__ = 0;
  invoke_vi(525,($237|0));
  $239 = __THREW__; __THREW__ = 0;
  $240 = $239&1;
  if ($240) {
   $241 = ___cxa_find_matching_catch_3(0|0)|0;
   $242 = tempRet0;
   ___clang_call_terminate($241);
   // unreachable;
  }
 }
 $243 = HEAP32[$2>>2]|0;
 $244 = ($243|0)==(0|0);
 if (!($244)) {
  __THREW__ = 0;
  invoke_vi(525,($243|0));
  $245 = __THREW__; __THREW__ = 0;
  $246 = $245&1;
  if ($246) {
   $247 = ___cxa_find_matching_catch_3(0|0)|0;
   $248 = tempRet0;
   ___clang_call_terminate($247);
   // unreachable;
  }
 }
 $249 = HEAP32[$1>>2]|0;
 $250 = ($249|0)==(0|0);
 if ($250) {
  __ZN4ViewD2Ev($0);
  ___resumeException($$02|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(525,($249|0));
 $251 = __THREW__; __THREW__ = 0;
 $252 = $251&1;
 if ($252) {
  $253 = ___cxa_find_matching_catch_3(0|0)|0;
  $254 = tempRet0;
  ___clang_call_terminate($253);
  // unreachable;
 } else {
  __ZN4ViewD2Ev($0);
  ___resumeException($$02|0);
  // unreachable;
 }
}
function __ZN8GameView7setGameEP4Game($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02526 = 0, $$027 = 0, $$pre = 0, $$pre30 = 0, $$pre31 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 324|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = ((($1)) + 8|0);
 $8 = ((($0)) + 380|0);
 $$pre = HEAP32[$7>>2]|0;
 $$027 = 0;$10 = $$pre;$41 = $5;
 L4: while(1) {
  $9 = ($10|0)>(0);
  if ($9) {
   $11 = (+($$027|0));
   $$02526 = 0;
   while(1) {
    $15 = (__ZN4Game6cellAtEii($1,$$02526,$$027)|0);
    $16 = (__ZN6ObjectnwEj(96)|0);
    __THREW__ = 0;
    invoke_vii(538,($16|0),($0|0));
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     label = 15;
     break L4;
    }
    $19 = ((($15)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    if ($21) {
     $25 = $16;
    } else {
     $22 = ($20|0)==(0|0);
     if (!($22)) {
      __ZN6Object7releaseEv($20);
     }
     HEAP32[$19>>2] = $16;
     $23 = ($16|0)==(0|0);
     if ($23) {
      $25 = $16;
     } else {
      __ZN6Object6retainEv($16);
      $$pre30 = HEAP32[$19>>2]|0;
      $25 = $$pre30;
     }
    }
    $24 = HEAP32[$25>>2]|0;
    $26 = ((($24)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (+($$02526|0));
    $29 = +HEAPF32[$8>>2];
    $30 = $28 * $29;
    $31 = $11 * $29;
    __Z9RECT_Makeffff($2,$30,$31,$29,$29);
    FUNCTION_TABLE_vii[$27 & 1023]($25,$2);
    $32 = HEAP32[$0>>2]|0;
    $33 = ((($32)) + 160|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = HEAP32[$19>>2]|0;
    FUNCTION_TABLE_vii[$34 & 1023]($0,$35);
    $36 = (($$02526) + 1)|0;
    $37 = HEAP32[$7>>2]|0;
    $38 = ($36|0)<($37|0);
    if ($38) {
     $$02526 = $36;
    } else {
     break;
    }
   }
   $$pre31 = HEAP32[$4>>2]|0;
   $14 = $$pre31;$42 = $37;
  } else {
   $14 = $41;$42 = $10;
  }
  $12 = (($$027) + 1)|0;
  $13 = ($12|0)<($14|0);
  if ($13) {
   $$027 = $12;$10 = $42;$41 = $14;
  } else {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 15) {
  $39 = ___cxa_find_matching_catch_2()|0;
  $40 = tempRet0;
  __ZdlPv($16);
  ___resumeException($39|0);
  // unreachable;
 }
}
function __ZN8GameView10updateCellER4Cell($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 L1: do {
  switch ($2|0) {
  case 0:  {
   $3 = ((($1)) + 12|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = HEAP32[$4>>2]|0;
   $6 = ((($5)) + 52|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 328|0);
   $9 = HEAP32[$8>>2]|0;
   FUNCTION_TABLE_vii[$7 & 1023]($4,$9);
   $$pre$phiZ2D = $3;
   break;
  }
  case 2:  {
   $10 = ((($1)) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($12)) + 52|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($0)) + 336|0);
   $16 = HEAP32[$15>>2]|0;
   FUNCTION_TABLE_vii[$14 & 1023]($11,$16);
   $$pre$phiZ2D = $10;
   break;
  }
  case 3:  {
   $17 = ((($1)) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 52|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($0)) + 332|0);
   $23 = HEAP32[$22>>2]|0;
   FUNCTION_TABLE_vii[$21 & 1023]($18,$23);
   $$pre$phiZ2D = $17;
   break;
  }
  default: {
   $24 = ($2|0)==(4);
   $25 = ((($1)) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 52|0);
   $29 = HEAP32[$28>>2]|0;
   if ($24) {
    $30 = ((($0)) + 340|0);
    $31 = HEAP32[$30>>2]|0;
    FUNCTION_TABLE_vii[$29 & 1023]($26,$31);
    $$pre$phiZ2D = $25;
    break L1;
   } else {
    $32 = ((($1)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (((($0)) + 344|0) + ($33<<2)|0);
    $35 = HEAP32[$34>>2]|0;
    FUNCTION_TABLE_vii[$29 & 1023]($26,$35);
    $$pre$phiZ2D = $25;
    break L1;
   }
  }
  }
 } while(0);
 $36 = HEAP32[$$pre$phiZ2D>>2]|0;
 __ZN8RenderOp18rebatchIfNecessaryEv($36);
 $37 = HEAP32[$0>>2]|0;
 $38 = ((($37)) + 180|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$$pre$phiZ2D>>2]|0;
 $41 = ((($40)) + 12|0);
 FUNCTION_TABLE_vii[$39 & 1023]($0,$41);
 return;
}
function __GLOBAL__sub_I_app_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev(28952);
 HEAP32[7238] = (2660);
 HEAP32[(28960)>>2] = 0;
 (___cxa_atexit((102|0),(28952|0),(___dso_handle|0))|0);
 return;
}
function __ZN3AppD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2660);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($2|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  return;
 }
}
function __ZN3AppD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2660);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  __ZdlPv($0);
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($2|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZN3App2dpEf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 44|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $5 * $1;
 return (+$6);
}
function __ZN3App3idpEf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 44|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $1 / $5;
 return (+$6);
}
function __ZN14NavigationItemC2Ev($0) {
 $0 = $0|0;
 var $$0 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$pre = 0, $$pre9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $$byval_copy7 = sp + 240|0;
 $$byval_copy6 = sp + 224|0;
 $$byval_copy5 = sp + 208|0;
 $$byval_copy4 = sp + 192|0;
 $$byval_copy3 = sp + 176|0;
 $$byval_copy2 = sp + 160|0;
 $$byval_copy1 = sp + 144|0;
 $$byval_copy = sp + 128|0;
 $1 = sp + 112|0;
 $2 = sp + 96|0;
 $3 = sp + 80|0;
 $4 = sp + 64|0;
 $5 = sp + 48|0;
 $6 = sp + 32|0;
 $7 = sp + 16|0;
 $8 = sp;
 __ZN6ObjectC2Ev($0);
 HEAP32[$0>>2] = (2676);
 $9 = ((($0)) + 8|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 12|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 16|0);
 HEAP32[$11>>2] = 0;
 __THREW__ = 0;
 $12 = (invoke_ii(523,344)|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 do {
  if ($14) {
   label = 30;
  } else {
   __THREW__ = 0;
   invoke_vi(539,($12|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if ($16) {
    $82 = ___cxa_find_matching_catch_2()|0;
    $83 = tempRet0;
    __ZdlPv($12);
    $$0 = $83;$$02 = $82;
    break;
   }
   $17 = HEAP32[$10>>2]|0;
   $18 = ($17|0)==($12|0);
   if ($18) {
    $26 = $12;
   } else {
    $19 = ($17|0)==(0|0);
    if (!($19)) {
     __THREW__ = 0;
     invoke_vi(525,($17|0));
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if ($21) {
      label = 30;
      break;
     }
    }
    HEAP32[$10>>2] = $12;
    $22 = ($12|0)==(0|0);
    if ($22) {
     $26 = $12;
    } else {
     __THREW__ = 0;
     invoke_vi(526,($12|0));
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if ($24) {
      label = 30;
      break;
     }
     $$pre = HEAP32[$10>>2]|0;
     $26 = $$pre;
    }
   }
   $25 = ((($26)) + 324|0);
   HEAP32[$25>>2] = 0;
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 60|0);
   $29 = HEAP32[$28>>2]|0;
   __THREW__ = 0;
   invoke_viiidd(540,($1|0),2,(0|0),1.0,0.0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    label = 30;
   } else {
    __THREW__ = 0;
    invoke_viiidd(540,($2|0),2,(0|0),1.0,0.0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 30;
    } else {
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
     ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$2+12>>2]|0;
     invoke_viii($29|0,($26|0),($$byval_copy|0),($$byval_copy1|0));
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if ($35) {
      label = 30;
     } else {
      $36 = HEAP32[$10>>2]|0;
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($37)) + 64|0);
      $39 = HEAP32[$38>>2]|0;
      __THREW__ = 0;
      invoke_viiddd(541,($3|0),(0|0),0.0,0.0,0.0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 30;
      } else {
       __THREW__ = 0;
       invoke_viiddd(541,($4|0),(0|0),0.5,-0.5,0.0);
       $42 = __THREW__; __THREW__ = 0;
       $43 = $42&1;
       if ($43) {
        label = 30;
       } else {
        __THREW__ = 0;
        ;HEAP32[$$byval_copy2>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$3+12>>2]|0;
        ;HEAP32[$$byval_copy3>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$4+12>>2]|0;
        invoke_viii($39|0,($36|0),($$byval_copy2|0),($$byval_copy3|0));
        $44 = __THREW__; __THREW__ = 0;
        $45 = $44&1;
        if ($45) {
         label = 30;
        } else {
         __THREW__ = 0;
         $46 = (invoke_ii(523,344)|0);
         $47 = __THREW__; __THREW__ = 0;
         $48 = $47&1;
         if ($48) {
          label = 30;
         } else {
          __THREW__ = 0;
          invoke_vi(539,($46|0));
          $49 = __THREW__; __THREW__ = 0;
          $50 = $49&1;
          if ($50) {
           $84 = ___cxa_find_matching_catch_2()|0;
           $85 = tempRet0;
           __ZdlPv($46);
           $$0 = $85;$$02 = $84;
           break;
          }
          $51 = HEAP32[$11>>2]|0;
          $52 = ($51|0)==($46|0);
          if ($52) {
           $60 = $46;
          } else {
           $53 = ($51|0)==(0|0);
           if (!($53)) {
            __THREW__ = 0;
            invoke_vi(525,($51|0));
            $54 = __THREW__; __THREW__ = 0;
            $55 = $54&1;
            if ($55) {
             label = 30;
             break;
            }
           }
           HEAP32[$11>>2] = $46;
           $56 = ($46|0)==(0|0);
           if ($56) {
            $60 = $46;
           } else {
            __THREW__ = 0;
            invoke_vi(526,($46|0));
            $57 = __THREW__; __THREW__ = 0;
            $58 = $57&1;
            if ($58) {
             label = 30;
             break;
            }
            $$pre9 = HEAP32[$11>>2]|0;
            $60 = $$pre9;
           }
          }
          $59 = ((($60)) + 324|0);
          HEAP32[$59>>2] = 0;
          $61 = HEAP32[$60>>2]|0;
          $62 = ((($61)) + 60|0);
          $63 = HEAP32[$62>>2]|0;
          __THREW__ = 0;
          invoke_viiidd(540,($5|0),2,(0|0),1.0,0.0);
          $64 = __THREW__; __THREW__ = 0;
          $65 = $64&1;
          if ($65) {
           label = 30;
          } else {
           __THREW__ = 0;
           invoke_viiidd(540,($6|0),2,(0|0),1.0,0.0);
           $66 = __THREW__; __THREW__ = 0;
           $67 = $66&1;
           if ($67) {
            label = 30;
           } else {
            __THREW__ = 0;
            ;HEAP32[$$byval_copy4>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$5+12>>2]|0;
            ;HEAP32[$$byval_copy5>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$$byval_copy5+12>>2]=HEAP32[$6+12>>2]|0;
            invoke_viii($63|0,($60|0),($$byval_copy4|0),($$byval_copy5|0));
            $68 = __THREW__; __THREW__ = 0;
            $69 = $68&1;
            if ($69) {
             label = 30;
            } else {
             $70 = HEAP32[$11>>2]|0;
             $71 = HEAP32[$70>>2]|0;
             $72 = ((($71)) + 64|0);
             $73 = HEAP32[$72>>2]|0;
             __THREW__ = 0;
             invoke_viiddd(541,($7|0),(0|0),1.0,-1.0,0.0);
             $74 = __THREW__; __THREW__ = 0;
             $75 = $74&1;
             if ($75) {
              label = 30;
             } else {
              __THREW__ = 0;
              invoke_viiddd(541,($8|0),(0|0),0.5,-0.5,0.0);
              $76 = __THREW__; __THREW__ = 0;
              $77 = $76&1;
              if ($77) {
               label = 30;
              } else {
               __THREW__ = 0;
               ;HEAP32[$$byval_copy6>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy6+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$$byval_copy6+12>>2]=HEAP32[$7+12>>2]|0;
               ;HEAP32[$$byval_copy7>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$$byval_copy7+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$$byval_copy7+12>>2]=HEAP32[$8+12>>2]|0;
               invoke_viii($73|0,($70|0),($$byval_copy6|0),($$byval_copy7|0));
               $78 = __THREW__; __THREW__ = 0;
               $79 = $78&1;
               if ($79) {
                label = 30;
               } else {
                STACKTOP = sp;return;
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 30) {
  $80 = ___cxa_find_matching_catch_2()|0;
  $81 = tempRet0;
  $$0 = $81;$$02 = $80;
 }
 $86 = HEAP32[$11>>2]|0;
 $87 = ($86|0)==(0|0);
 if (!($87)) {
  __THREW__ = 0;
  invoke_vi(525,($86|0));
  $88 = __THREW__; __THREW__ = 0;
  $89 = $88&1;
  if ($89) {
   $90 = ___cxa_find_matching_catch_3(0|0)|0;
   $91 = tempRet0;
   ___clang_call_terminate($90);
   // unreachable;
  }
 }
 $92 = HEAP32[$10>>2]|0;
 $93 = ($92|0)==(0|0);
 if (!($93)) {
  __THREW__ = 0;
  invoke_vi(525,($92|0));
  $94 = __THREW__; __THREW__ = 0;
  $95 = $94&1;
  if ($95) {
   $96 = ___cxa_find_matching_catch_3(0|0)|0;
   $97 = tempRet0;
   ___clang_call_terminate($96);
   // unreachable;
  }
 }
 $98 = HEAP32[$9>>2]|0;
 $99 = ($98|0)==(0|0);
 if ($99) {
  ___resumeException($$02|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(525,($98|0));
 $100 = __THREW__; __THREW__ = 0;
 $101 = $100&1;
 if ($101) {
  $102 = ___cxa_find_matching_catch_3(0|0)|0;
  $103 = tempRet0;
  ___clang_call_terminate($102);
  // unreachable;
 } else {
  ___resumeException($$02|0);
  // unreachable;
 }
}
function __ZN14NavigationItemD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2676);
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __THREW__ = 0;
  invoke_vi(525,($2|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $6 = ___cxa_find_matching_catch_3(0|0)|0;
   $7 = tempRet0;
   ___clang_call_terminate($6);
   // unreachable;
  }
 }
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  __THREW__ = 0;
  invoke_vi(525,($9|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $13 = ___cxa_find_matching_catch_3(0|0)|0;
   $14 = tempRet0;
   ___clang_call_terminate($13);
   // unreachable;
  }
 }
 $15 = ((($0)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($16|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch_3(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 } else {
  return;
 }
}
function __ZN14NavigationItemD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2676);
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __THREW__ = 0;
  invoke_vi(525,($2|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $6 = ___cxa_find_matching_catch_3(0|0)|0;
   $7 = tempRet0;
   ___clang_call_terminate($6);
   // unreachable;
  }
 }
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  __THREW__ = 0;
  invoke_vi(525,($9|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $13 = ___cxa_find_matching_catch_3(0|0)|0;
   $14 = tempRet0;
   ___clang_call_terminate($13);
   // unreachable;
  }
 }
 $15 = ((($0)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  __ZdlPv($0);
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($16|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch_3(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZNSt3__210__function6__baseIFvP6BitmapEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __GLOBAL__sub_I_styles_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev(28964);
 HEAP32[7241] = (2692);
 HEAP32[(28976)>>2] = 0;
 HEAP32[(28980)>>2] = 0;
 HEAP32[(28972)>>2] = (28976);
 HEAP32[(28984)>>2] = 0;
 HEAP32[(28988)>>2] = 0;
 HEAP32[(28992)>>2] = 0;
 (___cxa_atexit((106|0),(28964|0),(___dso_handle|0))|0);
 __ZN19DefaultStylesLoaderC2Ev(31701);
 HEAP32[(29004)>>2] = 0;
 HEAP32[(29008)>>2] = 0;
 HEAP32[7250] = (29004);
 (___cxa_atexit((542|0),(29000|0),(___dso_handle|0))|0);
 return;
}
function __ZN8StyleMapD2Ev($0) {
 $0 = $0|0;
 var $$pre$i = 0, $$pre$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2692);
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($0)) + 24|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==($2|0);
  if ($6) {
   $15 = $2;
  } else {
   $8 = $5;
   while(1) {
    $7 = ((($8)) + -16|0);
    HEAP32[$4>>2] = $7;
    $9 = ((($7)) + 11|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)<(0);
    if ($11) {
     $14 = HEAP32[$7>>2]|0;
     __ZdlPv($14);
     $$pre$i$i$i = HEAP32[$4>>2]|0;
     $13 = $$pre$i$i$i;
    } else {
     $13 = $7;
    }
    $12 = ($13|0)==($2|0);
    if ($12) {
     break;
    } else {
     $8 = $13;
    }
   }
   $$pre$i = HEAP32[$1>>2]|0;
   $15 = $$pre$i;
  }
  __ZdlPv($15);
 }
 $16 = ((($0)) + 8|0);
 $17 = ((($0)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP14StyleValueUberEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($16,$18);
 return;
}
function __ZN19DefaultStylesLoaderC2Ev($0) {
 $0 = $0|0;
 var $$0 = 0, $$02 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 8|0;
 $2 = sp;
 $3 = (__Znwj(688)|0);
 HEAP32[$1>>2] = $3;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = -2147482960;
 $5 = ((($1)) + 4|0);
 HEAP32[$5>>2] = 684;
 _memcpy(($3|0),(10456|0),684)|0;
 $6 = ((($3)) + 684|0);
 HEAP8[$6>>0] = 0;
 __THREW__ = 0;
 invoke_vii(543,($2|0),($1|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 do {
  if ($8) {
   $15 = ___cxa_find_matching_catch_2()|0;
   $16 = tempRet0;
   $$0 = $16;$$02 = $15;
  } else {
   __THREW__ = 0;
   (invoke_iii(544,(28964|0),($2|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $17 = ___cxa_find_matching_catch_2()|0;
    $18 = tempRet0;
    $$0 = $18;$$02 = $17;
    break;
   }
   $11 = ((($1)) + 11|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = ($12<<24>>24)<(0);
   if (!($13)) {
    STACKTOP = sp;return;
   }
   $14 = HEAP32[$1>>2]|0;
   __ZdlPv($14);
   STACKTOP = sp;return;
  }
 } while(0);
 $19 = ((($1)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if (!($21)) {
  ___resumeException($$02|0);
  // unreachable;
 }
 $22 = HEAP32[$1>>2]|0;
 __ZdlPv($22);
 ___resumeException($$02|0);
 // unreachable;
}
function __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP4FontNS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP4FontEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($0,$2);
 return;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP4FontEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP4FontEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($0,$3);
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP4FontEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($0,$5);
 $6 = ((($1)) + 16|0);
 $7 = ((($6)) + 11|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)<(0);
 if ($9) {
  $10 = HEAP32[$6>>2]|0;
  __ZdlPv($10);
 }
 __ZdlPv($1);
 return;
}
function __ZN8StyleMap5parseER12Utf8Iterator($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$10 = 0, $$1076 = 0, $$15 = 0, $$157 = 0, $$1581 = 0, $$16 = 0, $$1682 = 0, $$184 = 0, $$386 = 0, $$487 = 0, $$6 = 0, $$8 = 0, $$874 = 0, $$9 = 0, $$975 = 0, $$off = 0, $$pre = 0, $$pre314 = 0, $$pre315 = 0, $$sink = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $switch1 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0;
 var $vararg_buffer6 = 0, $vararg_buffer8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 180|0;
 $3 = sp + 168|0;
 $4 = sp + 156|0;
 $5 = sp + 144|0;
 $6 = sp + 132|0;
 $7 = sp + 120|0;
 $8 = sp + 108|0;
 $9 = sp + 96|0;
 $10 = sp + 88|0;
 $11 = sp + 76|0;
 $12 = sp + 64|0;
 $13 = sp + 48|0;
 $14 = sp + 32|0;
 __ZN12Utf8Iterator14skipWhitespaceEv($1);
 $15 = (__ZN12Utf8Iterator4nextEv($1)|0);
 $16 = ($15|0)==(123);
 if (!($16)) {
  __ZN3App3logEPKcz(28952,11141,$vararg_buffer);
  $$6 = 0;
  STACKTOP = sp;return ($$6|0);
 }
 $17 = ((($2)) + 11|0);
 $18 = ((($2)) + 4|0);
 $19 = ((($3)) + 11|0);
 $20 = ((($4)) + 11|0);
 $21 = ((($4)) + 4|0);
 $22 = ((($0)) + 8|0);
 $23 = ((($13)) + 12|0);
 $24 = ((($0)) + 24|0);
 $25 = ((($0)) + 28|0);
 $26 = ((($13)) + 11|0);
 $27 = ((($0)) + 20|0);
 $28 = ((($14)) + 12|0);
 $29 = ((($14)) + 11|0);
 $30 = ((($7)) + 11|0);
 $31 = ((($7)) + 4|0);
 $32 = ((($8)) + 11|0);
 $33 = ((($8)) + 2|0);
 $34 = ((($9)) + 11|0);
 $35 = ((($9)) + 1|0);
 $36 = ((($11)) + 11|0);
 $37 = ((($12)) + 11|0);
 $38 = ((($12)) + 1|0);
 L5: while(1) {
  $39 = (__ZN12Utf8Iterator3eofEv($1)|0);
  if ($39) {
   $$6 = 1;
   label = 162;
   break;
  }
  __ZN12Utf8Iterator14skipWhitespaceEv($1);
  $40 = (__ZN12Utf8Iterator4peekEv($1)|0);
  $41 = ($40|0)==(125);
  if ($41) {
   label = 6;
   break;
  }
  __ZN12Utf8Iterator9nextTokenEv($2,$1);
  $42 = HEAP8[$17>>0]|0;
  $43 = ($42<<24>>24)<(0);
  $44 = HEAP32[$18>>2]|0;
  $45 = $42&255;
  $46 = $43 ? $44 : $45;
  switch ($46|0) {
  case 0:  {
   __THREW__ = 0;
   invoke_viii(545,(28952|0),(11161|0),($vararg_buffer4|0));
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if ($48) {
    label = 9;
    break L5;
   } else {
    $$487 = 1;
   }
   break;
  }
  case 1:  {
   __THREW__ = 0;
   $51 = (invoke_iiiiii(546,($2|0),0,-1,(11190|0),1)|0);
   $52 = __THREW__; __THREW__ = 0;
   $53 = $52&1;
   if ($53) {
    label = 11;
    break L5;
   }
   $56 = ($51|0)==(0);
   if ($56) {
    __THREW__ = 0;
    invoke_vii(547,($3|0),($1|0));
    $57 = __THREW__; __THREW__ = 0;
    $58 = $57&1;
    if ($58) {
     label = 9;
     break L5;
    }
    $59 = HEAP8[$19>>0]|0;
    $60 = ($59<<24>>24)<(0);
    if ($60) {
     $61 = HEAP32[$3>>2]|0;
     __ZdlPv($61);
     $$487 = 2;
    } else {
     $$487 = 2;
    }
   } else {
    label = 16;
   }
   break;
  }
  default: {
   label = 16;
  }
  }
  if ((label|0) == 16) {
   label = 0;
   ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
   __THREW__ = 0;
   $62 = (invoke_iii(548,($2|0),64)|0);
   $63 = __THREW__; __THREW__ = 0;
   $64 = $63&1;
   if ($64) {
    label = 31;
    break;
   }
   $65 = ($62|0)>(0);
   if ($65) {
    $66 = (($62) + 1)|0;
    __THREW__ = 0;
    invoke_viii(549,($5|0),($2|0),($66|0));
    $67 = __THREW__; __THREW__ = 0;
    $68 = $67&1;
    if ($68) {
     label = 32;
     break;
    }
    $69 = HEAP8[$20>>0]|0;
    $70 = ($69<<24>>24)<(0);
    if ($70) {
     $71 = HEAP32[$4>>2]|0;
     HEAP8[$71>>0] = 0;
     HEAP32[$21>>2] = 0;
    } else {
     HEAP8[$4>>0] = 0;
     HEAP8[$20>>0] = 0;
    }
    __THREW__ = 0;
    invoke_vii(550,($4|0),0);
    $72 = __THREW__; __THREW__ = 0;
    $73 = $72&1;
    if ($73) {
     label = 23;
     break;
    }
    ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
    __THREW__ = 0;
    invoke_viiii(551,($6|0),($2|0),0,($62|0));
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 33;
     break;
    }
    $78 = HEAP8[$17>>0]|0;
    $79 = ($78<<24>>24)<(0);
    if ($79) {
     $80 = HEAP32[$2>>2]|0;
     HEAP8[$80>>0] = 0;
     HEAP32[$18>>2] = 0;
    } else {
     HEAP8[$2>>0] = 0;
     HEAP8[$17>>0] = 0;
    }
    __THREW__ = 0;
    invoke_vii(550,($2|0),0);
    $81 = __THREW__; __THREW__ = 0;
    $82 = $81&1;
    if ($82) {
     label = 29;
     break;
    }
    ;HEAP32[$2>>2]=HEAP32[$6>>2]|0;HEAP32[$2+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$6+8>>2]|0;
   }
   __THREW__ = 0;
   invoke_vi(552,($1|0));
   $91 = __THREW__; __THREW__ = 0;
   $92 = $91&1;
   if ($92) {
    label = 38;
    break;
   }
   __THREW__ = 0;
   $93 = (invoke_ii(553,($1|0))|0);
   $94 = __THREW__; __THREW__ = 0;
   $95 = $94&1;
   if ($95) {
    label = 38;
    break;
   }
   $96 = ($93|0)==(58);
   do {
    if ($96) {
     __THREW__ = 0;
     invoke_vi(552,($1|0));
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 38;
      break L5;
     }
     __THREW__ = 0;
     $107 = (invoke_ii(527,32)|0);
     $108 = __THREW__; __THREW__ = 0;
     $109 = $108&1;
     if ($109) {
      label = 38;
      break L5;
     }
     $110 = ((($107)) + 8|0);
     ;HEAP32[$110>>2]=0|0;HEAP32[$110+4>>2]=0|0;HEAP32[$110+8>>2]=0|0;
     $111 = ((($107)) + 28|0);
     HEAP32[$111>>2] = 0;
     __THREW__ = 0;
     $112 = (invoke_ii(554,($1|0))|0);
     $113 = __THREW__; __THREW__ = 0;
     $114 = $113&1;
     if ($114) {
      label = 52;
      break L5;
     }
     $115 = ($112|0)==(123);
     if ($115) {
      HEAP32[$107>>2] = 3;
      __THREW__ = 0;
      $116 = (invoke_ii(523,36)|0);
      $117 = __THREW__; __THREW__ = 0;
      $118 = $117&1;
      if ($118) {
       label = 52;
       break L5;
      }
      dest=$116; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
      __THREW__ = 0;
      invoke_vi(555,($116|0));
      $119 = __THREW__; __THREW__ = 0;
      $120 = $119&1;
      if ($120) {
       label = 53;
       break L5;
      }
      HEAP32[$116>>2] = (2692);
      $121 = ((($116)) + 12|0);
      HEAP32[$121>>2] = 0;
      $122 = ((($116)) + 16|0);
      HEAP32[$122>>2] = 0;
      $123 = ((($116)) + 8|0);
      HEAP32[$123>>2] = $121;
      $124 = ((($116)) + 20|0);
      HEAP32[$124>>2] = 0;
      $125 = ((($116)) + 24|0);
      HEAP32[$125>>2] = 0;
      $126 = ((($116)) + 28|0);
      HEAP32[$126>>2] = 0;
      $127 = HEAP32[$111>>2]|0;
      $128 = ($127|0)==($116|0);
      if ($128) {
       $134 = $116;
      } else {
       $129 = ($127|0)==(0|0);
       if (!($129)) {
        __THREW__ = 0;
        invoke_vi(525,($127|0));
        $130 = __THREW__; __THREW__ = 0;
        $131 = $130&1;
        if ($131) {
         label = 52;
         break L5;
        }
       }
       HEAP32[$111>>2] = $116;
       __THREW__ = 0;
       invoke_vi(526,($116|0));
       $132 = __THREW__; __THREW__ = 0;
       $133 = $132&1;
       if ($133) {
        label = 52;
        break L5;
       }
       $$pre = HEAP32[$111>>2]|0;
       $134 = $$pre;
      }
      __THREW__ = 0;
      $135 = (invoke_iii(544,($134|0),($1|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 52;
       break L5;
      }
      if (!($135)) {
       $$386 = 1;
       break;
      }
      $142 = HEAP32[$111>>2]|0;
      $143 = ((($142)) + 32|0);
      HEAP32[$143>>2] = $0;
     } else {
      __THREW__ = 0;
      invoke_vii(547,($7|0),($1|0));
      $144 = __THREW__; __THREW__ = 0;
      $145 = $144&1;
      if ($145) {
       label = 52;
       break L5;
      }
      $146 = HEAP8[$30>>0]|0;
      $147 = ($146<<24>>24)<(0);
      $148 = HEAP32[$31>>2]|0;
      $149 = $146&255;
      $150 = $147 ? $148 : $149;
      $151 = ($150|0)==(0);
      L56: do {
       if ($151) {
        __THREW__ = 0;
        invoke_viii(545,(28952|0),(11234|0),($vararg_buffer8|0));
        $152 = __THREW__; __THREW__ = 0;
        $153 = $152&1;
        if ($153) {
         label = 58;
         break L5;
        } else {
         $$184 = 1;
        }
       } else {
        $156 = HEAP32[$7>>2]|0;
        $157 = $147 ? $156 : $7;
        $158 = HEAP8[$157>>0]|0;
        $$off = (($158) + -48)<<24>>24;
        $159 = ($$off&255)<(10);
        if ($159) {
         __THREW__ = 0;
         $160 = (invoke_iii(556,($7|0),46)|0);
         $161 = __THREW__; __THREW__ = 0;
         $162 = $161&1;
         if ($162) {
          label = 66;
          break L5;
         }
         ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
         HEAP8[$32>>0] = 2;
         HEAP16[$8>>1] = 28772;
         HEAP8[$33>>0] = 0;
         __THREW__ = 0;
         $163 = (invoke_iiii(557,($7|0),($8|0),1)|0);
         $164 = __THREW__; __THREW__ = 0;
         $165 = $164&1;
         if ($165) {
          label = 67;
          break L5;
         }
         $166 = HEAP8[$32>>0]|0;
         $167 = ($166<<24>>24)<(0);
         if ($167) {
          $168 = HEAP32[$8>>2]|0;
          __ZdlPv($168);
         }
         do {
          if ($163) {
           $169 = ((($107)) + 4|0);
           HEAP32[$169>>2] = 1;
           $177 = $107;
          } else {
           if ($160) {
            $177 = $107;
            break;
           }
           HEAP32[$107>>2] = 2;
           __THREW__ = 0;
           $185 = (invoke_ii(559,($7|0))|0);
           $186 = __THREW__; __THREW__ = 0;
           $187 = $186&1;
           if ($187) {
            label = 73;
            break L5;
           }
           $188 = ((($107)) + 24|0);
           HEAP32[$188>>2] = $185;
           $$184 = 0;
           break L56;
          }
         } while(0);
         HEAP32[$177>>2] = 1;
         __THREW__ = 0;
         $178 = (+invoke_di(558,($7|0)));
         $179 = __THREW__; __THREW__ = 0;
         $180 = $179&1;
         if ($180) {
          label = 73;
          break L5;
         }
         $181 = $178;
         $182 = ((($107)) + 20|0);
         HEAPF32[$182>>2] = $181;
         $$184 = 0;
         break;
        }
        ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
        HEAP8[$34>>0] = 1;
        HEAP8[$9>>0] = 34;
        HEAP8[$35>>0] = 0;
        __THREW__ = 0;
        $189 = (invoke_iiii(560,($7|0),($9|0),1)|0);
        $190 = __THREW__; __THREW__ = 0;
        $191 = $190&1;
        if ($191) {
         label = 84;
         break L5;
        }
        $192 = HEAP8[$34>>0]|0;
        $193 = ($192<<24>>24)<(0);
        if ($193) {
         $194 = HEAP32[$9>>2]|0;
         __ZdlPv($194);
        }
        if ($189) {
         __THREW__ = 0;
         invoke_vii(543,($10|0),($7|0));
         $195 = __THREW__; __THREW__ = 0;
         $196 = $195&1;
         if ($196) {
          label = 66;
          break L5;
         }
         ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
         L81: while(1) {
          __THREW__ = 0;
          $197 = (invoke_ii(553,($10|0))|0);
          $198 = __THREW__; __THREW__ = 0;
          $199 = $198&1;
          if ($199) {
           label = 98;
           break L5;
          }
          L84: do {
           switch ($197|0) {
           case 34: case 0:  {
            break L81;
            break;
           }
           case 92:  {
            __THREW__ = 0;
            $205 = (invoke_ii(554,($10|0))|0);
            $206 = __THREW__; __THREW__ = 0;
            $207 = $206&1;
            if ($207) {
             label = 98;
             break L5;
            }
            switch ($205|0) {
            case 117:  {
             label = 92;
             break L5;
             break;
            }
            case 110:  {
             __THREW__ = 0;
             (invoke_ii(553,($10|0))|0);
             $208 = __THREW__; __THREW__ = 0;
             $209 = $208&1;
             if ($209) {
              label = 98;
              break L5;
             } else {
              $$157 = 10;
              break L84;
             }
             break;
            }
            case 114:  {
             __THREW__ = 0;
             (invoke_ii(553,($10|0))|0);
             $210 = __THREW__; __THREW__ = 0;
             $211 = $210&1;
             if ($211) {
              label = 98;
              break L5;
             } else {
              $$157 = 13;
              break L84;
             }
             break;
            }
            case 116:  {
             __THREW__ = 0;
             (invoke_ii(553,($10|0))|0);
             $212 = __THREW__; __THREW__ = 0;
             $213 = $212&1;
             if ($213) {
              label = 98;
              break L5;
             } else {
              $$157 = 9;
              break L84;
             }
             break;
            }
            default: {
             $$157 = 92;
             break L84;
            }
            }
            break;
           }
           default: {
            $$157 = $197;
           }
           }
          } while(0);
          __THREW__ = 0;
          invoke_vii(562,($11|0),($$157|0));
          $215 = __THREW__; __THREW__ = 0;
          $216 = $215&1;
          if ($216) {
           label = 98;
           break L5;
          }
         }
         __THREW__ = 0;
         (invoke_iii(563,($7|0),($11|0))|0);
         $217 = __THREW__; __THREW__ = 0;
         $218 = $217&1;
         if ($218) {
          label = 98;
          break L5;
         }
         $219 = HEAP8[$36>>0]|0;
         $220 = ($219<<24>>24)<(0);
         if ($220) {
          $221 = HEAP32[$11>>2]|0;
          __ZdlPv($221);
         }
        }
        ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
        HEAP8[$37>>0] = 1;
        HEAP8[$12>>0] = 36;
        HEAP8[$38>>0] = 0;
        __THREW__ = 0;
        $227 = (invoke_iiii(560,($7|0),($12|0),1)|0);
        $228 = __THREW__; __THREW__ = 0;
        $229 = $228&1;
        if ($229) {
         label = 105;
         break L5;
        }
        $230 = HEAP8[$37>>0]|0;
        $231 = ($230<<24>>24)<(0);
        if ($231) {
         $232 = HEAP32[$12>>2]|0;
         __ZdlPv($232);
        }
        $$sink = $227 ? 4 : 0;
        HEAP32[$107>>2] = $$sink;
        __THREW__ = 0;
        (invoke_iii(563,($110|0),($7|0))|0);
        $233 = __THREW__; __THREW__ = 0;
        $234 = $233&1;
        if ($234) {
         label = 66;
         break L5;
        } else {
         $$184 = 0;
        }
       }
      } while(0);
      $240 = HEAP8[$30>>0]|0;
      $241 = ($240<<24>>24)<(0);
      if ($241) {
       $242 = HEAP32[$7>>2]|0;
       __ZdlPv($242);
      }
      $cond = ($$184|0)==(0);
      if (!($cond)) {
       $$386 = 1;
       break;
      }
     }
     __THREW__ = 0;
     $246 = (invoke_iii(564,($22|0),($2|0))|0);
     $247 = __THREW__; __THREW__ = 0;
     $248 = $247&1;
     if ($248) {
      label = 52;
      break L5;
     }
     $249 = HEAP32[$246>>2]|0;
     $250 = ($249|0)==(0|0);
     if ($250) {
      __THREW__ = 0;
      $251 = (invoke_ii(523,24)|0);
      $252 = __THREW__; __THREW__ = 0;
      $253 = $252&1;
      if ($253) {
       label = 127;
       break L5;
      }
      ;HEAP32[$251>>2]=0|0;HEAP32[$251+4>>2]=0|0;HEAP32[$251+8>>2]=0|0;HEAP32[$251+12>>2]=0|0;HEAP32[$251+16>>2]=0|0;HEAP32[$251+20>>2]=0|0;
      __THREW__ = 0;
      invoke_vi(555,($251|0));
      $254 = __THREW__; __THREW__ = 0;
      $255 = $254&1;
      if ($255) {
       label = 128;
       break L5;
      }
      HEAP32[$251>>2] = (2708);
      $256 = ((($251)) + 16|0);
      HEAP32[$256>>2] = 0;
      $257 = ((($251)) + 20|0);
      HEAP32[$257>>2] = 0;
      $258 = ((($251)) + 12|0);
      HEAP32[$258>>2] = $256;
      $259 = $251;
      __THREW__ = 0;
      invoke_viii(565,($251|0),($4|0),($107|0));
      $260 = __THREW__; __THREW__ = 0;
      $261 = $260&1;
      if ($261) {
       label = 127;
       break L5;
      }
      __THREW__ = 0;
      $262 = (invoke_iii(564,($22|0),($2|0))|0);
      $263 = __THREW__; __THREW__ = 0;
      $264 = $263&1;
      if ($264) {
       label = 127;
       break L5;
      }
      HEAP32[$262>>2] = $259;
      __THREW__ = 0;
      invoke_vii(566,($13|0),($2|0));
      $265 = __THREW__; __THREW__ = 0;
      $266 = $265&1;
      if ($266) {
       label = 129;
       break L5;
      }
      HEAP32[$23>>2] = $259;
      $267 = HEAP32[$24>>2]|0;
      $268 = HEAP32[$25>>2]|0;
      $269 = ($267>>>0)<($268>>>0);
      do {
       if ($269) {
        ;HEAP32[$267>>2]=HEAP32[$13>>2]|0;HEAP32[$267+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$267+8>>2]=HEAP32[$13+8>>2]|0;
        ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
        $270 = ((($267)) + 12|0);
        $271 = HEAP32[$23>>2]|0;
        HEAP32[$270>>2] = $271;
        $272 = HEAP32[$24>>2]|0;
        $273 = ((($272)) + 16|0);
        HEAP32[$24>>2] = $273;
       } else {
        __THREW__ = 0;
        invoke_vii(567,($27|0),($13|0));
        $274 = __THREW__; __THREW__ = 0;
        $275 = $274&1;
        if ($275) {
         label = 130;
         break L5;
        }
        $$pre315 = HEAP8[$26>>0]|0;
        $276 = ($$pre315<<24>>24)<(0);
        if (!($276)) {
         break;
        }
        $277 = HEAP32[$13>>2]|0;
        __ZdlPv($277);
       }
      } while(0);
      $$386 = 0;
      break;
     } else {
      __THREW__ = 0;
      invoke_viii(565,($249|0),($4|0),($107|0));
      $289 = __THREW__; __THREW__ = 0;
      $290 = $289&1;
      if ($290) {
       label = 127;
       break L5;
      }
      __THREW__ = 0;
      $291 = (invoke_ii(523,24)|0);
      $292 = __THREW__; __THREW__ = 0;
      $293 = $292&1;
      if ($293) {
       label = 127;
       break L5;
      }
      ;HEAP32[$291>>2]=0|0;HEAP32[$291+4>>2]=0|0;HEAP32[$291+8>>2]=0|0;HEAP32[$291+12>>2]=0|0;HEAP32[$291+16>>2]=0|0;HEAP32[$291+20>>2]=0|0;
      __THREW__ = 0;
      invoke_vi(555,($291|0));
      $294 = __THREW__; __THREW__ = 0;
      $295 = $294&1;
      if ($295) {
       label = 144;
       break L5;
      }
      HEAP32[$291>>2] = (2708);
      $296 = ((($291)) + 16|0);
      HEAP32[$296>>2] = 0;
      $297 = ((($291)) + 20|0);
      HEAP32[$297>>2] = 0;
      $298 = ((($291)) + 12|0);
      HEAP32[$298>>2] = $296;
      $299 = $291;
      __THREW__ = 0;
      invoke_viii(565,($291|0),($4|0),($107|0));
      $300 = __THREW__; __THREW__ = 0;
      $301 = $300&1;
      if ($301) {
       label = 145;
       break L5;
      }
      __THREW__ = 0;
      invoke_vii(566,($14|0),($2|0));
      $302 = __THREW__; __THREW__ = 0;
      $303 = $302&1;
      if ($303) {
       label = 146;
       break L5;
      }
      HEAP32[$28>>2] = $299;
      $304 = HEAP32[$24>>2]|0;
      $305 = HEAP32[$25>>2]|0;
      $306 = ($304>>>0)<($305>>>0);
      do {
       if ($306) {
        ;HEAP32[$304>>2]=HEAP32[$14>>2]|0;HEAP32[$304+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$304+8>>2]=HEAP32[$14+8>>2]|0;
        ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
        $307 = ((($304)) + 12|0);
        $308 = HEAP32[$28>>2]|0;
        HEAP32[$307>>2] = $308;
        $309 = HEAP32[$24>>2]|0;
        $310 = ((($309)) + 16|0);
        HEAP32[$24>>2] = $310;
       } else {
        __THREW__ = 0;
        invoke_vii(567,($27|0),($14|0));
        $311 = __THREW__; __THREW__ = 0;
        $312 = $311&1;
        if ($312) {
         label = 147;
         break L5;
        }
        $$pre314 = HEAP8[$29>>0]|0;
        $313 = ($$pre314<<24>>24)<(0);
        if (!($313)) {
         break;
        }
        $314 = HEAP32[$14>>2]|0;
        __ZdlPv($314);
       }
      } while(0);
      $$386 = 0;
      break;
     }
    } else {
     $97 = HEAP8[$17>>0]|0;
     $98 = ($97<<24>>24)<(0);
     $99 = HEAP32[$2>>2]|0;
     $100 = $98 ? $99 : $2;
     __THREW__ = 0;
     HEAP32[$vararg_buffer6>>2] = $100;
     invoke_viii(545,(28952|0),(11192|0),($vararg_buffer6|0));
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 38;
      break L5;
     } else {
      $$386 = 1;
     }
    }
   } while(0);
   $326 = HEAP8[$20>>0]|0;
   $327 = ($326<<24>>24)<(0);
   if ($327) {
    $328 = HEAP32[$4>>2]|0;
    __ZdlPv($328);
   }
   $$487 = $$386;
  }
  $329 = HEAP8[$17>>0]|0;
  $330 = ($329<<24>>24)<(0);
  if ($330) {
   $331 = HEAP32[$2>>2]|0;
   __ZdlPv($331);
  }
  $switch1 = ($$487|0)==(1);
  if ($switch1) {
   $$6 = 0;
   label = 162;
   break;
  }
 }
 switch (label|0) {
  case 6: {
   (__ZN12Utf8Iterator4nextEv($1)|0);
   $$6 = 1;
   STACKTOP = sp;return ($$6|0);
   break;
  }
  case 9: {
   $49 = ___cxa_find_matching_catch_2()|0;
   $50 = tempRet0;
   $$16 = $49;$$1682 = $50;
   break;
  }
  case 11: {
   $54 = ___cxa_find_matching_catch_3(0|0)|0;
   $55 = tempRet0;
   ___clang_call_terminate($54);
   // unreachable;
   break;
  }
  case 23: {
   $74 = ___cxa_find_matching_catch_3(0|0)|0;
   $75 = tempRet0;
   ___clang_call_terminate($74);
   // unreachable;
   break;
  }
  case 29: {
   $83 = ___cxa_find_matching_catch_3(0|0)|0;
   $84 = tempRet0;
   ___clang_call_terminate($83);
   // unreachable;
   break;
  }
  case 31: {
   $85 = ___cxa_find_matching_catch_2()|0;
   $86 = tempRet0;
   $$15 = $85;$$1581 = $86;
   label = 156;
   break;
  }
  case 32: {
   $87 = ___cxa_find_matching_catch_2()|0;
   $88 = tempRet0;
   $$15 = $87;$$1581 = $88;
   label = 156;
   break;
  }
  case 33: {
   $89 = ___cxa_find_matching_catch_2()|0;
   $90 = tempRet0;
   $$15 = $89;$$1581 = $90;
   label = 156;
   break;
  }
  case 38: {
   $103 = ___cxa_find_matching_catch_2()|0;
   $104 = tempRet0;
   $$15 = $103;$$1581 = $104;
   label = 156;
   break;
  }
  case 52: {
   $138 = ___cxa_find_matching_catch_2()|0;
   $139 = tempRet0;
   $$15 = $138;$$1581 = $139;
   label = 156;
   break;
  }
  case 53: {
   $140 = ___cxa_find_matching_catch_2()|0;
   $141 = tempRet0;
   __ZdlPv($116);
   $$15 = $140;$$1581 = $141;
   label = 156;
   break;
  }
  case 58: {
   $154 = ___cxa_find_matching_catch_2()|0;
   $155 = tempRet0;
   $$8 = $154;$$874 = $155;
   label = 111;
   break;
  }
  case 66: {
   $170 = ___cxa_find_matching_catch_2()|0;
   $171 = tempRet0;
   $$8 = $170;$$874 = $171;
   label = 111;
   break;
  }
  case 67: {
   $172 = ___cxa_find_matching_catch_2()|0;
   $173 = tempRet0;
   $174 = HEAP8[$32>>0]|0;
   $175 = ($174<<24>>24)<(0);
   if ($175) {
    $176 = HEAP32[$8>>2]|0;
    __ZdlPv($176);
   }
   $$8 = $172;$$874 = $173;
   label = 111;
   break;
  }
  case 73: {
   $183 = ___cxa_find_matching_catch_2()|0;
   $184 = tempRet0;
   $$8 = $183;$$874 = $184;
   label = 111;
   break;
  }
  case 84: {
   $200 = ___cxa_find_matching_catch_2()|0;
   $201 = tempRet0;
   $202 = HEAP8[$34>>0]|0;
   $203 = ($202<<24>>24)<(0);
   if ($203) {
    $204 = HEAP32[$9>>2]|0;
    __ZdlPv($204);
   }
   $$8 = $200;$$874 = $201;
   label = 111;
   break;
  }
  case 92: {
   __THREW__ = 0;
   invoke_viiii(561,(22544|0),(11258|0),277,(11298|0));
   $214 = __THREW__; __THREW__ = 0;
   label = 98;
   break;
  }
  case 105: {
   $235 = ___cxa_find_matching_catch_2()|0;
   $236 = tempRet0;
   $237 = HEAP8[$37>>0]|0;
   $238 = ($237<<24>>24)<(0);
   if ($238) {
    $239 = HEAP32[$12>>2]|0;
    __ZdlPv($239);
   }
   $$8 = $235;$$874 = $236;
   label = 111;
   break;
  }
  case 127: {
   $278 = ___cxa_find_matching_catch_2()|0;
   $279 = tempRet0;
   $$15 = $278;$$1581 = $279;
   label = 156;
   break;
  }
  case 128: {
   $280 = ___cxa_find_matching_catch_2()|0;
   $281 = tempRet0;
   __ZdlPv($251);
   $$15 = $280;$$1581 = $281;
   label = 156;
   break;
  }
  case 129: {
   $282 = ___cxa_find_matching_catch_2()|0;
   $283 = tempRet0;
   $$9 = $282;$$975 = $283;
   label = 132;
   break;
  }
  case 130: {
   $284 = ___cxa_find_matching_catch_2()|0;
   $285 = tempRet0;
   $286 = HEAP8[$26>>0]|0;
   $287 = ($286<<24>>24)<(0);
   if ($287) {
    $288 = HEAP32[$13>>2]|0;
    __ZdlPv($288);
    $$9 = $284;$$975 = $285;
    label = 132;
   } else {
    $$9 = $284;$$975 = $285;
    label = 132;
   }
   break;
  }
  case 144: {
   $315 = ___cxa_find_matching_catch_2()|0;
   $316 = tempRet0;
   __ZdlPv($291);
   $$15 = $315;$$1581 = $316;
   label = 156;
   break;
  }
  case 145: {
   $317 = ___cxa_find_matching_catch_2()|0;
   $318 = tempRet0;
   $$15 = $317;$$1581 = $318;
   label = 156;
   break;
  }
  case 146: {
   $319 = ___cxa_find_matching_catch_2()|0;
   $320 = tempRet0;
   $$10 = $319;$$1076 = $320;
   label = 149;
   break;
  }
  case 147: {
   $321 = ___cxa_find_matching_catch_2()|0;
   $322 = tempRet0;
   $323 = HEAP8[$29>>0]|0;
   $324 = ($323<<24>>24)<(0);
   if ($324) {
    $325 = HEAP32[$14>>2]|0;
    __ZdlPv($325);
    $$10 = $321;$$1076 = $322;
    label = 149;
   } else {
    $$10 = $321;$$1076 = $322;
    label = 149;
   }
   break;
  }
  case 162: {
   STACKTOP = sp;return ($$6|0);
   break;
  }
 }
 if ((label|0) == 98) {
  $222 = ___cxa_find_matching_catch_2()|0;
  $223 = tempRet0;
  $224 = HEAP8[$36>>0]|0;
  $225 = ($224<<24>>24)<(0);
  if ($225) {
   $226 = HEAP32[$11>>2]|0;
   __ZdlPv($226);
  }
  $$8 = $222;$$874 = $223;
  label = 111;
 }
 else if ((label|0) == 132) {
  $$15 = $$9;$$1581 = $$975;
  label = 156;
 }
 else if ((label|0) == 149) {
  $$15 = $$10;$$1581 = $$1076;
  label = 156;
 }
 if ((label|0) == 111) {
  $243 = HEAP8[$30>>0]|0;
  $244 = ($243<<24>>24)<(0);
  if ($244) {
   $245 = HEAP32[$7>>2]|0;
   __ZdlPv($245);
  }
  $$15 = $$8;$$1581 = $$874;
  label = 156;
 }
 if ((label|0) == 156) {
  $332 = HEAP8[$20>>0]|0;
  $333 = ($332<<24>>24)<(0);
  if ($333) {
   $334 = HEAP32[$4>>2]|0;
   __ZdlPv($334);
  }
  $$16 = $$15;$$1682 = $$1581;
 }
 $335 = HEAP8[$17>>0]|0;
 $336 = ($335<<24>>24)<(0);
 if (!($336)) {
  ___resumeException($$16|0);
  // unreachable;
 }
 $337 = HEAP32[$2>>2]|0;
 __ZdlPv($337);
 ___resumeException($$16|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP14StyleValueUberNS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEixERSC_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$pre$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP14StyleValueUberEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISL_EERKT_($0,$2,$1)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $$0$i = $4;
  $26 = ((($$0$i)) + 28|0);
  STACKTOP = sp;return ($26|0);
 }
 $6 = (__Znwj(32)|0);
 $7 = ((($6)) + 16|0);
 __THREW__ = 0;
 invoke_vii(566,($7|0),($1|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch_2()|0;
  $11 = tempRet0;
  __ZdlPv($6);
  ___resumeException($10|0);
  // unreachable;
 }
 $12 = ((($6)) + 28|0);
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[$2>>2]|0;
 HEAP32[$6>>2] = 0;
 $14 = ((($6)) + 4|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($6)) + 8|0);
 HEAP32[$15>>2] = $13;
 HEAP32[$3>>2] = $6;
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $22 = $6;
 } else {
  $19 = $17;
  HEAP32[$0>>2] = $19;
  $$pre$i$i = HEAP32[$3>>2]|0;
  $22 = $$pre$i$i;
 }
 $20 = ((($0)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($21,$22);
 $23 = ((($0)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 1)|0;
 HEAP32[$23>>2] = $25;
 $$0$i = $6;
 $26 = ((($$0$i)) + 28|0);
 STACKTOP = sp;return ($26|0);
}
function __ZN14StyleValueUber8setValueERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP10StyleValue($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$in = 0, $$sink = 0, $$sroa$022$0$be = 0, $$sroa$022$028 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = ((($1)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 $8 = ((($1)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $6&255;
 $11 = $7 ? $9 : $10;
 $12 = ($11|0)==(0);
 if ($12) {
  $$0$in = $4;
 } else {
  $13 = ((($0)) + 12|0);
  $14 = (__ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10StyleValueNS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEixERSC_($13,$1)|0);
  $$0$in = $14;
 }
 $$0 = HEAP32[$$0$in>>2]|0;
 $15 = ($$0|0)==(0|0);
 if (!($15)) {
  $16 = HEAP32[$2>>2]|0;
  $17 = ($16|0)==(3);
  if ($17) {
   $18 = ((($2)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($19)) + 12|0);
   $23 = ($21|0)==($22|0);
   if ($23) {
    STACKTOP = sp;return;
   }
   $24 = ((($3)) + 12|0);
   $25 = ((($$0)) + 28|0);
   $26 = ((($3)) + 11|0);
   $$sroa$022$028 = $21;
   while(1) {
    $27 = ((($$sroa$022$028)) + 16|0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$27);
    $28 = ((($$sroa$022$028)) + 28|0);
    $29 = HEAP32[$28>>2]|0;
    HEAP32[$24>>2] = $29;
    $30 = HEAP32[$25>>2]|0;
    $31 = ((($30)) + 8|0);
    __THREW__ = 0;
    $32 = (invoke_iii(564,($31|0),($3|0))|0);
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if ($34) {
     break;
    }
    HEAP32[$32>>2] = $29;
    $35 = HEAP8[$26>>0]|0;
    $36 = ($35<<24>>24)<(0);
    if ($36) {
     $37 = HEAP32[$3>>2]|0;
     __ZdlPv($37);
    }
    $38 = ((($$sroa$022$028)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39|0)==(0|0);
    if ($40) {
     $41 = ((($$sroa$022$028)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==($$sroa$022$028|0);
     if ($44) {
      $$sroa$022$0$be = $42;
     } else {
      $49 = $41;
      while(1) {
       $48 = HEAP32[$49>>2]|0;
       $50 = ((($48)) + 8|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = HEAP32[$51>>2]|0;
       $53 = ($52|0)==($48|0);
       if ($53) {
        $$sroa$022$0$be = $51;
        break;
       } else {
        $49 = $50;
       }
      }
     }
    } else {
     $$0$i$i$i$i = $39;
     while(1) {
      $46 = HEAP32[$$0$i$i$i$i>>2]|0;
      $47 = ($46|0)==(0|0);
      if ($47) {
       break;
      } else {
       $$0$i$i$i$i = $46;
      }
     }
     $$sroa$022$0$be = $$0$i$i$i$i;
    }
    $45 = ($$sroa$022$0$be|0)==($22|0);
    if ($45) {
     label = 22;
     break;
    } else {
     $$sroa$022$028 = $$sroa$022$0$be;
    }
   }
   if ((label|0) == 22) {
    STACKTOP = sp;return;
   }
   $54 = ___cxa_find_matching_catch_2()|0;
   $55 = tempRet0;
   $56 = HEAP8[$26>>0]|0;
   $57 = ($56<<24>>24)<(0);
   if (!($57)) {
    ___resumeException($54|0);
    // unreachable;
   }
   $58 = HEAP32[$3>>2]|0;
   __ZdlPv($58);
   ___resumeException($54|0);
   // unreachable;
  }
 }
 $59 = HEAP8[$5>>0]|0;
 $60 = ($59<<24>>24)<(0);
 $61 = HEAP32[$8>>2]|0;
 $62 = $59&255;
 $63 = $60 ? $61 : $62;
 $64 = ($63|0)==(0);
 if ($64) {
  $$sink = $4;
 } else {
  $65 = ((($0)) + 12|0);
  $66 = (__ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10StyleValueNS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEixERSC_($65,$1)|0);
  $$sink = $66;
 }
 HEAP32[$$sink>>2] = $2;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP14StyleValueUberEENS5_ISA_EEE21__push_back_slow_pathISA_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$06$i$i = 0, $$pre = 0, $$pre$i = 0, $$sroa$7$0 = 0, $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 4;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>(268435455);
 if ($8) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($4))|0;
 $12 = $11 >> 4;
 $13 = ($12>>>0)<(134217727);
 $14 = $11 >> 3;
 $15 = ($14>>>0)<($7>>>0);
 $$sroa$speculated$i = $15 ? $7 : $14;
 $$sroa$speculated$$i = $13 ? $$sroa$speculated$i : 268435455;
 $16 = ($$sroa$speculated$$i|0)==(0);
 do {
  if ($16) {
   $26 = 0;
  } else {
   $17 = ($$sroa$speculated$$i>>>0)>(268435455);
   if (!($17)) {
    $23 = $$sroa$speculated$$i << 4;
    $24 = (__Znwj($23)|0);
    $26 = $24;
    break;
   }
   $18 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(568,($18|0),(23604|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $21 = ___cxa_find_matching_catch_2()|0;
    $22 = tempRet0;
    ___cxa_free_exception(($18|0));
    ___resumeException($21|0);
    // unreachable;
   } else {
    HEAP32[$18>>2] = (9544);
    ___cxa_throw(($18|0),(1992|0),(506|0));
    // unreachable;
   }
  }
 } while(0);
 $25 = (($26) + ($6<<4)|0);
 $27 = $25;
 $28 = (($26) + ($$sroa$speculated$$i<<4)|0);
 $29 = $28;
 ;HEAP32[$25>>2]=HEAP32[$1>>2]|0;HEAP32[$25+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$25+8>>2]=HEAP32[$1+8>>2]|0;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $30 = (((($26) + ($6<<4)|0)) + 12|0);
 $31 = ((($1)) + 12|0);
 $32 = HEAP32[$31>>2]|0;
 HEAP32[$30>>2] = $32;
 $33 = ((($25)) + 16|0);
 $34 = $33;
 $35 = HEAP32[$0>>2]|0;
 $36 = HEAP32[$2>>2]|0;
 $37 = ($36|0)==($35|0);
 if ($37) {
  $38 = $35;
  $49 = $27;$51 = $38;$53 = $35;
 } else {
  $$06$i$i = $36;$$sroa$7$0 = $27;$40 = $25;
  while(1) {
   $39 = ((($40)) + -16|0);
   $41 = ((($$06$i$i)) + -16|0);
   ;HEAP32[$39>>2]=HEAP32[$41>>2]|0;HEAP32[$39+4>>2]=HEAP32[$41+4>>2]|0;HEAP32[$39+8>>2]=HEAP32[$41+8>>2]|0;
   ;HEAP32[$41>>2]=0|0;HEAP32[$41+4>>2]=0|0;HEAP32[$41+8>>2]=0|0;
   $42 = ((($40)) + -4|0);
   $43 = ((($$06$i$i)) + -4|0);
   $44 = HEAP32[$43>>2]|0;
   HEAP32[$42>>2] = $44;
   $45 = $$sroa$7$0;
   $46 = ((($45)) + -16|0);
   $47 = $46;
   $48 = ($41|0)==($35|0);
   if ($48) {
    break;
   } else {
    $$06$i$i = $41;$$sroa$7$0 = $47;$40 = $46;
   }
  }
  $$pre$i = HEAP32[$0>>2]|0;
  $$pre = HEAP32[$2>>2]|0;
  $49 = $47;$51 = $$pre$i;$53 = $$pre;
 }
 HEAP32[$0>>2] = $49;
 HEAP32[$2>>2] = $34;
 HEAP32[$9>>2] = $29;
 $50 = $51;
 $52 = ($53|0)==($50|0);
 if (!($52)) {
  $55 = $53;
  while(1) {
   $54 = ((($55)) + -16|0);
   $56 = ((($54)) + 11|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = ($57<<24>>24)<(0);
   if ($58) {
    $60 = HEAP32[$54>>2]|0;
    __ZdlPv($60);
   }
   $59 = ($54|0)==($50|0);
   if ($59) {
    break;
   } else {
    $55 = $54;
   }
  }
 }
 $61 = ($51|0)==(0);
 if ($61) {
  return;
 }
 $62 = $51;
 __ZdlPv($62);
 return;
}
function __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10StyleValueNS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEixERSC_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$pre$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10StyleValueEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISL_EERKT_($0,$2,$1)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $$0$i = $4;
  $26 = ((($$0$i)) + 28|0);
  STACKTOP = sp;return ($26|0);
 }
 $6 = (__Znwj(32)|0);
 $7 = ((($6)) + 16|0);
 __THREW__ = 0;
 invoke_vii(566,($7|0),($1|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch_2()|0;
  $11 = tempRet0;
  __ZdlPv($6);
  ___resumeException($10|0);
  // unreachable;
 }
 $12 = ((($6)) + 28|0);
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[$2>>2]|0;
 HEAP32[$6>>2] = 0;
 $14 = ((($6)) + 4|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($6)) + 8|0);
 HEAP32[$15>>2] = $13;
 HEAP32[$3>>2] = $6;
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $22 = $6;
 } else {
  $19 = $17;
  HEAP32[$0>>2] = $19;
  $$pre$i$i = HEAP32[$3>>2]|0;
  $22 = $$pre$i$i;
 }
 $20 = ((($0)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($21,$22);
 $23 = ((($0)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 1)|0;
 HEAP32[$23>>2] = $25;
 $$0$i = $6;
 $26 = ((($$0$i)) + 28|0);
 STACKTOP = sp;return ($26|0);
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10StyleValueEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISL_EERKT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$ph = 0, $$024 = 0, $$025 = 0, $$in = 0, $$sroa$speculated$i$i$i$i$i = 0, $$sroa$speculated$i$i$i$i$i26 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$1>>2] = $3;
  $$025 = $3;
  return ($$025|0);
 }
 $6 = ((($0)) + 4|0);
 $7 = ((($2)) + 11|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)<(0);
 $10 = ((($2)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $8&255;
 $13 = $9 ? $11 : $12;
 $14 = HEAP32[$2>>2]|0;
 $15 = $9 ? $14 : $2;
 $$0 = $6;$$024 = $4;
 while(1) {
  $16 = ((($$024)) + 16|0);
  $17 = ((($16)) + 11|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)<(0);
  $20 = ((($$024)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $18&255;
  $23 = $19 ? $21 : $22;
  $24 = ($23>>>0)<($13>>>0);
  $$sroa$speculated$i$i$i$i$i26 = $24 ? $23 : $13;
  $25 = ($$sroa$speculated$i$i$i$i$i26|0)==(0);
  if ($25) {
   label = 6;
  } else {
   $26 = HEAP32[$16>>2]|0;
   $27 = $19 ? $26 : $16;
   $28 = (_memcmp($15,$27,$$sroa$speculated$i$i$i$i$i26)|0);
   $29 = ($28|0)==(0);
   if ($29) {
    label = 6;
   } else {
    $31 = ($28|0)<(0);
    if ($31) {
     label = 8;
    } else {
     label = 10;
    }
   }
  }
  if ((label|0) == 6) {
   label = 0;
   $30 = ($13>>>0)<($23>>>0);
   if ($30) {
    label = 8;
   } else {
    label = 10;
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $32 = HEAP32[$$024>>2]|0;
   $33 = ($32|0)==(0|0);
   if ($33) {
    label = 9;
    break;
   } else {
    $$0$ph = $$024;$$in = $32;
   }
  }
  else if ((label|0) == 10) {
   label = 0;
   $34 = ($13>>>0)<($23>>>0);
   $$sroa$speculated$i$i$i$i$i = $34 ? $13 : $23;
   $35 = ($$sroa$speculated$i$i$i$i$i|0)==(0);
   if ($35) {
    label = 12;
   } else {
    $36 = HEAP32[$16>>2]|0;
    $37 = $19 ? $36 : $16;
    $38 = (_memcmp($37,$15,$$sroa$speculated$i$i$i$i$i)|0);
    $39 = ($38|0)==(0);
    if ($39) {
     label = 12;
    } else {
     $40 = ($38|0)<(0);
     if (!($40)) {
      label = 16;
      break;
     }
    }
   }
   if ((label|0) == 12) {
    label = 0;
    if (!($24)) {
     label = 16;
     break;
    }
   }
   $41 = ((($$024)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(0|0);
   if ($43) {
    label = 15;
    break;
   } else {
    $$0$ph = $41;$$in = $42;
   }
  }
  $$0 = $$0$ph;$$024 = $$in;
 }
 if ((label|0) == 9) {
  HEAP32[$1>>2] = $$024;
  $$025 = $$024;
  return ($$025|0);
 }
 else if ((label|0) == 15) {
  HEAP32[$1>>2] = $$024;
  $$025 = $41;
  return ($$025|0);
 }
 else if ((label|0) == 16) {
  HEAP32[$1>>2] = $$024;
  $$025 = $$0;
  return ($$025|0);
 }
 return (0)|0;
}
function __ZN14StyleValueUberD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2708);
 $1 = ((($0)) + 12|0);
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10StyleValueEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($1,$3);
 return;
}
function __ZN14StyleValueUberD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2708);
 $1 = ((($0)) + 12|0);
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10StyleValueEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($1,$3);
 __ZdlPv($0);
 return;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10StyleValueEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10StyleValueEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($0,$3);
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10StyleValueEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($0,$5);
 $6 = ((($1)) + 16|0);
 $7 = ((($6)) + 11|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)<(0);
 if ($9) {
  $10 = HEAP32[$6>>2]|0;
  __ZdlPv($10);
 }
 __ZdlPv($1);
 return;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP14StyleValueUberEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISL_EERKT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$ph = 0, $$024 = 0, $$025 = 0, $$in = 0, $$sroa$speculated$i$i$i$i$i = 0, $$sroa$speculated$i$i$i$i$i26 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$1>>2] = $3;
  $$025 = $3;
  return ($$025|0);
 }
 $6 = ((($0)) + 4|0);
 $7 = ((($2)) + 11|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)<(0);
 $10 = ((($2)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $8&255;
 $13 = $9 ? $11 : $12;
 $14 = HEAP32[$2>>2]|0;
 $15 = $9 ? $14 : $2;
 $$0 = $6;$$024 = $4;
 while(1) {
  $16 = ((($$024)) + 16|0);
  $17 = ((($16)) + 11|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)<(0);
  $20 = ((($$024)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $18&255;
  $23 = $19 ? $21 : $22;
  $24 = ($23>>>0)<($13>>>0);
  $$sroa$speculated$i$i$i$i$i26 = $24 ? $23 : $13;
  $25 = ($$sroa$speculated$i$i$i$i$i26|0)==(0);
  if ($25) {
   label = 6;
  } else {
   $26 = HEAP32[$16>>2]|0;
   $27 = $19 ? $26 : $16;
   $28 = (_memcmp($15,$27,$$sroa$speculated$i$i$i$i$i26)|0);
   $29 = ($28|0)==(0);
   if ($29) {
    label = 6;
   } else {
    $31 = ($28|0)<(0);
    if ($31) {
     label = 8;
    } else {
     label = 10;
    }
   }
  }
  if ((label|0) == 6) {
   label = 0;
   $30 = ($13>>>0)<($23>>>0);
   if ($30) {
    label = 8;
   } else {
    label = 10;
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $32 = HEAP32[$$024>>2]|0;
   $33 = ($32|0)==(0|0);
   if ($33) {
    label = 9;
    break;
   } else {
    $$0$ph = $$024;$$in = $32;
   }
  }
  else if ((label|0) == 10) {
   label = 0;
   $34 = ($13>>>0)<($23>>>0);
   $$sroa$speculated$i$i$i$i$i = $34 ? $13 : $23;
   $35 = ($$sroa$speculated$i$i$i$i$i|0)==(0);
   if ($35) {
    label = 12;
   } else {
    $36 = HEAP32[$16>>2]|0;
    $37 = $19 ? $36 : $16;
    $38 = (_memcmp($37,$15,$$sroa$speculated$i$i$i$i$i)|0);
    $39 = ($38|0)==(0);
    if ($39) {
     label = 12;
    } else {
     $40 = ($38|0)<(0);
     if (!($40)) {
      label = 16;
      break;
     }
    }
   }
   if ((label|0) == 12) {
    label = 0;
    if (!($24)) {
     label = 16;
     break;
    }
   }
   $41 = ((($$024)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(0|0);
   if ($43) {
    label = 15;
    break;
   } else {
    $$0$ph = $41;$$in = $42;
   }
  }
  $$0 = $$0$ph;$$024 = $$in;
 }
 if ((label|0) == 9) {
  HEAP32[$1>>2] = $$024;
  $$025 = $$024;
  return ($$025|0);
 }
 else if ((label|0) == 15) {
  HEAP32[$1>>2] = $$024;
  $$025 = $41;
  return ($$025|0);
 }
 else if ((label|0) == 16) {
  HEAP32[$1>>2] = $$024;
  $$025 = $$0;
  return ($$025|0);
 }
 return (0)|0;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP14StyleValueUberEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP14StyleValueUberEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($0,$3);
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP14StyleValueUberEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($0,$5);
 $6 = ((($1)) + 16|0);
 $7 = ((($6)) + 11|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)<(0);
 if ($9) {
  $10 = HEAP32[$6>>2]|0;
  __ZdlPv($10);
 }
 __ZdlPv($1);
 return;
}
function __ZN8StyleMapD0Ev($0) {
 $0 = $0|0;
 var $$pre$i$i = 0, $$pre$i$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2692);
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($0)) + 24|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==($2|0);
  if ($6) {
   $15 = $2;
  } else {
   $8 = $5;
   while(1) {
    $7 = ((($8)) + -16|0);
    HEAP32[$4>>2] = $7;
    $9 = ((($7)) + 11|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)<(0);
    if ($11) {
     $14 = HEAP32[$7>>2]|0;
     __ZdlPv($14);
     $$pre$i$i$i$i = HEAP32[$4>>2]|0;
     $13 = $$pre$i$i$i$i;
    } else {
     $13 = $7;
    }
    $12 = ($13|0)==($2|0);
    if ($12) {
     break;
    } else {
     $8 = $13;
    }
   }
   $$pre$i$i = HEAP32[$1>>2]|0;
   $15 = $$pre$i$i;
  }
  __ZdlPv($15);
 }
 $16 = ((($0)) + 8|0);
 $17 = ((($0)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP14StyleValueUberEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($16,$18);
 __ZdlPv($0);
 return;
}
function __ZN8StyleMap8getValueERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$141 = 0, $$239 = 0, $$246 = 0, $$5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = sp + 16|0;
 $3 = sp + 4|0;
 $4 = (__Z17stringIndexOfCharRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEDi($1,46)|0);
 $5 = ($4|0)>(0);
 L1: do {
  if ($5) {
   __Z15stringSubstringRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEii($2,$1,0,$4);
   $6 = (($4) + 1)|0;
   __THREW__ = 0;
   invoke_viii(549,($3|0),($1|0),($6|0));
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $19 = ___cxa_find_matching_catch_2()|0;
    $20 = tempRet0;
    $$239 = $19;$$246 = $20;
   } else {
    $9 = ((($0)) + 8|0);
    __THREW__ = 0;
    $10 = (invoke_iii(564,($9|0),($2|0))|0);
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    L6: do {
     if (!($12)) {
      $13 = HEAP32[$10>>2]|0;
      $14 = ($13|0)==(0|0);
      do {
       if ($14) {
        $$1 = 0;$$141 = 1;
       } else {
        __THREW__ = 0;
        $15 = (invoke_ii(569,($13|0))|0);
        $16 = __THREW__; __THREW__ = 0;
        $17 = $16&1;
        if ($17) {
         break L6;
        }
        $18 = ($15|0)==(0|0);
        if ($18) {
         $$1 = 0;$$141 = 0;
        } else {
         $21 = HEAP32[$15>>2]|0;
         $22 = ($21|0)==(3);
         if ($22) {
          $30 = ((($15)) + 28|0);
          $31 = HEAP32[$30>>2]|0;
          __THREW__ = 0;
          $32 = (invoke_iii(570,($31|0),($3|0))|0);
          $33 = __THREW__; __THREW__ = 0;
          $34 = $33&1;
          if ($34) {
           break L6;
          } else {
           $$1 = $32;$$141 = 0;
           break;
          }
         } else {
          $23 = ((($2)) + 11|0);
          $24 = HEAP8[$23>>0]|0;
          $25 = ($24<<24>>24)<(0);
          $26 = HEAP32[$2>>2]|0;
          $27 = $25 ? $26 : $2;
          __THREW__ = 0;
          HEAP32[$vararg_buffer>>2] = $27;
          invoke_viii(545,(28952|0),(11371|0),($vararg_buffer|0));
          $28 = __THREW__; __THREW__ = 0;
          $29 = $28&1;
          if ($29) {
           break L6;
          } else {
           $$1 = 0;$$141 = 0;
           break;
          }
         }
        }
       }
      } while(0);
      $35 = ((($3)) + 11|0);
      $36 = HEAP8[$35>>0]|0;
      $37 = ($36<<24>>24)<(0);
      if ($37) {
       $38 = HEAP32[$3>>2]|0;
       __ZdlPv($38);
      }
      $39 = ((($2)) + 11|0);
      $40 = HEAP8[$39>>0]|0;
      $41 = ($40<<24>>24)<(0);
      if ($41) {
       $42 = HEAP32[$2>>2]|0;
       __ZdlPv($42);
      }
      if ($$141) {
       break L1;
      } else {
       $$5 = $$1;
      }
      STACKTOP = sp;return ($$5|0);
     }
    } while(0);
    $43 = ___cxa_find_matching_catch_2()|0;
    $44 = tempRet0;
    $45 = ((($3)) + 11|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = ($46<<24>>24)<(0);
    if ($47) {
     $48 = HEAP32[$3>>2]|0;
     __ZdlPv($48);
    }
    $$239 = $43;$$246 = $44;
   }
   $49 = ((($2)) + 11|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = ($50<<24>>24)<(0);
   if (!($51)) {
    ___resumeException($$239|0);
    // unreachable;
   }
   $52 = HEAP32[$2>>2]|0;
   __ZdlPv($52);
   ___resumeException($$239|0);
   // unreachable;
  } else {
   $53 = ((($0)) + 8|0);
   $54 = (__ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP14StyleValueUberNS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEixERSC_($53,$1)|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)==(0|0);
   if (!($56)) {
    $57 = (__ZN14StyleValueUber6selectEv($55)|0);
    $58 = ($57|0)==(0|0);
    if (!($58)) {
     $$5 = $57;
     STACKTOP = sp;return ($$5|0);
    }
   }
   $59 = ((($0)) + 32|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)==(0|0);
   if (!($61)) {
    $62 = (__ZN8StyleMap8getValueERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($60,$1)|0);
    $$5 = $62;
    STACKTOP = sp;return ($$5|0);
   }
  }
 } while(0);
 $$5 = 0;
 STACKTOP = sp;return ($$5|0);
}
function __ZN14StyleValueUber6selectEv($0) {
 $0 = $0|0;
 var $$0$i$i$i$i = 0, $$2$lcssa = 0, $$236 = 0, $$pre = 0, $$pre41 = 0, $$pre42 = 0, $$pre43 = 0, $$pre44 = 0, $$sroa$027$0$be = 0, $$sroa$027$039 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $1 = sp + 8|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 16|0);
 $7 = ($5|0)==($6|0);
 L1: do {
  if (!($7)) {
   $8 = ((($1)) + 12|0);
   $9 = ((($1)) + 11|0);
   $10 = ((($1)) + 4|0);
   $$sroa$027$039 = $5;
   L3: while(1) {
    $12 = ((($$sroa$027$039)) + 16|0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($1,$12);
    $13 = ((($$sroa$027$039)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    HEAP32[$8>>2] = $14;
    $15 = HEAP8[$9>>0]|0;
    $16 = ($15<<24>>24)<(0);
    $17 = HEAP32[$10>>2]|0;
    $18 = $15&255;
    $19 = $16 ? $17 : $18;
    $20 = ($19|0)==(3);
    if ($20) {
     __THREW__ = 0;
     $21 = (invoke_iiiiii(546,($1|0),0,-1,(11404|0),3)|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      label = 6;
      break;
     }
     $26 = ($21|0)==(0);
     if (!($26)) {
      $$pre = HEAP8[$9>>0]|0;
      $$pre41 = HEAP32[$10>>2]|0;
      $28 = $$pre;$31 = $$pre41;
      label = 9;
     }
    } else {
     $28 = $15;$31 = $17;
     label = 9;
    }
    do {
     if ((label|0) == 9) {
      label = 0;
      $27 = ($28<<24>>24)<(0);
      $29 = $28&255;
      $30 = $27 ? $31 : $29;
      $32 = ($30|0)==(3);
      if ($32) {
       __THREW__ = 0;
       $33 = (invoke_iiiiii(546,($1|0),0,-1,(11408|0),3)|0);
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       if ($35) {
        label = 11;
        break L3;
       }
       $38 = ($33|0)==(0);
       if ($38) {
        break;
       }
       $$pre42 = HEAP8[$9>>0]|0;
       $$pre43 = HEAP32[$10>>2]|0;
       $40 = $$pre42;$43 = $$pre43;
      } else {
       $40 = $28;$43 = $31;
      }
      $39 = ($40<<24>>24)<(0);
      $41 = $40&255;
      $42 = $39 ? $43 : $41;
      $44 = ($42|0)==(7);
      if ($44) {
       __THREW__ = 0;
       $45 = (invoke_iiiiii(546,($1|0),0,-1,(11412|0),7)|0);
       $46 = __THREW__; __THREW__ = 0;
       $47 = $46&1;
       if ($47) {
        label = 16;
        break L3;
       }
       $50 = ($45|0)==(0);
       if ($50) {
        break;
       }
       $$pre44 = HEAP8[$9>>0]|0;
       $52 = $$pre44;
      } else {
       $52 = $40;
      }
      $51 = ($52<<24>>24)<(0);
      $53 = HEAP32[$1>>2]|0;
      $54 = $51 ? $53 : $1;
      __THREW__ = 0;
      HEAP32[$vararg_buffer>>2] = $54;
      invoke_viii(545,(28952|0),(11420|0),($vararg_buffer|0));
      $55 = __THREW__; __THREW__ = 0;
      $56 = $55&1;
      if ($56) {
       label = 20;
       break L3;
      }
     }
    } while(0);
    $62 = HEAP8[$9>>0]|0;
    $63 = ($62<<24>>24)<(0);
    if ($63) {
     $64 = HEAP32[$1>>2]|0;
     __ZdlPv($64);
    }
    $65 = ((($$sroa$027$039)) + 4|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    if ($67) {
     $68 = ((($$sroa$027$039)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = HEAP32[$69>>2]|0;
     $71 = ($70|0)==($$sroa$027$039|0);
     if ($71) {
      $$sroa$027$0$be = $69;
     } else {
      $76 = $68;
      while(1) {
       $75 = HEAP32[$76>>2]|0;
       $77 = ((($75)) + 8|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = HEAP32[$78>>2]|0;
       $80 = ($79|0)==($75|0);
       if ($80) {
        $$sroa$027$0$be = $78;
        break;
       } else {
        $76 = $77;
       }
      }
     }
    } else {
     $$0$i$i$i$i = $66;
     while(1) {
      $73 = HEAP32[$$0$i$i$i$i>>2]|0;
      $74 = ($73|0)==(0|0);
      if ($74) {
       break;
      } else {
       $$0$i$i$i$i = $73;
      }
     }
     $$sroa$027$0$be = $$0$i$i$i$i;
    }
    $72 = ($$sroa$027$0$be|0)==($6|0);
    if ($72) {
     break L1;
    } else {
     $$sroa$027$039 = $$sroa$027$0$be;
    }
   }
   if ((label|0) == 6) {
    $24 = ___cxa_find_matching_catch_3(0|0)|0;
    $25 = tempRet0;
    ___clang_call_terminate($24);
    // unreachable;
   }
   else if ((label|0) == 11) {
    $36 = ___cxa_find_matching_catch_3(0|0)|0;
    $37 = tempRet0;
    ___clang_call_terminate($36);
    // unreachable;
   }
   else if ((label|0) == 16) {
    $48 = ___cxa_find_matching_catch_3(0|0)|0;
    $49 = tempRet0;
    ___clang_call_terminate($48);
    // unreachable;
   }
   else if ((label|0) == 20) {
    $57 = ___cxa_find_matching_catch_2()|0;
    $58 = tempRet0;
    $59 = HEAP8[$9>>0]|0;
    $60 = ($59<<24>>24)<(0);
    if (!($60)) {
     ___resumeException($57|0);
     // unreachable;
    }
    $61 = HEAP32[$1>>2]|0;
    __ZdlPv($61);
    ___resumeException($57|0);
    // unreachable;
   }
  }
 } while(0);
 $11 = ($3|0)==(0|0);
 if ($11) {
  $$2$lcssa = 0;
  STACKTOP = sp;return ($$2$lcssa|0);
 } else {
  $$236 = $3;
 }
 while(1) {
  $81 = HEAP32[$$236>>2]|0;
  $82 = ($81|0)==(4);
  if (!($82)) {
   $$2$lcssa = $$236;
   label = 33;
   break;
  }
  $83 = ((($$236)) + 8|0);
  $84 = (__ZN8StyleMap8getValueERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(28964,$83)|0);
  $85 = ($84|0)==(0|0);
  if ($85) {
   $$2$lcssa = 0;
   label = 33;
   break;
  } else {
   $$236 = $84;
  }
 }
 if ((label|0) == 33) {
  STACKTOP = sp;return ($$2$lcssa|0);
 }
 return (0)|0;
}
function __ZN6Styles9getStringERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = (__ZN8StyleMap8getValueERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(28964,$1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = ((($1)) + 11|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)<(0);
  $7 = HEAP32[$1>>2]|0;
  $8 = $6 ? $7 : $1;
  HEAP32[$vararg_buffer>>2] = $8;
  __ZN3App3logEPKcz(28952,11331,$vararg_buffer);
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$2>>2]|0;
 switch ($9|0) {
 case 0:  {
  $10 = ((($2)) + 8|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$10);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $11 = ((($2)) + 24|0);
  $12 = HEAP32[$11>>2]|0;
  __Z13stringFromInti($0,$12);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $13 = ((($2)) + 20|0);
  $14 = +HEAPF32[$13>>2];
  $15 = $14;
  __Z16stringFromDoubled($0,$15);
  STACKTOP = sp;return;
  break;
 }
 default: {
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
  STACKTOP = sp;return;
 }
 }
}
function __ZN6Styles15defaultFontNameEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = sp + 4|0;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $2 = ((($1)) + 11|0);
 HEAP8[$2>>0] = 9;
 dest=$1; src=22490; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $3 = ((($1)) + 9|0);
 HEAP8[$3>>0] = 0;
 __THREW__ = 0;
 $4 = (invoke_iii(570,(28964|0),($1|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L1: do {
  if (!($6)) {
   $7 = ($4|0)==(0|0);
   L3: do {
    if ($7) {
     $8 = HEAP8[$2>>0]|0;
     $9 = ($8<<24>>24)<(0);
     $10 = HEAP32[$1>>2]|0;
     $11 = $9 ? $10 : $1;
     __THREW__ = 0;
     HEAP32[$vararg_buffer>>2] = $11;
     invoke_viii(545,(28952|0),(11331|0),($vararg_buffer|0));
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if ($13) {
      break L1;
     }
     ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
    } else {
     $14 = HEAP32[$4>>2]|0;
     switch ($14|0) {
     case 0:  {
      $15 = ((($4)) + 8|0);
      __THREW__ = 0;
      invoke_vii(566,($0|0),($15|0));
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       break L1;
      } else {
       break L3;
      }
      break;
     }
     case 2:  {
      $18 = ((($4)) + 24|0);
      $19 = HEAP32[$18>>2]|0;
      __THREW__ = 0;
      invoke_vii(571,($0|0),($19|0));
      $20 = __THREW__; __THREW__ = 0;
      $21 = $20&1;
      if ($21) {
       break L1;
      } else {
       break L3;
      }
      break;
     }
     case 1:  {
      $22 = ((($4)) + 20|0);
      $23 = +HEAPF32[$22>>2];
      $24 = $23;
      __THREW__ = 0;
      invoke_vid(572,($0|0),(+$24));
      $25 = __THREW__; __THREW__ = 0;
      $26 = $25&1;
      if ($26) {
       break L1;
      } else {
       break L3;
      }
      break;
     }
     default: {
      ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
      break L3;
     }
     }
    }
   } while(0);
   $27 = HEAP8[$2>>0]|0;
   $28 = ($27<<24>>24)<(0);
   if (!($28)) {
    STACKTOP = sp;return;
   }
   $29 = HEAP32[$1>>2]|0;
   __ZdlPv($29);
   STACKTOP = sp;return;
  }
 } while(0);
 $30 = ___cxa_find_matching_catch_2()|0;
 $31 = tempRet0;
 $32 = HEAP8[$2>>0]|0;
 $33 = ($32<<24>>24)<(0);
 if (!($33)) {
  ___resumeException($30|0);
  // unreachable;
 }
 $34 = HEAP32[$1>>2]|0;
 __ZdlPv($34);
 ___resumeException($30|0);
 // unreachable;
}
function __ZN6Styles15defaultFontSizeEv() {
 var $$0$i = 0.0, $$0$i$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = sp + 4|0;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $1 = ((($0)) + 11|0);
 HEAP8[$1>>0] = 9;
 dest=$0; src=22500; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $2 = ((($0)) + 9|0);
 HEAP8[$2>>0] = 0;
 __THREW__ = 0;
 $3 = (invoke_iii(570,(28964|0),($0|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 L1: do {
  if (!($5)) {
   $6 = ($3|0)==(0|0);
   if ($6) {
    $7 = HEAP8[$1>>0]|0;
    $8 = ($7<<24>>24)<(0);
    $9 = HEAP32[$0>>2]|0;
    $10 = $8 ? $9 : $0;
    __THREW__ = 0;
    HEAP32[$vararg_buffer>>2] = $10;
    invoke_viii(545,(28952|0),(11456|0),($vararg_buffer|0));
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if ($12) {
     break;
    } else {
     $$0$i = 0.0;
    }
   } else {
    $13 = HEAP32[$3>>2]|0;
    switch ($13|0) {
    case 1:  {
     $14 = ((($3)) + 20|0);
     $15 = +HEAPF32[$14>>2];
     $$0$i$i = $15;
     break;
    }
    case 2:  {
     $16 = ((($3)) + 24|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = (+($17|0));
     $$0$i$i = $18;
     break;
    }
    default: {
     __THREW__ = 0;
     invoke_viiii(561,(22544|0),(11258|0),345,(11495|0));
     $19 = __THREW__; __THREW__ = 0;
     break L1;
    }
    }
    $20 = ((($3)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(1);
    if ($22) {
     __THREW__ = 0;
     $23 = (+invoke_did(537,(28952|0),(+$$0$i$i)));
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      break;
     } else {
      $$0$i = $23;
     }
    } else {
     $$0$i = $$0$i$i;
    }
   }
   $26 = HEAP8[$1>>0]|0;
   $27 = ($26<<24>>24)<(0);
   if (!($27)) {
    STACKTOP = sp;return (+$$0$i);
   }
   $28 = HEAP32[$0>>2]|0;
   __ZdlPv($28);
   STACKTOP = sp;return (+$$0$i);
  }
 } while(0);
 $29 = ___cxa_find_matching_catch_2()|0;
 $30 = tempRet0;
 $31 = HEAP8[$1>>0]|0;
 $32 = ($31<<24>>24)<(0);
 if (!($32)) {
  ___resumeException($29|0);
  // unreachable;
 }
 $33 = HEAP32[$0>>2]|0;
 __ZdlPv($33);
 ___resumeException($29|0);
 // unreachable;
 return +(0.0);
}
function __ZN6Styles8getFloatERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0) {
 $0 = $0|0;
 var $$0 = 0.0, $$0$i = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__ZN8StyleMap8getValueERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(28964,$0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = ((($0)) + 11|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)<(0);
  $6 = HEAP32[$0>>2]|0;
  $7 = $5 ? $6 : $0;
  HEAP32[$vararg_buffer>>2] = $7;
  __ZN3App3logEPKcz(28952,11456,$vararg_buffer);
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $8 = HEAP32[$1>>2]|0;
 switch ($8|0) {
 case 1:  {
  $9 = ((($1)) + 20|0);
  $10 = +HEAPF32[$9>>2];
  $$0$i = $10;
  break;
 }
 case 2:  {
  $11 = ((($1)) + 24|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (+($12|0));
  $$0$i = $13;
  break;
 }
 default: {
  ___assert_fail((22544|0),(11258|0),345,(11495|0));
  // unreachable;
 }
 }
 $14 = ((($1)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(1);
 if (!($16)) {
  $$0 = $$0$i;
  STACKTOP = sp;return (+$$0);
 }
 $17 = (+__ZN3App2dpEf(28952,$$0$i));
 $$0 = $17;
 STACKTOP = sp;return (+$$0);
}
function __ZN6Styles7getFontERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0.0, $$0$i$i = 0.0, $$013 = 0, $$014 = 0, $$016$i$i = 0, $$017$i$i = 0, $$3 = 0, $$317 = 0, $$4 = 0, $$418 = 0, $$5 = 0, $$519 = 0, $$pre$phi47Z2D = 0, $$pre46 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 68|0;
 $2 = sp + 56|0;
 $3 = sp + 44|0;
 $4 = sp + 80|0;
 $5 = sp + 32|0;
 __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_($2,$0,22456);
 __THREW__ = 0;
 $6 = (invoke_iii(570,(28964|0),($2|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 L1: do {
  if (!($8)) {
   $9 = ($6|0)==(0|0);
   L3: do {
    if ($9) {
     $10 = ((($2)) + 11|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = ($11<<24>>24)<(0);
     $13 = HEAP32[$2>>2]|0;
     $14 = $12 ? $13 : $2;
     __THREW__ = 0;
     HEAP32[$vararg_buffer>>2] = $14;
     invoke_viii(545,(28952|0),(11331|0),($vararg_buffer|0));
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if ($16) {
      break L1;
     }
     ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
    } else {
     $17 = HEAP32[$6>>2]|0;
     switch ($17|0) {
     case 0:  {
      $18 = ((($6)) + 8|0);
      __THREW__ = 0;
      invoke_vii(566,($1|0),($18|0));
      $19 = __THREW__; __THREW__ = 0;
      $20 = $19&1;
      if ($20) {
       break L1;
      } else {
       break L3;
      }
      break;
     }
     case 2:  {
      $21 = ((($6)) + 24|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      invoke_vii(571,($1|0),($22|0));
      $23 = __THREW__; __THREW__ = 0;
      $24 = $23&1;
      if ($24) {
       break L1;
      } else {
       break L3;
      }
      break;
     }
     case 1:  {
      $25 = ((($6)) + 20|0);
      $26 = +HEAPF32[$25>>2];
      $27 = $26;
      __THREW__ = 0;
      invoke_vid(572,($1|0),(+$27));
      $28 = __THREW__; __THREW__ = 0;
      $29 = $28&1;
      if ($29) {
       break L1;
      } else {
       break L3;
      }
      break;
     }
     default: {
      ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
      break L3;
     }
     }
    }
   } while(0);
   $30 = ((($2)) + 11|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = ($31<<24>>24)<(0);
   if ($32) {
    $33 = HEAP32[$2>>2]|0;
    __ZdlPv($33);
   }
   __THREW__ = 0;
   invoke_viii(573,($3|0),($0|0),(22467|0));
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   L16: do {
    if ($35) {
     $98 = ___cxa_find_matching_catch_2()|0;
     $99 = tempRet0;
     $$013 = $98;$$014 = $99;
     label = 40;
    } else {
     __THREW__ = 0;
     $36 = (invoke_iii(570,(28964|0),($3|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     L19: do {
      if (!($38)) {
       $39 = ($36|0)==(0|0);
       if ($39) {
        $40 = ((($3)) + 11|0);
        $41 = HEAP8[$40>>0]|0;
        $42 = ($41<<24>>24)<(0);
        $43 = HEAP32[$3>>2]|0;
        $44 = $42 ? $43 : $3;
        __THREW__ = 0;
        HEAP32[$vararg_buffer3>>2] = $44;
        invoke_viii(545,(28952|0),(11456|0),($vararg_buffer3|0));
        $45 = __THREW__; __THREW__ = 0;
        $46 = $45&1;
        if ($46) {
         break;
        } else {
         $$0$i = 0.0;
        }
       } else {
        $47 = HEAP32[$36>>2]|0;
        switch ($47|0) {
        case 1:  {
         $48 = ((($36)) + 20|0);
         $49 = +HEAPF32[$48>>2];
         $$0$i$i = $49;
         break;
        }
        case 2:  {
         $50 = ((($36)) + 24|0);
         $51 = HEAP32[$50>>2]|0;
         $52 = (+($51|0));
         $$0$i$i = $52;
         break;
        }
        default: {
         __THREW__ = 0;
         invoke_viiii(561,(22544|0),(11258|0),345,(11495|0));
         $53 = __THREW__; __THREW__ = 0;
         break L19;
        }
        }
        $54 = ((($36)) + 4|0);
        $55 = HEAP32[$54>>2]|0;
        $56 = ($55|0)==(1);
        if ($56) {
         __THREW__ = 0;
         $57 = (+invoke_did(537,(28952|0),(+$$0$i$i)));
         $58 = __THREW__; __THREW__ = 0;
         $59 = $58&1;
         if ($59) {
          break;
         } else {
          $$0$i = $57;
         }
        } else {
         $$0$i = $$0$i$i;
        }
       }
       $60 = ((($3)) + 11|0);
       $61 = HEAP8[$60>>0]|0;
       $62 = ($61<<24>>24)<(0);
       if ($62) {
        $63 = HEAP32[$3>>2]|0;
        __ZdlPv($63);
       }
       $64 = $$0$i;
       $65 = ((($1)) + 11|0);
       $66 = HEAP8[$65>>0]|0;
       $67 = ($66<<24>>24)<(0);
       $68 = HEAP32[$1>>2]|0;
       $69 = $67 ? $68 : $1;
       HEAPF64[$vararg_buffer6>>3] = $64;
       $vararg_ptr9 = ((($vararg_buffer6)) + 8|0);
       HEAP32[$vararg_ptr9>>2] = $69;
       (_sprintf($4,11506,$vararg_buffer6)|0);
       ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
       $70 = (_strlen($4)|0);
       $71 = ($70>>>0)>(4294967279);
       do {
        if ($71) {
         __THREW__ = 0;
         invoke_vi(574,($5|0));
         $72 = __THREW__; __THREW__ = 0;
         label = 41;
        } else {
         $73 = ($70>>>0)<(11);
         if ($73) {
          $82 = $70&255;
          $83 = ((($5)) + 11|0);
          HEAP8[$83>>0] = $82;
          $84 = ($70|0)==(0);
          if ($84) {
           $$017$i$i = $5;
          } else {
           $$016$i$i = $5;
           label = 30;
          }
         } else {
          $74 = (($70) + 16)|0;
          $75 = $74 & -16;
          __THREW__ = 0;
          $76 = (invoke_ii(527,($75|0))|0);
          $77 = __THREW__; __THREW__ = 0;
          $78 = $77&1;
          if ($78) {
           label = 41;
           break;
          }
          HEAP32[$5>>2] = $76;
          $79 = $75 | -2147483648;
          $80 = ((($5)) + 8|0);
          HEAP32[$80>>2] = $79;
          $81 = ((($5)) + 4|0);
          HEAP32[$81>>2] = $70;
          $$016$i$i = $76;
          label = 30;
         }
         if ((label|0) == 30) {
          _memcpy(($$016$i$i|0),($4|0),($70|0))|0;
          $$017$i$i = $$016$i$i;
         }
         $85 = (($$017$i$i) + ($70)|0);
         HEAP8[$85>>0] = 0;
         __THREW__ = 0;
         $86 = (invoke_iii(575,(29000|0),($5|0))|0);
         $87 = __THREW__; __THREW__ = 0;
         $88 = $87&1;
         do {
          if (!($88)) {
           $89 = ($86|0)==((29004)|0);
           if ($89) {
            __THREW__ = 0;
            $108 = (invoke_iid(576,($1|0),(+$$0$i))|0);
            $109 = __THREW__; __THREW__ = 0;
            $110 = $109&1;
            if ($110) {
             break;
            }
            __THREW__ = 0;
            $111 = (invoke_iii(577,(29000|0),($5|0))|0);
            $112 = __THREW__; __THREW__ = 0;
            $113 = $112&1;
            if ($113) {
             break;
            }
            HEAP32[$111>>2] = $108;
            $$0 = $108;
           } else {
            $90 = ((($86)) + 28|0);
            $91 = HEAP32[$90>>2]|0;
            $$0 = $91;
           }
           $114 = ((($5)) + 11|0);
           $115 = HEAP8[$114>>0]|0;
           $116 = ($115<<24>>24)<(0);
           if ($116) {
            $117 = HEAP32[$5>>2]|0;
            __ZdlPv($117);
           }
           $118 = HEAP8[$65>>0]|0;
           $119 = ($118<<24>>24)<(0);
           if (!($119)) {
            STACKTOP = sp;return ($$0|0);
           }
           $120 = HEAP32[$1>>2]|0;
           __ZdlPv($120);
           STACKTOP = sp;return ($$0|0);
          }
         } while(0);
         $121 = ___cxa_find_matching_catch_2()|0;
         $122 = tempRet0;
         $123 = ((($5)) + 11|0);
         $124 = HEAP8[$123>>0]|0;
         $125 = ($124<<24>>24)<(0);
         if ($125) {
          $126 = HEAP32[$5>>2]|0;
          __ZdlPv($126);
         }
         $$3 = $121;$$317 = $122;
        }
       } while(0);
       if ((label|0) == 41) {
        $106 = ___cxa_find_matching_catch_2()|0;
        $107 = tempRet0;
        $$3 = $106;$$317 = $107;
       }
       $$4 = $$3;$$418 = $$317;$$pre$phi47Z2D = $65;
       break L16;
      }
     } while(0);
     $100 = ___cxa_find_matching_catch_2()|0;
     $101 = tempRet0;
     $102 = ((($3)) + 11|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = ($103<<24>>24)<(0);
     if ($104) {
      $105 = HEAP32[$3>>2]|0;
      __ZdlPv($105);
      $$013 = $100;$$014 = $101;
      label = 40;
     } else {
      $$013 = $100;$$014 = $101;
      label = 40;
     }
    }
   } while(0);
   if ((label|0) == 40) {
    $$pre46 = ((($1)) + 11|0);
    $$4 = $$013;$$418 = $$014;$$pre$phi47Z2D = $$pre46;
   }
   $127 = HEAP8[$$pre$phi47Z2D>>0]|0;
   $128 = ($127<<24>>24)<(0);
   if ($128) {
    $129 = HEAP32[$1>>2]|0;
    __ZdlPv($129);
   }
   $$5 = $$4;$$519 = $$418;
   ___resumeException($$5|0);
   // unreachable;
  }
 } while(0);
 $92 = ___cxa_find_matching_catch_2()|0;
 $93 = tempRet0;
 $94 = ((($2)) + 11|0);
 $95 = HEAP8[$94>>0]|0;
 $96 = ($95<<24>>24)<(0);
 if ($96) {
  $97 = HEAP32[$2>>2]|0;
  __ZdlPv($97);
 }
 $$5 = $92;$$519 = $93;
 ___resumeException($$5|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $4&255;
 $9 = $5 ? $7 : $8;
 $10 = (_strlen($2)|0);
 $11 = HEAP32[$1>>2]|0;
 $12 = $5 ? $11 : $1;
 $13 = (($9) + ($10))|0;
 $14 = ($13>>>0)>(4294967279);
 do {
  if ($14) {
   __THREW__ = 0;
   invoke_vi(574,($0|0));
   $15 = __THREW__; __THREW__ = 0;
  } else {
   $16 = ($13>>>0)<(11);
   if ($16) {
    $17 = $9&255;
    $18 = ((($0)) + 11|0);
    HEAP8[$18>>0] = $17;
    $$0$i = $0;
   } else {
    $19 = (($13) + 16)|0;
    $20 = $19 & -16;
    __THREW__ = 0;
    $21 = (invoke_ii(527,($20|0))|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    HEAP32[$0>>2] = $21;
    $24 = $20 | -2147483648;
    $25 = ((($0)) + 8|0);
    HEAP32[$25>>2] = $24;
    $26 = ((($0)) + 4|0);
    HEAP32[$26>>2] = $9;
    $$0$i = $21;
   }
   $27 = ($9|0)==(0);
   if (!($27)) {
    _memcpy(($$0$i|0),($12|0),($9|0))|0;
   }
   $28 = (($$0$i) + ($9)|0);
   HEAP8[$28>>0] = 0;
   __THREW__ = 0;
   (invoke_iiii(578,($0|0),($2|0),($10|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if (!($30)) {
    return;
   }
  }
 } while(0);
 $31 = ___cxa_find_matching_catch_2()|0;
 $32 = tempRet0;
 $33 = ((($0)) + 11|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = ($34<<24>>24)<(0);
 if (!($35)) {
  ___resumeException($31|0);
  // unreachable;
 }
 $36 = HEAP32[$0>>2]|0;
 __ZdlPv($36);
 ___resumeException($31|0);
 // unreachable;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP4FontEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE4findIS7_EENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEEiEERKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$ph$lcssa$i = 0, $$0$ph14$i = 0, $$07$ph13$i = 0, $$0710$i = 0, $$sroa$0$0 = 0, $$sroa$speculated$i$i$i$i$i = 0, $$sroa$speculated$i$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if (!($4)) {
   $5 = ((($1)) + 11|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)<(0);
   $8 = ((($1)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $6&255;
   $11 = $7 ? $9 : $10;
   $12 = HEAP32[$1>>2]|0;
   $13 = $7 ? $12 : $1;
   $$0$ph14$i = $2;$$07$ph13$i = $3;
   L3: while(1) {
    $$0710$i = $$07$ph13$i;
    while(1) {
     $14 = ((($$0710$i)) + 16|0);
     $15 = ((($14)) + 11|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)<(0);
     $18 = ((($$0710$i)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = $16&255;
     $21 = $17 ? $19 : $20;
     $22 = ($11>>>0)<($21>>>0);
     $$sroa$speculated$i$i$i$i$i$i = $22 ? $11 : $21;
     $23 = ($$sroa$speculated$i$i$i$i$i$i|0)==(0);
     if ($23) {
      label = 6;
     } else {
      $24 = HEAP32[$14>>2]|0;
      $25 = $17 ? $24 : $14;
      $26 = (_memcmp($25,$13,$$sroa$speculated$i$i$i$i$i$i)|0);
      $27 = ($26|0)==(0);
      if ($27) {
       label = 6;
      } else {
       $29 = ($26|0)<(0);
       if (!($29)) {
        break;
       }
      }
     }
     if ((label|0) == 6) {
      label = 0;
      $28 = ($21>>>0)<($11>>>0);
      if (!($28)) {
       break;
      }
     }
     $32 = ((($$0710$i)) + 4|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)==(0|0);
     if ($34) {
      $$0$ph$lcssa$i = $$0$ph14$i;
      break L3;
     } else {
      $$0710$i = $33;
     }
    }
    $30 = HEAP32[$$0710$i>>2]|0;
    $31 = ($30|0)==(0|0);
    if ($31) {
     $$0$ph$lcssa$i = $$0710$i;
     break;
    } else {
     $$0$ph14$i = $$0710$i;$$07$ph13$i = $30;
    }
   }
   $35 = ($$0$ph$lcssa$i|0)==($2|0);
   if (!($35)) {
    $36 = ((($$0$ph$lcssa$i)) + 16|0);
    $37 = ((($36)) + 11|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = ($38<<24>>24)<(0);
    $40 = ((($$0$ph$lcssa$i)) + 20|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $38&255;
    $43 = $39 ? $41 : $42;
    $44 = ($43>>>0)<($11>>>0);
    $$sroa$speculated$i$i$i$i$i = $44 ? $43 : $11;
    $45 = ($$sroa$speculated$i$i$i$i$i|0)==(0);
    if (!($45)) {
     $46 = HEAP32[$36>>2]|0;
     $47 = $39 ? $46 : $36;
     $48 = (_memcmp($13,$47,$$sroa$speculated$i$i$i$i$i)|0);
     $49 = ($48|0)==(0);
     if (!($49)) {
      $51 = ($48|0)<(0);
      if ($51) {
       break;
      } else {
       $$sroa$0$0 = $$0$ph$lcssa$i;
      }
      return ($$sroa$0$0|0);
     }
    }
    $50 = ($11>>>0)<($43>>>0);
    if (!($50)) {
     $$sroa$0$0 = $$0$ph$lcssa$i;
     return ($$sroa$0$0|0);
    }
   }
  }
 } while(0);
 $$sroa$0$0 = $2;
 return ($$sroa$0$0|0);
}
function __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP4FontNS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEixERSC_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$pre$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP4FontEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISL_EERKT_($0,$2,$1)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $$0$i = $4;
  $26 = ((($$0$i)) + 28|0);
  STACKTOP = sp;return ($26|0);
 }
 $6 = (__Znwj(32)|0);
 $7 = ((($6)) + 16|0);
 __THREW__ = 0;
 invoke_vii(566,($7|0),($1|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch_2()|0;
  $11 = tempRet0;
  __ZdlPv($6);
  ___resumeException($10|0);
  // unreachable;
 }
 $12 = ((($6)) + 28|0);
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[$2>>2]|0;
 HEAP32[$6>>2] = 0;
 $14 = ((($6)) + 4|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($6)) + 8|0);
 HEAP32[$15>>2] = $13;
 HEAP32[$3>>2] = $6;
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $22 = $6;
 } else {
  $19 = $17;
  HEAP32[$0>>2] = $19;
  $$pre$i$i = HEAP32[$3>>2]|0;
  $22 = $$pre$i$i;
 }
 $20 = ((($0)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($21,$22);
 $23 = ((($0)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 1)|0;
 HEAP32[$23>>2] = $25;
 $$0$i = $6;
 $26 = ((($$0$i)) + 28|0);
 STACKTOP = sp;return ($26|0);
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP4FontEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISL_EERKT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$ph = 0, $$024 = 0, $$025 = 0, $$in = 0, $$sroa$speculated$i$i$i$i$i = 0, $$sroa$speculated$i$i$i$i$i26 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$1>>2] = $3;
  $$025 = $3;
  return ($$025|0);
 }
 $6 = ((($0)) + 4|0);
 $7 = ((($2)) + 11|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)<(0);
 $10 = ((($2)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $8&255;
 $13 = $9 ? $11 : $12;
 $14 = HEAP32[$2>>2]|0;
 $15 = $9 ? $14 : $2;
 $$0 = $6;$$024 = $4;
 while(1) {
  $16 = ((($$024)) + 16|0);
  $17 = ((($16)) + 11|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)<(0);
  $20 = ((($$024)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $18&255;
  $23 = $19 ? $21 : $22;
  $24 = ($23>>>0)<($13>>>0);
  $$sroa$speculated$i$i$i$i$i26 = $24 ? $23 : $13;
  $25 = ($$sroa$speculated$i$i$i$i$i26|0)==(0);
  if ($25) {
   label = 6;
  } else {
   $26 = HEAP32[$16>>2]|0;
   $27 = $19 ? $26 : $16;
   $28 = (_memcmp($15,$27,$$sroa$speculated$i$i$i$i$i26)|0);
   $29 = ($28|0)==(0);
   if ($29) {
    label = 6;
   } else {
    $31 = ($28|0)<(0);
    if ($31) {
     label = 8;
    } else {
     label = 10;
    }
   }
  }
  if ((label|0) == 6) {
   label = 0;
   $30 = ($13>>>0)<($23>>>0);
   if ($30) {
    label = 8;
   } else {
    label = 10;
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $32 = HEAP32[$$024>>2]|0;
   $33 = ($32|0)==(0|0);
   if ($33) {
    label = 9;
    break;
   } else {
    $$0$ph = $$024;$$in = $32;
   }
  }
  else if ((label|0) == 10) {
   label = 0;
   $34 = ($13>>>0)<($23>>>0);
   $$sroa$speculated$i$i$i$i$i = $34 ? $13 : $23;
   $35 = ($$sroa$speculated$i$i$i$i$i|0)==(0);
   if ($35) {
    label = 12;
   } else {
    $36 = HEAP32[$16>>2]|0;
    $37 = $19 ? $36 : $16;
    $38 = (_memcmp($37,$15,$$sroa$speculated$i$i$i$i$i)|0);
    $39 = ($38|0)==(0);
    if ($39) {
     label = 12;
    } else {
     $40 = ($38|0)<(0);
     if (!($40)) {
      label = 16;
      break;
     }
    }
   }
   if ((label|0) == 12) {
    label = 0;
    if (!($24)) {
     label = 16;
     break;
    }
   }
   $41 = ((($$024)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(0|0);
   if ($43) {
    label = 15;
    break;
   } else {
    $$0$ph = $41;$$in = $42;
   }
  }
  $$0 = $$0$ph;$$024 = $$in;
 }
 if ((label|0) == 9) {
  HEAP32[$1>>2] = $$024;
  $$025 = $$024;
  return ($$025|0);
 }
 else if ((label|0) == 15) {
  HEAP32[$1>>2] = $$024;
  $$025 = $41;
  return ($$025|0);
 }
 else if ((label|0) == 16) {
  HEAP32[$1>>2] = $$024;
  $$025 = $$0;
  return ($$025|0);
 }
 return (0)|0;
}
function __ZN10StyleValue10getAsFloatEv($0) {
 $0 = $0|0;
 var $$0 = 0.0, $$1 = 0.0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 switch ($1|0) {
 case 1:  {
  $2 = ((($0)) + 20|0);
  $3 = +HEAPF32[$2>>2];
  $$0 = $3;
  break;
 }
 case 2:  {
  $4 = ((($0)) + 24|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (+($5|0));
  $$0 = $6;
  break;
 }
 default: {
  ___assert_fail((22544|0),(11258|0),345,(11495|0));
  // unreachable;
 }
 }
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(1);
 if (!($9)) {
  $$1 = $$0;
  return (+$$1);
 }
 $10 = (+__ZN3App2dpEf(28952,$$0));
 $$1 = $10;
 return (+$$1);
}
function __ZN6Styles9getColourERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__ZN8StyleMap8getValueERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(28964,$0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = ((($0)) + 11|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)<(0);
  $6 = HEAP32[$0>>2]|0;
  $7 = $5 ? $6 : $0;
  HEAP32[$vararg_buffer>>2] = $7;
  __ZN3App3logEPKcz(28952,11512,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = ($8|0)==(2);
 if (!($9)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ((($1)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $$0 = $11;
 STACKTOP = sp;return ($$0|0);
}
function __ZN6Styles9loadAssetERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0) {
 $0 = $0|0;
 var $$0 = 0, $$02 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $4 ? $5 : $0;
 $7 = (__ZN3App9loadAssetEPKc(28952,$6)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 __ZN6Object6retainEv($7);
 __THREW__ = 0;
 invoke_vii(579,($1|0),($7|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 do {
  if ($12) {
   $9 = ___cxa_find_matching_catch_2()|0;
   $10 = tempRet0;
   $$0 = $10;$$02 = $9;
  } else {
   __THREW__ = 0;
   (invoke_iii(544,(28964|0),($1|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    $19 = ___cxa_find_matching_catch_2()|0;
    $20 = tempRet0;
    $$0 = $20;$$02 = $19;
    break;
   }
   __THREW__ = 0;
   invoke_vi(525,($7|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if ($16) {
    $17 = ___cxa_find_matching_catch_3(0|0)|0;
    $18 = tempRet0;
    ___clang_call_terminate($17);
    // unreachable;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(525,($7|0));
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if ($22) {
  $23 = ___cxa_find_matching_catch_3(0|0)|0;
  $24 = tempRet0;
  ___clang_call_terminate($23);
  // unreachable;
 } else {
  ___resumeException($$02|0);
  // unreachable;
 }
}
function __ZN6Styles13layoutInflateERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0) {
 $0 = $0|0;
 var $$033 = 0, $$3 = 0, $$38 = 0, $$4 = 0, $$49 = 0, $$5 = 0, $$510 = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i14 = 0, $$pre$i$i16 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $1 = sp + 56|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 $7 = HEAP32[$0>>2]|0;
 $8 = $6 ? $7 : $0;
 $9 = (__ZN3App9loadAssetEPKc(28952,$8)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$033 = 0;
  STACKTOP = sp;return ($$033|0);
 }
 __ZN6Object6retainEv($9);
 __THREW__ = 0;
 invoke_vii(579,($1|0),($9|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $$5 = $12;$$510 = $11;
 } else {
  __THREW__ = 0;
  invoke_vi(555,($2|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $28 = ___cxa_find_matching_catch_2()|0;
   $29 = tempRet0;
   $$4 = $29;$$49 = $28;
  } else {
   HEAP32[$2>>2] = (2692);
   $17 = ((($2)) + 12|0);
   HEAP32[$17>>2] = 0;
   $18 = ((($2)) + 16|0);
   HEAP32[$18>>2] = 0;
   $19 = ((($2)) + 12|0);
   $20 = ((($2)) + 8|0);
   HEAP32[$20>>2] = $19;
   $21 = ((($2)) + 20|0);
   HEAP32[$21>>2] = 0;
   $22 = ((($2)) + 24|0);
   HEAP32[$22>>2] = 0;
   $23 = ((($2)) + 28|0);
   HEAP32[$23>>2] = 0;
   __THREW__ = 0;
   $24 = (invoke_iii(544,($2|0),($1|0))|0);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   L10: do {
    if ($26) {
     $30 = ___cxa_find_matching_catch_2()|0;
     $31 = tempRet0;
     $$3 = $31;$$38 = $30;
    } else {
     do {
      if ($24) {
       $34 = HEAP32[$18>>2]|0;
       $35 = ($34|0)==(1);
       if (!($35)) {
        __THREW__ = 0;
        invoke_viiii(561,(11573|0),(11258|0),396,(11559|0));
        $36 = __THREW__; __THREW__ = 0;
        break;
       }
       $37 = HEAP32[$20>>2]|0;
       $38 = ((($37)) + 28|0);
       $39 = HEAP32[$38>>2]|0;
       __THREW__ = 0;
       $40 = (invoke_ii(569,($39|0))|0);
       $41 = __THREW__; __THREW__ = 0;
       $42 = $41&1;
       if (!($42)) {
        $43 = ((($37)) + 16|0);
        __THREW__ = 0;
        invoke_vii(566,($3|0),($43|0));
        $44 = __THREW__; __THREW__ = 0;
        $45 = $44&1;
        if (!($45)) {
         $46 = $40;
         $47 = ((($3)) + 12|0);
         HEAP32[$47>>2] = $46;
         __THREW__ = 0;
         $48 = (invoke_iii(580,($3|0),(0|0))|0);
         $49 = __THREW__; __THREW__ = 0;
         $50 = $49&1;
         if ($50) {
          $71 = ___cxa_find_matching_catch_2()|0;
          $72 = tempRet0;
          $73 = ((($3)) + 11|0);
          $74 = HEAP8[$73>>0]|0;
          $75 = ($74<<24>>24)<(0);
          if (!($75)) {
           $$3 = $72;$$38 = $71;
           break L10;
          }
          $76 = HEAP32[$3>>2]|0;
          __ZdlPv($76);
          $$3 = $72;$$38 = $71;
          break L10;
         }
         $51 = ((($3)) + 11|0);
         $52 = HEAP8[$51>>0]|0;
         $53 = ($52<<24>>24)<(0);
         if ($53) {
          $54 = HEAP32[$3>>2]|0;
          __ZdlPv($54);
         }
         HEAP32[$2>>2] = (2692);
         $55 = ((($2)) + 20|0);
         $56 = HEAP32[$55>>2]|0;
         $57 = ($56|0)==(0|0);
         if (!($57)) {
          $58 = HEAP32[$22>>2]|0;
          $59 = ($58|0)==($56|0);
          if ($59) {
           $68 = $56;
          } else {
           $61 = $58;
           while(1) {
            $60 = ((($61)) + -16|0);
            HEAP32[$22>>2] = $60;
            $62 = ((($60)) + 11|0);
            $63 = HEAP8[$62>>0]|0;
            $64 = ($63<<24>>24)<(0);
            if ($64) {
             $67 = HEAP32[$60>>2]|0;
             __ZdlPv($67);
             $$pre$i$i$i$i14 = HEAP32[$22>>2]|0;
             $66 = $$pre$i$i$i$i14;
            } else {
             $66 = $60;
            }
            $65 = ($66|0)==($56|0);
            if ($65) {
             break;
            } else {
             $61 = $66;
            }
           }
           $$pre$i$i16 = HEAP32[$55>>2]|0;
           $68 = $$pre$i$i16;
          }
          __ZdlPv($68);
         }
         $93 = ((($2)) + 8|0);
         $94 = HEAP32[$19>>2]|0;
         __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP14StyleValueUberEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($93,$94);
         __THREW__ = 0;
         invoke_vi(525,($9|0));
         $95 = __THREW__; __THREW__ = 0;
         $96 = $95&1;
         if ($96) {
          $97 = ___cxa_find_matching_catch_3(0|0)|0;
          $98 = tempRet0;
          ___clang_call_terminate($97);
          // unreachable;
         } else {
          $$033 = $48;
          STACKTOP = sp;return ($$033|0);
         }
        }
       }
       $69 = ___cxa_find_matching_catch_2()|0;
       $70 = tempRet0;
       $$3 = $70;$$38 = $69;
       break L10;
      } else {
       __THREW__ = 0;
       invoke_viiii(561,(11552|0),(11258|0),395,(11559|0));
       $27 = __THREW__; __THREW__ = 0;
      }
     } while(0);
     $32 = ___cxa_find_matching_catch_2()|0;
     $33 = tempRet0;
     $$3 = $33;$$38 = $32;
    }
   } while(0);
   HEAP32[$2>>2] = (2692);
   $77 = ((($2)) + 20|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ($78|0)==(0|0);
   if (!($79)) {
    $80 = HEAP32[$22>>2]|0;
    $81 = ($80|0)==($78|0);
    if ($81) {
     $90 = $78;
    } else {
     $83 = $80;
     while(1) {
      $82 = ((($83)) + -16|0);
      HEAP32[$22>>2] = $82;
      $84 = ((($82)) + 11|0);
      $85 = HEAP8[$84>>0]|0;
      $86 = ($85<<24>>24)<(0);
      if ($86) {
       $89 = HEAP32[$82>>2]|0;
       __ZdlPv($89);
       $$pre$i$i$i$i = HEAP32[$22>>2]|0;
       $88 = $$pre$i$i$i$i;
      } else {
       $88 = $82;
      }
      $87 = ($88|0)==($78|0);
      if ($87) {
       break;
      } else {
       $83 = $88;
      }
     }
     $$pre$i$i = HEAP32[$77>>2]|0;
     $90 = $$pre$i$i;
    }
    __ZdlPv($90);
   }
   $91 = ((($2)) + 8|0);
   $92 = HEAP32[$19>>2]|0;
   __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP14StyleValueUberEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($91,$92);
   $$4 = $$3;$$49 = $$38;
  }
  $$5 = $$4;$$510 = $$49;
 }
 __THREW__ = 0;
 invoke_vi(525,($9|0));
 $99 = __THREW__; __THREW__ = 0;
 $100 = $99&1;
 if ($100) {
  $101 = ___cxa_find_matching_catch_3(0|0)|0;
  $102 = tempRet0;
  ___clang_call_terminate($101);
  // unreachable;
 } else {
  ___resumeException($$510|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZL19inflateFromResourceNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10StyleValueEEP4View($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$125 = 0, $$3 = 0, $$327 = 0, $$5 = 0, $$529 = 0, $$8 = 0, $$832 = 0, $$cast = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i35 = 0, $$pre$i$i$i51 = 0, $$pre$i$i$i59 = 0, $$pre$i37 = 0, $$pre$i53 = 0, $$pre$i61 = 0, $$sroa$073$098 = 0, $$sroa$084$099 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $2 = sp + 88|0;
 $3 = sp + 76|0;
 $4 = sp + 64|0;
 $5 = sp + 48|0;
 $6 = sp + 32|0;
 $7 = sp + 16|0;
 $8 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($2,$0);
 __THREW__ = 0;
 $9 = (invoke_ii(581,($2|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 do {
  if ($11) {
   $18 = ___cxa_find_matching_catch_2()|0;
   $19 = tempRet0;
   $$8 = $18;$$832 = $19;
  } else {
   $12 = ($1|0)==(0|0);
   if (!($12)) {
    $13 = HEAP32[$1>>2]|0;
    $14 = ((($13)) + 132|0);
    $15 = HEAP32[$14>>2]|0;
    __THREW__ = 0;
    invoke_vii($15|0,($1|0),($9|0));
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if ($17) {
     $20 = ___cxa_find_matching_catch_2()|0;
     $21 = tempRet0;
     $$8 = $20;$$832 = $21;
     break;
    }
   }
   $22 = ((($0)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(3);
   if (!($25)) {
    __THREW__ = 0;
    invoke_viiii(561,(11602|0),(11258|0),361,(11644|0));
    $26 = __THREW__; __THREW__ = 0;
    $27 = ___cxa_find_matching_catch_2()|0;
    $28 = tempRet0;
    $$8 = $27;$$832 = $28;
    break;
   }
   HEAP32[$3>>2] = 0;
   $29 = ((($3)) + 4|0);
   HEAP32[$29>>2] = 0;
   $30 = ((($3)) + 8|0);
   HEAP32[$30>>2] = 0;
   HEAP32[$4>>2] = 0;
   $31 = ((($4)) + 4|0);
   HEAP32[$31>>2] = 0;
   $32 = ((($4)) + 8|0);
   HEAP32[$32>>2] = 0;
   $33 = ((($23)) + 28|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($34)) + 20|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($34)) + 24|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($36|0)==($38|0);
   L11: do {
    if ($39) {
     label = 10;
    } else {
     $40 = ((($5)) + 12|0);
     $41 = ((($5)) + 11|0);
     $42 = ((($6)) + 12|0);
     $43 = ((($5)) + 4|0);
     $44 = ((($4)) + 8|0);
     $45 = ((($3)) + 8|0);
     $46 = ((($6)) + 11|0);
     $$sroa$084$099 = $36;
     L13: while(1) {
      __THREW__ = 0;
      invoke_vii(566,($5|0),($$sroa$084$099|0));
      $54 = __THREW__; __THREW__ = 0;
      $55 = $54&1;
      if ($55) {
       label = 25;
       break;
      }
      $56 = ((($$sroa$084$099)) + 12|0);
      $57 = HEAP32[$56>>2]|0;
      HEAP32[$40>>2] = $57;
      $$cast = $57;
      __THREW__ = 0;
      $58 = (invoke_ii(569,($$cast|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       label = 26;
       break;
      }
      $61 = $58;
      $62 = ($58|0)==(0|0);
      if (!($62)) {
       __THREW__ = 0;
       invoke_vii(566,($6|0),($5|0));
       $63 = __THREW__; __THREW__ = 0;
       $64 = $63&1;
       if ($64) {
        label = 27;
        break;
       }
       HEAP32[$42>>2] = $61;
       $65 = HEAP32[$58>>2]|0;
       $66 = ($65|0)==(3);
       do {
        if ($66) {
         $67 = HEAP8[$41>>0]|0;
         $68 = ($67<<24>>24)<(0);
         $69 = HEAP32[$43>>2]|0;
         $70 = $67&255;
         $71 = $68 ? $69 : $70;
         $72 = ($71|0)==(5);
         if ($72) {
          __THREW__ = 0;
          $73 = (invoke_iiiiii(546,($5|0),0,-1,(23208|0),5)|0);
          $74 = __THREW__; __THREW__ = 0;
          $75 = $74&1;
          if ($75) {
           label = 19;
           break L13;
          }
          $phitmp$i = ($73|0)==(0);
          if ($phitmp$i) {
           label = 31;
           break;
          }
         }
         $78 = HEAP32[$31>>2]|0;
         $79 = HEAP32[$44>>2]|0;
         $80 = ($78|0)==($79|0);
         if ($80) {
          __THREW__ = 0;
          invoke_vii(582,($4|0),($6|0));
          $87 = __THREW__; __THREW__ = 0;
          $88 = $87&1;
          if ($88) {
           label = 28;
           break L13;
          } else {
           break;
          }
         }
         __THREW__ = 0;
         invoke_vii(566,($78|0),($6|0));
         $81 = __THREW__; __THREW__ = 0;
         $82 = $81&1;
         if ($82) {
          label = 28;
          break L13;
         }
         $83 = ((($78)) + 12|0);
         $84 = HEAP32[$42>>2]|0;
         HEAP32[$83>>2] = $84;
         $85 = HEAP32[$31>>2]|0;
         $86 = ((($85)) + 16|0);
         HEAP32[$31>>2] = $86;
        } else {
         label = 31;
        }
       } while(0);
       do {
        if ((label|0) == 31) {
         label = 0;
         $100 = HEAP32[$29>>2]|0;
         $101 = HEAP32[$45>>2]|0;
         $102 = ($100|0)==($101|0);
         if ($102) {
          __THREW__ = 0;
          invoke_vii(582,($3|0),($6|0));
          $109 = __THREW__; __THREW__ = 0;
          $110 = $109&1;
          if ($110) {
           label = 28;
           break L13;
          } else {
           break;
          }
         }
         __THREW__ = 0;
         invoke_vii(566,($100|0),($6|0));
         $103 = __THREW__; __THREW__ = 0;
         $104 = $103&1;
         if ($104) {
          label = 28;
          break L13;
         }
         $105 = ((($100)) + 12|0);
         $106 = HEAP32[$42>>2]|0;
         HEAP32[$105>>2] = $106;
         $107 = HEAP32[$29>>2]|0;
         $108 = ((($107)) + 16|0);
         HEAP32[$29>>2] = $108;
        }
       } while(0);
       $111 = HEAP8[$46>>0]|0;
       $112 = ($111<<24>>24)<(0);
       if ($112) {
        $113 = HEAP32[$6>>2]|0;
        __ZdlPv($113);
       }
      }
      $114 = HEAP8[$41>>0]|0;
      $115 = ($114<<24>>24)<(0);
      if ($115) {
       $116 = HEAP32[$5>>2]|0;
       __ZdlPv($116);
      }
      $117 = ((($$sroa$084$099)) + 16|0);
      $118 = ($117|0)==($38|0);
      if ($118) {
       label = 10;
       break L11;
      } else {
       $$sroa$084$099 = $117;
      }
     }
     if ((label|0) == 19) {
      $76 = ___cxa_find_matching_catch_3(0|0)|0;
      $77 = tempRet0;
      ___clang_call_terminate($76);
      // unreachable;
     }
     else if ((label|0) == 25) {
      $89 = ___cxa_find_matching_catch_2()|0;
      $90 = tempRet0;
      $$5 = $89;$$529 = $90;
      break;
     }
     else if ((label|0) == 26) {
      $91 = ___cxa_find_matching_catch_2()|0;
      $92 = tempRet0;
      $$1 = $91;$$125 = $92;
     }
     else if ((label|0) == 27) {
      $93 = ___cxa_find_matching_catch_2()|0;
      $94 = tempRet0;
      $$1 = $93;$$125 = $94;
     }
     else if ((label|0) == 28) {
      $95 = ___cxa_find_matching_catch_2()|0;
      $96 = tempRet0;
      $97 = HEAP8[$46>>0]|0;
      $98 = ($97<<24>>24)<(0);
      if ($98) {
       $99 = HEAP32[$6>>2]|0;
       __ZdlPv($99);
      }
      $$1 = $95;$$125 = $96;
     }
     $119 = HEAP8[$41>>0]|0;
     $120 = ($119<<24>>24)<(0);
     if ($120) {
      $121 = HEAP32[$5>>2]|0;
      __ZdlPv($121);
     }
     $$5 = $$1;$$529 = $$125;
    }
   } while(0);
   L57: do {
    if ((label|0) == 10) {
     $47 = HEAP32[$9>>2]|0;
     $48 = ((($47)) + 244|0);
     $49 = HEAP32[$48>>2]|0;
     __THREW__ = 0;
     invoke_vii($49|0,($9|0),($3|0));
     $50 = __THREW__; __THREW__ = 0;
     $51 = $50&1;
     if ($51) {
      $52 = ___cxa_find_matching_catch_2()|0;
      $53 = tempRet0;
      $$5 = $52;$$529 = $53;
      break;
     }
     $122 = HEAP32[$4>>2]|0;
     $123 = HEAP32[$31>>2]|0;
     $124 = ($122|0)==($123|0);
     do {
      if ($124) {
       $130 = $122;
      } else {
       $125 = ((($7)) + 12|0);
       $126 = ((($8)) + 12|0);
       $127 = ((($8)) + 11|0);
       $128 = ((($7)) + 11|0);
       $$sroa$073$098 = $122;
       while(1) {
        __THREW__ = 0;
        invoke_vii(566,($7|0),($$sroa$073$098|0));
        $159 = __THREW__; __THREW__ = 0;
        $160 = $159&1;
        if ($160) {
         label = 72;
         break;
        }
        $161 = ((($$sroa$073$098)) + 12|0);
        $162 = HEAP32[$161>>2]|0;
        HEAP32[$125>>2] = $162;
        __THREW__ = 0;
        invoke_vii(566,($8|0),($7|0));
        $163 = __THREW__; __THREW__ = 0;
        $164 = $163&1;
        if ($164) {
         label = 73;
         break;
        }
        $165 = HEAP32[$125>>2]|0;
        HEAP32[$126>>2] = $165;
        __THREW__ = 0;
        (invoke_iii(580,($8|0),($9|0))|0);
        $166 = __THREW__; __THREW__ = 0;
        $167 = $166&1;
        if ($167) {
         label = 74;
         break;
        }
        $168 = HEAP8[$127>>0]|0;
        $169 = ($168<<24>>24)<(0);
        if ($169) {
         $170 = HEAP32[$8>>2]|0;
         __ZdlPv($170);
        }
        $171 = HEAP8[$128>>0]|0;
        $172 = ($171<<24>>24)<(0);
        if ($172) {
         $173 = HEAP32[$7>>2]|0;
         __ZdlPv($173);
        }
        $174 = ((($$sroa$073$098)) + 16|0);
        $175 = ($174|0)==($123|0);
        if ($175) {
         label = 46;
         break;
        } else {
         $$sroa$073$098 = $174;
        }
       }
       if ((label|0) == 46) {
        $$pre = HEAP32[$4>>2]|0;
        $130 = $$pre;
        break;
       }
       else if ((label|0) == 72) {
        $176 = ___cxa_find_matching_catch_2()|0;
        $177 = tempRet0;
        $$5 = $176;$$529 = $177;
        break L57;
       }
       else if ((label|0) == 73) {
        $178 = ___cxa_find_matching_catch_2()|0;
        $179 = tempRet0;
        $$3 = $178;$$327 = $179;
       }
       else if ((label|0) == 74) {
        $180 = ___cxa_find_matching_catch_2()|0;
        $181 = tempRet0;
        $182 = HEAP8[$127>>0]|0;
        $183 = ($182<<24>>24)<(0);
        if ($183) {
         $184 = HEAP32[$8>>2]|0;
         __ZdlPv($184);
         $$3 = $180;$$327 = $181;
        } else {
         $$3 = $180;$$327 = $181;
        }
       }
       $185 = HEAP8[$128>>0]|0;
       $186 = ($185<<24>>24)<(0);
       if ($186) {
        $187 = HEAP32[$7>>2]|0;
        __ZdlPv($187);
       }
       $$5 = $$3;$$529 = $$327;
       break L57;
      }
     } while(0);
     $129 = ($130|0)==(0|0);
     if (!($129)) {
      $131 = HEAP32[$31>>2]|0;
      $132 = ($131|0)==($130|0);
      if ($132) {
       $141 = $130;
      } else {
       $134 = $131;
       while(1) {
        $133 = ((($134)) + -16|0);
        HEAP32[$31>>2] = $133;
        $135 = ((($133)) + 11|0);
        $136 = HEAP8[$135>>0]|0;
        $137 = ($136<<24>>24)<(0);
        if ($137) {
         $140 = HEAP32[$133>>2]|0;
         __ZdlPv($140);
         $$pre$i$i$i51 = HEAP32[$31>>2]|0;
         $139 = $$pre$i$i$i51;
        } else {
         $139 = $133;
        }
        $138 = ($139|0)==($130|0);
        if ($138) {
         break;
        } else {
         $134 = $139;
        }
       }
       $$pre$i53 = HEAP32[$4>>2]|0;
       $141 = $$pre$i53;
      }
      __ZdlPv($141);
     }
     $142 = HEAP32[$3>>2]|0;
     $143 = ($142|0)==(0|0);
     if (!($143)) {
      $144 = HEAP32[$29>>2]|0;
      $145 = ($144|0)==($142|0);
      if ($145) {
       $154 = $142;
      } else {
       $147 = $144;
       while(1) {
        $146 = ((($147)) + -16|0);
        HEAP32[$29>>2] = $146;
        $148 = ((($146)) + 11|0);
        $149 = HEAP8[$148>>0]|0;
        $150 = ($149<<24>>24)<(0);
        if ($150) {
         $153 = HEAP32[$146>>2]|0;
         __ZdlPv($153);
         $$pre$i$i$i59 = HEAP32[$29>>2]|0;
         $152 = $$pre$i$i$i59;
        } else {
         $152 = $146;
        }
        $151 = ($152|0)==($142|0);
        if ($151) {
         break;
        } else {
         $147 = $152;
        }
       }
       $$pre$i61 = HEAP32[$3>>2]|0;
       $154 = $$pre$i61;
      }
      __ZdlPv($154);
     }
     $155 = ((($2)) + 11|0);
     $156 = HEAP8[$155>>0]|0;
     $157 = ($156<<24>>24)<(0);
     if (!($157)) {
      STACKTOP = sp;return ($9|0);
     }
     $158 = HEAP32[$2>>2]|0;
     __ZdlPv($158);
     STACKTOP = sp;return ($9|0);
    }
   } while(0);
   $188 = HEAP32[$4>>2]|0;
   $189 = ($188|0)==(0|0);
   if (!($189)) {
    $190 = HEAP32[$31>>2]|0;
    $191 = ($190|0)==($188|0);
    if ($191) {
     $200 = $188;
    } else {
     $193 = $190;
     while(1) {
      $192 = ((($193)) + -16|0);
      HEAP32[$31>>2] = $192;
      $194 = ((($192)) + 11|0);
      $195 = HEAP8[$194>>0]|0;
      $196 = ($195<<24>>24)<(0);
      if ($196) {
       $199 = HEAP32[$192>>2]|0;
       __ZdlPv($199);
       $$pre$i$i$i35 = HEAP32[$31>>2]|0;
       $198 = $$pre$i$i$i35;
      } else {
       $198 = $192;
      }
      $197 = ($198|0)==($188|0);
      if ($197) {
       break;
      } else {
       $193 = $198;
      }
     }
     $$pre$i37 = HEAP32[$4>>2]|0;
     $200 = $$pre$i37;
    }
    __ZdlPv($200);
   }
   $201 = HEAP32[$3>>2]|0;
   $202 = ($201|0)==(0|0);
   if (!($202)) {
    $203 = HEAP32[$29>>2]|0;
    $204 = ($203|0)==($201|0);
    if ($204) {
     $213 = $201;
    } else {
     $206 = $203;
     while(1) {
      $205 = ((($206)) + -16|0);
      HEAP32[$29>>2] = $205;
      $207 = ((($205)) + 11|0);
      $208 = HEAP8[$207>>0]|0;
      $209 = ($208<<24>>24)<(0);
      if ($209) {
       $212 = HEAP32[$205>>2]|0;
       __ZdlPv($212);
       $$pre$i$i$i = HEAP32[$29>>2]|0;
       $211 = $$pre$i$i$i;
      } else {
       $211 = $205;
      }
      $210 = ($211|0)==($201|0);
      if ($210) {
       break;
      } else {
       $206 = $211;
      }
     }
     $$pre$i = HEAP32[$3>>2]|0;
     $213 = $$pre$i;
    }
    __ZdlPv($213);
   }
   $$8 = $$5;$$832 = $$529;
  }
 } while(0);
 $214 = ((($2)) + 11|0);
 $215 = HEAP8[$214>>0]|0;
 $216 = ($215<<24>>24)<(0);
 if (!($216)) {
  ___resumeException($$8|0);
  // unreachable;
 }
 $217 = HEAP32[$2>>2]|0;
 __ZdlPv($217);
 ___resumeException($$8|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10StyleValueEENS5_ISA_EEE21__push_back_slow_pathIRKSA_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$06$i$i = 0, $$pre = 0, $$pre$i = 0, $$sroa$7$0 = 0, $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 4;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>(268435455);
 if ($8) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($4))|0;
 $12 = $11 >> 4;
 $13 = ($12>>>0)<(134217727);
 $14 = $11 >> 3;
 $15 = ($14>>>0)<($7>>>0);
 $$sroa$speculated$i = $15 ? $7 : $14;
 $$sroa$speculated$$i = $13 ? $$sroa$speculated$i : 268435455;
 $16 = ($$sroa$speculated$$i|0)==(0);
 do {
  if ($16) {
   $26 = 0;$68 = 0;
  } else {
   $17 = ($$sroa$speculated$$i>>>0)>(268435455);
   if (!($17)) {
    $23 = $$sroa$speculated$$i << 4;
    $24 = (__Znwj($23)|0);
    $26 = $24;$68 = $24;
    break;
   }
   $18 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(568,($18|0),(23604|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $21 = ___cxa_find_matching_catch_2()|0;
    $22 = tempRet0;
    ___cxa_free_exception(($18|0));
    ___resumeException($21|0);
    // unreachable;
   } else {
    HEAP32[$18>>2] = (9544);
    ___cxa_throw(($18|0),(1992|0),(506|0));
    // unreachable;
   }
  }
 } while(0);
 $25 = (($26) + ($6<<4)|0);
 $27 = $25;
 $28 = (($26) + ($$sroa$speculated$$i<<4)|0);
 $29 = $28;
 __THREW__ = 0;
 invoke_vii(566,($25|0),($1|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $65 = ___cxa_find_matching_catch_2()|0;
  $66 = tempRet0;
  $67 = ($26|0)==(0|0);
  if ($67) {
   ___resumeException($65|0);
   // unreachable;
  }
  __ZdlPv($68);
  ___resumeException($65|0);
  // unreachable;
 }
 $32 = (((($26) + ($6<<4)|0)) + 12|0);
 $33 = ((($1)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 HEAP32[$32>>2] = $34;
 $35 = ((($25)) + 16|0);
 $36 = $35;
 $37 = HEAP32[$0>>2]|0;
 $38 = HEAP32[$2>>2]|0;
 $39 = ($38|0)==($37|0);
 if ($39) {
  $40 = $37;
  $51 = $27;$53 = $40;$55 = $37;
 } else {
  $$06$i$i = $38;$$sroa$7$0 = $27;$42 = $25;
  while(1) {
   $41 = ((($42)) + -16|0);
   $43 = ((($$06$i$i)) + -16|0);
   ;HEAP32[$41>>2]=HEAP32[$43>>2]|0;HEAP32[$41+4>>2]=HEAP32[$43+4>>2]|0;HEAP32[$41+8>>2]=HEAP32[$43+8>>2]|0;
   ;HEAP32[$43>>2]=0|0;HEAP32[$43+4>>2]=0|0;HEAP32[$43+8>>2]=0|0;
   $44 = ((($42)) + -4|0);
   $45 = ((($$06$i$i)) + -4|0);
   $46 = HEAP32[$45>>2]|0;
   HEAP32[$44>>2] = $46;
   $47 = $$sroa$7$0;
   $48 = ((($47)) + -16|0);
   $49 = $48;
   $50 = ($43|0)==($37|0);
   if ($50) {
    break;
   } else {
    $$06$i$i = $43;$$sroa$7$0 = $49;$42 = $48;
   }
  }
  $$pre$i = HEAP32[$0>>2]|0;
  $$pre = HEAP32[$2>>2]|0;
  $51 = $49;$53 = $$pre$i;$55 = $$pre;
 }
 HEAP32[$0>>2] = $51;
 HEAP32[$2>>2] = $36;
 HEAP32[$9>>2] = $29;
 $52 = $53;
 $54 = ($55|0)==($52|0);
 if (!($54)) {
  $57 = $55;
  while(1) {
   $56 = ((($57)) + -16|0);
   $58 = ((($56)) + 11|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = ($59<<24>>24)<(0);
   if ($60) {
    $62 = HEAP32[$56>>2]|0;
    __ZdlPv($62);
   }
   $61 = ($56|0)==($52|0);
   if ($61) {
    break;
   } else {
    $57 = $56;
   }
  }
 }
 $63 = ($53|0)==(0);
 if ($63) {
  return;
 }
 $64 = $53;
 __ZdlPv($64);
 return;
}
function __ZN7URLDataD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2724);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 switch ($2|0) {
 case 2:  {
  $3 = ((($0)) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  __THREW__ = 0;
  invoke_vi(525,($4|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   return;
  }
  break;
 }
 case 0:  {
  $9 = ((($0)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_vi(525,($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   return;
  }
  break;
 }
 default: {
  return;
 }
 }
 $7 = ___cxa_find_matching_catch_3(0|0)|0;
 $8 = tempRet0;
 ___clang_call_terminate($7);
 // unreachable;
}
function __ZN7URLDataD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2724);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 switch ($2|0) {
 case 2:  {
  $3 = ((($0)) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  __THREW__ = 0;
  invoke_vi(525,($4|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   __ZdlPv($0);
   return;
  }
  break;
 }
 case 0:  {
  $9 = ((($0)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  invoke_vi(525,($10|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   __ZdlPv($0);
   return;
  }
  break;
 }
 default: {
  __ZdlPv($0);
  return;
 }
 }
 $7 = ___cxa_find_matching_catch_3(0|0)|0;
 $8 = tempRet0;
 ___clang_call_terminate($7);
 // unreachable;
}
function __ZN10URLRequestD2Ev($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2740);
 $1 = ((($0)) + 28|0);
 $2 = ((($0)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($3|0)==($4|0);
 if (!($5)) {
  __THREW__ = 0;
  invoke_viiii(561,(11673|0),(11694|0),93,(11738|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = ___cxa_find_matching_catch_3(0|0)|0;
  $8 = tempRet0;
  $9 = ((($0)) + 40|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
  __ZNSt3__213__vector_baseIP19IURLRequestDelegateNS_9allocatorIS2_EEED2Ev($1);
  $10 = ((($0)) + 8|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  ___clang_call_terminate($7);
  // unreachable;
 }
 $11 = $4;
 $12 = ((($0)) + 40|0);
 $13 = ((($12)) + 11|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)<(0);
 if ($15) {
  $16 = HEAP32[$12>>2]|0;
  __ZdlPv($16);
  $$pre = HEAP32[$1>>2]|0;
  $18 = $$pre;
 } else {
  $18 = $11;
 }
 $17 = ($18|0)==(0|0);
 if (!($17)) {
  $19 = HEAP32[$2>>2]|0;
  $20 = ($19|0)==($18|0);
  if (!($20)) {
   $scevgep$i$i$i = ((($19)) + -4|0);
   $21 = $scevgep$i$i$i;
   $22 = $18;
   $23 = (($21) - ($22))|0;
   $24 = $23 >>> 2;
   $25 = $24 ^ -1;
   $scevgep4$i$i$i = (($19) + ($25<<2)|0);
   HEAP32[$2>>2] = $scevgep4$i$i$i;
  }
  __ZdlPv($18);
 }
 $26 = ((($0)) + 8|0);
 $27 = ((($26)) + 11|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = ($28<<24>>24)<(0);
 if (!($29)) {
  return;
 }
 $30 = HEAP32[$26>>2]|0;
 __ZdlPv($30);
 return;
}
function __ZN10URLRequestD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10URLRequestD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__213__vector_baseIP19IURLRequestDelegateNS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 $3 = $1;
 if ($2) {
  return;
 }
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($1|0);
 if (!($6)) {
  $scevgep$i$i = ((($5)) + -4|0);
  $7 = $scevgep$i$i;
  $8 = (($7) - ($3))|0;
  $9 = $8 >>> 2;
  $10 = $9 ^ -1;
  $scevgep4$i$i = (($5) + ($10<<2)|0);
  HEAP32[$4>>2] = $scevgep4$i$i;
 }
 __ZdlPv($1);
 return;
}
function __GLOBAL__sub_I_urlrequest_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[7253] = 29012;
 HEAP32[(29016)>>2] = 29012;
 ;HEAP32[(29020)>>2]=0|0;HEAP32[(29020)+4>>2]=0|0;HEAP32[(29020)+8>>2]=0|0;HEAP32[(29020)+12>>2]=0|0;HEAP32[(29020)+16>>2]=0|0;
 HEAPF32[(29040)>>2] = 1.0;
 HEAP32[(29044)>>2] = 4194304;
 (___cxa_atexit((583|0),(29012|0),(___dso_handle|0))|0);
 HEAP32[7263] = 29052;
 HEAP32[(29056)>>2] = 29052;
 HEAP32[(29060)>>2] = 0;
 (___cxa_atexit((584|0),(29052|0),(___dso_handle|0))|0);
 HEAP32[7266] = 0;
 (___cxa_atexit((585|0),(29064|0),(___dso_handle|0))|0);
 HEAP32[(29072)>>2] = 0;
 HEAP32[(29076)>>2] = 0;
 HEAP32[7267] = (29072);
 (___cxa_atexit((586|0),(29068|0),(___dso_handle|0))|0);
 return;
}
function __ZN8MruCacheINSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEED2Ev($0) {
 $0 = $0|0;
 var $$018$i$i$i = 0, $$023$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $$018$i$i$i = $2;
  while(1) {
   $4 = HEAP32[$$018$i$i$i>>2]|0;
   $5 = ((($$018$i$i$i)) + 8|0);
   $6 = ((($5)) + 11|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)<(0);
   if ($8) {
    $9 = HEAP32[$5>>2]|0;
    __ZdlPv($9);
   }
   __ZdlPv($$018$i$i$i);
   $10 = ($4|0)==(0|0);
   if ($10) {
    break;
   } else {
    $$018$i$i$i = $4;
   }
  }
 }
 $11 = ((($0)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$11>>2] = 0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  __ZdlPv($12);
 }
 $14 = ((($0)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  return;
 }
 $17 = ((($0)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$0>>2]|0;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$18>>2]|0;
 $23 = ((($22)) + 4|0);
 HEAP32[$23>>2] = $21;
 $24 = HEAP32[$20>>2]|0;
 HEAP32[$24>>2] = $22;
 HEAP32[$14>>2] = 0;
 $25 = ($18|0)==($0|0);
 if ($25) {
  return;
 } else {
  $$023$i$i = $18;
 }
 while(1) {
  $26 = ((($$023$i$i)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($$023$i$i)) + 8|0);
  $29 = ((($28)) + 11|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = ($30<<24>>24)<(0);
  if ($31) {
   $32 = HEAP32[$28>>2]|0;
   __ZdlPv($32);
  }
  __ZdlPv($$023$i$i);
  $33 = ($27|0)==($0|0);
  if ($33) {
   break;
  } else {
   $$023$i$i = $27;
  }
 }
 return;
}
function __ZNSt3__210__list_impI6ObjPtrI10URLRequestENS_9allocatorIS3_EEED2Ev($0) {
 $0 = $0|0;
 var $$023$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = HEAP32[$7>>2]|0;
 HEAP32[$11>>2] = $9;
 HEAP32[$1>>2] = 0;
 $12 = ($5|0)==($0|0);
 if ($12) {
  return;
 } else {
  $$023$i = $5;
 }
 while(1) {
  $13 = ((($$023$i)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($$023$i)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   __THREW__ = 0;
   invoke_vi(525,($16|0));
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    label = 5;
    break;
   }
  }
  __ZdlPv($$023$i);
  $22 = ($14|0)==($0|0);
  if ($22) {
   label = 7;
   break;
  } else {
   $$023$i = $14;
  }
 }
 if ((label|0) == 5) {
  $20 = ___cxa_find_matching_catch_3(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 }
 else if ((label|0) == 7) {
  return;
 }
}
function __ZN6ObjPtrI10URLRequestED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_3(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE6ObjPtrI10URLRequestENS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE6ObjPtrI10URLRequestEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE7destroyEPNS_11__tree_nodeISB_PvEE($0,$2);
 return;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE6ObjPtrI10URLRequestEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE7destroyEPNS_11__tree_nodeISB_PvEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE6ObjPtrI10URLRequestEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE7destroyEPNS_11__tree_nodeISB_PvEE($0,$3);
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE6ObjPtrI10URLRequestEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE7destroyEPNS_11__tree_nodeISB_PvEE($0,$5);
 $6 = ((($1)) + 16|0);
 $7 = ((($1)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  __THREW__ = 0;
  invoke_vi(525,($8|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   $12 = ___cxa_find_matching_catch_3(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  }
 }
 $14 = ((($6)) + 11|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)<(0);
 if ($16) {
  $17 = HEAP32[$6>>2]|0;
  __ZdlPv($17);
 }
 __ZdlPv($1);
 return;
}
function __ZN7URLDataC2EP4Data($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev($0);
 HEAP32[$0>>2] = (2724);
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = $1;
 __THREW__ = 0;
 invoke_vi(526,($1|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  ___resumeException($6|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZN7URLDataC2EP6Bitmap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev($0);
 HEAP32[$0>>2] = (2724);
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 2;
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = $1;
 __THREW__ = 0;
 invoke_vi(526,($1|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  ___resumeException($6|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZN10URLRequest14flushWorkQueueEv() {
 var $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(29060)>>2]|0;
 $1 = ($0|0)!=(0);
 $2 = HEAP32[7266]|0;
 $3 = ($2|0)==(0|0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  return;
 }
 $4 = HEAP32[(29056)>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $15 = $0;$9 = $4;
 } else {
  HEAP32[7266] = $6;
  __ZN6Object6retainEv($6);
  $$pre = HEAP32[(29056)>>2]|0;
  $$pre1 = HEAP32[(29060)>>2]|0;
  $15 = $$pre1;$9 = $$pre;
 }
 $8 = ((($9)) + 4|0);
 $10 = HEAP32[$8>>2]|0;
 $11 = HEAP32[$9>>2]|0;
 $12 = ((($11)) + 4|0);
 HEAP32[$12>>2] = $10;
 $13 = HEAP32[$8>>2]|0;
 HEAP32[$13>>2] = $11;
 $14 = (($15) + -1)|0;
 HEAP32[(29060)>>2] = $14;
 $16 = ((($9)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  __THREW__ = 0;
  invoke_vi(525,($17|0));
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   $21 = ___cxa_find_matching_catch_3(0|0)|0;
   $22 = tempRet0;
   ___clang_call_terminate($21);
   // unreachable;
  }
 }
 __ZdlPv($9);
 $23 = HEAP32[7266]|0;
 $24 = ((($23)) + 52|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if (!($26)) {
  ___assert_fail((11763|0),(11694|0),44,(11771|0));
  // unreachable;
 }
 $27 = ((($23)) + 24|0);
 HEAP32[$27>>2] = 2;
 __ZN6Object6retainEv($23);
 __ZN10URLRequest11nativeStartEv($23);
 $28 = HEAP32[$24>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  ___assert_fail((11777|0),(11694|0),49,(11771|0));
  // unreachable;
 } else {
  return;
 }
}
function __ZN10URLRequestC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP19IURLRequestDelegatei($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$04 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 HEAP32[$4>>2] = $2;
 __ZN6ObjectC2Ev($0);
 HEAP32[$0>>2] = (2740);
 $5 = ((($0)) + 8|0);
 $6 = $2;
 __THREW__ = 0;
 invoke_vii(566,($5|0),($1|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $24 = ___cxa_find_matching_catch_2()|0;
  $25 = tempRet0;
  $$0 = $25;$$04 = $24;
  ___resumeException($$04|0);
  // unreachable;
 }
 $9 = ((($0)) + 28|0);
 $10 = ((($0)) + 32|0);
 $11 = ((($0)) + 40|0);
 $12 = ((($0)) + 24|0);
 ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;HEAP32[$12+12>>2]=0|0;HEAP32[$12+16>>2]=0|0;HEAP32[$12+20>>2]=0|0;HEAP32[$12+24>>2]=0|0;
 __THREW__ = 0;
 (invoke_iii(587,($11|0),(11784|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 do {
  if (!($14)) {
   $15 = HEAP32[$10>>2]|0;
   $16 = ((($0)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($15|0)==($17|0);
   if ($18) {
    __THREW__ = 0;
    invoke_vii(588,($9|0),($4|0));
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     break;
    }
    $23 = ((($0)) + 20|0);
    HEAP32[$23>>2] = $3;
    STACKTOP = sp;return;
   } else {
    HEAP32[$15>>2] = $6;
    $19 = HEAP32[$10>>2]|0;
    $20 = ((($19)) + 4|0);
    HEAP32[$10>>2] = $20;
    $23 = ((($0)) + 20|0);
    HEAP32[$23>>2] = $3;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $26 = ___cxa_find_matching_catch_2()|0;
 $27 = tempRet0;
 $28 = ((($11)) + 11|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = ($29<<24>>24)<(0);
 if ($30) {
  $31 = HEAP32[$11>>2]|0;
  __ZdlPv($31);
 }
 $32 = HEAP32[$9>>2]|0;
 $33 = ($32|0)==(0|0);
 if (!($33)) {
  $34 = HEAP32[$10>>2]|0;
  $35 = ($34|0)==($32|0);
  if (!($35)) {
   $scevgep$i$i$i = ((($34)) + -4|0);
   $36 = $scevgep$i$i$i;
   $37 = $32;
   $38 = (($36) - ($37))|0;
   $39 = $38 >>> 2;
   $40 = $39 ^ -1;
   $scevgep4$i$i$i = (($34) + ($40<<2)|0);
   HEAP32[$10>>2] = $scevgep4$i$i$i;
  }
  __ZdlPv($32);
 }
 $41 = ((($5)) + 11|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = ($42<<24>>24)<(0);
 if (!($43)) {
  $$0 = $27;$$04 = $26;
  ___resumeException($$04|0);
  // unreachable;
 }
 $44 = HEAP32[$5>>2]|0;
 __ZdlPv($44);
 $$0 = $27;$$04 = $26;
 ___resumeException($$04|0);
 // unreachable;
}
function __ZNSt3__26vectorIP19IURLRequestDelegateNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>(1073741823);
 if ($8) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($4))|0;
 $12 = $11 >> 2;
 $13 = ($12>>>0)<(536870911);
 $14 = $11 >> 1;
 $15 = ($14>>>0)<($7>>>0);
 $$sroa$speculated$i = $15 ? $7 : $14;
 $$sroa$speculated$$i = $13 ? $$sroa$speculated$i : 1073741823;
 $16 = ($$sroa$speculated$$i|0)==(0);
 do {
  if ($16) {
   $26 = 0;
  } else {
   $17 = ($$sroa$speculated$$i>>>0)>(1073741823);
   if (!($17)) {
    $23 = $$sroa$speculated$$i << 2;
    $24 = (__Znwj($23)|0);
    $26 = $24;
    break;
   }
   $18 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(568,($18|0),(23604|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $21 = ___cxa_find_matching_catch_2()|0;
    $22 = tempRet0;
    ___cxa_free_exception(($18|0));
    ___resumeException($21|0);
    // unreachable;
   } else {
    HEAP32[$18>>2] = (9544);
    ___cxa_throw(($18|0),(1992|0),(506|0));
    // unreachable;
   }
  }
 } while(0);
 $25 = (($26) + ($6<<2)|0);
 $27 = (($26) + ($$sroa$speculated$$i<<2)|0);
 $28 = $27;
 $29 = HEAP32[$1>>2]|0;
 HEAP32[$25>>2] = $29;
 $30 = ((($25)) + 4|0);
 $31 = $30;
 $32 = (0 - ($6))|0;
 $33 = (($25) + ($32<<2)|0);
 $34 = $33;
 $35 = ($5|0)>(0);
 if ($35) {
  $36 = $4;
  _memcpy(($33|0),($36|0),($5|0))|0;
 }
 HEAP32[$0>>2] = $34;
 HEAP32[$2>>2] = $31;
 HEAP32[$9>>2] = $28;
 $37 = ($4|0)==(0);
 if ($37) {
  return;
 }
 $38 = $4;
 __ZdlPv($38);
 return;
}
function __ZN10URLRequest7requestERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP19IURLRequestDelegatei($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $1;
 $4 = (__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_15__list_iteratorIN8MruCacheIS7_E5ENTRYEPvEEEENS_22__unordered_map_hasherIS7_SE_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SE_NS_8equal_toIS7_EELb1EEENS5_ISE_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeISE_SC_EEEERKT_((29024),$0)|0);
 $5 = ($4|0)==(0|0);
 $6 = $1;
 if (!($5)) {
  $7 = HEAP32[(29016)>>2]|0;
  $8 = ((($4)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)==($9|0);
  if ($10) {
   $23 = $1;
  } else {
   $11 = ((($9)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($7|0)==($12|0);
   if ($13) {
    $23 = $1;
   } else {
    $14 = $12;
    $15 = HEAP32[$9>>2]|0;
    $16 = ((($15)) + 4|0);
    HEAP32[$16>>2] = $14;
    $17 = HEAP32[$11>>2]|0;
    HEAP32[$17>>2] = $15;
    $18 = HEAP32[$7>>2]|0;
    $19 = ((($18)) + 4|0);
    HEAP32[$19>>2] = $9;
    HEAP32[$9>>2] = $18;
    HEAP32[$7>>2] = $9;
    HEAP32[$11>>2] = $7;
    $$pre = HEAP32[$3>>2]|0;
    $23 = $$pre;
   }
  }
  $20 = ((($9)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$23>>2]|0;
  $24 = HEAP32[$22>>2]|0;
  FUNCTION_TABLE_vii[$24 & 1023]($23,$21);
  STACKTOP = sp;return;
 }
 $25 = (__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE6ObjPtrI10URLRequestEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE4findIS7_EENS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEEiEERKT_(29068,$0)|0);
 $26 = ($25|0)==((29072)|0);
 do {
  if ($26) {
   $27 = (__ZN6ObjectnwEj(56)|0);
   __THREW__ = 0;
   invoke_viiii(589,($27|0),($0|0),($1|0),($2|0));
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    $35 = ___cxa_find_matching_catch_2()|0;
    $36 = tempRet0;
    __ZdlPv($27);
    $$0 = $36;$$018 = $35;
    ___resumeException($$018|0);
    // unreachable;
   }
   $30 = (__ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE6ObjPtrI10URLRequestENS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEEixERSD_(29068,$0)|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($27|0);
   if ($32) {
    $$019 = $27;
   } else {
    $33 = ($31|0)==(0|0);
    if (!($33)) {
     __ZN6Object7releaseEv($31);
    }
    HEAP32[$30>>2] = $27;
    $34 = ($27|0)==(0|0);
    if ($34) {
     $$019 = 0;
    } else {
     __ZN6Object6retainEv($27);
     $$019 = $27;
    }
   }
  } else {
   $37 = ((($25)) + 28|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)==(0|0);
   if (!($39)) {
    $50 = ((($38)) + 32|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ((($38)) + 36|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($51|0)==($53|0);
    if ($54) {
     $57 = ((($38)) + 28|0);
     __ZNSt3__26vectorIP19IURLRequestDelegateNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($57,$3);
     $$019 = $38;
     break;
    } else {
     HEAP32[$51>>2] = $6;
     $55 = HEAP32[$50>>2]|0;
     $56 = ((($55)) + 4|0);
     HEAP32[$50>>2] = $56;
     $$019 = $38;
     break;
    }
   }
   $40 = (__ZN6ObjectnwEj(56)|0);
   __THREW__ = 0;
   invoke_viiii(589,($40|0),($0|0),($1|0),($2|0));
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   if ($42) {
    $48 = ___cxa_find_matching_catch_2()|0;
    $49 = tempRet0;
    __ZdlPv($40);
    $$0 = $49;$$018 = $48;
    ___resumeException($$018|0);
    // unreachable;
   }
   $43 = (__ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE6ObjPtrI10URLRequestENS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEEixERSD_(29068,$0)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($40|0);
   if ($45) {
    $$019 = $40;
   } else {
    $46 = ($44|0)==(0|0);
    if (!($46)) {
     __ZN6Object7releaseEv($44);
    }
    HEAP32[$43>>2] = $40;
    $47 = ($40|0)==(0|0);
    if ($47) {
     $$019 = 0;
    } else {
     __ZN6Object6retainEv($40);
     $$019 = $40;
    }
   }
  }
 } while(0);
 $58 = ((($$019)) + 24|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)==(0);
 L37: do {
  if ($60) {
   HEAP32[$58>>2] = 1;
   $61 = ($$019|0)==(0|0);
   if (!($61)) {
    __ZN6Object6retainEv($$019);
   }
   __THREW__ = 0;
   $62 = (invoke_ii(527,12)|0);
   $63 = __THREW__; __THREW__ = 0;
   $64 = $63&1;
   do {
    if ($64) {
     $79 = ___cxa_find_matching_catch_2()|0;
     $80 = tempRet0;
     if ($61) {
      $$0 = $80;$$018 = $79;
      ___resumeException($$018|0);
      // unreachable;
     } else {
      $$pre$phiZ2D = $$019;$85 = $80;$86 = $79;
      break;
     }
    } else {
     $65 = ((($62)) + 8|0);
     HEAP32[$65>>2] = $$019;
     if (!($61)) {
      __THREW__ = 0;
      invoke_vi(526,($$019|0));
      $66 = __THREW__; __THREW__ = 0;
      $67 = $66&1;
      if ($67) {
       $68 = ___cxa_find_matching_catch_2()|0;
       $69 = tempRet0;
       __ZdlPv($62);
       $$pre$phiZ2D = $$019;$85 = $69;$86 = $68;
       break;
      }
     }
     $70 = ((($62)) + 4|0);
     HEAP32[$70>>2] = 29052;
     $71 = HEAP32[7263]|0;
     HEAP32[$62>>2] = $71;
     $72 = ((($71)) + 4|0);
     HEAP32[$72>>2] = $62;
     HEAP32[7263] = $62;
     $73 = HEAP32[(29060)>>2]|0;
     $74 = (($73) + 1)|0;
     HEAP32[(29060)>>2] = $74;
     if ($61) {
      break L37;
     }
     __THREW__ = 0;
     invoke_vi(525,($$019|0));
     $75 = __THREW__; __THREW__ = 0;
     $76 = $75&1;
     if (!($76)) {
      break L37;
     }
     $77 = ___cxa_find_matching_catch_3(0|0)|0;
     $78 = tempRet0;
     ___clang_call_terminate($77);
     // unreachable;
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(525,($$pre$phiZ2D|0));
   $81 = __THREW__; __THREW__ = 0;
   $82 = $81&1;
   if ($82) {
    $83 = ___cxa_find_matching_catch_3(0|0)|0;
    $84 = tempRet0;
    ___clang_call_terminate($83);
    // unreachable;
   } else {
    $$0 = $85;$$018 = $86;
    ___resumeException($$018|0);
    // unreachable;
   }
  }
 } while(0);
 __ZN10URLRequest14flushWorkQueueEv();
 STACKTOP = sp;return;
}
function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_15__list_iteratorIN8MruCacheIS7_E5ENTRYEPvEEEENS_22__unordered_map_hasherIS7_SE_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SE_NS_8equal_toIS7_EELb1EEENS5_ISE_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeISE_SC_EEEERKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$copyload$i$i$i$i$i = 0, $$0$lcssa$i$i$i$i = 0, $$02026$i$i4$i = 0, $$02026$i$i4$i$us = 0, $$02125$i$i5$i = 0, $$02125$i$i5$i$us = 0, $$027$i$i3$i = 0, $$027$i$i3$i$us = 0, $$028 = 0, $$028$us = 0, $$02836 = 0, $$02837 = 0, $$02837$us = 0, $$036$lcssa$i$i$i$i = 0, $$03639$i$i$i$i = 0, $$037$lcssa$i$i$i$i = 0, $$03738$i$i$i$i = 0, $$040$i$i$i$i = 0, $$1$i$i$i$i = 0, $$2$i$i$i$i = 0;
 var $$3$i$i$i$i = 0, $$pre$i$i = 0, $$pre$i$i$us = 0, $$sroa$0$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i$us = 0, $scevgep$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 $5 = HEAP32[$1>>2]|0;
 $6 = $4 ? $5 : $1;
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $3&255;
 $10 = $4 ? $8 : $9;
 $11 = ($10>>>0)>(3);
 if ($11) {
  $$03639$i$i$i$i = $6;$$03738$i$i$i$i = $10;$$040$i$i$i$i = $10;
  while(1) {
   $$0$copyload$i$i$i$i$i = HEAPU8[$$03639$i$i$i$i>>0]|(HEAPU8[$$03639$i$i$i$i+1>>0]<<8)|(HEAPU8[$$03639$i$i$i$i+2>>0]<<16)|(HEAPU8[$$03639$i$i$i$i+3>>0]<<24);
   $12 = Math_imul($$0$copyload$i$i$i$i$i, 1540483477)|0;
   $13 = $12 >>> 24;
   $14 = $13 ^ $12;
   $15 = Math_imul($14, 1540483477)|0;
   $16 = Math_imul($$03738$i$i$i$i, 1540483477)|0;
   $17 = $15 ^ $16;
   $18 = ((($$03639$i$i$i$i)) + 4|0);
   $19 = (($$040$i$i$i$i) + -4)|0;
   $20 = ($19>>>0)>(3);
   if ($20) {
    $$03639$i$i$i$i = $18;$$03738$i$i$i$i = $17;$$040$i$i$i$i = $19;
   } else {
    break;
   }
  }
  $21 = (($10) + -4)|0;
  $22 = $21 & -4;
  $23 = (($22) + 4)|0;
  $scevgep$i$i$i$i = (($6) + ($23)|0);
  $24 = (($21) - ($22))|0;
  $$0$lcssa$i$i$i$i = $24;$$036$lcssa$i$i$i$i = $scevgep$i$i$i$i;$$037$lcssa$i$i$i$i = $17;
 } else {
  $$0$lcssa$i$i$i$i = $10;$$036$lcssa$i$i$i$i = $6;$$037$lcssa$i$i$i$i = $10;
 }
 switch ($$0$lcssa$i$i$i$i|0) {
 case 3:  {
  $25 = ((($$036$lcssa$i$i$i$i)) + 2|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = $27 << 16;
  $29 = $28 ^ $$037$lcssa$i$i$i$i;
  $$1$i$i$i$i = $29;
  label = 6;
  break;
 }
 case 2:  {
  $$1$i$i$i$i = $$037$lcssa$i$i$i$i;
  label = 6;
  break;
 }
 case 1:  {
  $$2$i$i$i$i = $$037$lcssa$i$i$i$i;
  label = 7;
  break;
 }
 default: {
  $$3$i$i$i$i = $$037$lcssa$i$i$i$i;
 }
 }
 if ((label|0) == 6) {
  $30 = ((($$036$lcssa$i$i$i$i)) + 1|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $32 << 8;
  $34 = $33 ^ $$1$i$i$i$i;
  $$2$i$i$i$i = $34;
  label = 7;
 }
 if ((label|0) == 7) {
  $35 = HEAP8[$$036$lcssa$i$i$i$i>>0]|0;
  $36 = $35&255;
  $37 = $36 ^ $$2$i$i$i$i;
  $38 = Math_imul($37, 1540483477)|0;
  $$3$i$i$i$i = $38;
 }
 $39 = $$3$i$i$i$i >>> 13;
 $40 = $39 ^ $$3$i$i$i$i;
 $41 = Math_imul($40, 1540483477)|0;
 $42 = $41 >>> 15;
 $43 = $42 ^ $41;
 $44 = ((($0)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0);
 if ($46) {
  $$sroa$0$0 = 0;
  return ($$sroa$0$0|0);
 }
 $47 = (($45) + -1)|0;
 $48 = $47 & $45;
 $49 = ($48|0)==(0);
 if ($49) {
  $50 = $43 & $47;
  $55 = $50;
 } else {
  $51 = ($43>>>0)<($45>>>0);
  if ($51) {
   $55 = $43;
  } else {
   $52 = (($43>>>0) % ($45>>>0))&-1;
   $55 = $52;
  }
 }
 $53 = HEAP32[$0>>2]|0;
 $54 = (($53) + ($55<<2)|0);
 $56 = HEAP32[$54>>2]|0;
 $57 = ($56|0)==(0|0);
 if ($57) {
  $$sroa$0$0 = 0;
  return ($$sroa$0$0|0);
 }
 $$02836 = HEAP32[$56>>2]|0;
 $58 = ($$02836|0)==(0|0);
 if ($58) {
  $$sroa$0$0 = 0;
  return ($$sroa$0$0|0);
 }
 $59 = ($10|0)==(0);
 if ($49) {
  $$02837$us = $$02836;
  L28: while(1) {
   $60 = ((($$02837$us)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)==($43|0);
   $63 = $61 & $47;
   $64 = ($63|0)==($55|0);
   $or$cond = $62 | $64;
   if (!($or$cond)) {
    $$sroa$0$0 = 0;
    label = 41;
    break;
   }
   do {
    if ($62) {
     $65 = ((($$02837$us)) + 8|0);
     $66 = ((($65)) + 11|0);
     $67 = HEAP8[$66>>0]|0;
     $68 = ($67<<24>>24)<(0);
     $69 = ((($$02837$us)) + 12|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = $67&255;
     $72 = $68 ? $70 : $71;
     $73 = ($72|0)==($10|0);
     if ($73) {
      $74 = HEAP32[$65>>2]|0;
      $75 = $68 ? $74 : $65;
      if ($68) {
       if ($59) {
        $$sroa$0$0 = $$02837$us;
        label = 41;
        break L28;
       }
       $86 = (_memcmp($75,$6,$10)|0);
       $phitmp$i$i$i$us = ($86|0)==(0);
       if ($phitmp$i$i$i$us) {
        $$sroa$0$0 = $$02837$us;
        label = 41;
        break L28;
       } else {
        break;
       }
      }
      if ($59) {
       $$sroa$0$0 = $$02837$us;
       label = 41;
       break L28;
      }
      $76 = $74;
      $77 = $76&255;
      $78 = HEAP8[$6>>0]|0;
      $79 = ($77<<24>>24)==($78<<24>>24);
      if ($79) {
       $$02026$i$i4$i$us = $65;$$02125$i$i5$i$us = $71;$$027$i$i3$i$us = $6;
       while(1) {
        $80 = (($$02125$i$i5$i$us) + -1)|0;
        $81 = ((($$02026$i$i4$i$us)) + 1|0);
        $82 = ($80|0)==(0);
        if ($82) {
         $$sroa$0$0 = $$02837$us;
         label = 41;
         break L28;
        }
        $83 = ((($$027$i$i3$i$us)) + 1|0);
        $$pre$i$i$us = HEAP8[$81>>0]|0;
        $84 = HEAP8[$83>>0]|0;
        $85 = ($$pre$i$i$us<<24>>24)==($84<<24>>24);
        if ($85) {
         $$02026$i$i4$i$us = $81;$$02125$i$i5$i$us = $80;$$027$i$i3$i$us = $83;
        } else {
         break;
        }
       }
      }
     }
    }
   } while(0);
   $$028$us = HEAP32[$$02837$us>>2]|0;
   $87 = ($$028$us|0)==(0|0);
   if ($87) {
    $$sroa$0$0 = 0;
    label = 41;
    break;
   } else {
    $$02837$us = $$028$us;
   }
  }
  if ((label|0) == 41) {
   return ($$sroa$0$0|0);
  }
 } else {
  $$02837 = $$02836;
 }
 L50: while(1) {
  $88 = ((($$02837)) + 4|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = ($89|0)==($43|0);
  if ($90) {
   label = 33;
  } else {
   $91 = ($89>>>0)<($45>>>0);
   if ($91) {
    $94 = $89;
   } else {
    $92 = (($89>>>0) % ($45>>>0))&-1;
    $94 = $92;
   }
   $93 = ($94|0)==($55|0);
   if (!($93)) {
    $$sroa$0$0 = 0;
    label = 41;
    break;
   }
   if ($90) {
    label = 33;
   }
  }
  do {
   if ((label|0) == 33) {
    label = 0;
    $96 = ((($$02837)) + 8|0);
    $97 = ((($96)) + 11|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = ($98<<24>>24)<(0);
    $100 = ((($$02837)) + 12|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $98&255;
    $103 = $99 ? $101 : $102;
    $104 = ($103|0)==($10|0);
    if ($104) {
     $105 = HEAP32[$96>>2]|0;
     $106 = $99 ? $105 : $96;
     if ($99) {
      if ($59) {
       $$sroa$0$0 = $$02837;
       label = 41;
       break L50;
      }
      $117 = (_memcmp($106,$6,$10)|0);
      $phitmp$i$i$i = ($117|0)==(0);
      if ($phitmp$i$i$i) {
       $$sroa$0$0 = $$02837;
       label = 41;
       break L50;
      } else {
       break;
      }
     }
     if ($59) {
      $$sroa$0$0 = $$02837;
      label = 41;
      break L50;
     }
     $107 = $105;
     $108 = $107&255;
     $109 = HEAP8[$6>>0]|0;
     $110 = ($108<<24>>24)==($109<<24>>24);
     if ($110) {
      $$02026$i$i4$i = $96;$$02125$i$i5$i = $102;$$027$i$i3$i = $6;
      while(1) {
       $111 = (($$02125$i$i5$i) + -1)|0;
       $112 = ((($$02026$i$i4$i)) + 1|0);
       $113 = ($111|0)==(0);
       if ($113) {
        $$sroa$0$0 = $$02837;
        label = 41;
        break L50;
       }
       $114 = ((($$027$i$i3$i)) + 1|0);
       $$pre$i$i = HEAP8[$112>>0]|0;
       $115 = HEAP8[$114>>0]|0;
       $116 = ($$pre$i$i<<24>>24)==($115<<24>>24);
       if ($116) {
        $$02026$i$i4$i = $112;$$02125$i$i5$i = $111;$$027$i$i3$i = $114;
       } else {
        break;
       }
      }
     }
    }
   }
  } while(0);
  $$028 = HEAP32[$$02837>>2]|0;
  $95 = ($$028|0)==(0|0);
  if ($95) {
   $$sroa$0$0 = 0;
   label = 41;
   break;
  } else {
   $$02837 = $$028;
  }
 }
 if ((label|0) == 41) {
  return ($$sroa$0$0|0);
 }
 return (0)|0;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE6ObjPtrI10URLRequestEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE4findIS7_EENS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEEiEERKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$ph$lcssa$i = 0, $$0$ph14$i = 0, $$07$ph13$i = 0, $$0710$i = 0, $$sroa$0$0 = 0, $$sroa$speculated$i$i$i$i$i = 0, $$sroa$speculated$i$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if (!($4)) {
   $5 = ((($1)) + 11|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)<(0);
   $8 = ((($1)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $6&255;
   $11 = $7 ? $9 : $10;
   $12 = HEAP32[$1>>2]|0;
   $13 = $7 ? $12 : $1;
   $$0$ph14$i = $2;$$07$ph13$i = $3;
   L3: while(1) {
    $$0710$i = $$07$ph13$i;
    while(1) {
     $14 = ((($$0710$i)) + 16|0);
     $15 = ((($14)) + 11|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)<(0);
     $18 = ((($$0710$i)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = $16&255;
     $21 = $17 ? $19 : $20;
     $22 = ($11>>>0)<($21>>>0);
     $$sroa$speculated$i$i$i$i$i$i = $22 ? $11 : $21;
     $23 = ($$sroa$speculated$i$i$i$i$i$i|0)==(0);
     if ($23) {
      label = 6;
     } else {
      $24 = HEAP32[$14>>2]|0;
      $25 = $17 ? $24 : $14;
      $26 = (_memcmp($25,$13,$$sroa$speculated$i$i$i$i$i$i)|0);
      $27 = ($26|0)==(0);
      if ($27) {
       label = 6;
      } else {
       $29 = ($26|0)<(0);
       if (!($29)) {
        break;
       }
      }
     }
     if ((label|0) == 6) {
      label = 0;
      $28 = ($21>>>0)<($11>>>0);
      if (!($28)) {
       break;
      }
     }
     $32 = ((($$0710$i)) + 4|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)==(0|0);
     if ($34) {
      $$0$ph$lcssa$i = $$0$ph14$i;
      break L3;
     } else {
      $$0710$i = $33;
     }
    }
    $30 = HEAP32[$$0710$i>>2]|0;
    $31 = ($30|0)==(0|0);
    if ($31) {
     $$0$ph$lcssa$i = $$0710$i;
     break;
    } else {
     $$0$ph14$i = $$0710$i;$$07$ph13$i = $30;
    }
   }
   $35 = ($$0$ph$lcssa$i|0)==($2|0);
   if (!($35)) {
    $36 = ((($$0$ph$lcssa$i)) + 16|0);
    $37 = ((($36)) + 11|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = ($38<<24>>24)<(0);
    $40 = ((($$0$ph$lcssa$i)) + 20|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $38&255;
    $43 = $39 ? $41 : $42;
    $44 = ($43>>>0)<($11>>>0);
    $$sroa$speculated$i$i$i$i$i = $44 ? $43 : $11;
    $45 = ($$sroa$speculated$i$i$i$i$i|0)==(0);
    if (!($45)) {
     $46 = HEAP32[$36>>2]|0;
     $47 = $39 ? $46 : $36;
     $48 = (_memcmp($13,$47,$$sroa$speculated$i$i$i$i$i)|0);
     $49 = ($48|0)==(0);
     if (!($49)) {
      $51 = ($48|0)<(0);
      if ($51) {
       break;
      } else {
       $$sroa$0$0 = $$0$ph$lcssa$i;
      }
      return ($$sroa$0$0|0);
     }
    }
    $50 = ($11>>>0)<($43>>>0);
    if (!($50)) {
     $$sroa$0$0 = $$0$ph$lcssa$i;
     return ($$sroa$0$0|0);
    }
   }
  }
 } while(0);
 $$sroa$0$0 = $2;
 return ($$sroa$0$0|0);
}
function __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE6ObjPtrI10URLRequestENS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEEixERSD_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$pre$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE6ObjPtrI10URLRequestEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISM_EERKT_($0,$2,$1)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $$0$i = $4;
  $26 = ((($$0$i)) + 28|0);
  STACKTOP = sp;return ($26|0);
 }
 $6 = (__Znwj(32)|0);
 $7 = ((($6)) + 16|0);
 __THREW__ = 0;
 invoke_vii(566,($7|0),($1|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch_2()|0;
  $11 = tempRet0;
  __ZdlPv($6);
  ___resumeException($10|0);
  // unreachable;
 }
 $12 = ((($6)) + 28|0);
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[$2>>2]|0;
 HEAP32[$6>>2] = 0;
 $14 = ((($6)) + 4|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($6)) + 8|0);
 HEAP32[$15>>2] = $13;
 HEAP32[$3>>2] = $6;
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $22 = $6;
 } else {
  $19 = $17;
  HEAP32[$0>>2] = $19;
  $$pre$i$i = HEAP32[$3>>2]|0;
  $22 = $$pre$i$i;
 }
 $20 = ((($0)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($21,$22);
 $23 = ((($0)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 1)|0;
 HEAP32[$23>>2] = $25;
 $$0$i = $6;
 $26 = ((($$0$i)) + 28|0);
 STACKTOP = sp;return ($26|0);
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE6ObjPtrI10URLRequestEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISM_EERKT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$ph = 0, $$024 = 0, $$025 = 0, $$in = 0, $$sroa$speculated$i$i$i$i$i = 0, $$sroa$speculated$i$i$i$i$i26 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$1>>2] = $3;
  $$025 = $3;
  return ($$025|0);
 }
 $6 = ((($0)) + 4|0);
 $7 = ((($2)) + 11|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)<(0);
 $10 = ((($2)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $8&255;
 $13 = $9 ? $11 : $12;
 $14 = HEAP32[$2>>2]|0;
 $15 = $9 ? $14 : $2;
 $$0 = $6;$$024 = $4;
 while(1) {
  $16 = ((($$024)) + 16|0);
  $17 = ((($16)) + 11|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)<(0);
  $20 = ((($$024)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $18&255;
  $23 = $19 ? $21 : $22;
  $24 = ($23>>>0)<($13>>>0);
  $$sroa$speculated$i$i$i$i$i26 = $24 ? $23 : $13;
  $25 = ($$sroa$speculated$i$i$i$i$i26|0)==(0);
  if ($25) {
   label = 6;
  } else {
   $26 = HEAP32[$16>>2]|0;
   $27 = $19 ? $26 : $16;
   $28 = (_memcmp($15,$27,$$sroa$speculated$i$i$i$i$i26)|0);
   $29 = ($28|0)==(0);
   if ($29) {
    label = 6;
   } else {
    $31 = ($28|0)<(0);
    if ($31) {
     label = 8;
    } else {
     label = 10;
    }
   }
  }
  if ((label|0) == 6) {
   label = 0;
   $30 = ($13>>>0)<($23>>>0);
   if ($30) {
    label = 8;
   } else {
    label = 10;
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $32 = HEAP32[$$024>>2]|0;
   $33 = ($32|0)==(0|0);
   if ($33) {
    label = 9;
    break;
   } else {
    $$0$ph = $$024;$$in = $32;
   }
  }
  else if ((label|0) == 10) {
   label = 0;
   $34 = ($13>>>0)<($23>>>0);
   $$sroa$speculated$i$i$i$i$i = $34 ? $13 : $23;
   $35 = ($$sroa$speculated$i$i$i$i$i|0)==(0);
   if ($35) {
    label = 12;
   } else {
    $36 = HEAP32[$16>>2]|0;
    $37 = $19 ? $36 : $16;
    $38 = (_memcmp($37,$15,$$sroa$speculated$i$i$i$i$i)|0);
    $39 = ($38|0)==(0);
    if ($39) {
     label = 12;
    } else {
     $40 = ($38|0)<(0);
     if (!($40)) {
      label = 16;
      break;
     }
    }
   }
   if ((label|0) == 12) {
    label = 0;
    if (!($24)) {
     label = 16;
     break;
    }
   }
   $41 = ((($$024)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(0|0);
   if ($43) {
    label = 15;
    break;
   } else {
    $$0$ph = $41;$$in = $42;
   }
  }
  $$0 = $$0$ph;$$024 = $$in;
 }
 if ((label|0) == 9) {
  HEAP32[$1>>2] = $$024;
  $$025 = $$024;
  return ($$025|0);
 }
 else if ((label|0) == 15) {
  HEAP32[$1>>2] = $$024;
  $$025 = $41;
  return ($$025|0);
 }
 else if ((label|0) == 16) {
  HEAP32[$1>>2] = $$024;
  $$025 = $$0;
  return ($$025|0);
 }
 return (0)|0;
}
function __ZN10URLRequest14removeDelegateEP19IURLRequestDelegate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$013 = 0, $$1 = 0, $$byval_copy = 0, $$in = 0, $$pre = 0, $$pre$i7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $phitmp = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $2 = sp;
 $3 = ((($0)) + 28|0);
 $4 = ((($0)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$3>>2]|0;
 $7 = ($5|0)==($6|0);
 if (!($7)) {
  $$013 = 0;$$in = $6;$18 = $5;
  while(1) {
   $9 = $$in;
   $10 = (($9) + ($$013<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==($1|0);
   if ($12) {
    $13 = $$in;
    $14 = (($13) + ($$013<<2)|0);
    $15 = ((($14)) + 4|0);
    $16 = $15;
    $17 = (($18) - ($16))|0;
    $19 = $17 >> 2;
    $20 = ($19|0)==(0);
    $21 = $18;
    if ($20) {
     $25 = $21;$49 = $18;
    } else {
     _memmove(($14|0),($15|0),($17|0))|0;
     $$pre$i7 = HEAP32[$4>>2]|0;
     $22 = $$pre$i7;
     $25 = $$pre$i7;$49 = $22;
    }
    $23 = (($14) + ($19<<2)|0);
    $24 = ($25|0)==($23|0);
    if ($24) {
     $50 = $49;
    } else {
     $scevgep$i$i$i = ((($25)) + -4|0);
     $26 = $scevgep$i$i$i;
     $27 = $23;
     $28 = (($26) - ($27))|0;
     $29 = $28 >>> 2;
     $30 = $29 ^ -1;
     $scevgep4$i$i$i = (($25) + ($30<<2)|0);
     HEAP32[$4>>2] = $scevgep4$i$i$i;
     $31 = $scevgep4$i$i$i;
     $50 = $31;
    }
    $32 = (($$013) + -1)|0;
    $$pre = HEAP32[$3>>2]|0;
    $$1 = $32;$35 = $50;$36 = $$pre;
   } else {
    $$1 = $$013;$35 = $18;$36 = $$in;
   }
   $33 = (($$1) + 1)|0;
   $34 = (($35) - ($36))|0;
   $8 = $34 >> 2;
   $37 = ($33>>>0)<($8>>>0);
   if ($37) {
    $$013 = $33;$$in = $36;$18 = $35;
   } else {
    break;
   }
  }
  $phitmp = ($8|0)==(0);
  if (!($phitmp)) {
   STACKTOP = sp;return;
  }
 }
 $38 = ((($0)) + 52|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0|0);
 if (!($40)) {
  __ZN10URLRequest10nativeStopEv($0);
  HEAP32[$38>>2] = 0;
  $41 = ((($0)) + 24|0);
  HEAP32[$41>>2] = 0;
  $42 = HEAP32[7266]|0;
  $43 = ($42|0)!=($0|0);
  $44 = ($42|0)==(0|0);
  $or$cond$i = $43 | $44;
  if (!($or$cond$i)) {
   __ZN6Object7releaseEv($0);
   HEAP32[7266] = 0;
  }
  __ZN10URLRequest14flushWorkQueueEv();
  __ZN6Object7releaseEv($0);
 }
 $45 = ((($0)) + 8|0);
 $46 = (__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE6ObjPtrI10URLRequestEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE4findIS7_EENS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEEiEERKT_(29068,$45)|0);
 $47 = ($46|0)==((29072)|0);
 if (!($47)) {
  $48 = $46;
  HEAP32[$2>>2] = $48;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
  (__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE6ObjPtrI10URLRequestEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE5eraseENS_21__tree_const_iteratorISB_PNS_11__tree_nodeISB_PvEEiEE(29068,$$byval_copy)|0);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE6ObjPtrI10URLRequestEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE5eraseENS_21__tree_const_iteratorISB_PNS_11__tree_nodeISB_PvEEiEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i$i = 0, $$05$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = ((($2)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==($2|0);
  if ($9) {
   $$05$i$i = $7;
  } else {
   $13 = $6;
   while(1) {
    $12 = HEAP32[$13>>2]|0;
    $14 = ((($12)) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==($12|0);
    if ($17) {
     $$05$i$i = $15;
     break;
    } else {
     $13 = $14;
    }
   }
  }
 } else {
  $$0$i$i$i = $4;
  while(1) {
   $10 = HEAP32[$$0$i$i$i>>2]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    break;
   } else {
    $$0$i$i$i = $10;
   }
  }
  $$05$i$i = $$0$i$i$i;
 }
 $18 = HEAP32[$0>>2]|0;
 $19 = ($18|0)==($2|0);
 if ($19) {
  $20 = $$05$i$i;
  HEAP32[$0>>2] = $20;
 }
 $21 = ((($0)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + -1)|0;
 HEAP32[$21>>2] = $23;
 $24 = ((($0)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 __ZNSt3__213__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_($25,$2);
 $26 = ((($2)) + 16|0);
 $27 = ((($2)) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if (!($29)) {
  __THREW__ = 0;
  invoke_vi(525,($28|0));
  $30 = __THREW__; __THREW__ = 0;
  $31 = $30&1;
  if ($31) {
   $32 = ___cxa_find_matching_catch_3(0|0)|0;
   $33 = tempRet0;
   ___clang_call_terminate($32);
   // unreachable;
  }
 }
 $34 = ((($26)) + 11|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = ($35<<24>>24)<(0);
 if (!($36)) {
  __ZdlPv($2);
  return ($$05$i$i|0);
 }
 $37 = HEAP32[$26>>2]|0;
 __ZdlPv($37);
 __ZdlPv($2);
 return ($$05$i$i|0);
}
function __ZNSt3__213__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$0 = 0, $$$i = 0, $$$i123 = 0, $$$i124 = 0, $$$i126 = 0, $$$i128 = 0, $$$i130 = 0, $$0 = 0, $$0$i$i = 0, $$0113 = 0, $$1 = 0, $$1114 = 0, $$1114$$2 = 0, $$1114$$2121 = 0, $$193 = 0, $$2 = 0, $$2$ph = 0, $$2115 = 0, $$3116 = 0, $$4 = 0;
 var $$4117 = 0, $$5118 = 0, $$6 = 0, $$lcssa156 = 0, $$phi$trans$insert = 0, $$phi$trans$insert160 = 0, $$phi$trans$insert162 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre161 = 0, $$pre163 = 0, $$sink = 0, $$sink1 = 0, $$sink119 = 0, $$sink203 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond122 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $10 = 0;$12 = $1;
 } else {
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   $10 = $2;$12 = $1;
  } else {
   $$0$i$i = $5;
   while(1) {
    $7 = HEAP32[$$0$i$i>>2]|0;
    $8 = ($7|0)==(0|0);
    if ($8) {
     $10 = 0;$12 = $$0$i$i;
     break;
    } else {
     $$0$i$i = $7;
    }
   }
  }
 }
 $9 = ($10|0)!=(0|0);
 $11 = ((($12)) + 4|0);
 $$sink = $9 ? $12 : $11;
 $13 = HEAP32[$$sink>>2]|0;
 $14 = ($13|0)!=(0|0);
 $15 = ((($12)) + 8|0);
 if ($14) {
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($13)) + 8|0);
  HEAP32[$17>>2] = $16;
 }
 $18 = HEAP32[$15>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==($12|0);
 if ($20) {
  HEAP32[$18>>2] = $13;
  $21 = ($12|0)==($0|0);
  if ($21) {
   $$0 = $13;$$0113 = 0;
  } else {
   $22 = ((($18)) + 4|0);
   $$sink119 = $22;
   label = 10;
  }
 } else {
  $23 = ((($18)) + 4|0);
  HEAP32[$23>>2] = $13;
  $$sink119 = $18;
  label = 10;
 }
 if ((label|0) == 10) {
  $24 = HEAP32[$$sink119>>2]|0;
  $$0 = $0;$$0113 = $24;
 }
 $25 = ((($12)) + 12|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = ($26<<24>>24)!=(0);
 $28 = ($12|0)==($1|0);
 if ($28) {
  $$1 = $$0;
 } else {
  $29 = ((($1)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  HEAP32[$15>>2] = $30;
  $31 = HEAP32[$29>>2]|0;
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==($1|0);
  $34 = $30;
  $35 = ((($34)) + 4|0);
  $36 = $30;
  $$sink1 = $33 ? $36 : $35;
  HEAP32[$$sink1>>2] = $12;
  $37 = HEAP32[$1>>2]|0;
  HEAP32[$12>>2] = $37;
  $38 = ((($37)) + 8|0);
  HEAP32[$38>>2] = $12;
  $39 = ((($1)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  HEAP32[$11>>2] = $40;
  $41 = ($40|0)==(0|0);
  if (!($41)) {
   $42 = ((($40)) + 8|0);
   HEAP32[$42>>2] = $12;
  }
  $43 = ((($1)) + 12|0);
  $44 = HEAP8[$43>>0]|0;
  HEAP8[$25>>0] = $44;
  $45 = ($$0|0)==($1|0);
  $$$0 = $45 ? $12 : $$0;
  $$1 = $$$0;
 }
 $46 = ($$1|0)!=(0|0);
 $or$cond = $27 & $46;
 if (!($or$cond)) {
  return;
 }
 if ($14) {
  $47 = ((($13)) + 12|0);
  HEAP8[$47>>0] = 1;
  return;
 } else {
  $$1114 = $$0113;$$2 = $$1;
 }
 while(1) {
  $54 = ((($$1114)) + 8|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)==($$1114|0);
  $58 = ((($$1114)) + 12|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = ($59<<24>>24)!=(0);
  if ($57) {
   if ($60) {
    $$4117 = $$1114;$$6 = $$2;
   } else {
    HEAP8[$58>>0] = 1;
    $134 = ((($55)) + 12|0);
    HEAP8[$134>>0] = 0;
    $135 = HEAP32[$55>>2]|0;
    $136 = ((($135)) + 4|0);
    $137 = HEAP32[$136>>2]|0;
    HEAP32[$55>>2] = $137;
    $138 = ($137|0)==(0|0);
    if (!($138)) {
     $139 = ((($137)) + 8|0);
     HEAP32[$139>>2] = $55;
    }
    $140 = ((($55)) + 8|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = ((($135)) + 8|0);
    HEAP32[$142>>2] = $141;
    $143 = HEAP32[$140>>2]|0;
    $144 = HEAP32[$143>>2]|0;
    $145 = ($144|0)==($55|0);
    $146 = ((($143)) + 4|0);
    $$$i124 = $145 ? $143 : $146;
    HEAP32[$$$i124>>2] = $135;
    HEAP32[$136>>2] = $55;
    HEAP32[$140>>2] = $135;
    $147 = ((($$1114)) + 4|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($$2|0)==($148|0);
    $$1114$$2121 = $149 ? $$1114 : $$2;
    $150 = HEAP32[$148>>2]|0;
    $$4117 = $150;$$6 = $$1114$$2121;
   }
   $151 = HEAP32[$$4117>>2]|0;
   $152 = ($151|0)==(0|0);
   if (!($152)) {
    $153 = ((($151)) + 12|0);
    $154 = HEAP8[$153>>0]|0;
    $155 = ($154<<24>>24)==(0);
    if ($155) {
     $$5118 = $$4117;$188 = $151;
     label = 55;
     break;
    }
   }
   $156 = ((($$4117)) + 4|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = ($157|0)==(0|0);
   if (!($158)) {
    $159 = ((($157)) + 12|0);
    $160 = HEAP8[$159>>0]|0;
    $161 = ($160<<24>>24)==(0);
    if ($161) {
     label = 49;
     break;
    }
   }
   $162 = ((($$4117)) + 12|0);
   HEAP8[$162>>0] = 0;
   $163 = ((($$4117)) + 8|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = ((($164)) + 12|0);
   $166 = HEAP8[$165>>0]|0;
   $167 = ($166<<24>>24)==(0);
   $168 = ($164|0)==($$6|0);
   $or$cond122 = $168 | $167;
   if ($or$cond122) {
    label = 48;
    break;
   } else {
    $$2$ph = $$6;$$sink203 = $164;
   }
  } else {
   if ($60) {
    $$2115 = $$1114;$$4 = $$2;
   } else {
    HEAP8[$58>>0] = 1;
    $61 = ((($55)) + 12|0);
    HEAP8[$61>>0] = 0;
    $62 = ((($55)) + 4|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = HEAP32[$63>>2]|0;
    HEAP32[$62>>2] = $64;
    $65 = ($64|0)==(0|0);
    if (!($65)) {
     $66 = ((($64)) + 8|0);
     HEAP32[$66>>2] = $55;
    }
    $67 = ((($55)) + 8|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((($63)) + 8|0);
    HEAP32[$69>>2] = $68;
    $70 = HEAP32[$67>>2]|0;
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==($55|0);
    $73 = ((($70)) + 4|0);
    $$$i130 = $72 ? $70 : $73;
    HEAP32[$$$i130>>2] = $63;
    HEAP32[$63>>2] = $55;
    HEAP32[$67>>2] = $63;
    $74 = HEAP32[$$1114>>2]|0;
    $75 = ($$2|0)==($74|0);
    $$1114$$2 = $75 ? $$1114 : $$2;
    $76 = ((($74)) + 4|0);
    $77 = HEAP32[$76>>2]|0;
    $$2115 = $77;$$4 = $$1114$$2;
   }
   $78 = HEAP32[$$2115>>2]|0;
   $79 = ($78|0)==(0|0);
   if (!($79)) {
    $80 = ((($78)) + 12|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = ($81<<24>>24)==(0);
    if ($82) {
     label = 31;
     break;
    }
   }
   $83 = ((($$2115)) + 4|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ($84|0)==(0|0);
   if (!($85)) {
    $86 = ((($84)) + 12|0);
    $87 = HEAP8[$86>>0]|0;
    $88 = ($87<<24>>24)==(0);
    if ($88) {
     $99 = $84;
     label = 32;
     break;
    }
   }
   $89 = ((($$2115)) + 12|0);
   HEAP8[$89>>0] = 0;
   $90 = ((($$2115)) + 8|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ($91|0)==($$4|0);
   if ($92) {
    $$lcssa156 = $$4;
    label = 30;
    break;
   }
   $93 = ((($91)) + 12|0);
   $94 = HEAP8[$93>>0]|0;
   $95 = ($94<<24>>24)==(0);
   if ($95) {
    $$lcssa156 = $91;
    label = 30;
    break;
   } else {
    $$2$ph = $$4;$$sink203 = $91;
   }
  }
  $48 = ((($$sink203)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)==($$sink203|0);
  $52 = ((($49)) + 4|0);
  $$193 = $51 ? $52 : $49;
  $53 = HEAP32[$$193>>2]|0;
  $$1114 = $53;$$2 = $$2$ph;
 }
 do {
  if ((label|0) == 30) {
   $96 = ((($$lcssa156)) + 12|0);
   HEAP8[$96>>0] = 1;
   return;
  }
  else if ((label|0) == 31) {
   $$phi$trans$insert = ((($$2115)) + 4|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $97 = ($$pre|0)==(0|0);
   if ($97) {
    label = 33;
   } else {
    $99 = $$pre;
    label = 32;
   }
  }
  else if ((label|0) == 48) {
   HEAP8[$165>>0] = 1;
   return;
  }
  else if ((label|0) == 49) {
   if ($152) {
    $$pre$phiZ2D = $156;$170 = $157;
   } else {
    $$phi$trans$insert160 = ((($151)) + 12|0);
    $$pre161 = HEAP8[$$phi$trans$insert160>>0]|0;
    $phitmp = ($$pre161<<24>>24)==(0);
    if ($phitmp) {
     $$5118 = $$4117;$188 = $151;
     label = 55;
     break;
    }
    $$phi$trans$insert162 = ((($$4117)) + 4|0);
    $$pre163 = HEAP32[$$phi$trans$insert162>>2]|0;
    $$pre$phiZ2D = $$phi$trans$insert162;$170 = $$pre163;
   }
   $169 = ((($170)) + 12|0);
   HEAP8[$169>>0] = 1;
   $171 = ((($$4117)) + 12|0);
   HEAP8[$171>>0] = 0;
   $172 = HEAP32[$170>>2]|0;
   HEAP32[$$pre$phiZ2D>>2] = $172;
   $173 = ($172|0)==(0|0);
   if (!($173)) {
    $174 = ((($172)) + 8|0);
    HEAP32[$174>>2] = $$4117;
   }
   $175 = ((($$4117)) + 8|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = ((($170)) + 8|0);
   HEAP32[$177>>2] = $176;
   $178 = HEAP32[$175>>2]|0;
   $179 = HEAP32[$178>>2]|0;
   $180 = ($179|0)==($$4117|0);
   $181 = ((($178)) + 4|0);
   $$$i123 = $180 ? $178 : $181;
   HEAP32[$$$i123>>2] = $170;
   HEAP32[$170>>2] = $$4117;
   HEAP32[$175>>2] = $170;
   $$5118 = $170;$188 = $$4117;
   label = 55;
  }
 } while(0);
 if ((label|0) == 32) {
  $98 = ((($99)) + 12|0);
  $100 = HEAP8[$98>>0]|0;
  $101 = ($100<<24>>24)==(0);
  if ($101) {
   $$3116 = $$2115;$121 = $99;
  } else {
   label = 33;
  }
 }
 else if ((label|0) == 55) {
  $182 = ((($$5118)) + 8|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = ((($183)) + 12|0);
  $185 = HEAP8[$184>>0]|0;
  $186 = ((($$5118)) + 12|0);
  HEAP8[$186>>0] = $185;
  HEAP8[$184>>0] = 1;
  $187 = ((($188)) + 12|0);
  HEAP8[$187>>0] = 1;
  $189 = HEAP32[$183>>2]|0;
  $190 = ((($189)) + 4|0);
  $191 = HEAP32[$190>>2]|0;
  HEAP32[$183>>2] = $191;
  $192 = ($191|0)==(0|0);
  if (!($192)) {
   $193 = ((($191)) + 8|0);
   HEAP32[$193>>2] = $183;
  }
  $194 = ((($183)) + 8|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = ((($189)) + 8|0);
  HEAP32[$196>>2] = $195;
  $197 = HEAP32[$194>>2]|0;
  $198 = HEAP32[$197>>2]|0;
  $199 = ($198|0)==($183|0);
  $200 = ((($197)) + 4|0);
  $$$i = $199 ? $197 : $200;
  HEAP32[$$$i>>2] = $189;
  HEAP32[$190>>2] = $183;
  HEAP32[$194>>2] = $189;
  return;
 }
 if ((label|0) == 33) {
  $102 = ((($78)) + 12|0);
  HEAP8[$102>>0] = 1;
  $103 = ((($$2115)) + 12|0);
  HEAP8[$103>>0] = 0;
  $104 = ((($78)) + 4|0);
  $105 = HEAP32[$104>>2]|0;
  HEAP32[$$2115>>2] = $105;
  $106 = ($105|0)==(0|0);
  if (!($106)) {
   $107 = ((($105)) + 8|0);
   HEAP32[$107>>2] = $$2115;
  }
  $108 = ((($$2115)) + 8|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ((($78)) + 8|0);
  HEAP32[$110>>2] = $109;
  $111 = HEAP32[$108>>2]|0;
  $112 = HEAP32[$111>>2]|0;
  $113 = ($112|0)==($$2115|0);
  $114 = ((($111)) + 4|0);
  $$$i128 = $113 ? $111 : $114;
  HEAP32[$$$i128>>2] = $78;
  HEAP32[$104>>2] = $$2115;
  HEAP32[$108>>2] = $78;
  $$3116 = $78;$121 = $$2115;
 }
 $115 = ((($$3116)) + 8|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ((($116)) + 12|0);
 $118 = HEAP8[$117>>0]|0;
 $119 = ((($$3116)) + 12|0);
 HEAP8[$119>>0] = $118;
 HEAP8[$117>>0] = 1;
 $120 = ((($121)) + 12|0);
 HEAP8[$120>>0] = 1;
 $122 = ((($116)) + 4|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = HEAP32[$123>>2]|0;
 HEAP32[$122>>2] = $124;
 $125 = ($124|0)==(0|0);
 if (!($125)) {
  $126 = ((($124)) + 8|0);
  HEAP32[$126>>2] = $116;
 }
 $127 = ((($116)) + 8|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = ((($123)) + 8|0);
 HEAP32[$129>>2] = $128;
 $130 = HEAP32[$127>>2]|0;
 $131 = HEAP32[$130>>2]|0;
 $132 = ($131|0)==($116|0);
 $133 = ((($130)) + 4|0);
 $$$i126 = $132 ? $130 : $133;
 HEAP32[$$$i126>>2] = $123;
 HEAP32[$123>>2] = $116;
 HEAP32[$127>>2] = $123;
 return;
}
function __ZN10URLRequest9unrequestERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP19IURLRequestDelegate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE6ObjPtrI10URLRequestENS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEEixERSD_(29068,$0)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return;
 }
 __ZN10URLRequest14removeDelegateEP19IURLRequestDelegate($3,$1);
 return;
}
function __ZN10URLRequest14dispatchOnLoadEP7URLData($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01516 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($1)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(2);
  $6 = ((($1)) + 12|0);
  if ($5) {
   $7 = HEAP32[$6>>2]|0;
   $8 = (__ZN6Bitmap11sizeInBytesEv($7)|0);
   $$0 = $8;
  } else {
   $9 = HEAP32[$6>>2]|0;
   $10 = ((($9)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $$0 = $11;
  }
  $12 = ((($0)) + 8|0);
  __ZN8MruCacheINSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3putERKS6_P6Objectj(29012,$12,$1,$$0);
  $13 = ((($0)) + 28|0);
  $14 = ((($0)) + 32|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$13>>2]|0;
  $17 = ($15|0)==($16|0);
  if (!($17)) {
   $$01516 = 0;$19 = $16;
   while(1) {
    $18 = $19;
    $20 = (($18) + ($$01516<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[$22>>2]|0;
    FUNCTION_TABLE_vii[$23 & 1023]($21,$1);
    $24 = (($$01516) + 1)|0;
    $25 = HEAP32[$14>>2]|0;
    $26 = HEAP32[$13>>2]|0;
    $27 = (($25) - ($26))|0;
    $28 = $27 >> 2;
    $29 = ($24>>>0)<($28>>>0);
    if ($29) {
     $$01516 = $24;$19 = $26;
    } else {
     break;
    }
   }
  }
 }
 $30 = ((($0)) + 52|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0|0);
 if ($32) {
  return;
 }
 __ZN10URLRequest10nativeStopEv($0);
 HEAP32[$30>>2] = 0;
 $33 = ((($0)) + 24|0);
 HEAP32[$33>>2] = 0;
 $34 = HEAP32[7266]|0;
 $35 = ($34|0)!=($0|0);
 $36 = ($34|0)==(0|0);
 $or$cond$i = $35 | $36;
 if (!($or$cond$i)) {
  __ZN6Object7releaseEv($0);
  HEAP32[7266] = 0;
 }
 __ZN10URLRequest14flushWorkQueueEv();
 __ZN6Object7releaseEv($0);
 return;
}
function __ZN8MruCacheINSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3putERKS6_P6Objectj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$cast = 0, $$sink18$index = 0, $$sink18$index4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
 __THREW__ = 0;
 (invoke_iii(563,($4|0),($1|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L1: do {
  if ($6) {
   label = 14;
  } else {
   $7 = ((($4)) + 12|0);
   HEAP32[$7>>2] = $2;
   $8 = ((($4)) + 16|0);
   HEAP32[$8>>2] = $3;
   __THREW__ = 0;
   invoke_vi(526,($2|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    label = 14;
   } else {
    __THREW__ = 0;
    $11 = (invoke_ii(527,28)|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     label = 14;
    } else {
     $14 = ((($11)) + 8|0);
     __THREW__ = 0;
     invoke_vii(566,($14|0),($4|0));
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if ($16) {
      $17 = ___cxa_find_matching_catch_2()|0;
      $18 = tempRet0;
      __ZdlPv($11);
      $$sink18$index = $17;$$sink18$index4 = $18;
      break;
     }
     $19 = ((($11)) + 20|0);
     $20 = $7;
     $21 = $20;
     $22 = HEAP32[$21>>2]|0;
     $23 = (($20) + 4)|0;
     $24 = $23;
     $25 = HEAP32[$24>>2]|0;
     $26 = $19;
     $27 = $26;
     HEAP32[$27>>2] = $22;
     $28 = (($26) + 4)|0;
     $29 = $28;
     HEAP32[$29>>2] = $25;
     HEAP32[$11>>2] = $0;
     $30 = ((($0)) + 4|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ((($11)) + 4|0);
     HEAP32[$32>>2] = $31;
     HEAP32[$31>>2] = $11;
     HEAP32[$30>>2] = $11;
     $33 = ((($0)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) + 1)|0;
     HEAP32[$33>>2] = $35;
     $36 = ((($0)) + 12|0);
     __THREW__ = 0;
     $37 = (invoke_iii(590,($36|0),($1|0))|0);
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if ($39) {
      $76 = ___cxa_find_matching_catch_2()|0;
      $77 = tempRet0;
      $$sink18$index = $76;$$sink18$index4 = $77;
      break;
     }
     $$cast = $11;
     HEAP32[$37>>2] = $$cast;
     $40 = ((($0)) + 36|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = (($41) + ($3))|0;
     HEAP32[$40>>2] = $42;
     $43 = ((($0)) + 32|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ($42>>>0)>($44>>>0);
     L11: do {
      if ($45) {
       $50 = $42;
       while(1) {
        $46 = HEAP32[$0>>2]|0;
        $47 = ((($46)) + 24|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = (($50) - ($48))|0;
        HEAP32[$40>>2] = $49;
        $51 = ((($46)) + 20|0);
        $52 = HEAP32[$51>>2]|0;
        __THREW__ = 0;
        invoke_vi(525,($52|0));
        $53 = __THREW__; __THREW__ = 0;
        $54 = $53&1;
        if ($54) {
         break;
        }
        $55 = ((($46)) + 8|0);
        __THREW__ = 0;
        (invoke_iii(591,($36|0),($55|0))|0);
        $56 = __THREW__; __THREW__ = 0;
        $57 = $56&1;
        if ($57) {
         break;
        }
        $58 = HEAP32[$0>>2]|0;
        $59 = ((($58)) + 4|0);
        $60 = HEAP32[$59>>2]|0;
        $61 = HEAP32[$58>>2]|0;
        $62 = ((($61)) + 4|0);
        HEAP32[$62>>2] = $60;
        $63 = HEAP32[$59>>2]|0;
        HEAP32[$63>>2] = $61;
        $64 = HEAP32[$33>>2]|0;
        $65 = (($64) + -1)|0;
        HEAP32[$33>>2] = $65;
        $66 = ((($58)) + 8|0);
        $67 = ((($66)) + 11|0);
        $68 = HEAP8[$67>>0]|0;
        $69 = ($68<<24>>24)<(0);
        if ($69) {
         $70 = HEAP32[$66>>2]|0;
         __ZdlPv($70);
        }
        __ZdlPv($58);
        $71 = HEAP32[$40>>2]|0;
        $72 = HEAP32[$43>>2]|0;
        $73 = ($71>>>0)>($72>>>0);
        if ($73) {
         $50 = $71;
        } else {
         break L11;
        }
       }
       $78 = ___cxa_find_matching_catch_2()|0;
       $79 = tempRet0;
       $$sink18$index = $78;$$sink18$index4 = $79;
       break L1;
      }
     } while(0);
     $80 = ((($4)) + 11|0);
     $81 = HEAP8[$80>>0]|0;
     $82 = ($81<<24>>24)<(0);
     if (!($82)) {
      STACKTOP = sp;return;
     }
     $83 = HEAP32[$4>>2]|0;
     __ZdlPv($83);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  $74 = ___cxa_find_matching_catch_2()|0;
  $75 = tempRet0;
  $$sink18$index = $74;$$sink18$index4 = $75;
 }
 $84 = ((($4)) + 11|0);
 $85 = HEAP8[$84>>0]|0;
 $86 = ($85<<24>>24)<(0);
 if (!($86)) {
  ___resumeException($$sink18$index|0);
  // unreachable;
 }
 $87 = HEAP32[$4>>2]|0;
 __ZdlPv($87);
 ___resumeException($$sink18$index|0);
 // unreachable;
}
function __ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_15__list_iteratorIN8MruCacheIS6_E5ENTRYEPvEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SC_EEEEEixERSI_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$copyload$i$i$i$i$i$i = 0, $$0$i = 0, $$0$lcssa$i$i$i$i$i = 0, $$02026$i$i4$i$i = 0, $$02026$i$i4$i$us$i = 0, $$02125$i$i5$i$i = 0, $$02125$i$i5$i$us$i = 0, $$027$i$i3$i$i = 0, $$027$i$i3$i$us$i = 0, $$036$lcssa$i$i$i$i$i = 0, $$03639$i$i$i$i$i = 0, $$037$lcssa$i$i$i$i$i = 0, $$03738$i$i$i$i$i = 0, $$040$i$i$i$i$i = 0, $$053$i = 0, $$053$i$us = 0, $$053$us$i = 0, $$053$us$i$us = 0, $$05398$i = 0, $$05399$i = 0;
 var $$05399$i$us = 0, $$05399$us$i = 0, $$05399$us$i$us = 0, $$054$i = 0, $$1$i = 0, $$1$i$i$i$i$i = 0, $$155$i = 0, $$2$i$i$i$i$i = 0, $$3$i$i$i$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$us$i = 0, $$sink$i = 0, $$sroa$speculated$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0;
 var $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond$i = 0, $or$cond101$i = 0, $or$cond101$i$us = 0, $phitmp$i$i$i$i = 0, $phitmp$i$i$i$us$i = 0, $scevgep$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 $5 = HEAP32[$1>>2]|0;
 $6 = $4 ? $5 : $1;
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $3&255;
 $10 = $4 ? $8 : $9;
 $11 = ($10>>>0)>(3);
 if ($11) {
  $$03639$i$i$i$i$i = $6;$$03738$i$i$i$i$i = $10;$$040$i$i$i$i$i = $10;
  while(1) {
   $$0$copyload$i$i$i$i$i$i = HEAPU8[$$03639$i$i$i$i$i>>0]|(HEAPU8[$$03639$i$i$i$i$i+1>>0]<<8)|(HEAPU8[$$03639$i$i$i$i$i+2>>0]<<16)|(HEAPU8[$$03639$i$i$i$i$i+3>>0]<<24);
   $12 = Math_imul($$0$copyload$i$i$i$i$i$i, 1540483477)|0;
   $13 = $12 >>> 24;
   $14 = $13 ^ $12;
   $15 = Math_imul($14, 1540483477)|0;
   $16 = Math_imul($$03738$i$i$i$i$i, 1540483477)|0;
   $17 = $15 ^ $16;
   $18 = ((($$03639$i$i$i$i$i)) + 4|0);
   $19 = (($$040$i$i$i$i$i) + -4)|0;
   $20 = ($19>>>0)>(3);
   if ($20) {
    $$03639$i$i$i$i$i = $18;$$03738$i$i$i$i$i = $17;$$040$i$i$i$i$i = $19;
   } else {
    break;
   }
  }
  $21 = (($10) + -4)|0;
  $22 = $21 & -4;
  $23 = (($22) + 4)|0;
  $scevgep$i$i$i$i$i = (($6) + ($23)|0);
  $24 = (($21) - ($22))|0;
  $$0$lcssa$i$i$i$i$i = $24;$$036$lcssa$i$i$i$i$i = $scevgep$i$i$i$i$i;$$037$lcssa$i$i$i$i$i = $17;
 } else {
  $$0$lcssa$i$i$i$i$i = $10;$$036$lcssa$i$i$i$i$i = $6;$$037$lcssa$i$i$i$i$i = $10;
 }
 switch ($$0$lcssa$i$i$i$i$i|0) {
 case 3:  {
  $25 = ((($$036$lcssa$i$i$i$i$i)) + 2|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = $27 << 16;
  $29 = $28 ^ $$037$lcssa$i$i$i$i$i;
  $$1$i$i$i$i$i = $29;
  label = 6;
  break;
 }
 case 2:  {
  $$1$i$i$i$i$i = $$037$lcssa$i$i$i$i$i;
  label = 6;
  break;
 }
 case 1:  {
  $$2$i$i$i$i$i = $$037$lcssa$i$i$i$i$i;
  label = 7;
  break;
 }
 default: {
  $$3$i$i$i$i$i = $$037$lcssa$i$i$i$i$i;
 }
 }
 if ((label|0) == 6) {
  $30 = ((($$036$lcssa$i$i$i$i$i)) + 1|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $32 << 8;
  $34 = $33 ^ $$1$i$i$i$i$i;
  $$2$i$i$i$i$i = $34;
  label = 7;
 }
 if ((label|0) == 7) {
  $35 = HEAP8[$$036$lcssa$i$i$i$i$i>>0]|0;
  $36 = $35&255;
  $37 = $36 ^ $$2$i$i$i$i$i;
  $38 = Math_imul($37, 1540483477)|0;
  $$3$i$i$i$i$i = $38;
 }
 $39 = $$3$i$i$i$i$i >>> 13;
 $40 = $39 ^ $$3$i$i$i$i$i;
 $41 = Math_imul($40, 1540483477)|0;
 $42 = $41 >>> 15;
 $43 = $42 ^ $41;
 $44 = ((($0)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0);
 L13: do {
  if ($46) {
   $$054$i = 0;
  } else {
   $47 = (($45) + -1)|0;
   $48 = $47 & $45;
   $49 = ($48|0)==(0);
   if ($49) {
    $50 = $43 & $47;
    $55 = $50;
   } else {
    $51 = ($43>>>0)<($45>>>0);
    if ($51) {
     $55 = $43;
    } else {
     $52 = (($43>>>0) % ($45>>>0))&-1;
     $55 = $52;
    }
   }
   $53 = HEAP32[$0>>2]|0;
   $54 = (($53) + ($55<<2)|0);
   $56 = HEAP32[$54>>2]|0;
   $57 = ($56|0)==(0|0);
   if ($57) {
    $$054$i = $55;
   } else {
    $$05398$i = HEAP32[$56>>2]|0;
    $58 = ($$05398$i|0)==(0|0);
    if ($58) {
     $$054$i = $55;
    } else {
     $59 = ($10|0)==(0);
     if ($49) {
      if ($59) {
       $$05399$us$i$us = $$05398$i;
       while(1) {
        $77 = ((($$05399$us$i$us)) + 4|0);
        $78 = HEAP32[$77>>2]|0;
        $79 = ($78|0)==($43|0);
        $80 = $78 & $47;
        $81 = ($80|0)==($55|0);
        $or$cond101$i$us = $79 | $81;
        if (!($or$cond101$i$us)) {
         $$054$i = $55;
         break L13;
        }
        $82 = ((($$05399$us$i$us)) + 8|0);
        $83 = ((($82)) + 11|0);
        $84 = HEAP8[$83>>0]|0;
        $85 = ($84<<24>>24)<(0);
        $86 = ((($$05399$us$i$us)) + 12|0);
        $87 = HEAP32[$86>>2]|0;
        $88 = $84&255;
        $89 = $85 ? $87 : $88;
        $90 = ($89|0)==(0);
        if ($90) {
         $$1$i = $$05399$us$i$us;
         break;
        }
        $$053$us$i$us = HEAP32[$$05399$us$i$us>>2]|0;
        $91 = ($$053$us$i$us|0)==(0|0);
        if ($91) {
         $$054$i = $55;
         break L13;
        } else {
         $$05399$us$i$us = $$053$us$i$us;
        }
       }
       $212 = ((($$1$i)) + 20|0);
       return ($212|0);
      } else {
       $$05399$us$i = $$05398$i;
      }
      L30: while(1) {
       $92 = ((($$05399$us$i)) + 4|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = ($93|0)==($43|0);
       $95 = $93 & $47;
       $96 = ($95|0)==($55|0);
       $or$cond101$i = $94 | $96;
       if (!($or$cond101$i)) {
        $$054$i = $55;
        break L13;
       }
       $97 = ((($$05399$us$i)) + 8|0);
       $98 = ((($97)) + 11|0);
       $99 = HEAP8[$98>>0]|0;
       $100 = ($99<<24>>24)<(0);
       $101 = ((($$05399$us$i)) + 12|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = $99&255;
       $104 = $100 ? $102 : $103;
       $105 = ($104|0)==($10|0);
       do {
        if ($105) {
         $106 = HEAP32[$97>>2]|0;
         if ($100) {
          $117 = (_memcmp($106,$6,$10)|0);
          $phitmp$i$i$i$us$i = ($117|0)==(0);
          if ($phitmp$i$i$i$us$i) {
           $$1$i = $$05399$us$i;
           label = 69;
           break L30;
          } else {
           break;
          }
         }
         $107 = $106;
         $108 = $107&255;
         $109 = HEAP8[$6>>0]|0;
         $110 = ($108<<24>>24)==($109<<24>>24);
         if ($110) {
          $$02026$i$i4$i$us$i = $97;$$02125$i$i5$i$us$i = $103;$$027$i$i3$i$us$i = $6;
          while(1) {
           $111 = (($$02125$i$i5$i$us$i) + -1)|0;
           $112 = ((($$02026$i$i4$i$us$i)) + 1|0);
           $113 = ($111|0)==(0);
           if ($113) {
            $$1$i = $$05399$us$i;
            label = 69;
            break L30;
           }
           $114 = ((($$027$i$i3$i$us$i)) + 1|0);
           $$pre$i$i$us$i = HEAP8[$112>>0]|0;
           $115 = HEAP8[$114>>0]|0;
           $116 = ($$pre$i$i$us$i<<24>>24)==($115<<24>>24);
           if ($116) {
            $$02026$i$i4$i$us$i = $112;$$02125$i$i5$i$us$i = $111;$$027$i$i3$i$us$i = $114;
           } else {
            break;
           }
          }
         }
        }
       } while(0);
       $$053$us$i = HEAP32[$$05399$us$i>>2]|0;
       $118 = ($$053$us$i|0)==(0|0);
       if ($118) {
        $$054$i = $55;
        break L13;
       } else {
        $$05399$us$i = $$053$us$i;
       }
      }
      if ((label|0) == 69) {
       $212 = ((($$1$i)) + 20|0);
       return ($212|0);
      }
     }
     if ($59) {
      $$05399$i$us = $$05398$i;
      while(1) {
       $60 = ((($$05399$i$us)) + 4|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = ($61|0)==($43|0);
       if (!($62)) {
        $63 = ($61>>>0)<($45>>>0);
        if ($63) {
         $66 = $61;
        } else {
         $64 = (($61>>>0) % ($45>>>0))&-1;
         $66 = $64;
        }
        $65 = ($66|0)==($55|0);
        if (!($65)) {
         $$054$i = $55;
         break L13;
        }
       }
       $67 = ((($$05399$i$us)) + 8|0);
       $68 = ((($67)) + 11|0);
       $69 = HEAP8[$68>>0]|0;
       $70 = ($69<<24>>24)<(0);
       $71 = ((($$05399$i$us)) + 12|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = $69&255;
       $74 = $70 ? $72 : $73;
       $75 = ($74|0)==(0);
       if ($75) {
        $$1$i = $$05399$i$us;
        break;
       }
       $$053$i$us = HEAP32[$$05399$i$us>>2]|0;
       $76 = ($$053$i$us|0)==(0|0);
       if ($76) {
        $$054$i = $55;
        break L13;
       } else {
        $$05399$i$us = $$053$i$us;
       }
      }
      $212 = ((($$1$i)) + 20|0);
      return ($212|0);
     } else {
      $$05399$i = $$05398$i;
     }
     L58: while(1) {
      $119 = ((($$05399$i)) + 4|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = ($120|0)==($43|0);
      if (!($121)) {
       $122 = ($120>>>0)<($45>>>0);
       if ($122) {
        $125 = $120;
       } else {
        $123 = (($120>>>0) % ($45>>>0))&-1;
        $125 = $123;
       }
       $124 = ($125|0)==($55|0);
       if (!($124)) {
        $$054$i = $55;
        break L13;
       }
      }
      $126 = ((($$05399$i)) + 8|0);
      $127 = ((($126)) + 11|0);
      $128 = HEAP8[$127>>0]|0;
      $129 = ($128<<24>>24)<(0);
      $130 = ((($$05399$i)) + 12|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = $128&255;
      $133 = $129 ? $131 : $132;
      $134 = ($133|0)==($10|0);
      do {
       if ($134) {
        $135 = HEAP32[$126>>2]|0;
        if ($129) {
         $146 = (_memcmp($135,$6,$10)|0);
         $phitmp$i$i$i$i = ($146|0)==(0);
         if ($phitmp$i$i$i$i) {
          $$1$i = $$05399$i;
          label = 69;
          break L58;
         } else {
          break;
         }
        }
        $136 = $135;
        $137 = $136&255;
        $138 = HEAP8[$6>>0]|0;
        $139 = ($137<<24>>24)==($138<<24>>24);
        if ($139) {
         $$02026$i$i4$i$i = $126;$$02125$i$i5$i$i = $132;$$027$i$i3$i$i = $6;
         while(1) {
          $140 = (($$02125$i$i5$i$i) + -1)|0;
          $141 = ((($$02026$i$i4$i$i)) + 1|0);
          $142 = ($140|0)==(0);
          if ($142) {
           $$1$i = $$05399$i;
           label = 69;
           break L58;
          }
          $143 = ((($$027$i$i3$i$i)) + 1|0);
          $$pre$i$i$i = HEAP8[$141>>0]|0;
          $144 = HEAP8[$143>>0]|0;
          $145 = ($$pre$i$i$i<<24>>24)==($144<<24>>24);
          if ($145) {
           $$02026$i$i4$i$i = $141;$$02125$i$i5$i$i = $140;$$027$i$i3$i$i = $143;
          } else {
           break;
          }
         }
        }
       }
      } while(0);
      $$053$i = HEAP32[$$05399$i>>2]|0;
      $147 = ($$053$i|0)==(0|0);
      if ($147) {
       $$054$i = $55;
       break L13;
      } else {
       $$05399$i = $$053$i;
      }
     }
     if ((label|0) == 69) {
      $212 = ((($$1$i)) + 20|0);
      return ($212|0);
     }
    }
   }
  }
 } while(0);
 $148 = (__Znwj(24)|0);
 $149 = ((($148)) + 8|0);
 __THREW__ = 0;
 invoke_vii(566,($149|0),($1|0));
 $150 = __THREW__; __THREW__ = 0;
 $151 = $150&1;
 if ($151) {
  $152 = ___cxa_find_matching_catch_2()|0;
  $153 = tempRet0;
  __ZdlPv($148);
  ___resumeException($152|0);
  // unreachable;
 }
 $154 = ((($148)) + 20|0);
 HEAP32[$154>>2] = 0;
 $155 = ((($148)) + 4|0);
 HEAP32[$155>>2] = $43;
 HEAP32[$148>>2] = 0;
 $156 = ((($0)) + 12|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = (($157) + 1)|0;
 $159 = (+($158>>>0));
 $160 = (+($45>>>0));
 $161 = ((($0)) + 16|0);
 $162 = +HEAPF32[$161>>2];
 $163 = $160 * $162;
 $164 = $159 > $163;
 $or$cond$i = $46 | $164;
 do {
  if ($or$cond$i) {
   $165 = $45 << 1;
   $166 = (($45) + -1)|0;
   $167 = $166 & $45;
   $notlhs$i = ($45>>>0)<(3);
   $notrhs$i = ($167|0)!=(0);
   $168 = $notlhs$i | $notrhs$i;
   $169 = $168&1;
   $170 = $169 | $165;
   $171 = $159 / $162;
   $172 = (+Math_ceil((+$171)));
   $173 = (~~(($172))>>>0);
   $174 = ($170>>>0)<($173>>>0);
   $$sroa$speculated$i = $174 ? $173 : $170;
   __THREW__ = 0;
   invoke_vii(592,($0|0),($$sroa$speculated$i|0));
   $175 = __THREW__; __THREW__ = 0;
   $176 = $175&1;
   if ($176) {
    $184 = ___cxa_find_matching_catch_2()|0;
    $185 = tempRet0;
    $186 = ((($148)) + 19|0);
    $187 = HEAP8[$186>>0]|0;
    $188 = ($187<<24>>24)<(0);
    if (!($188)) {
     __ZdlPv($148);
     ___resumeException($184|0);
     // unreachable;
    }
    $189 = HEAP32[$149>>2]|0;
    __ZdlPv($189);
    __ZdlPv($148);
    ___resumeException($184|0);
    // unreachable;
   } else {
    $177 = HEAP32[$44>>2]|0;
    $178 = (($177) + -1)|0;
    $179 = $178 & $177;
    $180 = ($179|0)==(0);
    if ($180) {
     $181 = $178 & $43;
     $$0$i = $177;$$155$i = $181;
     break;
    }
    $182 = ($43>>>0)<($177>>>0);
    if ($182) {
     $$0$i = $177;$$155$i = $43;
     break;
    }
    $183 = (($43>>>0) % ($177>>>0))&-1;
    $$0$i = $177;$$155$i = $183;
    break;
   }
  } else {
   $$0$i = $45;$$155$i = $$054$i;
  }
 } while(0);
 $190 = HEAP32[$0>>2]|0;
 $191 = (($190) + ($$155$i<<2)|0);
 $192 = HEAP32[$191>>2]|0;
 $193 = ($192|0)==(0|0);
 if ($193) {
  $194 = ((($0)) + 8|0);
  $195 = HEAP32[$194>>2]|0;
  HEAP32[$148>>2] = $195;
  HEAP32[$194>>2] = $148;
  HEAP32[$191>>2] = $194;
  $196 = HEAP32[$148>>2]|0;
  $197 = ($196|0)==(0|0);
  if (!($197)) {
   $198 = ((($196)) + 4|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = (($$0$i) + -1)|0;
   $201 = $200 & $$0$i;
   $202 = ($201|0)==(0);
   if ($202) {
    $203 = $199 & $200;
    $208 = $203;
   } else {
    $204 = ($199>>>0)<($$0$i>>>0);
    if ($204) {
     $208 = $199;
    } else {
     $205 = (($199>>>0) % ($$0$i>>>0))&-1;
     $208 = $205;
    }
   }
   $206 = HEAP32[$0>>2]|0;
   $207 = (($206) + ($208<<2)|0);
   $$sink$i = $207;
   label = 67;
  }
 } else {
  $209 = HEAP32[$192>>2]|0;
  HEAP32[$148>>2] = $209;
  $$sink$i = $192;
  label = 67;
 }
 if ((label|0) == 67) {
  HEAP32[$$sink$i>>2] = $148;
 }
 $210 = HEAP32[$156>>2]|0;
 $211 = (($210) + 1)|0;
 HEAP32[$156>>2] = $211;
 $$1$i = $148;
 $212 = ((($$1$i)) + 20|0);
 return ($212|0);
}
function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_15__list_iteratorIN8MruCacheIS7_E5ENTRYEPvEEEENS_22__unordered_map_hasherIS7_SE_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SE_NS_8equal_toIS7_EELb1EEENS5_ISE_EEE14__erase_uniqueIS7_EEjRKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_15__list_iteratorIN8MruCacheIS7_E5ENTRYEPvEEEENS_22__unordered_map_hasherIS7_SE_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SE_NS_8equal_toIS7_EELb1EEENS5_ISE_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeISE_SC_EEEERKT_($0,$1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + -1)|0;
 $9 = $8 & $5;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = $8 & $7;
  $16 = $11;
 } else {
  $12 = ($7>>>0)<($5>>>0);
  if ($12) {
   $16 = $7;
  } else {
   $13 = (($7>>>0) % ($5>>>0))&-1;
   $16 = $13;
  }
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + ($16<<2)|0);
 $17 = HEAP32[$15>>2]|0;
 $$0$i = $17;
 while(1) {
  $18 = HEAP32[$$0$i>>2]|0;
  $19 = ($18|0)==($2|0);
  if ($19) {
   break;
  } else {
   $$0$i = $18;
  }
 }
 $20 = ((($0)) + 8|0);
 $21 = ($$0$i|0)==($20|0);
 if ($21) {
  label = 15;
 } else {
  $22 = ((($$0$i)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  if ($10) {
   $24 = $23 & $8;
   $28 = $24;
  } else {
   $25 = ($23>>>0)<($5>>>0);
   if ($25) {
    $28 = $23;
   } else {
    $26 = (($23>>>0) % ($5>>>0))&-1;
    $28 = $26;
   }
  }
  $27 = ($28|0)==($16|0);
  if ($27) {
   $$pre$phi$iZ2D = $2;
  } else {
   label = 15;
  }
 }
 do {
  if ((label|0) == 15) {
   $29 = HEAP32[$2>>2]|0;
   $30 = ($29|0)==(0|0);
   if (!($30)) {
    $31 = ((($29)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    if ($10) {
     $33 = $32 & $8;
     $37 = $33;
    } else {
     $34 = ($32>>>0)<($5>>>0);
     if ($34) {
      $37 = $32;
     } else {
      $35 = (($32>>>0) % ($5>>>0))&-1;
      $37 = $35;
     }
    }
    $36 = ($37|0)==($16|0);
    if ($36) {
     $$pre$phi$iZ2D = $2;
     break;
    }
   }
   HEAP32[$15>>2] = 0;
   $$pre$phi$iZ2D = $2;
  }
 } while(0);
 $38 = HEAP32[$$pre$phi$iZ2D>>2]|0;
 $39 = ($38|0)==(0|0);
 $40 = $38;
 if ($39) {
  $50 = $40;
 } else {
  $41 = ((($38)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  if ($10) {
   $43 = $42 & $8;
   $47 = $43;
  } else {
   $44 = ($42>>>0)<($5>>>0);
   if ($44) {
    $47 = $42;
   } else {
    $45 = (($42>>>0) % ($5>>>0))&-1;
    $47 = $45;
   }
  }
  $46 = ($47|0)==($16|0);
  if ($46) {
   $50 = $40;
  } else {
   $48 = HEAP32[$0>>2]|0;
   $49 = (($48) + ($47<<2)|0);
   HEAP32[$49>>2] = $$0$i;
   $$pre$i = HEAP32[$2>>2]|0;
   $50 = $$pre$i;
  }
 }
 HEAP32[$$0$i>>2] = $50;
 HEAP32[$$pre$phi$iZ2D>>2] = 0;
 $51 = ((($0)) + 12|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + -1)|0;
 HEAP32[$51>>2] = $53;
 $54 = ((($2)) + 8|0);
 $55 = ((($54)) + 11|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = ($56<<24>>24)<(0);
 if ($57) {
  $58 = HEAP32[$54>>2]|0;
  __ZdlPv($58);
 }
 __ZdlPv($2);
 $$0 = 1;
 return ($$0|0);
}
function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_15__list_iteratorIN8MruCacheIS7_E5ENTRYEPvEEEENS_22__unordered_map_hasherIS7_SE_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SE_NS_8equal_toIS7_EELb1EEENS5_ISE_EEE6rehashEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$0 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(1);
 if ($2) {
  $$0 = 2;
 } else {
  $3 = (($1) + -1)|0;
  $4 = $3 & $1;
  $5 = ($4|0)==(0);
  if ($5) {
   $$0 = $1;
  } else {
   $6 = (__ZNSt3__212__next_primeEj($1)|0);
   $$0 = $6;
  }
 }
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($$0>>>0)>($8>>>0);
 if ($9) {
  __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_15__list_iteratorIN8MruCacheIS7_E5ENTRYEPvEEEENS_22__unordered_map_hasherIS7_SE_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SE_NS_8equal_toIS7_EELb1EEENS5_ISE_EEE8__rehashEj($0,$$0);
  return;
 }
 $10 = ($$0>>>0)<($8>>>0);
 if (!($10)) {
  return;
 }
 $11 = ($8>>>0)>(2);
 $12 = (($8) + -1)|0;
 $13 = $12 & $8;
 $14 = ($13|0)==(0);
 $$$i = $11 & $14;
 $15 = ((($0)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (+($16>>>0));
 $18 = ((($0)) + 16|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $17 / $19;
 $21 = (+Math_ceil((+$20)));
 $22 = (~~(($21))>>>0);
 if ($$$i) {
  $23 = (($22) + -1)|0;
  $24 = (Math_clz32(($23|0))|0);
  $25 = (32 - ($24))|0;
  $26 = 1 << $25;
  $29 = $26;
 } else {
  $27 = (__ZNSt3__212__next_primeEj($22)|0);
  $29 = $27;
 }
 $28 = ($$0>>>0)<($29>>>0);
 $$sroa$speculated = $28 ? $29 : $$0;
 $30 = ($$sroa$speculated>>>0)<($8>>>0);
 if (!($30)) {
  return;
 }
 __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_15__list_iteratorIN8MruCacheIS7_E5ENTRYEPvEEEENS_22__unordered_map_hasherIS7_SE_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SE_NS_8equal_toIS7_EELb1EEENS5_ISE_EEE8__rehashEj($0,$$sroa$speculated);
 return;
}
function __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_15__list_iteratorIN8MruCacheIS7_E5ENTRYEPvEEEENS_22__unordered_map_hasherIS7_SE_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SE_NS_8equal_toIS7_EELb1EEENS5_ISE_EEE8__rehashEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02026$i$i4$i = 0, $$02125$i$i5$i = 0, $$027$i$i3$i = 0, $$054$ph$ph103 = 0, $$055 = 0, $$055$in95104 = 0, $$055$in98 = 0, $$05592 = 0, $$0559296 = 0, $$0559296101 = 0, $$0559296105 = 0, $$0559299 = 0, $$05593 = 0, $$056$ph$ph102 = 0, $$056$ph97 = 0, $$058106 = 0, $$066 = 0, $$072 = 0, $$072$phi = 0, $$072$us = 0;
 var $$072$us$phi = 0, $$072$us77 = 0, $$072$us77$phi = 0, $$pre$i$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond = 0, $phitmp$i$i$i$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = ($1|0)==(0);
 if ($3) {
  $117 = HEAP32[$0>>2]|0;
  HEAP32[$0>>2] = 0;
  $118 = ($117|0)==(0|0);
  if (!($118)) {
   __ZdlPv($117);
  }
  HEAP32[$2>>2] = 0;
  return;
 }
 $4 = ($1>>>0)>(1073741823);
 if ($4) {
  $5 = (___cxa_allocate_exception(8)|0);
  __THREW__ = 0;
  invoke_vii(568,($5|0),(23604|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $8 = ___cxa_find_matching_catch_2()|0;
   $9 = tempRet0;
   ___cxa_free_exception(($5|0));
   ___resumeException($8|0);
   // unreachable;
  } else {
   HEAP32[$5>>2] = (9544);
   ___cxa_throw(($5|0),(1992|0),(506|0));
   // unreachable;
  }
 }
 $10 = $1 << 2;
 $11 = (__Znwj($10)|0);
 $12 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = $11;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  __ZdlPv($12);
 }
 HEAP32[$2>>2] = $1;
 $$058106 = 0;
 while(1) {
  $17 = HEAP32[$0>>2]|0;
  $18 = (($17) + ($$058106<<2)|0);
  HEAP32[$18>>2] = 0;
  $19 = (($$058106) + 1)|0;
  $exitcond = ($19|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$058106 = $19;
  }
 }
 $14 = ((($0)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  return;
 }
 $20 = ((($15)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($1) + -1)|0;
 $23 = $22 & $1;
 $24 = ($23|0)==(0);
 if ($24) {
  $25 = $21 & $22;
  $30 = $25;
 } else {
  $26 = ($21>>>0)<($1>>>0);
  if ($26) {
   $30 = $21;
  } else {
   $27 = (($21>>>0) % ($1>>>0))&-1;
   $30 = $27;
  }
 }
 $28 = HEAP32[$0>>2]|0;
 $29 = (($28) + ($30<<2)|0);
 HEAP32[$29>>2] = $14;
 $$0559296101 = HEAP32[$15>>2]|0;
 $31 = ($$0559296101|0)==(0|0);
 if ($31) {
  return;
 } else {
  $$054$ph$ph103 = $30;$$055$in95104 = $15;$$0559296105 = $$0559296101;$$056$ph$ph102 = $15;
 }
 L30: while(1) {
  $$055$in98 = $$055$in95104;$$0559299 = $$0559296105;$$056$ph97 = $$056$ph$ph102;
  L32: while(1) {
   $$05593 = $$0559299;
   while(1) {
    $33 = ((($$05593)) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    if ($24) {
     $35 = $34 & $22;
     $39 = $35;
    } else {
     $36 = ($34>>>0)<($1>>>0);
     if ($36) {
      $39 = $34;
     } else {
      $37 = (($34>>>0) % ($1>>>0))&-1;
      $39 = $37;
     }
    }
    $38 = ($39|0)==($$054$ph$ph103|0);
    if ($38) {
     break;
    }
    $40 = HEAP32[$0>>2]|0;
    $41 = (($40) + ($39<<2)|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($42|0)==(0|0);
    if ($43) {
     break L32;
    }
    $44 = HEAP32[$$05593>>2]|0;
    $45 = ($44|0)==(0|0);
    L43: do {
     if ($45) {
      $$066 = $$05593;
     } else {
      $46 = ((($$05593)) + 8|0);
      $47 = ((($46)) + 11|0);
      $48 = HEAP8[$47>>0]|0;
      $49 = ($48<<24>>24)<(0);
      $50 = ((($$05593)) + 12|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = $48&255;
      $53 = $49 ? $51 : $52;
      $54 = ($53|0)==(0);
      if ($49) {
       $$072$us = $$05593;$56 = $44;
       while(1) {
        $55 = ((($56)) + 8|0);
        $57 = ((($55)) + 11|0);
        $58 = HEAP8[$57>>0]|0;
        $59 = ($58<<24>>24)<(0);
        $60 = ((($56)) + 12|0);
        $61 = HEAP32[$60>>2]|0;
        $62 = $58&255;
        $63 = $59 ? $61 : $62;
        $64 = ($53|0)==($63|0);
        if (!($64)) {
         $$066 = $$072$us;
         break L43;
        }
        if (!($54)) {
         $65 = HEAP32[$55>>2]|0;
         $66 = $59 ? $65 : $55;
         $67 = HEAP32[$46>>2]|0;
         $68 = (_memcmp($67,$66,$53)|0);
         $phitmp$i$i$i$us = ($68|0)==(0);
         if (!($phitmp$i$i$i$us)) {
          $$066 = $$072$us;
          break L43;
         }
        }
        $69 = HEAP32[$56>>2]|0;
        $70 = ($69|0)==(0|0);
        if ($70) {
         $$066 = $56;
         break L43;
        } else {
         $$072$us$phi = $56;$56 = $69;$$072$us = $$072$us$phi;
        }
       }
      }
      if ($54) {
       $$072$us77 = $$05593;$72 = $44;
       while(1) {
        $71 = ((($72)) + 8|0);
        $73 = ((($71)) + 11|0);
        $74 = HEAP8[$73>>0]|0;
        $75 = ($74<<24>>24)<(0);
        $76 = ((($72)) + 12|0);
        $77 = HEAP32[$76>>2]|0;
        $78 = $74&255;
        $79 = $75 ? $77 : $78;
        $80 = ($79|0)==(0);
        if (!($80)) {
         $$066 = $$072$us77;
         break L43;
        }
        $81 = HEAP32[$72>>2]|0;
        $82 = ($81|0)==(0|0);
        if ($82) {
         $$066 = $72;
         break L43;
        } else {
         $$072$us77$phi = $72;$72 = $81;$$072$us77 = $$072$us77$phi;
        }
       }
      }
      $$072 = $$05593;$85 = $44;
      while(1) {
       $84 = ((($85)) + 8|0);
       $86 = ((($84)) + 11|0);
       $87 = HEAP8[$86>>0]|0;
       $88 = ($87<<24>>24)<(0);
       $89 = ((($85)) + 12|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = $87&255;
       $92 = $88 ? $90 : $91;
       $93 = ($53|0)==($92|0);
       if (!($93)) {
        $$066 = $$072;
        break L43;
       }
       $94 = HEAP32[$46>>2]|0;
       $95 = HEAP32[$84>>2]|0;
       $96 = $88 ? $95 : $84;
       $97 = $94&255;
       $98 = HEAP8[$96>>0]|0;
       $99 = ($97<<24>>24)==($98<<24>>24);
       if ($99) {
        $$02026$i$i4$i = $46;$$02125$i$i5$i = $52;$$027$i$i3$i = $96;
       } else {
        $$066 = $$072;
        break L43;
       }
       while(1) {
        $100 = (($$02125$i$i5$i) + -1)|0;
        $101 = ((($$02026$i$i4$i)) + 1|0);
        $102 = ($100|0)==(0);
        if ($102) {
         break;
        }
        $103 = ((($$027$i$i3$i)) + 1|0);
        $$pre$i$i = HEAP8[$101>>0]|0;
        $104 = HEAP8[$103>>0]|0;
        $105 = ($$pre$i$i<<24>>24)==($104<<24>>24);
        if ($105) {
         $$02026$i$i4$i = $101;$$02125$i$i5$i = $100;$$027$i$i3$i = $103;
        } else {
         $$066 = $$072;
         break L43;
        }
       }
       $106 = HEAP32[$85>>2]|0;
       $107 = ($106|0)==(0|0);
       if ($107) {
        $$066 = $85;
        break;
       } else {
        $$072$phi = $85;$85 = $106;$$072 = $$072$phi;
       }
      }
     }
    } while(0);
    $108 = HEAP32[$$066>>2]|0;
    HEAP32[$$056$ph97>>2] = $108;
    $109 = HEAP32[$0>>2]|0;
    $110 = (($109) + ($39<<2)|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = HEAP32[$111>>2]|0;
    HEAP32[$$066>>2] = $112;
    $113 = HEAP32[$0>>2]|0;
    $114 = (($113) + ($39<<2)|0);
    $115 = HEAP32[$114>>2]|0;
    HEAP32[$115>>2] = $$05593;
    $$055 = HEAP32[$$055$in98>>2]|0;
    $116 = ($$055|0)==(0|0);
    if ($116) {
     label = 45;
     break L30;
    } else {
     $$05593 = $$055;
    }
   }
   $$05592 = HEAP32[$$05593>>2]|0;
   $32 = ($$05592|0)==(0|0);
   if ($32) {
    label = 45;
    break L30;
   } else {
    $$055$in98 = $$05593;$$0559299 = $$05592;$$056$ph97 = $$05593;
   }
  }
  HEAP32[$41>>2] = $$056$ph97;
  $$0559296 = HEAP32[$$05593>>2]|0;
  $83 = ($$0559296|0)==(0|0);
  if ($83) {
   label = 45;
   break;
  } else {
   $$054$ph$ph103 = $39;$$055$in95104 = $$05593;$$0559296105 = $$0559296;$$056$ph$ph102 = $$05593;
  }
 }
 if ((label|0) == 45) {
  return;
 }
}
function __GLOBAL__sub_I_userdefaults_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev(29080);
 HEAP32[7270] = (2920);
 HEAP32[(29088)>>2] = (2944);
 HEAP32[(29096)>>2] = 0;
 HEAP32[(29100)>>2] = 0;
 HEAP32[(29092)>>2] = (29096);
 (___cxa_atexit((132|0),(29080|0),(___dso_handle|0))|0);
 return;
}
function __ZN11KeyValueMapD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2920);
 $1 = ((($0)) + 8|0);
 HEAP32[$1>>2] = (2944);
 $2 = ((($0)) + 12|0);
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11KeyValueMap7VariantEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($2,$4);
 return;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11KeyValueMap7VariantEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11KeyValueMap7VariantEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($0,$3);
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11KeyValueMap7VariantEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($0,$5);
 $6 = ((($1)) + 16|0);
 $7 = ((($1)) + 32|0);
 __ZN11KeyValueMap7VariantD2Ev($7);
 $8 = ((($6)) + 11|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)<(0);
 if ($10) {
  $11 = HEAP32[$6>>2]|0;
  __ZdlPv($11);
 }
 __ZdlPv($1);
 return;
}
function __ZN14ViewControllerD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2756);
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __THREW__ = 0;
  invoke_vi(525,($2|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $6 = ___cxa_find_matching_catch_3(0|0)|0;
   $7 = tempRet0;
   ___clang_call_terminate($6);
   // unreachable;
  }
 }
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($9|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch_3(0|0)|0;
  $14 = tempRet0;
  ___clang_call_terminate($13);
  // unreachable;
 } else {
  return;
 }
}
function __ZN14ViewControllerD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2756);
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __THREW__ = 0;
  invoke_vi(525,($2|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $6 = ___cxa_find_matching_catch_3(0|0)|0;
   $7 = tempRet0;
   ___clang_call_terminate($6);
   // unreachable;
  }
 }
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  __ZdlPv($0);
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($9|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch_3(0|0)|0;
  $14 = tempRet0;
  ___clang_call_terminate($13);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZN14ViewController7setViewEP4View($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy1 = sp + 48|0;
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $11 = 0;
 } else {
  $7 = HEAP32[$5>>2]|0;
  $8 = ((($7)) + 112|0);
  $9 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_vi[$9 & 1023]($5);
  $$pr = HEAP32[$4>>2]|0;
  $11 = $$pr;
 }
 $10 = ($11|0)==($1|0);
 if ($10) {
  $14 = ($1|0)==(0|0);
  if (!($14)) {
   label = 9;
  }
 } else {
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   __ZN6Object7releaseEv($11);
  }
  HEAP32[$4>>2] = $1;
  $13 = ($1|0)==(0|0);
  if (!($13)) {
   __ZN6Object6retainEv($1);
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $15 = HEAP32[$1>>2]|0;
  $16 = ((($15)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  __Z16MEASURESPEC_MakeiP4Viewff($2,3,0,1.0,0.0);
  __Z16MEASURESPEC_MakeiP4Viewff($3,3,0,1.0,0.0);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$3+12>>2]|0;
  FUNCTION_TABLE_viii[$17 & 1023]($1,$$byval_copy,$$byval_copy1);
  $18 = ((($0)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   $21 = HEAP32[$1>>2]|0;
   $22 = ((($21)) + 108|0);
   $23 = HEAP32[$22>>2]|0;
   FUNCTION_TABLE_vii[$23 & 1023]($1,$19);
  }
 }
 $24 = ((($0)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if ($26) {
  STACKTOP = sp;return;
 }
 $27 = HEAP32[$25>>2]|0;
 $28 = ((($27)) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 FUNCTION_TABLE_vi[$29 & 1023]($25);
 STACKTOP = sp;return;
}
function __ZN14ViewController14attachToWindowEP6Window($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vi[$4 & 1023]($0);
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = $1;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vii[$8 & 1023]($0,$10);
 return;
}
function __ZN14ViewController16detachFromWindowEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$2>>2]|0;
  $5 = ((($4)) + 112|0);
  $6 = HEAP32[$5>>2]|0;
  FUNCTION_TABLE_vi[$6 & 1023]($2);
 }
 $7 = ((($0)) + 12|0);
 HEAP32[$7>>2] = 0;
 return;
}
function __ZN14ViewController18dispatchTouchEventEiil6_POINT($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $5 = sp;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 212|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $4;
 $12 = $11;
 $13 = HEAPU8[$12>>0]|(HEAPU8[$12+1>>0]<<8)|(HEAPU8[$12+2>>0]<<16)|(HEAPU8[$12+3>>0]<<24);
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAPU8[$15>>0]|(HEAPU8[$15+1>>0]<<8)|(HEAPU8[$15+2>>0]<<16)|(HEAPU8[$15+3>>0]<<24);
 $17 = $5;
 $18 = $17;
 HEAP32[$18>>2] = $13;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $16;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$5>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$5+4>>2]|0;
 $21 = (FUNCTION_TABLE_iiiiii[$10 & 1023]($7,$1,$2,$3,$tmpcast$byval_copy)|0);
 STACKTOP = sp;return ($21|0);
}
function __ZN14ViewController12onWillResumeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN14ViewController11onDidResumeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN14ViewController11onWillPauseEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN14ViewController10onDidPauseEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN14ViewController19onBackButtonClickedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vi[$6 & 1023]($2);
 return;
}
function __ZNSt3__28functionIFvfEE4swapERS2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ($1|0)==($0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($0|0);
 $7 = $5;
 if ($6) {
  $8 = ((($1)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==($1|0);
  if ($10) {
   $11 = HEAP32[$5>>2]|0;
   $12 = ((($11)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   __THREW__ = 0;
   invoke_vii($13|0,($5|0),($2|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $38 = ___cxa_find_matching_catch_3(0|0)|0;
    $39 = tempRet0;
    ___clang_call_terminate($38);
    // unreachable;
   }
   $16 = HEAP32[$4>>2]|0;
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($17)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_vi[$19 & 1023]($16);
   HEAP32[$4>>2] = 0;
   $20 = HEAP32[$8>>2]|0;
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($21)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   __THREW__ = 0;
   invoke_vii($23|0,($20|0),($0|0));
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $38 = ___cxa_find_matching_catch_3(0|0)|0;
    $39 = tempRet0;
    ___clang_call_terminate($38);
    // unreachable;
   }
   $26 = HEAP32[$8>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 16|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_vi[$29 & 1023]($26);
   HEAP32[$8>>2] = 0;
   HEAP32[$4>>2] = $0;
   $30 = HEAP32[$2>>2]|0;
   $31 = ((($30)) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   __THREW__ = 0;
   invoke_vii($32|0,($2|0),($1|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    $38 = ___cxa_find_matching_catch_3(0|0)|0;
    $39 = tempRet0;
    ___clang_call_terminate($38);
    // unreachable;
   }
   $35 = HEAP32[$2>>2]|0;
   $36 = ((($35)) + 16|0);
   $37 = HEAP32[$36>>2]|0;
   FUNCTION_TABLE_vi[$37 & 1023]($2);
   HEAP32[$8>>2] = $1;
   STACKTOP = sp;return;
  }
 }
 $40 = ($5|0)==($0|0);
 if ($40) {
  $41 = HEAP32[$5>>2]|0;
  $42 = ((($41)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  __THREW__ = 0;
  invoke_vii($43|0,($5|0),($1|0));
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if ($45) {
   $66 = ___cxa_find_matching_catch_3(0|0)|0;
   $67 = tempRet0;
   ___clang_call_terminate($66);
   // unreachable;
  }
  $46 = HEAP32[$4>>2]|0;
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($47)) + 16|0);
  $49 = HEAP32[$48>>2]|0;
  FUNCTION_TABLE_vi[$49 & 1023]($46);
  $50 = ((($1)) + 16|0);
  $51 = HEAP32[$50>>2]|0;
  HEAP32[$4>>2] = $51;
  HEAP32[$50>>2] = $1;
  STACKTOP = sp;return;
 }
 $52 = ((($1)) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)==($1|0);
 if (!($54)) {
  $65 = $53;
  HEAP32[$4>>2] = $65;
  HEAP32[$52>>2] = $7;
  STACKTOP = sp;return;
 }
 $55 = HEAP32[$53>>2]|0;
 $56 = ((($55)) + 12|0);
 $57 = HEAP32[$56>>2]|0;
 __THREW__ = 0;
 invoke_vii($57|0,($53|0),($0|0));
 $58 = __THREW__; __THREW__ = 0;
 $59 = $58&1;
 if ($59) {
  $66 = ___cxa_find_matching_catch_3(0|0)|0;
  $67 = tempRet0;
  ___clang_call_terminate($66);
  // unreachable;
 }
 $60 = HEAP32[$52>>2]|0;
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($61)) + 16|0);
 $63 = HEAP32[$62>>2]|0;
 FUNCTION_TABLE_vi[$63 & 1023]($60);
 $64 = HEAP32[$4>>2]|0;
 HEAP32[$52>>2] = $64;
 HEAP32[$4>>2] = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__28functionIFvP9AnimationEE4swapERS4_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ($1|0)==($0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($0|0);
 $7 = $5;
 if ($6) {
  $8 = ((($1)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==($1|0);
  if ($10) {
   $11 = HEAP32[$5>>2]|0;
   $12 = ((($11)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   __THREW__ = 0;
   invoke_vii($13|0,($5|0),($2|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $38 = ___cxa_find_matching_catch_3(0|0)|0;
    $39 = tempRet0;
    ___clang_call_terminate($38);
    // unreachable;
   }
   $16 = HEAP32[$4>>2]|0;
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($17)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_vi[$19 & 1023]($16);
   HEAP32[$4>>2] = 0;
   $20 = HEAP32[$8>>2]|0;
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($21)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   __THREW__ = 0;
   invoke_vii($23|0,($20|0),($0|0));
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $38 = ___cxa_find_matching_catch_3(0|0)|0;
    $39 = tempRet0;
    ___clang_call_terminate($38);
    // unreachable;
   }
   $26 = HEAP32[$8>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 16|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_vi[$29 & 1023]($26);
   HEAP32[$8>>2] = 0;
   HEAP32[$4>>2] = $0;
   $30 = HEAP32[$2>>2]|0;
   $31 = ((($30)) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   __THREW__ = 0;
   invoke_vii($32|0,($2|0),($1|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    $38 = ___cxa_find_matching_catch_3(0|0)|0;
    $39 = tempRet0;
    ___clang_call_terminate($38);
    // unreachable;
   }
   $35 = HEAP32[$2>>2]|0;
   $36 = ((($35)) + 16|0);
   $37 = HEAP32[$36>>2]|0;
   FUNCTION_TABLE_vi[$37 & 1023]($2);
   HEAP32[$8>>2] = $1;
   STACKTOP = sp;return;
  }
 }
 $40 = ($5|0)==($0|0);
 if ($40) {
  $41 = HEAP32[$5>>2]|0;
  $42 = ((($41)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  __THREW__ = 0;
  invoke_vii($43|0,($5|0),($1|0));
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if ($45) {
   $66 = ___cxa_find_matching_catch_3(0|0)|0;
   $67 = tempRet0;
   ___clang_call_terminate($66);
   // unreachable;
  }
  $46 = HEAP32[$4>>2]|0;
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($47)) + 16|0);
  $49 = HEAP32[$48>>2]|0;
  FUNCTION_TABLE_vi[$49 & 1023]($46);
  $50 = ((($1)) + 16|0);
  $51 = HEAP32[$50>>2]|0;
  HEAP32[$4>>2] = $51;
  HEAP32[$50>>2] = $1;
  STACKTOP = sp;return;
 }
 $52 = ((($1)) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)==($1|0);
 if (!($54)) {
  $65 = $53;
  HEAP32[$4>>2] = $65;
  HEAP32[$52>>2] = $7;
  STACKTOP = sp;return;
 }
 $55 = HEAP32[$53>>2]|0;
 $56 = ((($55)) + 12|0);
 $57 = HEAP32[$56>>2]|0;
 __THREW__ = 0;
 invoke_vii($57|0,($53|0),($0|0));
 $58 = __THREW__; __THREW__ = 0;
 $59 = $58&1;
 if ($59) {
  $66 = ___cxa_find_matching_catch_3(0|0)|0;
  $67 = tempRet0;
  ___clang_call_terminate($66);
  // unreachable;
 }
 $60 = HEAP32[$52>>2]|0;
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($61)) + 16|0);
 $63 = HEAP32[$62>>2]|0;
 FUNCTION_TABLE_vi[$63 & 1023]($60);
 $64 = HEAP32[$4>>2]|0;
 HEAP32[$52>>2] = $64;
 HEAP32[$4>>2] = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__baseIFvP9AnimationEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__210__function6__baseIFvfEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN14ViewControllerC2Ev($0) {
 $0 = $0|0;
 var $$0 = 0, $$02 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev($0);
 HEAP32[$0>>2] = (2756);
 $1 = ((($0)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 16|0);
 HEAP32[$3>>2] = 0;
 __THREW__ = 0;
 $4 = (invoke_ii(523,20)|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   label = 9;
  } else {
   __THREW__ = 0;
   invoke_vi(593,($4|0));
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $19 = ___cxa_find_matching_catch_2()|0;
    $20 = tempRet0;
    __ZdlPv($4);
    $$0 = $20;$$02 = $19;
    break;
   }
   $9 = HEAP32[$3>>2]|0;
   $10 = ($9|0)==($4|0);
   if ($10) {
    return;
   }
   $11 = ($9|0)==(0|0);
   if (!($11)) {
    __THREW__ = 0;
    invoke_vi(525,($9|0));
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     label = 9;
     break;
    }
   }
   HEAP32[$3>>2] = $4;
   $14 = ($4|0)==(0|0);
   if ($14) {
    return;
   }
   __THREW__ = 0;
   invoke_vi(526,($4|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if ($16) {
    label = 9;
   } else {
    return;
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $17 = ___cxa_find_matching_catch_2()|0;
  $18 = tempRet0;
  $$0 = $18;$$02 = $17;
 }
 $21 = HEAP32[$3>>2]|0;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  __THREW__ = 0;
  invoke_vi(525,($21|0));
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $25 = ___cxa_find_matching_catch_3(0|0)|0;
   $26 = tempRet0;
   ___clang_call_terminate($25);
   // unreachable;
  }
 }
 $27 = HEAP32[$1>>2]|0;
 $28 = ($27|0)==(0|0);
 if ($28) {
  ___resumeException($$02|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(525,($27|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $31 = ___cxa_find_matching_catch_3(0|0)|0;
  $32 = tempRet0;
  ___clang_call_terminate($31);
  // unreachable;
 } else {
  ___resumeException($$02|0);
  // unreachable;
 }
}
function __ZN3App3logEPKcz($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 (_vprintf($1,$2)|0);
 (_putchar(10)|0);
 STACKTOP = sp;return;
}
function __ZN6ObjectD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN6ObjectD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __GLOBAL__sub_I_object_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[7276] = 29104;
 HEAP32[(29108)>>2] = 29104;
 HEAP32[(29112)>>2] = 0;
 (___cxa_atexit((594|0),(29104|0),(___dso_handle|0))|0);
 return;
}
function __ZNSt3__210__list_impIP6ObjectNS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0|0;
 var $$023$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = HEAP32[$7>>2]|0;
 HEAP32[$11>>2] = $9;
 HEAP32[$1>>2] = 0;
 $12 = ($5|0)==($0|0);
 if ($12) {
  return;
 } else {
  $$023$i = $5;
 }
 while(1) {
  $13 = ((($$023$i)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  __ZdlPv($$023$i);
  $15 = ($14|0)==($0|0);
  if ($15) {
   break;
  } else {
   $$023$i = $14;
  }
 }
 return;
}
function __ZN6Object19flushAutodeletePoolEv() {
 var $$023$i$i = 0, $$pr = 0, $$pre = 0, $$sroa$06$0$$sroa$06$0$$sroa$0$0$copyload$i13 = 0, $$sroa$06$0$$sroa$06$0$715 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(29112)>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[(29108)>>2]|0;
 $3 = $2;
 $4 = ($3|0)==(29104|0);
 $5 = $2;
 do {
  if ($4) {
   $11 = $5;
  } else {
   $$sroa$06$0$$sroa$06$0$$sroa$0$0$copyload$i13 = $3;$$sroa$06$0$$sroa$06$0$715 = $2;
   while(1) {
    $18 = $$sroa$06$0$$sroa$06$0$715;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0|0);
    if (!($21)) {
     $22 = HEAP32[$20>>2]|0;
     $23 = ((($22)) + 4|0);
     $24 = HEAP32[$23>>2]|0;
     FUNCTION_TABLE_vi[$24 & 1023]($20);
    }
    $25 = ((($$sroa$06$0$$sroa$06$0$$sroa$0$0$copyload$i13)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $26;
    $28 = ($27|0)==(29104|0);
    if ($28) {
     break;
    } else {
     $$sroa$06$0$$sroa$06$0$$sroa$0$0$copyload$i13 = $27;$$sroa$06$0$$sroa$06$0$715 = $26;
    }
   }
   $$pre = HEAP32[(29112)>>2]|0;
   $6 = ($$pre|0)==(0);
   if ($6) {
    return;
   } else {
    $$pr = HEAP32[(29108)>>2]|0;
    $11 = $$pr;
    break;
   }
  }
 } while(0);
 $7 = HEAP32[7276]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$11>>2]|0;
 $12 = ((($10)) + 4|0);
 HEAP32[$12>>2] = $9;
 $13 = HEAP32[$8>>2]|0;
 HEAP32[$13>>2] = $10;
 HEAP32[(29112)>>2] = 0;
 $14 = ($11|0)==(29104|0);
 if ($14) {
  return;
 } else {
  $$023$i$i = $11;
 }
 while(1) {
  $15 = ((($$023$i$i)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  __ZdlPv($$023$i$i);
  $17 = ($16|0)==(29104|0);
  if ($17) {
   break;
  } else {
   $$023$i$i = $16;
  }
 }
 return;
}
function __ZN6ObjectC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2808);
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZN6Object6retainEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[$1>>2] = $3;
 return;
}
function __ZN6Object7releaseEv($0) {
 $0 = $0|0;
 var $$pr = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -1)|0;
 HEAP32[$1>>2] = $3;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = $0;
  $6 = (__Znwj(12)|0);
  $7 = ((($6)) + 8|0);
  HEAP32[$7>>2] = $5;
  $8 = ((($6)) + 4|0);
  HEAP32[$8>>2] = 29104;
  $9 = HEAP32[7276]|0;
  HEAP32[$6>>2] = $9;
  $10 = ((($9)) + 4|0);
  HEAP32[$10>>2] = $6;
  HEAP32[7276] = $6;
  $11 = HEAP32[(29112)>>2]|0;
  $12 = (($11) + 1)|0;
  HEAP32[(29112)>>2] = $12;
  $$pr = HEAP32[$1>>2]|0;
  $14 = $$pr;
 } else {
  $14 = $3;
 }
 $13 = ($14|0)>(-1);
 if ($13) {
  return;
 } else {
  ___assert_fail((11891|0),(11902|0),39,(11943|0));
  // unreachable;
 }
}
function __ZN6ObjectnwEj($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_malloc($0)|0);
 _memset(($1|0),0,($0|0))|0;
 return ($1|0);
}
function __ZNSt3__217bad_function_callD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN5TimerD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2844);
 $1 = ((($0)) + 33|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  __THREW__ = 0;
  invoke_viiii(561,(11979|0),(11988|0),24,(12028|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = ___cxa_find_matching_catch_3(0|0)|0;
  $6 = tempRet0;
  $7 = ((($0)) + 8|0);
  __ZNSt3__28functionIFvvEED2Ev($7);
  ___clang_call_terminate($5);
  // unreachable;
 }
 $8 = ((($0)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 8|0);
 $11 = ($9|0)==($10|0);
 if ($11) {
  $12 = HEAP32[$9>>2]|0;
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  FUNCTION_TABLE_vi[$14 & 1023]($9);
  return;
 }
 $15 = ($9|0)==(0|0);
 if ($15) {
  return;
 }
 $16 = HEAP32[$9>>2]|0;
 $17 = ((($16)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 FUNCTION_TABLE_vi[$18 & 1023]($9);
 return;
}
function __ZN5TimerD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5TimerD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN5Timer4stopEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 33|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  return;
 }
 HEAP8[$1>>0] = 0;
 __ZN6Object7releaseEv($0);
 return;
}
function __ZNSt3__28functionIFvvEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($0|0);
 if ($3) {
  $4 = HEAP32[$2>>2]|0;
  $5 = ((($4)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  FUNCTION_TABLE_vi[$6 & 1023]($2);
  return;
 }
 $7 = ($2|0)==(0|0);
 if ($7) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 1023]($2);
 return;
}
function __ZN5TimerC2ERKNSt3__28functionIFvvEEEib($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$04 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev($0);
 HEAP32[$0>>2] = (2844);
 $4 = ((($0)) + 8|0);
 $5 = ((($1)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 do {
  if ($7) {
   $$sink = 0;
   label = 5;
  } else {
   $8 = ($6|0)==($1|0);
   if ($8) {
    $9 = ((($0)) + 24|0);
    HEAP32[$9>>2] = $4;
    $10 = HEAP32[$5>>2]|0;
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($11)) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    invoke_vii($13|0,($10|0),($4|0));
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     break;
    }
   } else {
    $16 = HEAP32[$6>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    __THREW__ = 0;
    $19 = (invoke_ii($18|0,($6|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if (!($21)) {
     $$sink = $19;
     label = 5;
     break;
    }
   }
   $28 = ___cxa_find_matching_catch_2()|0;
   $29 = tempRet0;
   $$0 = $29;$$04 = $28;
   ___resumeException($$04|0);
   // unreachable;
  }
 } while(0);
 if ((label|0) == 5) {
  $22 = ((($0)) + 24|0);
  HEAP32[$22>>2] = $$sink;
 }
 $23 = $3&1;
 $24 = ((($0)) + 32|0);
 HEAP8[$24>>0] = $23;
 $25 = ((($0)) + 33|0);
 HEAP8[$25>>0] = 1;
 __THREW__ = 0;
 invoke_vi(526,($0|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  return;
 }
 $30 = ___cxa_find_matching_catch_2()|0;
 $31 = tempRet0;
 $32 = ((($0)) + 24|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==($4|0);
 if ($34) {
  $35 = HEAP32[$33>>2]|0;
  $36 = ((($35)) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  FUNCTION_TABLE_vi[$37 & 1023]($33);
  $$0 = $31;$$04 = $30;
  ___resumeException($$04|0);
  // unreachable;
 }
 $38 = ($33|0)==(0|0);
 if ($38) {
  $$0 = $31;$$04 = $30;
  ___resumeException($$04|0);
  // unreachable;
 }
 $39 = HEAP32[$33>>2]|0;
 $40 = ((($39)) + 20|0);
 $41 = HEAP32[$40>>2]|0;
 FUNCTION_TABLE_vi[$41 & 1023]($33);
 $$0 = $31;$$04 = $30;
 ___resumeException($$04|0);
 // unreachable;
}
function __ZN4DataD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2864);
 $1 = ((($0)) + 8|0);
 HEAP32[$1>>2] = (2888);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return;
 }
 _free($3);
 return;
}
function __ZN4DataD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2864);
 $1 = ((($0)) + 8|0);
 HEAP32[$1>>2] = (2888);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  __ZdlPv($0);
  return;
 }
 _free($3);
 __ZdlPv($0);
 return;
}
function __ZN4Data18readSelfFromStreamEP6Stream($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 16|0);
 $6 = (FUNCTION_TABLE_iiii[$4 & 1023]($1,4,$5)|0);
 if (!($6)) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = HEAP32[$5>>2]|0;
 $8 = (_malloc($7)|0);
 $9 = ((($0)) + 12|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$1>>2]|0;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_iiii[$12 & 1023]($1,$7,$8)|0);
 $$0 = $13;
 return ($$0|0);
}
function __ZN4Data17writeSelfToStreamEP6Stream($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 16|0);
 $6 = (FUNCTION_TABLE_iiii[$4 & 1023]($1,4,$5)|0);
 if (!($6)) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$5>>2]|0;
 $11 = ((($0)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_iiii[$9 & 1023]($1,$10,$12)|0);
 $$0 = $13;
 return ($$0|0);
}
function __ZThn8_N4Data18readSelfFromStreamEP6Stream($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 16|0);
 $7 = (FUNCTION_TABLE_iiii[$5 & 1023]($1,4,$6)|0);
 if (!($7)) {
  $$0$i = 0;
  return ($$0$i|0);
 }
 $8 = HEAP32[$6>>2]|0;
 $9 = (_malloc($8)|0);
 $10 = ((($2)) + 12|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$1>>2]|0;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_iiii[$13 & 1023]($1,$8,$9)|0);
 $$0$i = $14;
 return ($$0$i|0);
}
function __ZThn8_N4Data17writeSelfToStreamEP6Stream($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 16|0);
 $7 = (FUNCTION_TABLE_iiii[$5 & 1023]($1,4,$6)|0);
 if (!($7)) {
  $$0$i = 0;
  return ($$0$i|0);
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$6>>2]|0;
 $12 = ((($2)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_iiii[$10 & 1023]($1,$11,$13)|0);
 $$0$i = $14;
 return ($$0$i|0);
}
function __ZN11KeyValueMap7Variant18readSelfFromStreamEP6Stream($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$016 = 0, $$017 = 0, $$pre = 0, $$pre19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = (FUNCTION_TABLE_iiii[$4 & 1023]($1,4,$5)|0);
 if (!($6)) {
  $$017 = 0;
  return ($$017|0);
 }
 $7 = HEAP32[$5>>2]|0;
 do {
  switch ($7|0) {
  case 1:  {
   $8 = HEAP32[$1>>2]|0;
   $9 = ((($8)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($0)) + 8|0);
   $12 = (FUNCTION_TABLE_iiii[$10 & 1023]($1,1,$11)|0);
   $$017 = $12;
   return ($$017|0);
   break;
  }
  case 5:  {
   $13 = HEAP32[$1>>2]|0;
   $14 = ((($13)) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($0)) + 8|0);
   $17 = (FUNCTION_TABLE_iiii[$15 & 1023]($1,1,$16)|0);
   $$017 = $17;
   return ($$017|0);
   break;
  }
  case 2:  {
   $18 = HEAP32[$1>>2]|0;
   $19 = ((($18)) + 16|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($0)) + 8|0);
   $22 = (FUNCTION_TABLE_iiii[$20 & 1023]($1,2,$21)|0);
   $$017 = $22;
   return ($$017|0);
   break;
  }
  case 6:  {
   $23 = HEAP32[$1>>2]|0;
   $24 = ((($23)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($0)) + 8|0);
   $27 = (FUNCTION_TABLE_iiii[$25 & 1023]($1,2,$26)|0);
   $$017 = $27;
   return ($$017|0);
   break;
  }
  case 3:  {
   $28 = HEAP32[$1>>2]|0;
   $29 = ((($28)) + 16|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($0)) + 8|0);
   $32 = (FUNCTION_TABLE_iiii[$30 & 1023]($1,4,$31)|0);
   $$017 = $32;
   return ($$017|0);
   break;
  }
  case 7:  {
   $33 = HEAP32[$1>>2]|0;
   $34 = ((($33)) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($0)) + 8|0);
   $37 = (FUNCTION_TABLE_iiii[$35 & 1023]($1,4,$36)|0);
   $$017 = $37;
   return ($$017|0);
   break;
  }
  case 4:  {
   $38 = HEAP32[$1>>2]|0;
   $39 = ((($38)) + 16|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($0)) + 8|0);
   $42 = (FUNCTION_TABLE_iiii[$40 & 1023]($1,8,$41)|0);
   $$017 = $42;
   return ($$017|0);
   break;
  }
  case 8:  {
   $43 = HEAP32[$1>>2]|0;
   $44 = ((($43)) + 16|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($0)) + 8|0);
   $47 = (FUNCTION_TABLE_iiii[$45 & 1023]($1,8,$46)|0);
   $$017 = $47;
   return ($$017|0);
   break;
  }
  case 9:  {
   $48 = HEAP32[$1>>2]|0;
   $49 = ((($48)) + 16|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($0)) + 8|0);
   $52 = (FUNCTION_TABLE_iiii[$50 & 1023]($1,4,$51)|0);
   $$017 = $52;
   return ($$017|0);
   break;
  }
  case 10:  {
   $53 = HEAP32[$1>>2]|0;
   $54 = ((($53)) + 16|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($0)) + 8|0);
   $57 = (FUNCTION_TABLE_iiii[$55 & 1023]($1,8,$56)|0);
   $$017 = $57;
   return ($$017|0);
   break;
  }
  case 11:  {
   $58 = (__ZN6ObjectnwEj(20)|0);
   __THREW__ = 0;
   invoke_vi(555,($58|0));
   $59 = __THREW__; __THREW__ = 0;
   $60 = $59&1;
   if ($60) {
    $73 = ___cxa_find_matching_catch_2()|0;
    $74 = tempRet0;
    __ZdlPv($58);
    $$0 = $74;$$016 = $73;
    ___resumeException($$016|0);
    // unreachable;
   }
   $61 = ((($58)) + 8|0);
   HEAP32[$58>>2] = (2864);
   HEAP32[$61>>2] = (2888);
   $62 = ((($58)) + 12|0);
   HEAP32[$62>>2] = 0;
   $63 = ((($58)) + 16|0);
   HEAP32[$63>>2] = 0;
   $64 = ((($0)) + 8|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($65|0)==($58|0);
   if ($66) {
    $69 = $58;
   } else {
    $67 = ($65|0)==(0|0);
    if (!($67)) {
     __ZN6Object7releaseEv($65);
    }
    HEAP32[$64>>2] = $58;
    __ZN6Object6retainEv($58);
    $$pre19 = HEAP32[$64>>2]|0;
    $69 = $$pre19;
   }
   $68 = HEAP32[$69>>2]|0;
   $70 = ((($68)) + 8|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (FUNCTION_TABLE_iii[$71 & 1023]($69,$1)|0);
   $$017 = $72;
   return ($$017|0);
   break;
  }
  case 12:  {
   $75 = (__ZN6ObjectnwEj(24)|0);
   ;HEAP32[$75>>2]=0|0;HEAP32[$75+4>>2]=0|0;HEAP32[$75+8>>2]=0|0;HEAP32[$75+12>>2]=0|0;HEAP32[$75+16>>2]=0|0;HEAP32[$75+20>>2]=0|0;
   __THREW__ = 0;
   invoke_vi(555,($75|0));
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if ($77) {
    $91 = ___cxa_find_matching_catch_2()|0;
    $92 = tempRet0;
    __ZdlPv($75);
    $$0 = $92;$$016 = $91;
    ___resumeException($$016|0);
    // unreachable;
   }
   $78 = ((($75)) + 8|0);
   HEAP32[$75>>2] = (2920);
   HEAP32[$78>>2] = (2944);
   $79 = ((($75)) + 16|0);
   HEAP32[$79>>2] = 0;
   $80 = ((($75)) + 20|0);
   HEAP32[$80>>2] = 0;
   $81 = ((($75)) + 12|0);
   HEAP32[$81>>2] = $79;
   $82 = ((($0)) + 8|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ($83|0)==($75|0);
   if ($84) {
    $87 = $75;
   } else {
    $85 = ($83|0)==(0|0);
    if (!($85)) {
     __ZN6Object7releaseEv($83);
    }
    HEAP32[$82>>2] = $75;
    __ZN6Object6retainEv($75);
    $$pre = HEAP32[$82>>2]|0;
    $87 = $$pre;
   }
   $86 = HEAP32[$87>>2]|0;
   $88 = ((($86)) + 8|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (FUNCTION_TABLE_iii[$89 & 1023]($87,$1)|0);
   $$017 = $90;
   return ($$017|0);
   break;
  }
  case 0:  {
   $$017 = 1;
   return ($$017|0);
   break;
  }
  default: {
   $$017 = 0;
   return ($$017|0);
  }
  }
 } while(0);
 return (0)|0;
}
function __ZN11KeyValueMap7Variant17writeSelfToStreamEP6Stream($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = (FUNCTION_TABLE_iiii[$4 & 1023]($1,4,$5)|0);
 if (!($6)) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = HEAP32[$5>>2]|0;
 do {
  switch ($7|0) {
  case 1:  {
   $8 = HEAP32[$1>>2]|0;
   $9 = ((($8)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($0)) + 8|0);
   $12 = (FUNCTION_TABLE_iiii[$10 & 1023]($1,1,$11)|0);
   $$0 = $12;
   return ($$0|0);
   break;
  }
  case 5:  {
   $13 = HEAP32[$1>>2]|0;
   $14 = ((($13)) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($0)) + 8|0);
   $17 = (FUNCTION_TABLE_iiii[$15 & 1023]($1,1,$16)|0);
   $$0 = $17;
   return ($$0|0);
   break;
  }
  case 2:  {
   $18 = HEAP32[$1>>2]|0;
   $19 = ((($18)) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($0)) + 8|0);
   $22 = (FUNCTION_TABLE_iiii[$20 & 1023]($1,2,$21)|0);
   $$0 = $22;
   return ($$0|0);
   break;
  }
  case 6:  {
   $23 = HEAP32[$1>>2]|0;
   $24 = ((($23)) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($0)) + 8|0);
   $27 = (FUNCTION_TABLE_iiii[$25 & 1023]($1,2,$26)|0);
   $$0 = $27;
   return ($$0|0);
   break;
  }
  case 3:  {
   $28 = HEAP32[$1>>2]|0;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($0)) + 8|0);
   $32 = (FUNCTION_TABLE_iiii[$30 & 1023]($1,4,$31)|0);
   $$0 = $32;
   return ($$0|0);
   break;
  }
  case 7:  {
   $33 = HEAP32[$1>>2]|0;
   $34 = ((($33)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($0)) + 8|0);
   $37 = (FUNCTION_TABLE_iiii[$35 & 1023]($1,4,$36)|0);
   $$0 = $37;
   return ($$0|0);
   break;
  }
  case 4:  {
   $38 = HEAP32[$1>>2]|0;
   $39 = ((($38)) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($0)) + 8|0);
   $42 = (FUNCTION_TABLE_iiii[$40 & 1023]($1,8,$41)|0);
   $$0 = $42;
   return ($$0|0);
   break;
  }
  case 8:  {
   $43 = HEAP32[$1>>2]|0;
   $44 = ((($43)) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($0)) + 8|0);
   $47 = (FUNCTION_TABLE_iiii[$45 & 1023]($1,8,$46)|0);
   $$0 = $47;
   return ($$0|0);
   break;
  }
  case 9:  {
   $48 = HEAP32[$1>>2]|0;
   $49 = ((($48)) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($0)) + 8|0);
   $52 = (FUNCTION_TABLE_iiii[$50 & 1023]($1,4,$51)|0);
   $$0 = $52;
   return ($$0|0);
   break;
  }
  case 10:  {
   $53 = HEAP32[$1>>2]|0;
   $54 = ((($53)) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($0)) + 8|0);
   $57 = (FUNCTION_TABLE_iiii[$55 & 1023]($1,8,$56)|0);
   $$0 = $57;
   return ($$0|0);
   break;
  }
  case 11:  {
   $58 = ((($0)) + 8|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($60)) + 12|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (FUNCTION_TABLE_iii[$62 & 1023]($59,$1)|0);
   $$0 = $63;
   return ($$0|0);
   break;
  }
  case 12:  {
   $64 = ((($0)) + 8|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = HEAP32[$65>>2]|0;
   $67 = ((($66)) + 12|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (FUNCTION_TABLE_iii[$68 & 1023]($65,$1)|0);
   $$0 = $69;
   return ($$0|0);
   break;
  }
  case 0:  {
   $$0 = 1;
   return ($$0|0);
   break;
  }
  default: {
   $$0 = 0;
   return ($$0|0);
  }
  }
 } while(0);
 return (0)|0;
}
function __ZN11KeyValueMapD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2920);
 $1 = ((($0)) + 8|0);
 HEAP32[$1>>2] = (2944);
 $2 = ((($0)) + 12|0);
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11KeyValueMap7VariantEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($2,$4);
 __ZdlPv($0);
 return;
}
function __ZN11KeyValueMap18readSelfFromStreamEP6Stream($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01442 = 0, $$015 = 0, $$1 = 0, $$3 = 0, $$pr$pre$i = 0, $$pr$pre$i20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $4 = sp + 48|0;
 $5 = sp + 32|0;
 $6 = sp + 28|0;
 $7 = sp + 16|0;
 $8 = sp;
 HEAP32[$6>>2] = 0;
 $9 = HEAP32[$1>>2]|0;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_iiii[$11 & 1023]($1,4,$6)|0);
 if (!($12)) {
  $$3 = 0;
  STACKTOP = sp;return ($$3|0);
 }
 $13 = HEAP32[$6>>2]|0;
 $14 = ($13|0)==(0);
 L4: do {
  if ($14) {
   $$1 = 2;
  } else {
   $15 = ((($8)) + 4|0);
   $16 = ((($7)) + 11|0);
   $17 = ((($0)) + 12|0);
   $18 = ((($8)) + 8|0);
   $19 = ((($8)) + 8|0);
   $$01442 = 0;
   L6: while(1) {
    ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
    HEAP32[$8>>2] = (2904);
    HEAP32[$15>>2] = 0;
    HEAP32[$5>>2] = 0;
    $23 = HEAP32[$1>>2]|0;
    $24 = ((($23)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    __THREW__ = 0;
    $26 = (invoke_iiii($25|0,($1|0),4,($5|0))|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     label = 11;
     break;
    }
    L9: do {
     if ($26) {
      $29 = HEAP32[$5>>2]|0;
      __THREW__ = 0;
      invoke_viii(595,($7|0),($29|0),0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 11;
       break L6;
      }
      $32 = HEAP32[$1>>2]|0;
      $33 = ((($32)) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = HEAP32[$5>>2]|0;
      $36 = HEAP8[$16>>0]|0;
      $37 = ($36<<24>>24)<(0);
      $38 = HEAP32[$7>>2]|0;
      $39 = $37 ? $38 : $7;
      __THREW__ = 0;
      $40 = (invoke_iiii($34|0,($1|0),($35|0),($39|0))|0);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       label = 11;
       break L6;
      }
      if ($40) {
       __THREW__ = 0;
       $64 = (invoke_iii(130,($8|0),($1|0))|0);
       $65 = __THREW__; __THREW__ = 0;
       $66 = $65&1;
       if ($66) {
        label = 11;
        break L6;
       }
       if ($64) {
        HEAP32[$3>>2] = $7;
        __THREW__ = 0;
        invoke_viiiiii(596,($2|0),($17|0),($7|0),(31702|0),($3|0),($4|0));
        $67 = __THREW__; __THREW__ = 0;
        $68 = $67&1;
        if ($68) {
         label = 11;
         break L6;
        }
        $69 = HEAP32[$2>>2]|0;
        $70 = HEAP32[$15>>2]|0;
        $71 = ((($69)) + 36|0);
        HEAP32[$71>>2] = $70;
        do {
         switch ($70|0) {
         case 12:  {
          $120 = ((($69)) + 40|0);
          $121 = HEAP32[$18>>2]|0;
          $122 = HEAP32[$120>>2]|0;
          $123 = ($122|0)==($121|0);
          if ($123) {
           $$015 = 0;
           break L9;
          }
          $124 = ($122|0)==(0|0);
          if (!($124)) {
           __THREW__ = 0;
           invoke_vi(525,($122|0));
           $125 = __THREW__; __THREW__ = 0;
           $126 = $125&1;
           if ($126) {
            label = 11;
            break L6;
           }
          }
          HEAP32[$120>>2] = $121;
          $127 = ($121|0)==(0|0);
          if ($127) {
           $$015 = 0;
           break L9;
          }
          __THREW__ = 0;
          invoke_vi(526,($121|0));
          $128 = __THREW__; __THREW__ = 0;
          $129 = $128&1;
          if ($129) {
           label = 11;
           break L6;
          } else {
           $$015 = 0;
           break L9;
          }
          break;
         }
         case 1:  {
          $72 = HEAP8[$18>>0]|0;
          $73 = ((($69)) + 40|0);
          HEAP8[$73>>0] = $72;
          $$015 = 0;
          break L9;
          break;
         }
         case 2:  {
          $74 = HEAP16[$18>>1]|0;
          $75 = ((($69)) + 40|0);
          HEAP16[$75>>1] = $74;
          $$015 = 0;
          break L9;
          break;
         }
         case 3:  {
          $76 = HEAP32[$18>>2]|0;
          $77 = ((($69)) + 40|0);
          HEAP32[$77>>2] = $76;
          $$015 = 0;
          break L9;
          break;
         }
         case 4:  {
          $78 = $19;
          $79 = $78;
          $80 = HEAP32[$79>>2]|0;
          $81 = (($78) + 4)|0;
          $82 = $81;
          $83 = HEAP32[$82>>2]|0;
          $84 = ((($69)) + 40|0);
          $85 = $84;
          $86 = $85;
          HEAP32[$86>>2] = $80;
          $87 = (($85) + 4)|0;
          $88 = $87;
          HEAP32[$88>>2] = $83;
          $$015 = 0;
          break L9;
          break;
         }
         case 5:  {
          $89 = HEAP8[$18>>0]|0;
          $90 = ((($69)) + 40|0);
          HEAP8[$90>>0] = $89;
          $$015 = 0;
          break L9;
          break;
         }
         case 6:  {
          $91 = HEAP16[$18>>1]|0;
          $92 = ((($69)) + 40|0);
          HEAP16[$92>>1] = $91;
          $$015 = 0;
          break L9;
          break;
         }
         case 7:  {
          $93 = HEAP32[$18>>2]|0;
          $94 = ((($69)) + 40|0);
          HEAP32[$94>>2] = $93;
          $$015 = 0;
          break L9;
          break;
         }
         case 8:  {
          $95 = $19;
          $96 = $95;
          $97 = HEAP32[$96>>2]|0;
          $98 = (($95) + 4)|0;
          $99 = $98;
          $100 = HEAP32[$99>>2]|0;
          $101 = ((($69)) + 40|0);
          $102 = $101;
          $103 = $102;
          HEAP32[$103>>2] = $97;
          $104 = (($102) + 4)|0;
          $105 = $104;
          HEAP32[$105>>2] = $100;
          $$015 = 0;
          break L9;
          break;
         }
         case 9:  {
          $106 = HEAP32[$18>>2]|0;
          $107 = ((($69)) + 40|0);
          HEAP32[$107>>2] = $106;
          $$015 = 0;
          break L9;
          break;
         }
         case 10:  {
          $108 = +HEAPF64[$18>>3];
          $109 = ((($69)) + 40|0);
          HEAPF64[$109>>3] = $108;
          $$015 = 0;
          break L9;
          break;
         }
         case 11:  {
          $110 = ((($69)) + 40|0);
          $111 = HEAP32[$18>>2]|0;
          $112 = HEAP32[$110>>2]|0;
          $113 = ($112|0)==($111|0);
          if ($113) {
           $$015 = 0;
           break L9;
          }
          $114 = ($112|0)==(0|0);
          if (!($114)) {
           __THREW__ = 0;
           invoke_vi(525,($112|0));
           $115 = __THREW__; __THREW__ = 0;
           $116 = $115&1;
           if ($116) {
            label = 11;
            break L6;
           }
          }
          HEAP32[$110>>2] = $111;
          $117 = ($111|0)==(0|0);
          if ($117) {
           $$015 = 0;
           break L9;
          }
          __THREW__ = 0;
          invoke_vi(526,($111|0));
          $118 = __THREW__; __THREW__ = 0;
          $119 = $118&1;
          if ($119) {
           label = 11;
           break L6;
          } else {
           $$015 = 0;
           break L9;
          }
          break;
         }
         default: {
          $$015 = 0;
          break L9;
         }
         }
        } while(0);
       } else {
        $$015 = 1;
       }
      } else {
       $$015 = 1;
      }
     } else {
      $$015 = 1;
     }
    } while(0);
    HEAP32[$8>>2] = (2904);
    $130 = HEAP32[$15>>2]|0;
    $131 = ($130|0)==(11);
    if ($131) {
     $132 = HEAP32[$18>>2]|0;
     $133 = ($132|0)==(0|0);
     if (!($133)) {
      __THREW__ = 0;
      invoke_vi(525,($132|0));
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 51;
       break;
      }
      $$pr$pre$i = HEAP32[$15>>2]|0;
      $139 = $$pr$pre$i;
      label = 52;
     }
    } else {
     $139 = $130;
     label = 52;
    }
    if ((label|0) == 52) {
     label = 0;
     $138 = ($139|0)==(12);
     if ($138) {
      $140 = HEAP32[$18>>2]|0;
      $141 = ($140|0)==(0|0);
      if (!($141)) {
       __THREW__ = 0;
       invoke_vi(525,($140|0));
       $142 = __THREW__; __THREW__ = 0;
       $143 = $142&1;
       if ($143) {
        label = 55;
        break;
       }
      }
     }
    }
    $146 = HEAP8[$16>>0]|0;
    $147 = ($146<<24>>24)<(0);
    if ($147) {
     $148 = HEAP32[$7>>2]|0;
     __ZdlPv($148);
    }
    $cond1 = ($$015|0)==(0);
    $22 = (($$01442) + 1)|0;
    if (!($cond1)) {
     $$1 = $$015;
     break L4;
    }
    $20 = HEAP32[$6>>2]|0;
    $21 = ($22>>>0)<($20>>>0);
    if ($21) {
     $$01442 = $22;
    } else {
     $$1 = 2;
     break L4;
    }
   }
   if ((label|0) == 11) {
    $43 = ___cxa_find_matching_catch_2()|0;
    $44 = tempRet0;
    HEAP32[$8>>2] = (2904);
    $45 = HEAP32[$15>>2]|0;
    $46 = ($45|0)==(11);
    do {
     if ($46) {
      $47 = HEAP32[$18>>2]|0;
      $48 = ($47|0)==(0|0);
      if (!($48)) {
       __THREW__ = 0;
       invoke_vi(525,($47|0));
       $49 = __THREW__; __THREW__ = 0;
       $50 = $49&1;
       if ($50) {
        $51 = ___cxa_find_matching_catch_3(0|0)|0;
        $52 = tempRet0;
        ___clang_call_terminate($51);
        // unreachable;
       } else {
        $$pr$pre$i20 = HEAP32[$15>>2]|0;
        $54 = $$pr$pre$i20;
        label = 16;
        break;
       }
      }
     } else {
      $54 = $45;
      label = 16;
     }
    } while(0);
    if ((label|0) == 16) {
     $53 = ($54|0)==(12);
     if ($53) {
      $55 = HEAP32[$18>>2]|0;
      $56 = ($55|0)==(0|0);
      if (!($56)) {
       __THREW__ = 0;
       invoke_vi(525,($55|0));
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        $59 = ___cxa_find_matching_catch_3(0|0)|0;
        $60 = tempRet0;
        ___clang_call_terminate($59);
        // unreachable;
       }
      }
     }
    }
    $61 = HEAP8[$16>>0]|0;
    $62 = ($61<<24>>24)<(0);
    if (!($62)) {
     ___resumeException($43|0);
     // unreachable;
    }
    $63 = HEAP32[$7>>2]|0;
    __ZdlPv($63);
    ___resumeException($43|0);
    // unreachable;
   }
   else if ((label|0) == 51) {
    $136 = ___cxa_find_matching_catch_3(0|0)|0;
    $137 = tempRet0;
    ___clang_call_terminate($136);
    // unreachable;
   }
   else if ((label|0) == 55) {
    $144 = ___cxa_find_matching_catch_3(0|0)|0;
    $145 = tempRet0;
    ___clang_call_terminate($144);
    // unreachable;
   }
  }
 } while(0);
 $cond = ($$1|0)==(2);
 $$3 = $cond;
 STACKTOP = sp;return ($$3|0);
}
function __ZN11KeyValueMap17writeSelfToStreamEP6Stream($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$ = 0, $$0$i$i$i$i = 0, $$126 = 0, $$227 = 0, $$pr$pre$i$i = 0, $$pr$pre$i$i31 = 0, $$sroa$043$0$be = 0, $$sroa$043$054 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $cond1 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $4 = sp;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$3>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_iiii[$9 & 1023]($1,4,$3)|0);
 if (!($10)) {
  $$227 = 0;
  STACKTOP = sp;return ($$227|0);
 }
 $11 = ((($0)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 16|0);
 $14 = ($12|0)==($13|0);
 if ($14) {
  $$227 = 1;
  STACKTOP = sp;return ($$227|0);
 }
 $15 = ((($4)) + 16|0);
 $16 = ((($4)) + 20|0);
 $17 = ((($4)) + 11|0);
 $18 = ((($4)) + 4|0);
 $19 = ((($4)) + 16|0);
 $20 = ((($4)) + 24|0);
 $21 = ((($4)) + 24|0);
 $$sroa$043$054 = $12;
 L7: while(1) {
  $22 = ((($$sroa$043$054)) + 16|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($4,$22);
  HEAP32[$15>>2] = (2904);
  $23 = ((($$sroa$043$054)) + 36|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$16>>2] = $24;
  do {
   switch ($24|0) {
   case 12:  {
    $73 = ((($$sroa$043$054)) + 40|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = HEAP32[$20>>2]|0;
    $76 = ($75|0)==($74|0);
    if (!($76)) {
     $77 = ($75|0)==(0|0);
     if (!($77)) {
      __THREW__ = 0;
      invoke_vi(525,($75|0));
      $78 = __THREW__; __THREW__ = 0;
      $79 = $78&1;
      if ($79) {
       label = 25;
       break L7;
      }
     }
     HEAP32[$20>>2] = $74;
     $80 = ($74|0)==(0|0);
     if (!($80)) {
      __THREW__ = 0;
      invoke_vi(526,($74|0));
      $81 = __THREW__; __THREW__ = 0;
      $82 = $81&1;
      if ($82) {
       label = 25;
       break L7;
      }
     }
    }
    break;
   }
   case 1:  {
    $25 = ((($$sroa$043$054)) + 40|0);
    $26 = HEAP8[$25>>0]|0;
    HEAP8[$20>>0] = $26;
    break;
   }
   case 2:  {
    $27 = ((($$sroa$043$054)) + 40|0);
    $28 = HEAP16[$27>>1]|0;
    HEAP16[$20>>1] = $28;
    break;
   }
   case 3:  {
    $29 = ((($$sroa$043$054)) + 40|0);
    $30 = HEAP32[$29>>2]|0;
    HEAP32[$20>>2] = $30;
    break;
   }
   case 4:  {
    $31 = ((($$sroa$043$054)) + 40|0);
    $32 = $31;
    $33 = $32;
    $34 = HEAP32[$33>>2]|0;
    $35 = (($32) + 4)|0;
    $36 = $35;
    $37 = HEAP32[$36>>2]|0;
    $38 = $21;
    $39 = $38;
    HEAP32[$39>>2] = $34;
    $40 = (($38) + 4)|0;
    $41 = $40;
    HEAP32[$41>>2] = $37;
    break;
   }
   case 5:  {
    $42 = ((($$sroa$043$054)) + 40|0);
    $43 = HEAP8[$42>>0]|0;
    HEAP8[$20>>0] = $43;
    break;
   }
   case 6:  {
    $44 = ((($$sroa$043$054)) + 40|0);
    $45 = HEAP16[$44>>1]|0;
    HEAP16[$20>>1] = $45;
    break;
   }
   case 7:  {
    $46 = ((($$sroa$043$054)) + 40|0);
    $47 = HEAP32[$46>>2]|0;
    HEAP32[$20>>2] = $47;
    break;
   }
   case 8:  {
    $48 = ((($$sroa$043$054)) + 40|0);
    $49 = $48;
    $50 = $49;
    $51 = HEAP32[$50>>2]|0;
    $52 = (($49) + 4)|0;
    $53 = $52;
    $54 = HEAP32[$53>>2]|0;
    $55 = $21;
    $56 = $55;
    HEAP32[$56>>2] = $51;
    $57 = (($55) + 4)|0;
    $58 = $57;
    HEAP32[$58>>2] = $54;
    break;
   }
   case 9:  {
    $59 = ((($$sroa$043$054)) + 40|0);
    $60 = HEAP32[$59>>2]|0;
    HEAP32[$20>>2] = $60;
    break;
   }
   case 10:  {
    $61 = ((($$sroa$043$054)) + 40|0);
    $62 = +HEAPF64[$61>>3];
    HEAPF64[$20>>3] = $62;
    break;
   }
   case 11:  {
    $63 = ((($$sroa$043$054)) + 40|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = HEAP32[$20>>2]|0;
    $66 = ($65|0)==($64|0);
    if (!($66)) {
     $67 = ($65|0)==(0|0);
     if (!($67)) {
      __THREW__ = 0;
      invoke_vi(525,($65|0));
      $68 = __THREW__; __THREW__ = 0;
      $69 = $68&1;
      if ($69) {
       label = 25;
       break L7;
      }
     }
     HEAP32[$20>>2] = $64;
     $70 = ($64|0)==(0|0);
     if (!($70)) {
      __THREW__ = 0;
      invoke_vi(526,($64|0));
      $71 = __THREW__; __THREW__ = 0;
      $72 = $71&1;
      if ($72) {
       label = 25;
       break L7;
      }
     }
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $88 = HEAP8[$17>>0]|0;
  $89 = ($88<<24>>24)<(0);
  $90 = HEAP32[$18>>2]|0;
  $91 = $88&255;
  $92 = $89 ? $90 : $91;
  HEAP32[$2>>2] = $92;
  $93 = HEAP32[$1>>2]|0;
  $94 = ((($93)) + 12|0);
  $95 = HEAP32[$94>>2]|0;
  __THREW__ = 0;
  $96 = (invoke_iiii($95|0,($1|0),4,($2|0))|0);
  $97 = __THREW__; __THREW__ = 0;
  $98 = $97&1;
  if ($98) {
   label = 53;
   break;
  }
  if ($96) {
   $99 = HEAP32[$1>>2]|0;
   $100 = ((($99)) + 12|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = HEAP8[$17>>0]|0;
   $103 = ($102<<24>>24)<(0);
   $104 = HEAP32[$18>>2]|0;
   $105 = $102&255;
   $106 = $103 ? $104 : $105;
   $107 = HEAP32[$4>>2]|0;
   $108 = $103 ? $107 : $4;
   __THREW__ = 0;
   $109 = (invoke_iiii($101|0,($1|0),($106|0),($108|0))|0);
   $110 = __THREW__; __THREW__ = 0;
   $111 = $110&1;
   if ($111) {
    label = 53;
    break;
   }
   if ($109) {
    $112 = HEAP32[$15>>2]|0;
    $113 = ((($112)) + 4|0);
    $114 = HEAP32[$113>>2]|0;
    __THREW__ = 0;
    $115 = (invoke_iii($114|0,($15|0),($1|0))|0);
    $116 = __THREW__; __THREW__ = 0;
    $117 = $116&1;
    if ($117) {
     label = 53;
     break;
    }
    $not$ = $115 ^ 1;
    $$$ = $not$&1;
    $$126 = $$$;
   } else {
    $$126 = 1;
   }
  } else {
   $$126 = 1;
  }
  HEAP32[$19>>2] = (2904);
  $118 = HEAP32[$16>>2]|0;
  $119 = ($118|0)==(11);
  if ($119) {
   $120 = HEAP32[$20>>2]|0;
   $121 = ($120|0)==(0|0);
   if (!($121)) {
    __THREW__ = 0;
    invoke_vi(525,($120|0));
    $122 = __THREW__; __THREW__ = 0;
    $123 = $122&1;
    if ($123) {
     label = 39;
     break;
    }
    $$pr$pre$i$i31 = HEAP32[$16>>2]|0;
    $127 = $$pr$pre$i$i31;
    label = 40;
   }
  } else {
   $127 = $118;
   label = 40;
  }
  if ((label|0) == 40) {
   label = 0;
   $126 = ($127|0)==(12);
   if ($126) {
    $128 = HEAP32[$20>>2]|0;
    $129 = ($128|0)==(0|0);
    if (!($129)) {
     __THREW__ = 0;
     invoke_vi(525,($128|0));
     $130 = __THREW__; __THREW__ = 0;
     $131 = $130&1;
     if ($131) {
      label = 43;
      break;
     }
    }
   }
  }
  $134 = HEAP8[$17>>0]|0;
  $135 = ($134<<24>>24)<(0);
  if ($135) {
   $136 = HEAP32[$4>>2]|0;
   __ZdlPv($136);
  }
  $cond1 = ($$126|0)==(0);
  if (!($cond1)) {
   $$227 = 0;
   label = 65;
   break;
  }
  $137 = ((($$sroa$043$054)) + 4|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = ($138|0)==(0|0);
  if ($139) {
   $140 = ((($$sroa$043$054)) + 8|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = HEAP32[$141>>2]|0;
   $143 = ($142|0)==($$sroa$043$054|0);
   if ($143) {
    $$sroa$043$0$be = $141;
   } else {
    $148 = $140;
    while(1) {
     $147 = HEAP32[$148>>2]|0;
     $149 = ((($147)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==($147|0);
     if ($152) {
      $$sroa$043$0$be = $150;
      break;
     } else {
      $148 = $149;
     }
    }
   }
  } else {
   $$0$i$i$i$i = $138;
   while(1) {
    $145 = HEAP32[$$0$i$i$i$i>>2]|0;
    $146 = ($145|0)==(0|0);
    if ($146) {
     break;
    } else {
     $$0$i$i$i$i = $145;
    }
   }
   $$sroa$043$0$be = $$0$i$i$i$i;
  }
  $144 = ($$sroa$043$0$be|0)==($13|0);
  if ($144) {
   $$227 = 1;
   label = 65;
   break;
  } else {
   $$sroa$043$054 = $$sroa$043$0$be;
  }
 }
 if ((label|0) == 25) {
  $83 = ___cxa_find_matching_catch_2()|0;
  $84 = tempRet0;
  $85 = HEAP8[$17>>0]|0;
  $86 = ($85<<24>>24)<(0);
  if (!($86)) {
   ___resumeException($83|0);
   // unreachable;
  }
  $87 = HEAP32[$4>>2]|0;
  __ZdlPv($87);
  ___resumeException($83|0);
  // unreachable;
 }
 else if ((label|0) == 39) {
  $124 = ___cxa_find_matching_catch_3(0|0)|0;
  $125 = tempRet0;
  ___clang_call_terminate($124);
  // unreachable;
 }
 else if ((label|0) == 43) {
  $132 = ___cxa_find_matching_catch_3(0|0)|0;
  $133 = tempRet0;
  ___clang_call_terminate($132);
  // unreachable;
 }
 else if ((label|0) == 53) {
  $153 = ___cxa_find_matching_catch_2()|0;
  $154 = tempRet0;
  HEAP32[$19>>2] = (2904);
  $155 = HEAP32[$16>>2]|0;
  $156 = ($155|0)==(11);
  do {
   if ($156) {
    $157 = HEAP32[$20>>2]|0;
    $158 = ($157|0)==(0|0);
    if (!($158)) {
     __THREW__ = 0;
     invoke_vi(525,($157|0));
     $159 = __THREW__; __THREW__ = 0;
     $160 = $159&1;
     if ($160) {
      $161 = ___cxa_find_matching_catch_3(0|0)|0;
      $162 = tempRet0;
      ___clang_call_terminate($161);
      // unreachable;
     } else {
      $$pr$pre$i$i = HEAP32[$16>>2]|0;
      $164 = $$pr$pre$i$i;
      label = 58;
      break;
     }
    }
   } else {
    $164 = $155;
    label = 58;
   }
  } while(0);
  if ((label|0) == 58) {
   $163 = ($164|0)==(12);
   if ($163) {
    $165 = HEAP32[$20>>2]|0;
    $166 = ($165|0)==(0|0);
    if (!($166)) {
     __THREW__ = 0;
     invoke_vi(525,($165|0));
     $167 = __THREW__; __THREW__ = 0;
     $168 = $167&1;
     if ($168) {
      $169 = ___cxa_find_matching_catch_3(0|0)|0;
      $170 = tempRet0;
      ___clang_call_terminate($169);
      // unreachable;
     }
    }
   }
  }
  $171 = HEAP8[$17>>0]|0;
  $172 = ($171<<24>>24)<(0);
  if (!($172)) {
   ___resumeException($153|0);
   // unreachable;
  }
  $173 = HEAP32[$4>>2]|0;
  __ZdlPv($173);
  ___resumeException($153|0);
  // unreachable;
 }
 else if ((label|0) == 65) {
  STACKTOP = sp;return ($$227|0);
 }
 return (0)|0;
}
function __ZThn8_N11KeyValueMap18readSelfFromStreamEP6Stream($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + -8|0);
 $3 = (__ZN11KeyValueMap18readSelfFromStreamEP6Stream($2,$1)|0);
 return ($3|0);
}
function __ZThn8_N11KeyValueMap17writeSelfToStreamEP6Stream($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + -8|0);
 $3 = (__ZN11KeyValueMap17writeSelfToStreamEP6Stream($2,$1)|0);
 return ($3|0);
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11KeyValueMap7VariantEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE25__emplace_unique_key_argsIS7_JRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSL_IJEEEEEENS_4pairINS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEEiEEbEERKT_DpOT0_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$019 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $7 = (__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11KeyValueMap7VariantEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISL_EERKT_($1,$6,$2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $$0 = $8;$$019 = 0;
  $32 = $$0;
  HEAP32[$0>>2] = $32;
  $33 = ((($0)) + 4|0);
  HEAP8[$33>>0] = $$019;
  STACKTOP = sp;return;
 }
 $10 = (__Znwj(48)|0);
 $11 = HEAP32[$4>>2]|0;
 $12 = ((($10)) + 16|0);
 __THREW__ = 0;
 invoke_vii(566,($12|0),($11|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $15 = ___cxa_find_matching_catch_2()|0;
  $16 = tempRet0;
  __ZdlPv($10);
  ___resumeException($15|0);
  // unreachable;
 }
 $17 = ((($10)) + 32|0);
 HEAP32[$17>>2] = (2904);
 $18 = ((($10)) + 36|0);
 HEAP32[$18>>2] = 0;
 $19 = HEAP32[$6>>2]|0;
 HEAP32[$10>>2] = 0;
 $20 = ((($10)) + 4|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($10)) + 8|0);
 HEAP32[$21>>2] = $19;
 HEAP32[$7>>2] = $10;
 $22 = HEAP32[$1>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $28 = $10;
 } else {
  $25 = $23;
  HEAP32[$1>>2] = $25;
  $$pre$i = HEAP32[$7>>2]|0;
  $28 = $$pre$i;
 }
 $26 = ((($1)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($27,$28);
 $29 = ((($1)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 $$0 = $10;$$019 = 1;
 $32 = $$0;
 HEAP32[$0>>2] = $32;
 $33 = ((($0)) + 4|0);
 HEAP8[$33>>0] = $$019;
 STACKTOP = sp;return;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11KeyValueMap7VariantEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISL_EERKT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$be = 0, $$024 = 0, $$024$be$in = 0, $$025 = 0, $$sroa$speculated$i$i$i$i$i = 0, $$sroa$speculated$i$i$i$i$i26 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$1>>2] = $3;
  $$025 = $3;
  return ($$025|0);
 }
 $6 = ((($0)) + 4|0);
 $7 = ((($2)) + 11|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)<(0);
 $10 = ((($2)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $8&255;
 $13 = $9 ? $11 : $12;
 $14 = HEAP32[$2>>2]|0;
 $15 = $9 ? $14 : $2;
 $$0 = $6;$$024 = $4;
 while(1) {
  $16 = ((($$024)) + 16|0);
  $17 = ((($16)) + 11|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)<(0);
  $20 = ((($$024)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $18&255;
  $23 = $19 ? $21 : $22;
  $24 = ($23>>>0)<($13>>>0);
  $$sroa$speculated$i$i$i$i$i26 = $24 ? $23 : $13;
  $25 = ($$sroa$speculated$i$i$i$i$i26|0)==(0);
  if ($25) {
   label = 5;
  } else {
   $26 = HEAP32[$16>>2]|0;
   $27 = $19 ? $26 : $16;
   $28 = (_memcmp($15,$27,$$sroa$speculated$i$i$i$i$i26)|0);
   $29 = ($28|0)==(0);
   if ($29) {
    label = 5;
   } else {
    $31 = ($28|0)<(0);
    if ($31) {
     label = 7;
    } else {
     label = 9;
    }
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $30 = ($13>>>0)<($23>>>0);
   if ($30) {
    label = 7;
   } else {
    label = 9;
   }
  }
  if ((label|0) == 7) {
   label = 0;
   $32 = HEAP32[$$024>>2]|0;
   $33 = ($32|0)==(0|0);
   if ($33) {
    label = 8;
    break;
   } else {
    $$0$be = $$024;$$024$be$in = $32;
   }
  }
  else if ((label|0) == 9) {
   label = 0;
   $34 = ($13>>>0)<($23>>>0);
   $$sroa$speculated$i$i$i$i$i = $34 ? $13 : $23;
   $35 = ($$sroa$speculated$i$i$i$i$i|0)==(0);
   if ($35) {
    label = 11;
   } else {
    $36 = HEAP32[$16>>2]|0;
    $37 = $19 ? $36 : $16;
    $38 = (_memcmp($37,$15,$$sroa$speculated$i$i$i$i$i)|0);
    $39 = ($38|0)==(0);
    if ($39) {
     label = 11;
    } else {
     $40 = ($38|0)<(0);
     if (!($40)) {
      label = 16;
      break;
     }
    }
   }
   if ((label|0) == 11) {
    label = 0;
    if (!($24)) {
     label = 16;
     break;
    }
   }
   $41 = ((($$024)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(0|0);
   if ($43) {
    label = 15;
    break;
   } else {
    $$0$be = $41;$$024$be$in = $42;
   }
  }
  $$0 = $$0$be;$$024 = $$024$be$in;
 }
 if ((label|0) == 8) {
  HEAP32[$1>>2] = $$024;
  $$025 = $$024;
  return ($$025|0);
 }
 else if ((label|0) == 15) {
  HEAP32[$1>>2] = $$024;
  $$025 = $41;
  return ($$025|0);
 }
 else if ((label|0) == 16) {
  HEAP32[$1>>2] = $$024;
  $$025 = $$0;
  return ($$025|0);
 }
 return (0)|0;
}
function __ZN4DataC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev($0);
 $1 = ((($0)) + 8|0);
 HEAP32[$0>>2] = (2864);
 HEAP32[$1>>2] = (2888);
 $2 = ((($0)) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 16|0);
 HEAP32[$3>>2] = 0;
 return;
}
function __ZN11KeyValueMap7VariantD2Ev($0) {
 $0 = $0|0;
 var $$pr$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2904);
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(11);
 do {
  if ($3) {
   $4 = ((($0)) + 8|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0|0);
   if ($6) {
    return;
   }
   __THREW__ = 0;
   invoke_vi(525,($5|0));
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch_3(0|0)|0;
    $10 = tempRet0;
    ___clang_call_terminate($9);
    // unreachable;
   } else {
    $$pr$pre = HEAP32[$1>>2]|0;
    $12 = $$pr$pre;
    break;
   }
  } else {
   $12 = $2;
  }
 } while(0);
 $11 = ($12|0)==(12);
 if (!($11)) {
  return;
 }
 $13 = ((($0)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($14|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch_3(0|0)|0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
  // unreachable;
 } else {
  return;
 }
}
function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11KeyValueMap7VariantEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE4findIS7_EENS_21__tree_const_iteratorISA_PNS_11__tree_nodeISA_PvEEiEERKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$ph$lcssa$i = 0, $$0$ph14$i = 0, $$07$ph13$i = 0, $$0710$i = 0, $$sroa$0$0 = 0, $$sroa$speculated$i$i$i$i$i = 0, $$sroa$speculated$i$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if (!($4)) {
   $5 = ((($1)) + 11|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)<(0);
   $8 = ((($1)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $6&255;
   $11 = $7 ? $9 : $10;
   $12 = HEAP32[$1>>2]|0;
   $13 = $7 ? $12 : $1;
   $$0$ph14$i = $2;$$07$ph13$i = $3;
   L3: while(1) {
    $$0710$i = $$07$ph13$i;
    while(1) {
     $14 = ((($$0710$i)) + 16|0);
     $15 = ((($14)) + 11|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)<(0);
     $18 = ((($$0710$i)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = $16&255;
     $21 = $17 ? $19 : $20;
     $22 = ($11>>>0)<($21>>>0);
     $$sroa$speculated$i$i$i$i$i$i = $22 ? $11 : $21;
     $23 = ($$sroa$speculated$i$i$i$i$i$i|0)==(0);
     if ($23) {
      label = 6;
     } else {
      $24 = HEAP32[$14>>2]|0;
      $25 = $17 ? $24 : $14;
      $26 = (_memcmp($25,$13,$$sroa$speculated$i$i$i$i$i$i)|0);
      $27 = ($26|0)==(0);
      if ($27) {
       label = 6;
      } else {
       $29 = ($26|0)<(0);
       if (!($29)) {
        break;
       }
      }
     }
     if ((label|0) == 6) {
      label = 0;
      $28 = ($21>>>0)<($11>>>0);
      if (!($28)) {
       break;
      }
     }
     $32 = ((($$0710$i)) + 4|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)==(0|0);
     if ($34) {
      $$0$ph$lcssa$i = $$0$ph14$i;
      break L3;
     } else {
      $$0710$i = $33;
     }
    }
    $30 = HEAP32[$$0710$i>>2]|0;
    $31 = ($30|0)==(0|0);
    if ($31) {
     $$0$ph$lcssa$i = $$0710$i;
     break;
    } else {
     $$0$ph14$i = $$0710$i;$$07$ph13$i = $30;
    }
   }
   $35 = ($$0$ph$lcssa$i|0)==($2|0);
   if (!($35)) {
    $36 = ((($$0$ph$lcssa$i)) + 16|0);
    $37 = ((($36)) + 11|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = ($38<<24>>24)<(0);
    $40 = ((($$0$ph$lcssa$i)) + 20|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $38&255;
    $43 = $39 ? $41 : $42;
    $44 = ($43>>>0)<($11>>>0);
    $$sroa$speculated$i$i$i$i$i = $44 ? $43 : $11;
    $45 = ($$sroa$speculated$i$i$i$i$i|0)==(0);
    if (!($45)) {
     $46 = HEAP32[$36>>2]|0;
     $47 = $39 ? $46 : $36;
     $48 = (_memcmp($13,$47,$$sroa$speculated$i$i$i$i$i)|0);
     $49 = ($48|0)==(0);
     if (!($49)) {
      $51 = ($48|0)<(0);
      if ($51) {
       break;
      } else {
       $$sroa$0$0 = $$0$ph$lcssa$i;
      }
      return ($$sroa$0$0|0);
     }
    }
    $50 = ($11>>>0)<($43>>>0);
    if (!($50)) {
     $$sroa$0$0 = $$0$ph$lcssa$i;
     return ($$sroa$0$0|0);
    }
   }
  }
 } while(0);
 $$sroa$0$0 = $2;
 return ($$sroa$0$0|0);
}
function __ZNK11KeyValueMap6getIntERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 12|0);
 $3 = (__ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11KeyValueMap7VariantEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE4findIS7_EENS_21__tree_const_iteratorISA_PNS_11__tree_nodeISA_PvEEiEERKT_($2,$1)|0);
 $4 = ((($0)) + 16|0);
 $5 = ($3|0)==($4|0);
 L1: do {
  if ($5) {
   $$0 = 0;
  } else {
   $6 = ((($3)) + 36|0);
   $7 = HEAP32[$6>>2]|0;
   switch ($7|0) {
   case 1:  {
    $8 = ((($3)) + 40|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9 << 24 >> 24;
    $$0 = $10;
    break L1;
    break;
   }
   case 2:  {
    $11 = ((($3)) + 40|0);
    $12 = HEAP16[$11>>1]|0;
    $13 = $12 << 16 >> 16;
    $$0 = $13;
    break L1;
    break;
   }
   case 3:  {
    $14 = ((($3)) + 40|0);
    $15 = HEAP32[$14>>2]|0;
    $$0 = $15;
    break L1;
    break;
   }
   case 4:  {
    __ZN3App3logEPKcz(28952,12102,$vararg_buffer);
    $16 = ((($3)) + 40|0);
    $17 = $16;
    $18 = $17;
    $19 = HEAP32[$18>>2]|0;
    $20 = (($17) + 4)|0;
    $21 = $20;
    $22 = HEAP32[$21>>2]|0;
    $$0 = $19;
    break L1;
    break;
   }
   case 5:  {
    $23 = ((($3)) + 40|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $$0 = $25;
    break L1;
    break;
   }
   case 6:  {
    $26 = ((($3)) + 40|0);
    $27 = HEAP16[$26>>1]|0;
    $28 = $27&65535;
    $$0 = $28;
    break L1;
    break;
   }
   case 7:  {
    $29 = ((($3)) + 40|0);
    $30 = HEAP32[$29>>2]|0;
    $$0 = $30;
    break L1;
    break;
   }
   case 8:  {
    __ZN3App3logEPKcz(28952,12154,$vararg_buffer1);
    $31 = ((($3)) + 40|0);
    $32 = $31;
    $33 = $32;
    $34 = HEAP32[$33>>2]|0;
    $35 = (($32) + 4)|0;
    $36 = $35;
    $37 = HEAP32[$36>>2]|0;
    $$0 = $34;
    break L1;
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN11KeyValueMap6setIntERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 8|0;
 $4 = sp;
 $5 = sp + 16|0;
 $6 = ((($0)) + 12|0);
 HEAP32[$4>>2] = $1;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11KeyValueMap7VariantEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE25__emplace_unique_key_argsIS7_JRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSL_IJEEEEEENS_4pairINS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEEiEEbEERKT_DpOT0_($3,$6,$1,31702,$4,$5);
 $7 = HEAP32[$3>>2]|0;
 $8 = ((($7)) + 36|0);
 HEAP32[$8>>2] = 3;
 $9 = ((($7)) + 40|0);
 HEAP32[$9>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN9AnimationD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2960);
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 16|0);
 $4 = ($2|0)==($3|0);
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_vi[$7 & 1023]($2);
  return;
 }
 $8 = ($2|0)==(0|0);
 if ($8) {
  return;
 }
 $9 = HEAP32[$2>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 FUNCTION_TABLE_vi[$11 & 1023]($2);
 return;
}
function __ZN9AnimationD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2960);
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 16|0);
 $4 = ($2|0)==($3|0);
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_vi[$7 & 1023]($2);
  __ZdlPv($0);
  return;
 }
 $8 = ($2|0)==(0|0);
 if ($8) {
  __ZdlPv($0);
  return;
 }
 $9 = HEAP32[$2>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 FUNCTION_TABLE_vi[$11 & 1023]($2);
 __ZdlPv($0);
 return;
}
function __ZN9Animation5startEP6Windowi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_viiii[$5 & 1023]($0,$1,$2,0);
 return;
}
function __ZN9Animation5startEP6Windowii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $switch = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $$off = (($5) + -1)|0;
 $switch = ($$off>>>0)<(2);
 if ($switch) {
  return;
 }
 $6 = ((($0)) + 48|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($0)) + 52|0);
 HEAP32[$7>>2] = $3;
 HEAP32[$4>>2] = 1;
 $8 = (__ZN3App13currentMillisEv(28952)|0);
 $9 = ((($0)) + 40|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($0)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($1)) + 64|0);
 __ZN6Object6retainEv($0);
 __THREW__ = 0;
 $12 = (invoke_ii(527,12)|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 do {
  if ($14) {
   $34 = ___cxa_find_matching_catch_2()|0;
   $35 = tempRet0;
   $eh$lpad$body$index2Z2D = $35;$eh$lpad$body$indexZ2D = $34;
  } else {
   HEAP32[$12>>2] = 0;
   $15 = ((($12)) + 8|0);
   HEAP32[$15>>2] = $0;
   __THREW__ = 0;
   invoke_vi(526,($0|0));
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    $18 = ___cxa_find_matching_catch_2()|0;
    $19 = tempRet0;
    __ZdlPv($12);
    $eh$lpad$body$index2Z2D = $19;$eh$lpad$body$indexZ2D = $18;
    break;
   }
   $20 = HEAP32[$11>>2]|0;
   $21 = ((($20)) + 4|0);
   HEAP32[$21>>2] = $12;
   HEAP32[$12>>2] = $20;
   HEAP32[$11>>2] = $12;
   $22 = ((($12)) + 4|0);
   HEAP32[$22>>2] = $11;
   $23 = ((($1)) + 72|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + 1)|0;
   HEAP32[$23>>2] = $25;
   __THREW__ = 0;
   invoke_vi(525,($0|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    $28 = ___cxa_find_matching_catch_3(0|0)|0;
    $29 = tempRet0;
    ___clang_call_terminate($28);
    // unreachable;
   }
   $30 = HEAP32[$10>>2]|0;
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($31)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   FUNCTION_TABLE_vi[$33 & 1023]($30);
   return;
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(525,($0|0));
 $36 = __THREW__; __THREW__ = 0;
 $37 = $36&1;
 if ($37) {
  $38 = ___cxa_find_matching_catch_3(0|0)|0;
  $39 = tempRet0;
  ___clang_call_terminate($38);
  // unreachable;
 } else {
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
}
function __ZN9Animation4stopEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 40|0);
 HEAP32[$5>>2] = 0;
 HEAP32[$1>>2] = 0;
 return;
}
function __ZN9Animation5pauseEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(1);
 if (!($3)) {
  return;
 }
 HEAP32[$1>>2] = 2;
 $4 = (__ZN3App13currentMillisEv(28952)|0);
 $5 = ((($0)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 44|0);
 HEAP32[$8>>2] = $7;
 return;
}
function __ZN9Animation7unpauseEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(2);
 if (!($3)) {
  return;
 }
 $4 = (__ZN3App13currentMillisEv(28952)|0);
 $5 = ((($0)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 40|0);
 HEAP32[$8>>2] = $7;
 HEAP32[$5>>2] = 0;
 HEAP32[$1>>2] = 1;
 return;
}
function __ZN9Animation4tickEl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0.0, $$neg11 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 52|0);
 $6 = HEAP32[$5>>2]|0;
 $$neg11 = (($1) - ($4))|0;
 $7 = (($$neg11) - ($6))|0;
 $8 = (+($7|0));
 $9 = ($7|0)<(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = ((($0)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (+($11|0));
 $13 = $8 >= $12;
 $$0 = $13 ? $12 : $8;
 $14 = ((($0)) + 64|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (+FUNCTION_TABLE_ddddd[$15 & 1023]($$0,0.0,1.0,$12));
 $17 = HEAP32[$0>>2]|0;
 $18 = ((($17)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($0)) + 68|0);
 $21 = +HEAPF32[$20>>2];
 $22 = ((($0)) + 72|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $23 - $21;
 $25 = $16 * $24;
 $26 = $21 + $25;
 FUNCTION_TABLE_vid[$19 & 1023]($0,$26);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $27 = HEAP32[$0>>2]|0;
 $28 = ((($27)) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 FUNCTION_TABLE_vi[$29 & 1023]($0);
 $30 = ((($0)) + 32|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0|0);
 if ($32) {
  STACKTOP = sp;return;
 }
 HEAP32[$2>>2] = $0;
 $33 = HEAP32[$31>>2]|0;
 $34 = ((($33)) + 24|0);
 $35 = HEAP32[$34>>2]|0;
 FUNCTION_TABLE_vii[$35 & 1023]($31,$2);
 STACKTOP = sp;return;
}
function __ZN14AlphaAnimationD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3004);
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __THREW__ = 0;
  invoke_vi(525,($2|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $6 = ___cxa_find_matching_catch_3(0|0)|0;
   $7 = tempRet0;
   ___clang_call_terminate($6);
   // unreachable;
  }
 }
 HEAP32[$0>>2] = (2960);
 $8 = ((($0)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 16|0);
 $11 = ($9|0)==($10|0);
 if ($11) {
  $12 = HEAP32[$9>>2]|0;
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  FUNCTION_TABLE_vi[$14 & 1023]($9);
  return;
 }
 $15 = ($9|0)==(0|0);
 if ($15) {
  return;
 }
 $16 = HEAP32[$9>>2]|0;
 $17 = ((($16)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 FUNCTION_TABLE_vi[$18 & 1023]($9);
 return;
}
function __ZN14AlphaAnimationD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3004);
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __THREW__ = 0;
  invoke_vi(525,($2|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $6 = ___cxa_find_matching_catch_3(0|0)|0;
   $7 = tempRet0;
   ___clang_call_terminate($6);
   // unreachable;
  }
 }
 HEAP32[$0>>2] = (2960);
 $8 = ((($0)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 16|0);
 $11 = ($9|0)==($10|0);
 if ($11) {
  $12 = HEAP32[$9>>2]|0;
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  FUNCTION_TABLE_vi[$14 & 1023]($9);
  __ZdlPv($0);
  return;
 }
 $15 = ($9|0)==(0|0);
 if ($15) {
  __ZdlPv($0);
  return;
 }
 $16 = HEAP32[$9>>2]|0;
 $17 = ((($16)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 FUNCTION_TABLE_vi[$18 & 1023]($9);
 __ZdlPv($0);
 return;
}
function __ZN14AlphaAnimation4stopEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __ZN6Object7releaseEv($2);
  HEAP32[$1>>2] = 0;
 }
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  return;
 }
 $7 = ((($0)) + 8|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 40|0);
 HEAP32[$8>>2] = 0;
 HEAP32[$4>>2] = 0;
 return;
}
function __ZN14AlphaAnimation5applyEf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN4View8setAlphaEf($3,$1);
 return;
}
function __ZN17DelegateAnimationD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3048);
 $1 = ((($0)) + 96|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 80|0);
 $4 = ($2|0)==($3|0);
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_vi[$7 & 1023]($2);
 } else {
  $8 = ($2|0)==(0|0);
  if (!($8)) {
   $9 = HEAP32[$2>>2]|0;
   $10 = ((($9)) + 20|0);
   $11 = HEAP32[$10>>2]|0;
   FUNCTION_TABLE_vi[$11 & 1023]($2);
  }
 }
 HEAP32[$0>>2] = (2960);
 $12 = ((($0)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 16|0);
 $15 = ($13|0)==($14|0);
 if ($15) {
  $16 = HEAP32[$13>>2]|0;
  $17 = ((($16)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_vi[$18 & 1023]($13);
  return;
 }
 $19 = ($13|0)==(0|0);
 if ($19) {
  return;
 }
 $20 = HEAP32[$13>>2]|0;
 $21 = ((($20)) + 20|0);
 $22 = HEAP32[$21>>2]|0;
 FUNCTION_TABLE_vi[$22 & 1023]($13);
 return;
}
function __ZN17DelegateAnimationD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3048);
 $1 = ((($0)) + 96|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 80|0);
 $4 = ($2|0)==($3|0);
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_vi[$7 & 1023]($2);
 } else {
  $8 = ($2|0)==(0|0);
  if (!($8)) {
   $9 = HEAP32[$2>>2]|0;
   $10 = ((($9)) + 20|0);
   $11 = HEAP32[$10>>2]|0;
   FUNCTION_TABLE_vi[$11 & 1023]($2);
  }
 }
 HEAP32[$0>>2] = (2960);
 $12 = ((($0)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 16|0);
 $15 = ($13|0)==($14|0);
 if ($15) {
  $16 = HEAP32[$13>>2]|0;
  $17 = ((($16)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_vi[$18 & 1023]($13);
  __ZdlPv($0);
  return;
 }
 $19 = ($13|0)==(0|0);
 if ($19) {
  __ZdlPv($0);
  return;
 }
 $20 = HEAP32[$13>>2]|0;
 $21 = ((($20)) + 20|0);
 $22 = HEAP32[$21>>2]|0;
 FUNCTION_TABLE_vi[$22 & 1023]($13);
 __ZdlPv($0);
 return;
}
function __ZN17DelegateAnimation5applyEf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAPF32[$2>>2] = $1;
 $3 = ((($0)) + 96|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (___cxa_allocate_exception(4)|0);
  HEAP32[$6>>2] = (2824);
  ___cxa_throw(($6|0),(272|0),(118|0));
  // unreachable;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = ((($7)) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_vii[$9 & 1023]($4,$2);
  STACKTOP = sp;return;
 }
}
function __ZN9AnimationC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev($0);
 HEAP32[$0>>2] = (2960);
 $1 = ((($0)) + 32|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 60|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 64|0);
 HEAP32[$3>>2] = 597;
 $4 = ((($0)) + 68|0);
 HEAPF32[$4>>2] = 0.0;
 $5 = ((($0)) + 72|0);
 HEAPF32[$5>>2] = 1.0;
 return;
}
function __Z6linearffff($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $4 = 0.0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $0 / $3;
 $5 = $4 * $2;
 $6 = $5 + $1;
 return (+$6);
}
function __ZN14AlphaAnimationC2EP4Viewf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev($0);
 $3 = ((($0)) + 32|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 60|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 64|0);
 HEAP32[$5>>2] = 597;
 $6 = ((($0)) + 68|0);
 HEAPF32[$6>>2] = 0.0;
 $7 = ((($0)) + 72|0);
 HEAPF32[$7>>2] = 1.0;
 HEAP32[$0>>2] = (3004);
 $8 = ((($0)) + 76|0);
 HEAP32[$8>>2] = $1;
 $9 = ($1|0)==(0|0);
 if ($9) {
  $12 = ((($1)) + 308|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$6>>2] = $13;
  HEAPF32[$7>>2] = $2;
  return;
 }
 __THREW__ = 0;
 invoke_vi(526,($1|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  $12 = ((($1)) + 308|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$6>>2] = $13;
  HEAPF32[$7>>2] = $2;
  return;
 }
 $14 = ___cxa_find_matching_catch_2()|0;
 $15 = tempRet0;
 HEAP32[$0>>2] = (2960);
 $16 = HEAP32[$3>>2]|0;
 $17 = ((($0)) + 16|0);
 $18 = ($16|0)==($17|0);
 if ($18) {
  $19 = HEAP32[$16>>2]|0;
  $20 = ((($19)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_vi[$21 & 1023]($16);
  ___resumeException($14|0);
  // unreachable;
 }
 $22 = ($16|0)==(0|0);
 if ($22) {
  ___resumeException($14|0);
  // unreachable;
 }
 $23 = HEAP32[$16>>2]|0;
 $24 = ((($23)) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 FUNCTION_TABLE_vi[$25 & 1023]($16);
 ___resumeException($14|0);
 // unreachable;
}
function __ZN6BitmapD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3092);
 $1 = ((($0)) + 8|0);
 HEAP32[$1>>2] = (3128);
 $2 = ((($0)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 __THREW__ = 0;
 invoke_vii(598,1,($2|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch_3(0|0)|0;
  $8 = tempRet0;
  ___clang_call_terminate($7);
  // unreachable;
 } else {
  return;
 }
}
function __ZN6BitmapD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3092);
 $1 = ((($0)) + 8|0);
 HEAP32[$1>>2] = (3128);
 $2 = ((($0)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  __ZdlPv($0);
  return;
 }
 __THREW__ = 0;
 invoke_vii(598,1,($2|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch_3(0|0)|0;
  $8 = tempRet0;
  ___clang_call_terminate($7);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZN6Bitmap4bindEv($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  _glGenTextures(1,($1|0));
  $$pre = HEAP32[$1>>2]|0;
  $6 = $$pre;
 } else {
  $6 = $2;
 }
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 _glBindTexture(($5|0),($6|0));
 $7 = ((($0)) + 37|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if (!($9)) {
  return;
 }
 $10 = HEAP32[$4>>2]|0;
 $11 = ((($0)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (+($12>>>0));
 _glTexParameterf(($10|0),10241,(+$13));
 $14 = HEAP32[$4>>2]|0;
 $15 = HEAP32[$11>>2]|0;
 $16 = (+($15>>>0));
 _glTexParameterf(($14|0),10240,(+$16));
 $17 = HEAP32[$4>>2]|0;
 _glTexParameteri(($17|0),10242,33071);
 $18 = HEAP32[$4>>2]|0;
 _glTexParameteri(($18|0),10243,33071);
 HEAP8[$7>>0] = 1;
 return;
}
function __ZN6Bitmap23readSelfFromKeyValueMapEPK11KeyValueMap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$05 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 24|0;
 $3 = sp + 12|0;
 $4 = sp;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $5 = ((($2)) + 11|0);
 HEAP8[$5>>0] = 1;
 HEAP8[$2>>0] = 119;
 $6 = ((($2)) + 1|0);
 HEAP8[$6>>0] = 0;
 __THREW__ = 0;
 $7 = (invoke_iii(599,($1|0),($2|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $32 = ___cxa_find_matching_catch_2()|0;
  $33 = tempRet0;
  $34 = HEAP8[$5>>0]|0;
  $35 = ($34<<24>>24)<(0);
  if ($35) {
   $36 = HEAP32[$2>>2]|0;
   __ZdlPv($36);
  }
  $$0 = $33;$$05 = $32;
  ___resumeException($$05|0);
  // unreachable;
 }
 $10 = ((($0)) + 12|0);
 HEAP32[$10>>2] = $7;
 $11 = HEAP8[$5>>0]|0;
 $12 = ($11<<24>>24)<(0);
 if ($12) {
  $13 = HEAP32[$2>>2]|0;
  __ZdlPv($13);
 }
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
 $14 = ((($3)) + 11|0);
 HEAP8[$14>>0] = 1;
 HEAP8[$3>>0] = 104;
 $15 = ((($3)) + 1|0);
 HEAP8[$15>>0] = 0;
 __THREW__ = 0;
 $16 = (invoke_iii(599,($1|0),($3|0))|0);
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $37 = ___cxa_find_matching_catch_2()|0;
  $38 = tempRet0;
  $39 = HEAP8[$14>>0]|0;
  $40 = ($39<<24>>24)<(0);
  if ($40) {
   $41 = HEAP32[$3>>2]|0;
   __ZdlPv($41);
  }
  $$0 = $38;$$05 = $37;
  ___resumeException($$05|0);
  // unreachable;
 }
 $19 = ((($0)) + 16|0);
 HEAP32[$19>>2] = $16;
 $20 = HEAP8[$14>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = HEAP32[$3>>2]|0;
  __ZdlPv($22);
 }
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
 $23 = ((($4)) + 11|0);
 HEAP8[$23>>0] = 1;
 HEAP8[$4>>0] = 102;
 $24 = ((($4)) + 1|0);
 HEAP8[$24>>0] = 0;
 __THREW__ = 0;
 $25 = (invoke_iii(599,($1|0),($4|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $42 = ___cxa_find_matching_catch_2()|0;
  $43 = tempRet0;
  $44 = HEAP8[$23>>0]|0;
  $45 = ($44<<24>>24)<(0);
  if ($45) {
   $46 = HEAP32[$4>>2]|0;
   __ZdlPv($46);
  }
  $$0 = $43;$$05 = $42;
  ___resumeException($$05|0);
  // unreachable;
 } else {
  $28 = ((($0)) + 20|0);
  HEAP32[$28>>2] = $25;
  $29 = HEAP8[$23>>0]|0;
  $30 = ($29<<24>>24)<(0);
  if (!($30)) {
   STACKTOP = sp;return;
  }
  $31 = HEAP32[$4>>2]|0;
  __ZdlPv($31);
  STACKTOP = sp;return;
 }
}
function __ZN6Bitmap22writeSelfToKeyValueMapEP11KeyValueMap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$05 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 24|0;
 $3 = sp + 12|0;
 $4 = sp;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $5 = ((($2)) + 11|0);
 HEAP8[$5>>0] = 1;
 HEAP8[$2>>0] = 119;
 $6 = ((($2)) + 1|0);
 HEAP8[$6>>0] = 0;
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 __THREW__ = 0;
 invoke_viii(600,($1|0),($2|0),($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $32 = ___cxa_find_matching_catch_2()|0;
  $33 = tempRet0;
  $34 = HEAP8[$5>>0]|0;
  $35 = ($34<<24>>24)<(0);
  if ($35) {
   $36 = HEAP32[$2>>2]|0;
   __ZdlPv($36);
  }
  $$0 = $33;$$05 = $32;
  ___resumeException($$05|0);
  // unreachable;
 }
 $11 = HEAP8[$5>>0]|0;
 $12 = ($11<<24>>24)<(0);
 if ($12) {
  $13 = HEAP32[$2>>2]|0;
  __ZdlPv($13);
 }
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
 $14 = ((($3)) + 11|0);
 HEAP8[$14>>0] = 1;
 HEAP8[$3>>0] = 104;
 $15 = ((($3)) + 1|0);
 HEAP8[$15>>0] = 0;
 $16 = ((($0)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 __THREW__ = 0;
 invoke_viii(600,($1|0),($3|0),($17|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $37 = ___cxa_find_matching_catch_2()|0;
  $38 = tempRet0;
  $39 = HEAP8[$14>>0]|0;
  $40 = ($39<<24>>24)<(0);
  if ($40) {
   $41 = HEAP32[$3>>2]|0;
   __ZdlPv($41);
  }
  $$0 = $38;$$05 = $37;
  ___resumeException($$05|0);
  // unreachable;
 }
 $20 = HEAP8[$14>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = HEAP32[$3>>2]|0;
  __ZdlPv($22);
 }
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
 $23 = ((($4)) + 11|0);
 HEAP8[$23>>0] = 1;
 HEAP8[$4>>0] = 102;
 $24 = ((($4)) + 1|0);
 HEAP8[$24>>0] = 0;
 $25 = ((($0)) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 __THREW__ = 0;
 invoke_viii(600,($1|0),($4|0),($26|0));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $42 = ___cxa_find_matching_catch_2()|0;
  $43 = tempRet0;
  $44 = HEAP8[$23>>0]|0;
  $45 = ($44<<24>>24)<(0);
  if ($45) {
   $46 = HEAP32[$4>>2]|0;
   __ZdlPv($46);
  }
  $$0 = $43;$$05 = $42;
  ___resumeException($$05|0);
  // unreachable;
 } else {
  $29 = HEAP8[$23>>0]|0;
  $30 = ($29<<24>>24)<(0);
  if (!($30)) {
   STACKTOP = sp;return;
  }
  $31 = HEAP32[$4>>2]|0;
  __ZdlPv($31);
  STACKTOP = sp;return;
 }
}
function __ZThn8_N6Bitmap23readSelfFromKeyValueMapEPK11KeyValueMap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + -8|0);
 __ZN6Bitmap23readSelfFromKeyValueMapEPK11KeyValueMap($2,$1);
 return;
}
function __ZThn8_N6Bitmap22writeSelfToKeyValueMapEP11KeyValueMap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + -8|0);
 __ZN6Bitmap22writeSelfToKeyValueMapEP11KeyValueMap($2,$1);
 return;
}
function __ZN6BitmapC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev($0);
 $1 = ((($0)) + 8|0);
 HEAP32[$0>>2] = (3092);
 HEAP32[$1>>2] = (3128);
 $2 = ((($0)) + 24|0);
 HEAP32[$2>>2] = 9729;
 $3 = ((($0)) + 28|0);
 HEAP32[$3>>2] = 3553;
 return;
}
function __ZN6BitmapC2Eiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev($0);
 $4 = ((($0)) + 8|0);
 HEAP32[$0>>2] = (3092);
 HEAP32[$4>>2] = (3128);
 $5 = ((($0)) + 24|0);
 HEAP32[$5>>2] = 9729;
 $6 = ((($0)) + 28|0);
 HEAP32[$6>>2] = 3553;
 $7 = ((($0)) + 12|0);
 HEAP32[$7>>2] = $1;
 $8 = ((($0)) + 16|0);
 HEAP32[$8>>2] = $2;
 $9 = ((($0)) + 20|0);
 HEAP32[$9>>2] = $3;
 return;
}
function __ZN6Bitmap8hasAlphaEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(2);
 return ($3|0);
}
function __ZN6Bitmap11sizeInBytesEv($0) {
 $0 = $0|0;
 var $$0$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = Math_imul($4, $2)|0;
 $6 = ((($0)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 switch ($7|0) {
 case 3: case 1:  {
  $$0$i = 4;
  break;
 }
 case 2:  {
  $$0$i = 2;
  break;
 }
 case 4:  {
  $$0$i = 1;
  break;
 }
 default: {
  ___assert_fail((22544|0),(12284|0),97,(12329|0));
  // unreachable;
 }
 }
 $8 = Math_imul($5, $$0$i)|0;
 return ($8|0);
}
function __ZN4FontD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3144);
 $1 = ((($0)) + 24|0);
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeIDi6ObjPtrI5GlyphEEENS_19__map_value_compareIDiS5_NS_4lessIDiEELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE($1,$3);
 $4 = ((($0)) + 8|0);
 $5 = ((($4)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$4>>2]|0;
 __ZdlPv($8);
 return;
}
function __ZN4FontD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3144);
 $1 = ((($0)) + 24|0);
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeIDi6ObjPtrI5GlyphEEENS_19__map_value_compareIDiS5_NS_4lessIDiEELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE($1,$3);
 $4 = ((($0)) + 8|0);
 $5 = ((($4)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if (!($7)) {
  __ZdlPv($0);
  return;
 }
 $8 = HEAP32[$4>>2]|0;
 __ZdlPv($8);
 __ZdlPv($0);
 return;
}
function __ZNSt3__26__treeINS_12__value_typeIDi6ObjPtrI5GlyphEEENS_19__map_value_compareIDiS5_NS_4lessIDiEELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeIDi6ObjPtrI5GlyphEEENS_19__map_value_compareIDiS5_NS_4lessIDiEELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE($0,$3);
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeIDi6ObjPtrI5GlyphEEENS_19__map_value_compareIDiS5_NS_4lessIDiEELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE($0,$5);
 $6 = ((($1)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  __THREW__ = 0;
  invoke_vi(525,($7|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $11 = ___cxa_find_matching_catch_3(0|0)|0;
   $12 = tempRet0;
   ___clang_call_terminate($11);
   // unreachable;
  }
 }
 __ZdlPv($1);
 return;
}
function __GLOBAL__sub_I_font_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[7279] = 0;
 (___cxa_atexit((601|0),(29116|0),(___dso_handle|0))|0);
 return;
}
function __ZN6ObjPtrI5AtlasED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_3(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  return;
 }
}
function __ZN4FontC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev($0);
 HEAP32[$0>>2] = (3144);
 $3 = ((($0)) + 8|0);
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
 $4 = ((($0)) + 24|0);
 $5 = ((($0)) + 28|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 32|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 28|0);
 HEAP32[$4>>2] = $7;
 __THREW__ = 0;
 (invoke_iii(563,($3|0),($1|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  $10 = ((($0)) + 20|0);
  HEAPF32[$10>>2] = $2;
  return;
 }
 $11 = ___cxa_find_matching_catch_2()|0;
 $12 = tempRet0;
 $13 = HEAP32[$7>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeIDi6ObjPtrI5GlyphEEENS_19__map_value_compareIDiS5_NS_4lessIDiEELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE($4,$13);
 $14 = ((($3)) + 11|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)<(0);
 if (!($16)) {
  ___resumeException($11|0);
  // unreachable;
 }
 $17 = HEAP32[$3>>2]|0;
 __ZdlPv($17);
 ___resumeException($11|0);
 // unreachable;
}
function __ZN4Font8getGlyphEDi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$ph$lcssa$i$i$i = 0, $$0$ph12$i$i$i = 0, $$07$ph11$i$i$i = 0, $$079$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp;
 $4 = HEAP8[31703]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  HEAP8[31703] = 1;
  $6 = (__ZN6ObjectnwEj(48)|0);
  __THREW__ = 0;
  invoke_viiii(602,($6|0),512,512,4);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $13 = ___cxa_find_matching_catch_2()|0;
   $14 = tempRet0;
   __ZdlPv($6);
   ___resumeException($13|0);
   // unreachable;
  }
  $9 = HEAP32[7279]|0;
  $10 = ($9|0)==($6|0);
  if (!($10)) {
   $11 = ($9|0)==(0|0);
   if (!($11)) {
    __ZN6Object7releaseEv($9);
   }
   HEAP32[7279] = $6;
   $12 = ($6|0)==(0|0);
   if (!($12)) {
    __ZN6Object6retainEv($6);
   }
  }
 }
 $15 = ((($0)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  $$0$ph12$i$i$i = $15;$$07$ph11$i$i$i = $16;
  L13: while(1) {
   $$079$i$i$i = $$07$ph11$i$i$i;
   while(1) {
    $18 = ((($$079$i$i$i)) + 16|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19>>>0)<($1>>>0);
    if (!($20)) {
     break;
    }
    $23 = ((($$079$i$i$i)) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==(0|0);
    if ($25) {
     $$0$ph$lcssa$i$i$i = $$0$ph12$i$i$i;
     break L13;
    } else {
     $$079$i$i$i = $24;
    }
   }
   $21 = HEAP32[$$079$i$i$i>>2]|0;
   $22 = ($21|0)==(0|0);
   if ($22) {
    $$0$ph$lcssa$i$i$i = $$079$i$i$i;
    break;
   } else {
    $$0$ph12$i$i$i = $$079$i$i$i;$$07$ph11$i$i$i = $21;
   }
  }
  $26 = ($$0$ph$lcssa$i$i$i|0)==($15|0);
  if (!($26)) {
   $27 = ((($$0$ph$lcssa$i$i$i)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28>>>0)>($1>>>0);
   if (!($29)) {
    $30 = ((($$0$ph$lcssa$i$i$i)) + 20|0);
    $31 = HEAP32[$30>>2]|0;
    $$0 = $31;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $32 = HEAP32[$0>>2]|0;
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[7279]|0;
 $36 = (FUNCTION_TABLE_iiii[$34 & 1023]($0,$1,$35)|0);
 $37 = ($36|0)==(0|0);
 if ($37) {
  ___assert_fail((17957|0),(12352|0),41,(12395|0));
  // unreachable;
 }
 $38 = $36;
 HEAP32[$3>>2] = $1;
 $39 = ((($3)) + 4|0);
 HEAP32[$39>>2] = $38;
 $40 = ((($0)) + 24|0);
 __ZNSt3__26__treeINS_12__value_typeIDi6ObjPtrI5GlyphEEENS_19__map_value_compareIDiS5_NS_4lessIDiEELb1EEENS_9allocatorIS5_EEE25__emplace_unique_key_argsIDiJNS_4pairIDiPS3_EEEEENSE_INS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEEiEEbEERKT_DpOT0_($2,$40,$3,$3);
 $$0 = $36;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__26__treeINS_12__value_typeIDi6ObjPtrI5GlyphEEENS_19__map_value_compareIDiS5_NS_4lessIDiEELb1EEENS_9allocatorIS5_EEE25__emplace_unique_key_argsIDiJNS_4pairIDiPS3_EEEEENSE_INS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEEiEEbEERKT_DpOT0_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$i = 0, $$0$ph$i = 0, $$019 = 0, $$020 = 0, $$024$i = 0, $$025$i = 0, $$in$i = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $$019 = $4;$$025$i = $4;
  } else {
   $7 = ((($1)) + 4|0);
   $8 = HEAP32[$2>>2]|0;
   $$0$i = $7;$$024$i = $5;
   while(1) {
    $9 = ((($$024$i)) + 16|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($8>>>0)<($10>>>0);
    if ($11) {
     $12 = HEAP32[$$024$i>>2]|0;
     $13 = ($12|0)==(0|0);
     if ($13) {
      label = 6;
      break;
     } else {
      $$0$ph$i = $$024$i;$$in$i = $12;
     }
    } else {
     $14 = ($10>>>0)<($8>>>0);
     if (!($14)) {
      label = 10;
      break;
     }
     $15 = ((($$024$i)) + 4|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)==(0|0);
     if ($17) {
      label = 9;
      break;
     } else {
      $$0$ph$i = $15;$$in$i = $16;
     }
    }
    $$0$i = $$0$ph$i;$$024$i = $$in$i;
   }
   if ((label|0) == 6) {
    $$019 = $$024$i;$$025$i = $$024$i;
    break;
   }
   else if ((label|0) == 9) {
    $$019 = $$024$i;$$025$i = $15;
    break;
   }
   else if ((label|0) == 10) {
    $$019 = $$024$i;$$025$i = $$0$i;
    break;
   }
  }
 } while(0);
 $18 = HEAP32[$$025$i>>2]|0;
 $19 = ($18|0)==(0|0);
 if (!($19)) {
  $$0 = $18;$$020 = 0;
  $43 = $$0;
  HEAP32[$0>>2] = $43;
  $44 = ((($0)) + 4|0);
  HEAP8[$44>>0] = $$020;
  return;
 }
 $20 = (__Znwj(24)|0);
 $21 = ((($20)) + 16|0);
 $22 = HEAP32[$3>>2]|0;
 HEAP32[$21>>2] = $22;
 $23 = ((($3)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($20)) + 20|0);
 HEAP32[$25>>2] = $24;
 $26 = ($24|0)==(0|0);
 if (!($26)) {
  __THREW__ = 0;
  invoke_vi(526,($24|0));
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if ($28) {
   $29 = ___cxa_find_matching_catch_2()|0;
   $30 = tempRet0;
   __ZdlPv($20);
   ___resumeException($29|0);
   // unreachable;
  }
 }
 HEAP32[$20>>2] = 0;
 $31 = ((($20)) + 4|0);
 HEAP32[$31>>2] = 0;
 $32 = ((($20)) + 8|0);
 HEAP32[$32>>2] = $$019;
 HEAP32[$$025$i>>2] = $20;
 $33 = HEAP32[$1>>2]|0;
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0|0);
 if ($35) {
  $39 = $20;
 } else {
  $36 = $34;
  HEAP32[$1>>2] = $36;
  $$pre$i = HEAP32[$$025$i>>2]|0;
  $39 = $$pre$i;
 }
 $37 = ((($1)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($38,$39);
 $40 = ((($1)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 1)|0;
 HEAP32[$40>>2] = $42;
 $$0 = $20;$$020 = 1;
 $43 = $$0;
 HEAP32[$0>>2] = $43;
 $44 = ((($0)) + 4|0);
 HEAP8[$44>>0] = $$020;
 return;
}
function __ZN5GlyphC2EP4FontDit($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev($0);
 HEAP32[$0>>2] = (3164);
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = $2;
 return;
}
function __ZN5GlyphD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __Z11VERTEX_Makeffffj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$0>>2] = $1;
 $6 = ((($0)) + 4|0);
 HEAPF32[$6>>2] = $2;
 $7 = ((($0)) + 8|0);
 HEAPF32[$7>>2] = $3;
 $8 = ((($0)) + 12|0);
 HEAPF32[$8>>2] = $4;
 $9 = $5 >>> 16;
 $10 = $5 & -16711936;
 $11 = $9 & 255;
 $12 = $11 | $10;
 $13 = $5 << 16;
 $14 = $13 & 16711680;
 $15 = $12 | $14;
 $16 = ((($0)) + 16|0);
 HEAP32[$16>>2] = $15;
 return;
}
function __Z12QUADFromRECTRK4RECTj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$024$0$$sroa_idx = 0, $$sroa$043$0$$sroa_idx = 0, $$sroa$4$0$$sroa_idx12 = 0, $$sroa$426$0$$sroa_idx27 = 0, $$sroa$445$0$$sroa_idx46 = 0, $$sroa$464$0$$sroa_idx65 = 0, $$sroa$5$0$$sroa_idx14 = 0, $$sroa$529$0$$sroa_idx30 = 0, $$sroa$548$0$$sroa_idx49 = 0, $$sroa$567$0$$sroa_idx68 = 0, $$sroa$6$0$$sroa_idx16 = 0, $$sroa$632$0$$sroa_idx33 = 0, $$sroa$651$0$$sroa_idx52 = 0, $$sroa$670$0$$sroa_idx71 = 0, $$sroa$7$0$$sroa_idx18 = 0, $$sroa$735$0$$sroa_idx36 = 0, $$sroa$754$0$$sroa_idx55 = 0, $$sroa$773$0$$sroa_idx74 = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAPU8[$1>>0]|(HEAPU8[$1+1>>0]<<8)|(HEAPU8[$1+2>>0]<<16)|(HEAPU8[$1+3>>0]<<24);
 $4 = ((($1)) + 4|0);
 $5 = HEAPU8[$4>>0]|(HEAPU8[$4+1>>0]<<8)|(HEAPU8[$4+2>>0]<<16)|(HEAPU8[$4+3>>0]<<24);
 $6 = $2 >>> 16;
 $7 = $2 & -16711936;
 $8 = $6 & 255;
 $9 = $8 | $7;
 $10 = $2 << 16;
 $11 = $10 & 16711680;
 $12 = $9 | $11;
 HEAP32[$0>>2] = $3;
 $$sroa$464$0$$sroa_idx65 = ((($0)) + 4|0);
 HEAP32[$$sroa$464$0$$sroa_idx65>>2] = $5;
 $$sroa$567$0$$sroa_idx68 = ((($0)) + 8|0);
 HEAPF32[$$sroa$567$0$$sroa_idx68>>2] = 0.0;
 $$sroa$670$0$$sroa_idx71 = ((($0)) + 12|0);
 HEAPF32[$$sroa$670$0$$sroa_idx71>>2] = 0.0;
 $$sroa$773$0$$sroa_idx74 = ((($0)) + 16|0);
 HEAP32[$$sroa$773$0$$sroa_idx74>>2] = $12;
 $13 = (HEAP32[tempDoublePtr>>2]=$3,+HEAPF32[tempDoublePtr>>2]);
 $14 = ((($1)) + 8|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$14>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$14+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$14+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$14+3>>0];$15 = +HEAPF32[tempDoublePtr>>2];
 $16 = $13 + $15;
 $$sroa$043$0$$sroa_idx = ((($0)) + 32|0);
 HEAPF32[$$sroa$043$0$$sroa_idx>>2] = $16;
 $$sroa$445$0$$sroa_idx46 = ((($0)) + 36|0);
 HEAP32[$$sroa$445$0$$sroa_idx46>>2] = $5;
 $$sroa$548$0$$sroa_idx49 = ((($0)) + 40|0);
 HEAPF32[$$sroa$548$0$$sroa_idx49>>2] = 1.0;
 $$sroa$651$0$$sroa_idx52 = ((($0)) + 44|0);
 HEAPF32[$$sroa$651$0$$sroa_idx52>>2] = 0.0;
 $$sroa$754$0$$sroa_idx55 = ((($0)) + 48|0);
 HEAP32[$$sroa$754$0$$sroa_idx55>>2] = $12;
 $17 = (HEAP32[tempDoublePtr>>2]=$5,+HEAPF32[tempDoublePtr>>2]);
 $18 = ((($1)) + 12|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$18>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$18+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$18+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$18+3>>0];$19 = +HEAPF32[tempDoublePtr>>2];
 $20 = $17 + $19;
 $$sroa$024$0$$sroa_idx = ((($0)) + 64|0);
 HEAP32[$$sroa$024$0$$sroa_idx>>2] = $3;
 $$sroa$426$0$$sroa_idx27 = ((($0)) + 68|0);
 HEAPF32[$$sroa$426$0$$sroa_idx27>>2] = $20;
 $$sroa$529$0$$sroa_idx30 = ((($0)) + 72|0);
 HEAPF32[$$sroa$529$0$$sroa_idx30>>2] = 0.0;
 $$sroa$632$0$$sroa_idx33 = ((($0)) + 76|0);
 HEAPF32[$$sroa$632$0$$sroa_idx33>>2] = 1.0;
 $$sroa$735$0$$sroa_idx36 = ((($0)) + 80|0);
 HEAP32[$$sroa$735$0$$sroa_idx36>>2] = $12;
 $$sroa$0$0$$sroa_idx = ((($0)) + 96|0);
 HEAPF32[$$sroa$0$0$$sroa_idx>>2] = $16;
 $$sroa$4$0$$sroa_idx12 = ((($0)) + 100|0);
 HEAPF32[$$sroa$4$0$$sroa_idx12>>2] = $20;
 $$sroa$5$0$$sroa_idx14 = ((($0)) + 104|0);
 HEAPF32[$$sroa$5$0$$sroa_idx14>>2] = 1.0;
 $$sroa$6$0$$sroa_idx16 = ((($0)) + 108|0);
 HEAPF32[$$sroa$6$0$$sroa_idx16>>2] = 1.0;
 $$sroa$7$0$$sroa_idx18 = ((($0)) + 112|0);
 HEAP32[$$sroa$7$0$$sroa_idx18>>2] = $12;
 return;
}
function __ZNK4RECT4leftEv($0) {
 $0 = $0|0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[tempDoublePtr>>0]=HEAP8[$0>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$0+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$0+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$0+3>>0];$1 = +HEAPF32[tempDoublePtr>>2];
 return (+$1);
}
function __ZNK4RECT3topEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$1>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1+3>>0];$2 = +HEAPF32[tempDoublePtr>>2];
 return (+$2);
}
function __ZNK4RECT5rightEv($0) {
 $0 = $0|0;
 var $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[tempDoublePtr>>0]=HEAP8[$0>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$0+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$0+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$0+3>>0];$1 = +HEAPF32[tempDoublePtr>>2];
 $2 = ((($0)) + 8|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$2>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$2+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$2+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$2+3>>0];$3 = +HEAPF32[tempDoublePtr>>2];
 $4 = $1 + $3;
 return (+$4);
}
function __ZNK4RECT6bottomEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$1>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1+3>>0];$2 = +HEAPF32[tempDoublePtr>>2];
 $3 = ((($0)) + 12|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$3>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$3+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$3+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$3+3>>0];$4 = +HEAPF32[tempDoublePtr>>2];
 $5 = $2 + $4;
 return (+$5);
}
function __Z10POINT_Makeff($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$0>>2] = $1;
 $3 = ((($0)) + 4|0);
 HEAPF32[$3>>2] = $2;
 return;
}
function __ZN6_POINT6equalsERS_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[tempDoublePtr>>0]=HEAP8[$0>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$0+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$0+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$0+3>>0];$2 = +HEAPF32[tempDoublePtr>>2];
 HEAP8[tempDoublePtr>>0]=HEAP8[$1>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1+3>>0];$3 = +HEAPF32[tempDoublePtr>>2];
 $4 = $2 == $3;
 if (!($4)) {
  $10 = 0;
  return ($10|0);
 }
 $5 = ((($0)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$5>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$5+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$5+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$5+3>>0];$6 = +HEAPF32[tempDoublePtr>>2];
 $7 = ((($1)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$7>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$7+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$7+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$7+3>>0];$8 = +HEAPF32[tempDoublePtr>>2];
 $9 = $6 == $8;
 $10 = $9;
 return ($10|0);
}
function __ZN6_POINTpLERKS_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[tempDoublePtr>>0]=HEAP8[$1>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1+3>>0];$2 = +HEAPF32[tempDoublePtr>>2];
 HEAP8[tempDoublePtr>>0]=HEAP8[$0>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$0+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$0+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$0+3>>0];$3 = +HEAPF32[tempDoublePtr>>2];
 $4 = $2 + $3;
 HEAPF32[tempDoublePtr>>2]=$4;HEAP8[$0>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$0+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$0+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$0+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $5 = ((($1)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$5>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$5+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$5+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$5+3>>0];$6 = +HEAPF32[tempDoublePtr>>2];
 $7 = ((($0)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$7>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$7+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$7+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$7+3>>0];$8 = +HEAPF32[tempDoublePtr>>2];
 $9 = $6 + $8;
 HEAPF32[tempDoublePtr>>2]=$9;HEAP8[$7>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$7+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$7+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$7+3>>0]=HEAP8[tempDoublePtr+3>>0];
 return ($0|0);
}
function __Z9SIZE_Makeff($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$0>>2] = $1;
 $3 = ((($0)) + 4|0);
 HEAPF32[$3>>2] = $2;
 return;
}
function __Z9RECT_leftRK4RECT($0) {
 $0 = $0|0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[tempDoublePtr>>0]=HEAP8[$0>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$0+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$0+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$0+3>>0];$1 = +HEAPF32[tempDoublePtr>>2];
 return (+$1);
}
function __Z8RECT_topRK4RECT($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$1>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1+3>>0];$2 = +HEAPF32[tempDoublePtr>>2];
 return (+$2);
}
function __Z10RECT_insetR4RECTff($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[tempDoublePtr>>0]=HEAP8[$0>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$0+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$0+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$0+3>>0];$3 = +HEAPF32[tempDoublePtr>>2];
 $4 = $3 + $1;
 HEAPF32[tempDoublePtr>>2]=$4;HEAP8[$0>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$0+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$0+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$0+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $5 = ((($0)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$5>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$5+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$5+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$5+3>>0];$6 = +HEAPF32[tempDoublePtr>>2];
 $7 = $6 + $2;
 HEAPF32[tempDoublePtr>>2]=$7;HEAP8[$5>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$5+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$5+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$5+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $8 = $1 * 2.0;
 $9 = ((($0)) + 8|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$9>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$9+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$9+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$9+3>>0];$10 = +HEAPF32[tempDoublePtr>>2];
 $11 = $10 - $8;
 HEAPF32[tempDoublePtr>>2]=$11;HEAP8[$9>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$9+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$9+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$9+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $12 = $2 * 2.0;
 $13 = ((($0)) + 12|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$13>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$13+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$13+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$13+3>>0];$14 = +HEAPF32[tempDoublePtr>>2];
 $15 = $14 - $12;
 HEAPF32[tempDoublePtr>>2]=$15;HEAP8[$13>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$13+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$13+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$13+3>>0]=HEAP8[tempDoublePtr+3>>0];
 return;
}
function __Z9RECT_Makeffff($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$0>>2] = $1;
 $5 = ((($0)) + 4|0);
 HEAPF32[$5>>2] = $2;
 $6 = ((($0)) + 8|0);
 HEAPF32[$6>>2] = $3;
 $7 = ((($0)) + 12|0);
 HEAPF32[$7>>2] = $4;
 return;
}
function __Z10RECT_unionRK4RECTS1_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[tempDoublePtr>>0]=HEAP8[$1>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1+3>>0];$3 = +HEAPF32[tempDoublePtr>>2];
 HEAP8[tempDoublePtr>>0]=HEAP8[$2>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$2+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$2+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$2+3>>0];$4 = +HEAPF32[tempDoublePtr>>2];
 $5 = (+_fminf($3,$4));
 HEAPF32[$0>>2] = $5;
 $6 = ((($1)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$6>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$6+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$6+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$6+3>>0];$7 = +HEAPF32[tempDoublePtr>>2];
 $8 = ((($2)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$8>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$8+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$8+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$8+3>>0];$9 = +HEAPF32[tempDoublePtr>>2];
 $10 = (+_fminf($7,$9));
 $11 = ((($0)) + 4|0);
 HEAPF32[$11>>2] = $10;
 $12 = ((($1)) + 8|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$12>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$12+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$12+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$12+3>>0];$13 = +HEAPF32[tempDoublePtr>>2];
 $14 = $3 + $13;
 $15 = ((($2)) + 8|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$15>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$15+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$15+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$15+3>>0];$16 = +HEAPF32[tempDoublePtr>>2];
 $17 = $4 + $16;
 $18 = (+_fmaxf($14,$17));
 $19 = $18 - $5;
 $20 = ((($0)) + 8|0);
 HEAPF32[$20>>2] = $19;
 $21 = ((($1)) + 12|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$21>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$21+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$21+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$21+3>>0];$22 = +HEAPF32[tempDoublePtr>>2];
 $23 = $7 + $22;
 $24 = ((($2)) + 12|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$24>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$24+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$24+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$24+3>>0];$25 = +HEAPF32[tempDoublePtr>>2];
 $26 = $9 + $25;
 $27 = (+_fmaxf($23,$26));
 $28 = $27 - $10;
 $29 = ((($0)) + 12|0);
 HEAPF32[$29>>2] = $28;
 return;
}
function __ZNK4RECT10intersectsERKS_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[tempDoublePtr>>0]=HEAP8[$0>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$0+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$0+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$0+3>>0];$2 = +HEAPF32[tempDoublePtr>>2];
 HEAP8[tempDoublePtr>>0]=HEAP8[$1>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1+3>>0];$3 = +HEAPF32[tempDoublePtr>>2];
 $4 = ((($1)) + 8|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$4>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$4+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$4+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$4+3>>0];$5 = +HEAPF32[tempDoublePtr>>2];
 $6 = $3 + $5;
 $7 = $2 < $6;
 if (!($7)) {
  $24 = 0;
  return ($24|0);
 }
 $8 = ((($0)) + 8|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$8>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$8+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$8+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$8+3>>0];$9 = +HEAPF32[tempDoublePtr>>2];
 $10 = $2 + $9;
 $11 = $3 < $10;
 if (!($11)) {
  $24 = 0;
  return ($24|0);
 }
 $12 = ((($0)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$12>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$12+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$12+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$12+3>>0];$13 = +HEAPF32[tempDoublePtr>>2];
 $14 = ((($1)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$14>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$14+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$14+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$14+3>>0];$15 = +HEAPF32[tempDoublePtr>>2];
 $16 = ((($1)) + 12|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$16>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$16+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$16+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$16+3>>0];$17 = +HEAPF32[tempDoublePtr>>2];
 $18 = $15 + $17;
 $19 = $13 < $18;
 if (!($19)) {
  $24 = 0;
  return ($24|0);
 }
 $20 = ((($0)) + 12|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$20>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$20+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$20+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$20+3>>0];$21 = +HEAPF32[tempDoublePtr>>2];
 $22 = $13 + $21;
 $23 = $15 < $22;
 $24 = $23;
 return ($24|0);
}
function __ZN4RECT13intersectWithERKS_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$sroa$09$0 = 0, $$sroa$10$0 = 0.0, $$sroa$15$0 = 0.0, $$sroa$612$0 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0;
 var $or$cond21 = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 $3 = ((($0)) + 4|0);
 $4 = HEAPU8[$3>>0]|(HEAPU8[$3+1>>0]<<8)|(HEAPU8[$3+2>>0]<<16)|(HEAPU8[$3+3>>0]<<24);
 $5 = (HEAP32[tempDoublePtr>>2]=$2,+HEAPF32[tempDoublePtr>>2]);
 $6 = ((($0)) + 8|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$6>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$6+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$6+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$6+3>>0];$7 = +HEAPF32[tempDoublePtr>>2];
 $8 = $5 + $7;
 $9 = (HEAP32[tempDoublePtr>>2]=$4,+HEAPF32[tempDoublePtr>>2]);
 $10 = ((($0)) + 12|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$10>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$10+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$10+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$10+3>>0];$11 = +HEAPF32[tempDoublePtr>>2];
 $12 = $9 + $11;
 $13 = HEAPU8[$1>>0]|(HEAPU8[$1+1>>0]<<8)|(HEAPU8[$1+2>>0]<<16)|(HEAPU8[$1+3>>0]<<24);
 $14 = ((($1)) + 4|0);
 $15 = HEAPU8[$14>>0]|(HEAPU8[$14+1>>0]<<8)|(HEAPU8[$14+2>>0]<<16)|(HEAPU8[$14+3>>0]<<24);
 $16 = (HEAP32[tempDoublePtr>>2]=$13,+HEAPF32[tempDoublePtr>>2]);
 $17 = ((($1)) + 8|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$17>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$17+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$17+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$17+3>>0];$18 = +HEAPF32[tempDoublePtr>>2];
 $19 = $16 + $18;
 $20 = (HEAP32[tempDoublePtr>>2]=$15,+HEAPF32[tempDoublePtr>>2]);
 $21 = ((($1)) + 12|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$21>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$21+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$21+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$21+3>>0];$22 = +HEAPF32[tempDoublePtr>>2];
 $23 = $20 + $22;
 $24 = $5 < $19;
 $25 = $16 < $8;
 $or$cond = $25 & $24;
 $26 = $9 < $23;
 $or$cond21 = $or$cond & $26;
 $27 = $20 < $12;
 $or$cond22 = $27 & $or$cond21;
 if (!($or$cond22)) {
  $$0 = 0;
  return ($$0|0);
 }
 $28 = $5 < $16;
 $$sroa$09$0 = $28 ? $13 : $2;
 $29 = $9 < $20;
 $$sroa$612$0 = $29 ? $15 : $4;
 $30 = $8 > $19;
 $$sroa$10$0 = $30 ? $19 : $8;
 $31 = $12 > $23;
 $$sroa$15$0 = $31 ? $23 : $12;
 $32 = (HEAP32[tempDoublePtr>>2]=$$sroa$09$0,+HEAPF32[tempDoublePtr>>2]);
 HEAP8[$0>>0]=$$sroa$09$0&255;HEAP8[$0+1>>0]=($$sroa$09$0>>8)&255;HEAP8[$0+2>>0]=($$sroa$09$0>>16)&255;HEAP8[$0+3>>0]=$$sroa$09$0>>24;
 $33 = (HEAP32[tempDoublePtr>>2]=$$sroa$612$0,+HEAPF32[tempDoublePtr>>2]);
 HEAP8[$3>>0]=$$sroa$612$0&255;HEAP8[$3+1>>0]=($$sroa$612$0>>8)&255;HEAP8[$3+2>>0]=($$sroa$612$0>>16)&255;HEAP8[$3+3>>0]=$$sroa$612$0>>24;
 $34 = $$sroa$10$0 - $32;
 HEAPF32[tempDoublePtr>>2]=$34;HEAP8[$6>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$6+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$6+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$6+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $35 = $$sroa$15$0 - $33;
 HEAPF32[tempDoublePtr>>2]=$35;HEAP8[$10>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$10+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$10+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$10+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $$0 = 1;
 return ($$0|0);
}
function __ZN4RECT7isEmptyEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$1>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1+3>>0];$2 = +HEAPF32[tempDoublePtr>>2];
 $3 = !($2 <= 0.0);
 if (!($3)) {
  $7 = 1;
  return ($7|0);
 }
 $4 = ((($0)) + 12|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$4>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$4+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$4+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$4+3>>0];$5 = +HEAPF32[tempDoublePtr>>2];
 $6 = $5 <= 0.0;
 $7 = $6;
 return ($7|0);
}
function __ZN4RECT8containsERK6_POINT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[tempDoublePtr>>0]=HEAP8[$1>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1+3>>0];$2 = +HEAPF32[tempDoublePtr>>2];
 HEAP8[tempDoublePtr>>0]=HEAP8[$0>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$0+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$0+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$0+3>>0];$3 = +HEAPF32[tempDoublePtr>>2];
 $4 = !($2 >= $3);
 if ($4) {
  $18 = 0;
  return ($18|0);
 }
 $5 = ((($0)) + 8|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$5>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$5+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$5+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$5+3>>0];$6 = +HEAPF32[tempDoublePtr>>2];
 $7 = $3 + $6;
 $8 = $2 < $7;
 if (!($8)) {
  $18 = 0;
  return ($18|0);
 }
 $9 = ((($1)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$9>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$9+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$9+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$9+3>>0];$10 = +HEAPF32[tempDoublePtr>>2];
 $11 = ((($0)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$11>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$11+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$11+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$11+3>>0];$12 = +HEAPF32[tempDoublePtr>>2];
 $13 = !($10 >= $12);
 if ($13) {
  $18 = 0;
  return ($18|0);
 }
 $14 = ((($0)) + 12|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$14>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$14+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$14+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$14+3>>0];$15 = +HEAPF32[tempDoublePtr>>2];
 $16 = $12 + $15;
 $17 = $10 < $16;
 $18 = $17;
 return ($18|0);
}
function __Z13RECT_containsR4RECTR6_POINT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[tempDoublePtr>>0]=HEAP8[$1>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1+3>>0];$2 = +HEAPF32[tempDoublePtr>>2];
 HEAP8[tempDoublePtr>>0]=HEAP8[$0>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$0+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$0+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$0+3>>0];$3 = +HEAPF32[tempDoublePtr>>2];
 $4 = !($2 >= $3);
 if ($4) {
  $18 = 0;
  return ($18|0);
 }
 $5 = ((($0)) + 8|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$5>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$5+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$5+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$5+3>>0];$6 = +HEAPF32[tempDoublePtr>>2];
 $7 = $3 + $6;
 $8 = $2 < $7;
 if (!($8)) {
  $18 = 0;
  return ($18|0);
 }
 $9 = ((($1)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$9>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$9+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$9+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$9+3>>0];$10 = +HEAPF32[tempDoublePtr>>2];
 $11 = ((($0)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$11>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$11+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$11+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$11+3>>0];$12 = +HEAPF32[tempDoublePtr>>2];
 $13 = !($10 >= $12);
 if ($13) {
  $18 = 0;
  return ($18|0);
 }
 $14 = ((($0)) + 12|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$14>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$14+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$14+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$14+3>>0];$15 = +HEAPF32[tempDoublePtr>>2];
 $16 = $12 + $15;
 $17 = $10 < $16;
 $18 = $17;
 return ($18|0);
}
function __Z10RECT_equalRK4RECTS1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP8[tempDoublePtr>>0]=HEAP8[$0>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$0+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$0+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$0+3>>0];$2 = +HEAPF32[tempDoublePtr>>2];
 HEAP8[tempDoublePtr>>0]=HEAP8[$1>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1+3>>0];$3 = +HEAPF32[tempDoublePtr>>2];
 $4 = $2 == $3;
 if (!($4)) {
  $20 = 0;
  return ($20|0);
 }
 $5 = ((($0)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$5>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$5+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$5+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$5+3>>0];$6 = +HEAPF32[tempDoublePtr>>2];
 $7 = ((($1)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$7>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$7+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$7+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$7+3>>0];$8 = +HEAPF32[tempDoublePtr>>2];
 $9 = $6 == $8;
 if (!($9)) {
  $20 = 0;
  return ($20|0);
 }
 $10 = ((($0)) + 8|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$10>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$10+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$10+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$10+3>>0];$11 = +HEAPF32[tempDoublePtr>>2];
 $12 = ((($1)) + 8|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$12>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$12+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$12+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$12+3>>0];$13 = +HEAPF32[tempDoublePtr>>2];
 $14 = $11 == $13;
 if (!($14)) {
  $20 = 0;
  return ($20|0);
 }
 $15 = ((($0)) + 12|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$15>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$15+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$15+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$15+3>>0];$16 = +HEAPF32[tempDoublePtr>>2];
 $17 = ((($1)) + 12|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$17>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$17+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$17+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$17+3>>0];$18 = +HEAPF32[tempDoublePtr>>2];
 $19 = $16 == $18;
 $20 = $19;
 return ($20|0);
}
function __ZN9GLProgram13findVariablesEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_glGetUniformLocation(($2|0),(13007|0))|0);
 $4 = ((($0)) + 20|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$1>>2]|0;
 $6 = (_glGetUniformLocation(($5|0),(13011|0))|0);
 $7 = ((($0)) + 44|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$1>>2]|0;
 $9 = (_glGetUniformLocation(($8|0),(13019|0))|0);
 $10 = ((($0)) + 28|0);
 HEAP32[$10>>2] = $9;
 return;
}
function __ZN9GLProgram3useEP6Window($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  HEAP8[$2>>0] = 1;
  $5 = HEAP32[$0>>2]|0;
  $6 = ((($5)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_vi[$7 & 1023]($0);
 }
 $8 = ((($1)) + 104|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9|0)==($11|0);
 if (!($12)) {
  HEAP32[$8>>2] = $11;
  _glUseProgram(($11|0));
 }
 $13 = ((($1)) + 120|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($0)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($14|0)==($16|0);
 if ($17) {
  return;
 }
 __ZN6Window15setVertexConfigEi($1,$16);
 return;
}
function __ZN9GLProgram8setAlphaEf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(-1);
 if (!($4)) {
  return;
 }
 $5 = ((($0)) + 32|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $6 != $1;
 if (!($7)) {
  return;
 }
 HEAPF32[$5>>2] = $1;
 $8 = ((($0)) + 36|0);
 HEAP8[$8>>0] = 1;
 return;
}
function __ZN9GLProgram16lazyLoadUniformsEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = ((($0)) + 52|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ((($5)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_vi[$7 & 1023]($1);
  HEAP8[$2>>0] = 0;
 }
 $8 = ((($0)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  return;
 }
 $11 = ((($0)) + 24|0);
 $12 = ((($0)) + 36|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)==(0);
 if ($14) {
  return;
 }
 $15 = HEAP32[$11>>2]|0;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 FUNCTION_TABLE_vi[$17 & 1023]($11);
 HEAP8[$12>>0] = 0;
 return;
}
function __ZN9GLProgram6setMvpERK7Matrix4($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 56|0);
 $3 = (_memcmp($1,$2,64)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 dest=$2; src=$1; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _glUniformMatrix4fv(($6|0),1,0,($1|0));
 return;
}
function __ZN9GLProgram11loadShadersEPKcS1_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = sp + 12|0;
 $5 = (__ZL10loadShaderjPKc(35633,$1)|0);
 $6 = (__ZL10loadShaderjPKc(35632,$2)|0);
 $7 = (_glCreateProgram()|0);
 $8 = ((($0)) + 12|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($0)) + 16|0);
 HEAP32[$9>>2] = 1;
 _glBindAttribLocation(($7|0),0,(12868|0));
 $10 = HEAP32[$8>>2]|0;
 _glBindAttribLocation(($10|0),1,(12878|0));
 $11 = HEAP32[$8>>2]|0;
 _glBindAttribLocation(($11|0),2,(12887|0));
 $12 = HEAP32[$8>>2]|0;
 _glAttachShader(($12|0),($5|0));
 $13 = HEAP32[$8>>2]|0;
 _glAttachShader(($13|0),($6|0));
 $14 = HEAP32[$8>>2]|0;
 _glLinkProgram(($14|0));
 HEAP32[$3>>2] = 0;
 $15 = HEAP32[$8>>2]|0;
 _glGetProgramiv(($15|0),35714,($3|0));
 $16 = HEAP32[$3>>2]|0;
 $17 = ($16|0)==(1);
 if ($17) {
  $$pre = HEAP32[$8>>2]|0;
  $phitmp = ($$pre|0)==(0);
  if (!($phitmp)) {
   $25 = HEAP32[$0>>2]|0;
   $26 = ((($25)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   FUNCTION_TABLE_vi[$27 & 1023]($0);
   (_glGetError()|0);
   STACKTOP = sp;return;
  }
 } else {
  HEAP32[$4>>2] = 0;
  $18 = HEAP32[$8>>2]|0;
  _glGetProgramiv(($18|0),35716,($4|0));
  $19 = HEAP32[$4>>2]|0;
  $20 = ($19|0)==(0);
  if (!($20)) {
   $21 = (_malloc($19)|0);
   $22 = ($21|0)==(0|0);
   if (!($22)) {
    $23 = HEAP32[$8>>2]|0;
    _glGetProgramInfoLog(($23|0),($19|0),(0|0),($21|0));
    HEAP32[$vararg_buffer>>2] = $21;
    (_printf(12894,$vararg_buffer)|0);
    _free($21);
   }
  }
  $24 = HEAP32[$8>>2]|0;
  _glDeleteProgram(($24|0));
  HEAP32[$8>>2] = 0;
 }
 (_printf(12922,$vararg_buffer1)|0);
 STACKTOP = sp;return;
}
function __ZL10loadShaderjPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$1 = 0, $$121 = 0, $$124 = 0, $$2 = 0, $$222 = 0, $$225 = 0, $$pre$phi29Z2D = 0, $$pre28 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr3 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = sp + 28|0;
 $3 = sp + 16|0;
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 HEAP32[$2>>2] = $1;
 $6 = (_glCreateShader(($0|0))|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $8 = (__Znwj(32)|0);
 HEAP32[$3>>2] = $8;
 $9 = ((($3)) + 8|0);
 HEAP32[$9>>2] = -2147483616;
 $10 = ((($3)) + 4|0);
 HEAP32[$10>>2] = 25;
 dest=$8; src=12948; stop=dest+25|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $11 = ((($8)) + 25|0);
 HEAP8[$11>>0] = 0;
 __THREW__ = 0;
 (invoke_iii(603,($3|0),($1|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  label = 12;
 } else {
  $14 = ((($3)) + 11|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)<(0);
  $17 = HEAP32[$3>>2]|0;
  $18 = $16 ? $17 : $3;
  HEAP32[$2>>2] = $18;
  __THREW__ = 0;
  invoke_viiii(604,($6|0),1,($2|0),(0|0));
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   label = 12;
  } else {
   __THREW__ = 0;
   invoke_vi(605,($6|0));
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    label = 12;
   } else {
    HEAP32[$4>>2] = 0;
    __THREW__ = 0;
    invoke_viii(606,($6|0),35713,($4|0));
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    L8: do {
     if ($24) {
      $37 = ___cxa_find_matching_catch_2()|0;
      $38 = tempRet0;
      $$121 = $38;$$124 = $37;
     } else {
      $25 = HEAP32[$4>>2]|0;
      $26 = ($25|0)==(0);
      L11: do {
       if ($26) {
        HEAP32[$5>>2] = 0;
        __THREW__ = 0;
        invoke_viii(606,($6|0),35716,($5|0));
        $27 = __THREW__; __THREW__ = 0;
        $28 = $27&1;
        do {
         if (!($28)) {
          $29 = HEAP32[$5>>2]|0;
          $30 = ($29|0)==(0);
          if ($30) {
           $$0 = $6;
          } else {
           $31 = (_malloc($29)|0);
           $32 = ($31|0)==(0|0);
           if (!($32)) {
            __THREW__ = 0;
            invoke_viiii(607,($6|0),($29|0),(0|0),($31|0));
            $33 = __THREW__; __THREW__ = 0;
            $34 = $33&1;
            if ($34) {
             break;
            }
            HEAP32[$vararg_buffer>>2] = $0;
            $vararg_ptr3 = ((($vararg_buffer)) + 4|0);
            HEAP32[$vararg_ptr3>>2] = $31;
            (_printf(12974,$vararg_buffer)|0);
            _free($31);
           }
           __THREW__ = 0;
           invoke_vi(608,($6|0));
           $39 = __THREW__; __THREW__ = 0;
           $40 = $39&1;
           if ($40) {
            break;
           } else {
            $$0 = 0;
           }
          }
          $$1 = $$0;
          break L11;
         }
        } while(0);
        $41 = ___cxa_find_matching_catch_2()|0;
        $42 = tempRet0;
        $$121 = $42;$$124 = $41;
        break L8;
       } else {
        $$1 = $6;
       }
      } while(0);
      $43 = HEAP8[$14>>0]|0;
      $44 = ($43<<24>>24)<(0);
      if ($44) {
       $45 = HEAP32[$3>>2]|0;
       __ZdlPv($45);
      }
      $$2 = $$1;
      STACKTOP = sp;return ($$2|0);
     }
    } while(0);
    $$222 = $$121;$$225 = $$124;$$pre$phi29Z2D = $14;
   }
  }
 }
 if ((label|0) == 12) {
  $35 = ___cxa_find_matching_catch_2()|0;
  $36 = tempRet0;
  $$pre28 = ((($3)) + 11|0);
  $$222 = $36;$$225 = $35;$$pre$phi29Z2D = $$pre28;
 }
 $46 = HEAP8[$$pre$phi29Z2D>>0]|0;
 $47 = ($46<<24>>24)<(0);
 if (!($47)) {
  ___resumeException($$225|0);
  // unreachable;
 }
 $48 = HEAP32[$3>>2]|0;
 __ZdlPv($48);
 ___resumeException($$225|0);
 // unreachable;
 return (0)|0;
}
function __ZN7Matrix49translateEfff($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0;
 var $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $5 * $1;
 $7 = +HEAPF32[$0>>2];
 $8 = $7 + $6;
 HEAPF32[$0>>2] = $8;
 $9 = ((($0)) + 28|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $10 * $1;
 $12 = ((($0)) + 16|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $13 + $11;
 HEAPF32[$12>>2] = $14;
 $15 = ((($0)) + 44|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $16 * $1;
 $18 = ((($0)) + 32|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $19 + $17;
 HEAPF32[$18>>2] = $20;
 $21 = ((($0)) + 60|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $22 * $1;
 $24 = ((($0)) + 48|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $25 + $23;
 HEAPF32[$24>>2] = $26;
 $27 = $5 * $2;
 $28 = ((($0)) + 4|0);
 $29 = +HEAPF32[$28>>2];
 $30 = $27 + $29;
 HEAPF32[$28>>2] = $30;
 $31 = $10 * $2;
 $32 = ((($0)) + 20|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $31 + $33;
 HEAPF32[$32>>2] = $34;
 $35 = $16 * $2;
 $36 = ((($0)) + 36|0);
 $37 = +HEAPF32[$36>>2];
 $38 = $35 + $37;
 HEAPF32[$36>>2] = $38;
 $39 = $22 * $2;
 $40 = ((($0)) + 52|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $39 + $41;
 HEAPF32[$40>>2] = $42;
 $43 = $5 * $3;
 $44 = ((($0)) + 8|0);
 $45 = +HEAPF32[$44>>2];
 $46 = $43 + $45;
 HEAPF32[$44>>2] = $46;
 $47 = $10 * $3;
 $48 = ((($0)) + 24|0);
 $49 = +HEAPF32[$48>>2];
 $50 = $47 + $49;
 HEAPF32[$48>>2] = $50;
 $51 = $16 * $3;
 $52 = ((($0)) + 40|0);
 $53 = +HEAPF32[$52>>2];
 $54 = $51 + $53;
 HEAPF32[$52>>2] = $54;
 $55 = $22 * $3;
 $56 = ((($0)) + 56|0);
 $57 = +HEAPF32[$56>>2];
 $58 = $55 + $57;
 HEAPF32[$56>>2] = $58;
 return ($0|0);
}
function __ZN8ItemPoolD2Ev($0) {
 $0 = $0|0;
 var $$023$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3208);
 $1 = ((($0)) + 24|0);
 $2 = ((($0)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = ((($0)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$6>>2]|0;
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = HEAP32[$8>>2]|0;
 HEAP32[$12>>2] = $10;
 HEAP32[$2>>2] = 0;
 $13 = ($6|0)==($1|0);
 if ($13) {
  return;
 } else {
  $$023$i$i = $6;
 }
 while(1) {
  $14 = ((($$023$i$i)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  __ZdlPv($$023$i$i);
  $16 = ($15|0)==($1|0);
  if ($16) {
   break;
  } else {
   $$023$i$i = $15;
  }
 }
 return;
}
function __ZN10QuadBufferD0Ev($0) {
 $0 = $0|0;
 var $$023$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3208);
 $1 = ((($0)) + 24|0);
 $2 = ((($0)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  __ZdlPv($0);
  return;
 }
 $5 = ((($0)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$6>>2]|0;
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = HEAP32[$8>>2]|0;
 HEAP32[$12>>2] = $10;
 HEAP32[$2>>2] = 0;
 $13 = ($6|0)==($1|0);
 if ($13) {
  __ZdlPv($0);
  return;
 } else {
  $$023$i$i$i = $6;
 }
 while(1) {
  $14 = ((($$023$i$i$i)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  __ZdlPv($$023$i$i$i);
  $16 = ($15|0)==($1|0);
  if ($16) {
   break;
  } else {
   $$023$i$i$i = $15;
  }
 }
 __ZdlPv($0);
 return;
}
function __ZN10QuadBuffer6resizeEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$030 = 0, $$pre = 0, $$pre$phi33Z2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN8ItemPool6resizeEi($0,$1);
 $4 = ($1*12)|0;
 $5 = (_malloc($4)|0);
 $6 = ($3|0)==(0);
 if ($6) {
  $$pre = ((($0)) + 36|0);
  $$pre$phi33Z2D = $$pre;
 } else {
  $7 = ($3*12)|0;
  $8 = ((($0)) + 36|0);
  $9 = HEAP32[$8>>2]|0;
  _memcpy(($5|0),($9|0),($7|0))|0;
  _free($9);
  $$pre$phi33Z2D = $8;
 }
 HEAP32[$$pre$phi33Z2D>>2] = $5;
 $10 = ($3|0)<($1|0);
 if ($10) {
  $$030 = $3;
 } else {
  __ZN10QuadBuffer6uploadEv($0);
  return;
 }
 while(1) {
  $11 = $$030 << 2;
  $12 = $11&65535;
  $13 = ($$030*6)|0;
  $14 = (($5) + ($13<<1)|0);
  HEAP16[$14>>1] = $12;
  $15 = $11 | 2;
  $16 = $15&65535;
  $17 = $13 | 1;
  $18 = (($5) + ($17<<1)|0);
  HEAP16[$18>>1] = $16;
  $19 = $11 | 3;
  $20 = $19&65535;
  $21 = (($13) + 2)|0;
  $22 = (($5) + ($21<<1)|0);
  HEAP16[$22>>1] = $20;
  $23 = (($13) + 3)|0;
  $24 = (($5) + ($23<<1)|0);
  HEAP16[$24>>1] = $12;
  $25 = (($13) + 4)|0;
  $26 = (($5) + ($25<<1)|0);
  HEAP16[$26>>1] = $20;
  $27 = $11 | 1;
  $28 = $27&65535;
  $29 = (($13) + 5)|0;
  $30 = (($5) + ($29<<1)|0);
  HEAP16[$30>>1] = $28;
  $31 = (($$030) + 1)|0;
  $exitcond = ($31|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$030 = $31;
  }
 }
 __ZN10QuadBuffer6uploadEv($0);
 return;
}
function __ZN8ItemPool6resizeEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $$sroa$027$0$$sroa$027$0$$sroa$0$0$copyload$i35 = 0, $$sroa$027$0$$sroa$027$0$2837 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = Math_imul($6, $1)|0;
 $8 = (_malloc($7)|0);
 $9 = ((($0)) + 24|0);
 $10 = ((($0)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11;
 $13 = ($12|0)==($9|0);
 $$pre = ((($0)) + 8|0);
 if (!($13)) {
  $$sroa$027$0$$sroa$027$0$$sroa$0$0$copyload$i35 = $12;$$sroa$027$0$$sroa$027$0$2837 = $11;
  while(1) {
   $31 = $$sroa$027$0$$sroa$027$0$2837;
   $32 = ((($31)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($33)) + 12|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = ($35<<24>>24)==(0);
   if (!($36)) {
    $37 = ((($33)) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = Math_imul($6, $38)|0;
    $40 = (($8) + ($39)|0);
    $41 = HEAP32[$$pre>>2]|0;
    $42 = (($41) + ($39)|0);
    $43 = ((($33)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = Math_imul($44, $6)|0;
    _memcpy(($40|0),($42|0),($45|0))|0;
   }
   $46 = ((($$sroa$027$0$$sroa$027$0$$sroa$0$0$copyload$i35)) + 4|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $47;
   $49 = ($48|0)==($9|0);
   if ($49) {
    break;
   } else {
    $$sroa$027$0$$sroa$027$0$$sroa$0$0$copyload$i35 = $48;$$sroa$027$0$$sroa$027$0$2837 = $47;
   }
  }
 }
 $14 = HEAP32[$$pre>>2]|0;
 _free($14);
 HEAP32[$$pre>>2] = $8;
 $15 = (__Znwj(20)|0);
 $16 = HEAP32[$2>>2]|0;
 $17 = ((($15)) + 16|0);
 HEAP32[$17>>2] = 0;
 HEAP32[$15>>2] = $0;
 $18 = ((($15)) + 4|0);
 HEAP32[$18>>2] = $16;
 $19 = ((($15)) + 8|0);
 HEAP32[$19>>2] = $4;
 $20 = ((($15)) + 12|0);
 HEAP8[$20>>0] = 0;
 $21 = $15;
 $22 = (__Znwj(12)|0);
 $23 = ((($22)) + 8|0);
 HEAP32[$23>>2] = $21;
 $24 = ((($22)) + 4|0);
 HEAP32[$24>>2] = $9;
 $25 = HEAP32[$9>>2]|0;
 HEAP32[$22>>2] = $25;
 $26 = ((($25)) + 4|0);
 HEAP32[$26>>2] = $22;
 HEAP32[$9>>2] = $22;
 $27 = ((($0)) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + 1)|0;
 HEAP32[$27>>2] = $29;
 $30 = $22;
 HEAP32[$17>>2] = $30;
 HEAP32[$2>>2] = $1;
 return;
}
function __ZN10QuadBuffer6uploadEv($0) {
 $0 = $0|0;
 var $$pre$i = 0, $$pre$phi$iZ2D = 0, $$pre1$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  _glGenBuffers(1,($1|0));
  $4 = ((($0)) + 44|0);
  _glGenBuffers(1,($4|0));
  $5 = HEAP32[$1>>2]|0;
  _glBindBuffer(34963,($5|0));
  $6 = HEAP32[$4>>2]|0;
  _glBindBuffer(34962,($6|0));
  $$pre$i = HEAP32[$1>>2]|0;
  $$pre$phi$iZ2D = $4;$7 = $$pre$i;
 } else {
  $$pre1$i = ((($0)) + 44|0);
  $$pre$phi$iZ2D = $$pre1$i;$7 = $2;
 }
 _glBindBuffer(34963,($7|0));
 $8 = HEAP32[$$pre$phi$iZ2D>>2]|0;
 _glBindBuffer(34962,($8|0));
 $9 = ((($0)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>(0);
 if (!($11)) {
  return;
 }
 $12 = HEAP32[$1>>2]|0;
 $13 = ($12|0)==(0);
 if ($13) {
  return;
 }
 $14 = ($10*12)|0;
 $15 = ((($0)) + 36|0);
 $16 = HEAP32[$15>>2]|0;
 _glBufferData(34963,($14|0),($16|0),35044);
 $17 = HEAP32[$9>>2]|0;
 $18 = $17 << 7;
 $19 = ((($0)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 _glBufferData(34962,($18|0),($20|0),35048);
 return;
}
function __ZN8ItemPoolD0Ev($0) {
 $0 = $0|0;
 var $$023$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3208);
 $1 = ((($0)) + 24|0);
 $2 = ((($0)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  __ZdlPv($0);
  return;
 }
 $5 = ((($0)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$6>>2]|0;
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = HEAP32[$8>>2]|0;
 HEAP32[$12>>2] = $10;
 HEAP32[$2>>2] = 0;
 $13 = ($6|0)==($1|0);
 if ($13) {
  __ZdlPv($0);
  return;
 } else {
  $$023$i$i$i = $6;
 }
 while(1) {
  $14 = ((($$023$i$i$i)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  __ZdlPv($$023$i$i$i);
  $16 = ($15|0)==($1|0);
  if ($16) {
   break;
  } else {
   $$023$i$i$i = $15;
  }
 }
 __ZdlPv($0);
 return;
}
function __ZN8ItemPool5allocEiPNS_5AllocE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$3 = 0, $$not = 0, $$pre = 0, $$pre$phi109Z2D = 0, $$pre$phiZ2D = 0, $$pre108 = 0, $$sroa$049$0$$sroa$049$0$5098 = 0, $$sroa$049$0$$sroa$049$0$5393 = 0, $$sroa$057$2111 = 0, $$sroa$057$3 = 0, $$sroa$speculated = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = ((($2)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 24|0);
  $9 = $7;
  $10 = ($9|0)==($8|0);
  if ($10) {
   $$pre$phiZ2D = $8;
  } else {
   $11 = $7;
   $12 = ((($11)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($13)) + 12|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = ($15<<24>>24)==(0);
   if ($16) {
    $17 = ((($13)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)<($1|0);
    if ($19) {
     $$pre$phiZ2D = $8;
    } else {
     $20 = ((($2)) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (($21) + ($1))|0;
     HEAP32[$20>>2] = $22;
     $23 = ((($13)) + 4|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (($24) + ($1))|0;
     HEAP32[$23>>2] = $25;
     $26 = HEAP32[$17>>2]|0;
     $27 = (($26) - ($1))|0;
     HEAP32[$17>>2] = $27;
     $28 = ($27|0)==(0);
     if (!($28)) {
      $$3 = $2;
      return ($$3|0);
     }
     $29 = ((($13)) + 16|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ((($30)) + 4|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = HEAP32[$30>>2]|0;
     $34 = ((($33)) + 4|0);
     HEAP32[$34>>2] = $32;
     $35 = HEAP32[$31>>2]|0;
     HEAP32[$35>>2] = $33;
     $36 = ((($0)) + 32|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = (($37) + -1)|0;
     HEAP32[$36>>2] = $38;
     __ZdlPv($30);
     __ZdlPv($13);
     $$3 = $2;
     return ($$3|0);
    }
   } else {
    $$pre$phiZ2D = $8;
   }
  }
 } else {
  $$pre = ((($0)) + 24|0);
  $$pre$phiZ2D = $$pre;
 }
 $39 = ((($0)) + 28|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $40;
 $42 = ($41|0)==($$pre$phiZ2D|0);
 L12: do {
  if ($42) {
   label = 16;
  } else {
   $$sroa$049$0$$sroa$049$0$5098 = $40;$$sroa$049$0$$sroa$049$0$5393 = $41;
   while(1) {
    $43 = $$sroa$049$0$$sroa$049$0$5098;
    $44 = ((($43)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 12|0);
    $47 = HEAP8[$46>>0]|0;
    $48 = ($47<<24>>24)==(0);
    if ($48) {
     $49 = ((($45)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (($50) - ($1))|0;
     $52 = ($51|0)>(-1);
     if ($52) {
      break;
     }
    }
    $74 = ((($$sroa$049$0$$sroa$049$0$5393)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $75;
    $77 = ($76|0)==($$pre$phiZ2D|0);
    if ($77) {
     label = 16;
     break L12;
    } else {
     $$sroa$049$0$$sroa$049$0$5098 = $75;$$sroa$049$0$$sroa$049$0$5393 = $76;
    }
   }
   $53 = ($51|0)==(0);
   if ($53) {
    $78 = $45;
    HEAP8[$46>>0] = 1;
    $79 = ($45|0)==(0|0);
    if ($79) {
     label = 16;
     break;
    } else {
     $$sroa$057$2111 = $78;
    }
   } else {
    $54 = (__Znwj(20)|0);
    $55 = ((($45)) + 4|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ((($54)) + 16|0);
    HEAP32[$57>>2] = 0;
    HEAP32[$54>>2] = $0;
    $58 = ((($54)) + 4|0);
    HEAP32[$58>>2] = $56;
    $59 = ((($54)) + 8|0);
    HEAP32[$59>>2] = $1;
    $60 = $54;
    $61 = ((($54)) + 12|0);
    HEAP8[$61>>0] = 1;
    $62 = (__Znwj(12)|0);
    HEAP32[$62>>2] = 0;
    $63 = ((($62)) + 8|0);
    HEAP32[$63>>2] = $60;
    $64 = HEAP32[$$sroa$049$0$$sroa$049$0$5393>>2]|0;
    $65 = ((($64)) + 4|0);
    HEAP32[$65>>2] = $62;
    HEAP32[$62>>2] = $64;
    HEAP32[$$sroa$049$0$$sroa$049$0$5393>>2] = $62;
    $66 = ((($62)) + 4|0);
    HEAP32[$66>>2] = $$sroa$049$0$$sroa$049$0$5393;
    $67 = ((($0)) + 32|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (($68) + 1)|0;
    HEAP32[$67>>2] = $69;
    HEAP32[$57>>2] = $62;
    $70 = HEAP32[$55>>2]|0;
    $71 = (($70) + ($1))|0;
    HEAP32[$55>>2] = $71;
    $72 = HEAP32[$49>>2]|0;
    $73 = (($72) - ($1))|0;
    HEAP32[$49>>2] = $73;
    $$sroa$057$2111 = $60;
   }
   $$pre108 = ((($0)) + 16|0);
   $$pre$phi109Z2D = $$pre108;$$sroa$057$3 = $$sroa$057$2111;
  }
 } while(0);
 if ((label|0) == 16) {
  $80 = HEAP32[$0>>2]|0;
  $81 = ((($80)) + 8|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ((($0)) + 16|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ((($0)) + 20|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($86|0)>($1|0);
  $$sroa$speculated = $87 ? $86 : $1;
  $88 = (($$sroa$speculated) + ($84))|0;
  FUNCTION_TABLE_vii[$82 & 1023]($0,$88);
  $89 = (__ZN8ItemPool5allocEiPNS_5AllocE($0,$1,0)|0);
  $90 = $89;
  $$pre$phi109Z2D = $83;$$sroa$057$3 = $90;
 }
 $91 = $$sroa$057$3;
 $92 = ((($91)) + 4|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ((($91)) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = (($95) + ($93))|0;
 $97 = HEAP32[$$pre$phi109Z2D>>2]|0;
 $98 = ($96|0)>($97|0);
 if ($98) {
  ___assert_fail((13059|0),(13092|0),58,(13141|0));
  // unreachable;
 }
 $$not = $3 ^ 1;
 $99 = ($91|0)==($2|0);
 $or$cond = $99 | $$not;
 if ($or$cond) {
  $$3 = $91;
  return ($$3|0);
 }
 $100 = HEAP32[$91>>2]|0;
 $101 = ((($100)) + 8|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ((($100)) + 12|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = Math_imul($104, $93)|0;
 $106 = (($102) + ($105)|0);
 $107 = HEAP32[$2>>2]|0;
 $108 = ((($107)) + 8|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ((($107)) + 12|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ((($2)) + 4|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = Math_imul($113, $111)|0;
 $115 = (($109) + ($114)|0);
 $116 = ((($2)) + 8|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = ((($0)) + 12|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = Math_imul($119, $117)|0;
 _memcpy(($106|0),($115|0),($120|0))|0;
 __ZN8ItemPool4freeEPNS_5AllocE($0,$2);
 $$3 = $91;
 return ($$3|0);
}
function __ZN8ItemPool4freeEPNS_5AllocE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$phi$trans$insert42 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 HEAP8[$2>>0] = 0;
 $3 = ((($1)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 24|0);
 $7 = $5;
 $8 = ($7|0)==($6|0);
 if ($8) {
  $$1 = $1;$29 = $4;
 } else {
  $9 = $5;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 12|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = ($13<<24>>24)==(0);
  if ($14) {
   $15 = ((($1)) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($11)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + ($16))|0;
   HEAP32[$17>>2] = $19;
   $20 = ((($4)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = HEAP32[$4>>2]|0;
   $23 = ((($22)) + 4|0);
   HEAP32[$23>>2] = $21;
   $24 = HEAP32[$20>>2]|0;
   HEAP32[$24>>2] = $22;
   $25 = ((($0)) + 32|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + -1)|0;
   HEAP32[$25>>2] = $27;
   __ZdlPv($4);
   __ZdlPv($1);
   $$phi$trans$insert42 = ((($11)) + 16|0);
   $$pre = HEAP32[$$phi$trans$insert42>>2]|0;
   $$1 = $11;$29 = $$pre;
  } else {
   $$1 = $1;$29 = $4;
  }
 }
 $28 = ((($29)) + 4|0);
 $30 = HEAP32[$28>>2]|0;
 $31 = $30;
 $32 = ($31|0)==($6|0);
 if ($32) {
  return;
 }
 $33 = $30;
 $34 = ((($33)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 12|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = ($37<<24>>24)==(0);
 if (!($38)) {
  return;
 }
 $39 = ((($$1)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($35)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) - ($40))|0;
 HEAP32[$41>>2] = $43;
 $44 = ((($35)) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + ($40))|0;
 HEAP32[$44>>2] = $46;
 $47 = ((($29)) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[$29>>2]|0;
 $50 = ((($49)) + 4|0);
 HEAP32[$50>>2] = $48;
 $51 = HEAP32[$47>>2]|0;
 HEAP32[$51>>2] = $49;
 $52 = ((($0)) + 32|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) + -1)|0;
 HEAP32[$52>>2] = $54;
 __ZdlPv($29);
 __ZdlPv($$1);
 return;
}
function __ZN10QuadBufferC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev($0);
 $1 = ((($0)) + 24|0);
 HEAP32[$1>>2] = $1;
 $2 = ((($0)) + 28|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 32|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 128;
 $5 = ((($0)) + 20|0);
 HEAP32[$5>>2] = 256;
 $6 = ((($0)) + 16|0);
 HEAP32[$6>>2] = 0;
 HEAP32[$0>>2] = (3188);
 return;
}
function __ZN10QuadBuffer4bindEv($0) {
 $0 = $0|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$pre1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  _glGenBuffers(1,($1|0));
  $4 = ((($0)) + 44|0);
  _glGenBuffers(1,($4|0));
  $5 = HEAP32[$1>>2]|0;
  _glBindBuffer(34963,($5|0));
  $6 = HEAP32[$4>>2]|0;
  _glBindBuffer(34962,($6|0));
  $$pre = HEAP32[$1>>2]|0;
  $$pre$phiZ2D = $4;$7 = $$pre;
 } else {
  $$pre1 = ((($0)) + 44|0);
  $$pre$phiZ2D = $$pre1;$7 = $2;
 }
 _glBindBuffer(34963,($7|0));
 $8 = HEAP32[$$pre$phiZ2D>>2]|0;
 _glBindBuffer(34962,($8|0));
 return;
}
function __ZN6REGION7addRectE4RECT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$077188 = 0, $$088192 = 0, $$093189 = 0, $$1 = 0, $$179 = 0, $$194$ph147 = 0, $$391 = 0, $$4 = 0, $$482 = 0, $$5 = 0, $$583 = 0, $$8 = 0, $$886 = 0, $$9 = 0, $$987 = 0, $$pre = 0, $$pre$i = 0, $$pre$i114 = 0, $$pre$i120 = 0, $$pre199 = 0;
 var $$pre201 = 0, $$pre202 = 0, $$pre204 = 0, $$pre205 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0;
 var $114 = 0.0, $115 = 0, $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0;
 var $132 = 0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0.0;
 var $150 = 0.0, $151 = 0, $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0.0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $or$cond = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i102 = 0, $scevgep$i$i$i116 = 0, $scevgep$i$i$i122 = 0, $scevgep$i$i$i97 = 0;
 var $scevgep4$i$i$i = 0, $scevgep4$i$i$i103 = 0, $scevgep4$i$i$i117 = 0, $scevgep4$i$i$i123 = 0, $scevgep4$i$i$i98 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $2 = sp;
 $3 = sp + 80|0;
 $4 = sp + 64|0;
 $5 = sp + 48|0;
 $6 = sp + 32|0;
 $7 = sp + 16|0;
 HEAP8[tempDoublePtr>>0]=HEAP8[$1>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1+3>>0];$8 = +HEAPF32[tempDoublePtr>>2];
 $9 = (+Math_floor((+$8)));
 HEAPF32[tempDoublePtr>>2]=$9;HEAP8[$1>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$1+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$1+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$1+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $10 = ((($1)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$10>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$10+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$10+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$10+3>>0];$11 = +HEAPF32[tempDoublePtr>>2];
 $12 = (+Math_floor((+$11)));
 HEAPF32[tempDoublePtr>>2]=$12;HEAP8[$10>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$10+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$10+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$10+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $13 = ((($1)) + 8|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$13>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$13+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$13+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$13+3>>0];$14 = +HEAPF32[tempDoublePtr>>2];
 $15 = (+Math_floor((+$14)));
 HEAPF32[tempDoublePtr>>2]=$15;HEAP8[$13>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$13+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$13+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$13+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $16 = ((($1)) + 12|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$16>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$16+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$16+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$16+3>>0];$17 = +HEAPF32[tempDoublePtr>>2];
 $18 = (+Math_floor((+$17)));
 HEAPF32[tempDoublePtr>>2]=$18;HEAP8[$16>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$16+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$16+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$16+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $19 = !($15 <= 0.0);
 $20 = !($18 <= 0.0);
 $or$cond = $19 & $20;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 HEAP32[$2>>2] = 0;
 $21 = ((($2)) + 4|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($2)) + 8|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($2)) + 8|0);
 __THREW__ = 0;
 invoke_vii(609,($2|0),($1|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 L4: do {
  if ($25) {
   $35 = ___cxa_find_matching_catch_2()|0;
   $36 = tempRet0;
   $$9 = $35;$$987 = $36;
  } else {
   $$pre = HEAP32[$21>>2]|0;
   $$pre199 = HEAP32[$2>>2]|0;
   $26 = $$pre;
   $27 = ($$pre|0)==($$pre199|0);
   $28 = $$pre199;
   L7: do {
    if ($27) {
     $251 = $28;$253 = $26;
    } else {
     $29 = ((($0)) + 4|0);
     $$088192 = 0;$294 = $26;$295 = $$pre;$296 = $$pre;$297 = $$pre;$38 = $28;
     L9: while(1) {
      $37 = (($38) + ($$088192<<4)|0);
      $39 = HEAP32[$29>>2]|0;
      $40 = HEAP32[$0>>2]|0;
      $41 = ($39|0)==($40|0);
      do {
       if ($41) {
        $$391 = $$088192;$246 = $297;$298 = $294;$303 = $295;$31 = $296;
       } else {
        $$093189 = 0;$43 = $40;
        while(1) {
         $42 = $43;
         $44 = (($42) + ($$093189<<4)|0);
         __THREW__ = 0;
         $45 = (invoke_iiii(610,($37|0),($44|0),($3|0))|0);
         $46 = __THREW__; __THREW__ = 0;
         $47 = $46&1;
         if ($47) {
          label = 15;
          break L9;
         }
         $48 = ($45|0)==(4);
         if ($48) {
          label = 11;
          break;
         }
         __THREW__ = 0;
         $70 = (invoke_iiii(610,($44|0),($37|0),($3|0))|0);
         $71 = __THREW__; __THREW__ = 0;
         $72 = $71&1;
         if ($72) {
          label = 15;
          break L9;
         }
         $73 = ($70|0)==(4);
         if ($73) {
          $74 = HEAP32[$0>>2]|0;
          $75 = (($74) + ($$093189<<4)|0);
          $76 = ((($75)) + 16|0);
          $77 = HEAP32[$29>>2]|0;
          $78 = $76;
          $79 = (($77) - ($78))|0;
          $80 = $79 >> 4;
          $81 = ($80|0)==(0);
          $82 = $77;
          if ($81) {
           $305 = $77;$86 = $82;
          } else {
           _memmove(($75|0),($76|0),($79|0))|0;
           $$pre$i120 = HEAP32[$29>>2]|0;
           $83 = $$pre$i120;
           $305 = $83;$86 = $$pre$i120;
          }
          $84 = (($75) + ($80<<4)|0);
          $85 = ($86|0)==($84|0);
          if ($85) {
           $306 = $305;
          } else {
           $scevgep$i$i$i122 = ((($86)) + -16|0);
           $87 = $scevgep$i$i$i122;
           $88 = $84;
           $89 = (($87) - ($88))|0;
           $90 = $89 >>> 4;
           $91 = $90 ^ -1;
           $scevgep4$i$i$i123 = (($86) + ($91<<4)|0);
           HEAP32[$29>>2] = $scevgep4$i$i$i123;
           $92 = $scevgep4$i$i$i123;
           $306 = $92;
          }
          $93 = (($$093189) + -1)|0;
          $$194$ph147 = $93;$240 = $306;
         } else {
          __THREW__ = 0;
          $94 = (invoke_iii(611,($44|0),($37|0))|0);
          $95 = __THREW__; __THREW__ = 0;
          $96 = $95&1;
          if ($96) {
           label = 15;
           break L9;
          }
          if ($94) {
           label = 26;
           break;
          }
          $$pre201 = HEAP32[$29>>2]|0;
          $$194$ph147 = $$093189;$240 = $$pre201;
         }
         $237 = (($$194$ph147) + 1)|0;
         $238 = HEAP32[$0>>2]|0;
         $239 = (($240) - ($238))|0;
         $241 = $239 >> 4;
         $242 = ($237>>>0)<($241>>>0);
         if ($242) {
          $$093189 = $237;$43 = $238;
         } else {
          label = 83;
          break;
         }
        }
        if ((label|0) == 11) {
         label = 0;
         $49 = HEAP32[$2>>2]|0;
         $50 = (($49) + ($$088192<<4)|0);
         $51 = ((($50)) + 16|0);
         $52 = HEAP32[$21>>2]|0;
         $53 = $51;
         $54 = (($52) - ($53))|0;
         $55 = $54 >> 4;
         $56 = ($55|0)==(0);
         $57 = $52;
         if ($56) {
          $304 = $52;$61 = $57;
         } else {
          _memmove(($50|0),($51|0),($54|0))|0;
          $$pre$i114 = HEAP32[$21>>2]|0;
          $58 = $$pre$i114;
          $304 = $58;$61 = $$pre$i114;
         }
         $59 = (($50) + ($55<<4)|0);
         $60 = ($61|0)==($59|0);
         if ($60) {
          $$391 = $$088192;$246 = $304;$298 = $61;$303 = $304;$31 = $304;
          break;
         }
         $scevgep$i$i$i116 = ((($61)) + -16|0);
         $62 = $scevgep$i$i$i116;
         $63 = $59;
         $64 = (($62) - ($63))|0;
         $65 = $64 >>> 4;
         $66 = $65 ^ -1;
         $scevgep4$i$i$i117 = (($61) + ($66<<4)|0);
         HEAP32[$21>>2] = $scevgep4$i$i$i117;
         $67 = $scevgep4$i$i$i117;
         $$391 = $$088192;$246 = $67;$298 = $scevgep4$i$i$i117;$303 = $67;$31 = $67;
         break;
        }
        else if ((label|0) == 26) {
         label = 0;
         __THREW__ = 0;
         $97 = (+invoke_di(612,($37|0)));
         $98 = __THREW__; __THREW__ = 0;
         $99 = $98&1;
         if ($99) {
          label = 15;
          break L9;
         }
         __THREW__ = 0;
         $100 = (+invoke_di(613,($37|0)));
         $101 = __THREW__; __THREW__ = 0;
         $102 = $101&1;
         if ($102) {
          label = 15;
          break L9;
         }
         $103 = (((($38) + ($$088192<<4)|0)) + 8|0);
         HEAP8[tempDoublePtr>>0]=HEAP8[$103>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$103+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$103+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$103+3>>0];$104 = +HEAPF32[tempDoublePtr>>2];
         __THREW__ = 0;
         $105 = (+invoke_di(613,($44|0)));
         $106 = __THREW__; __THREW__ = 0;
         $107 = $106&1;
         if ($107) {
          label = 15;
          break L9;
         }
         __THREW__ = 0;
         $108 = (+invoke_di(613,($37|0)));
         $109 = __THREW__; __THREW__ = 0;
         $110 = $109&1;
         if ($110) {
          label = 15;
          break L9;
         }
         $111 = $105 - $108;
         __THREW__ = 0;
         invoke_vidddd(614,($4|0),(+$97),(+$100),(+$104),(+$111));
         $112 = __THREW__; __THREW__ = 0;
         $113 = $112&1;
         if ($113) {
          label = 15;
          break L9;
         }
         __THREW__ = 0;
         $114 = (+invoke_di(612,($37|0)));
         $115 = __THREW__; __THREW__ = 0;
         $116 = $115&1;
         if ($116) {
          label = 53;
          break L9;
         }
         __THREW__ = 0;
         $117 = (+invoke_di(615,($44|0)));
         $118 = __THREW__; __THREW__ = 0;
         $119 = $118&1;
         if ($119) {
          label = 53;
          break L9;
         }
         HEAP8[tempDoublePtr>>0]=HEAP8[$103>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$103+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$103+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$103+3>>0];$120 = +HEAPF32[tempDoublePtr>>2];
         __THREW__ = 0;
         $121 = (+invoke_di(615,($37|0)));
         $122 = __THREW__; __THREW__ = 0;
         $123 = $122&1;
         if ($123) {
          label = 53;
          break L9;
         }
         __THREW__ = 0;
         $124 = (+invoke_di(615,($44|0)));
         $125 = __THREW__; __THREW__ = 0;
         $126 = $125&1;
         if ($126) {
          label = 53;
          break L9;
         }
         $127 = $121 - $124;
         __THREW__ = 0;
         invoke_vidddd(614,($5|0),(+$114),(+$117),(+$120),(+$127));
         $128 = __THREW__; __THREW__ = 0;
         $129 = $128&1;
         if ($129) {
          label = 53;
          break L9;
         }
         __THREW__ = 0;
         $130 = (+invoke_di(613,($44|0)));
         $131 = __THREW__; __THREW__ = 0;
         $132 = $131&1;
         if ($132) {
          label = 54;
          break L9;
         }
         __THREW__ = 0;
         $133 = (+invoke_di(613,($37|0)));
         $134 = __THREW__; __THREW__ = 0;
         $135 = $134&1;
         if ($135) {
          label = 54;
          break L9;
         }
         $136 = (+_fmaxf($130,$133));
         __THREW__ = 0;
         $137 = (+invoke_di(615,($44|0)));
         $138 = __THREW__; __THREW__ = 0;
         $139 = $138&1;
         if ($139) {
          label = 55;
          break L9;
         }
         __THREW__ = 0;
         $140 = (+invoke_di(615,($37|0)));
         $141 = __THREW__; __THREW__ = 0;
         $142 = $141&1;
         if ($142) {
          label = 55;
          break L9;
         }
         $143 = (+_fminf($137,$140));
         __THREW__ = 0;
         $144 = (+invoke_di(612,($37|0)));
         $145 = __THREW__; __THREW__ = 0;
         $146 = $145&1;
         if ($146) {
          label = 56;
          break L9;
         }
         __THREW__ = 0;
         $147 = (+invoke_di(612,($44|0)));
         $148 = __THREW__; __THREW__ = 0;
         $149 = $148&1;
         if ($149) {
          label = 56;
          break L9;
         }
         __THREW__ = 0;
         $150 = (+invoke_di(612,($37|0)));
         $151 = __THREW__; __THREW__ = 0;
         $152 = $151&1;
         if ($152) {
          label = 56;
          break L9;
         }
         $153 = $147 - $150;
         $154 = $143 - $136;
         __THREW__ = 0;
         invoke_vidddd(614,($6|0),(+$144),(+$136),(+$153),(+$154));
         $155 = __THREW__; __THREW__ = 0;
         $156 = $155&1;
         if ($156) {
          label = 56;
          break L9;
         }
         __THREW__ = 0;
         $157 = (+invoke_di(616,($44|0)));
         $158 = __THREW__; __THREW__ = 0;
         $159 = $158&1;
         if ($159) {
          label = 57;
          break L9;
         }
         __THREW__ = 0;
         $160 = (+invoke_di(616,($37|0)));
         $161 = __THREW__; __THREW__ = 0;
         $162 = $161&1;
         if ($162) {
          label = 57;
          break L9;
         }
         __THREW__ = 0;
         $163 = (+invoke_di(616,($44|0)));
         $164 = __THREW__; __THREW__ = 0;
         $165 = $164&1;
         if ($165) {
          label = 57;
          break L9;
         }
         $166 = $160 - $163;
         __THREW__ = 0;
         invoke_vidddd(614,($7|0),(+$157),(+$136),(+$166),(+$154));
         $167 = __THREW__; __THREW__ = 0;
         $168 = $167&1;
         if ($168) {
          label = 57;
          break L9;
         }
         __THREW__ = 0;
         $169 = (invoke_ii(617,($4|0))|0);
         $170 = __THREW__; __THREW__ = 0;
         $171 = $170&1;
         if ($171) {
          label = 78;
          break L9;
         }
         do {
          if (!($169)) {
           $172 = HEAP32[$21>>2]|0;
           $173 = HEAP32[$23>>2]|0;
           $174 = ($172|0)==($173|0);
           if ($174) {
            __THREW__ = 0;
            invoke_vii(609,($2|0),($4|0));
            $176 = __THREW__; __THREW__ = 0;
            $177 = $176&1;
            if ($177) {
             label = 78;
             break L9;
            } else {
             break;
            }
           } else {
            dest=$172; src=$4; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
            $175 = ((($172)) + 16|0);
            HEAP32[$21>>2] = $175;
            break;
           }
          }
         } while(0);
         __THREW__ = 0;
         $188 = (invoke_ii(617,($5|0))|0);
         $189 = __THREW__; __THREW__ = 0;
         $190 = $189&1;
         if ($190) {
          label = 78;
          break L9;
         }
         do {
          if (!($188)) {
           $191 = HEAP32[$21>>2]|0;
           $192 = HEAP32[$23>>2]|0;
           $193 = ($191|0)==($192|0);
           if ($193) {
            __THREW__ = 0;
            invoke_vii(609,($2|0),($5|0));
            $195 = __THREW__; __THREW__ = 0;
            $196 = $195&1;
            if ($196) {
             label = 78;
             break L9;
            } else {
             break;
            }
           } else {
            dest=$191; src=$5; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
            $194 = ((($191)) + 16|0);
            HEAP32[$21>>2] = $194;
            break;
           }
          }
         } while(0);
         __THREW__ = 0;
         $197 = (invoke_ii(617,($6|0))|0);
         $198 = __THREW__; __THREW__ = 0;
         $199 = $198&1;
         if ($199) {
          label = 78;
          break L9;
         }
         do {
          if (!($197)) {
           $200 = HEAP32[$21>>2]|0;
           $201 = HEAP32[$23>>2]|0;
           $202 = ($200|0)==($201|0);
           if ($202) {
            __THREW__ = 0;
            invoke_vii(609,($2|0),($6|0));
            $204 = __THREW__; __THREW__ = 0;
            $205 = $204&1;
            if ($205) {
             label = 78;
             break L9;
            } else {
             break;
            }
           } else {
            dest=$200; src=$6; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
            $203 = ((($200)) + 16|0);
            HEAP32[$21>>2] = $203;
            break;
           }
          }
         } while(0);
         __THREW__ = 0;
         $206 = (invoke_ii(617,($7|0))|0);
         $207 = __THREW__; __THREW__ = 0;
         $208 = $207&1;
         if ($208) {
          label = 78;
          break L9;
         }
         do {
          if (!($206)) {
           $209 = HEAP32[$21>>2]|0;
           $210 = HEAP32[$23>>2]|0;
           $211 = ($209|0)==($210|0);
           if ($211) {
            __THREW__ = 0;
            invoke_vii(609,($2|0),($7|0));
            $213 = __THREW__; __THREW__ = 0;
            $214 = $213&1;
            if ($214) {
             label = 78;
             break L9;
            } else {
             break;
            }
           } else {
            dest=$209; src=$7; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
            $212 = ((($209)) + 16|0);
            HEAP32[$21>>2] = $212;
            break;
           }
          }
         } while(0);
         $215 = HEAP32[$2>>2]|0;
         $216 = (($215) + ($$088192<<4)|0);
         $217 = ((($216)) + 16|0);
         $218 = HEAP32[$21>>2]|0;
         $219 = $217;
         $220 = (($218) - ($219))|0;
         $221 = $220 >> 4;
         $222 = ($221|0)==(0);
         $223 = $218;
         if ($222) {
          $227 = $223;$307 = $218;
         } else {
          _memmove(($216|0),($217|0),($220|0))|0;
          $$pre$i = HEAP32[$21>>2]|0;
          $224 = $$pre$i;
          $227 = $$pre$i;$307 = $224;
         }
         $225 = (($216) + ($221<<4)|0);
         $226 = ($227|0)==($225|0);
         if ($226) {
          $308 = $227;$309 = $307;
         } else {
          $scevgep$i$i$i102 = ((($227)) + -16|0);
          $228 = $scevgep$i$i$i102;
          $229 = $225;
          $230 = (($228) - ($229))|0;
          $231 = $230 >>> 4;
          $232 = $231 ^ -1;
          $scevgep4$i$i$i103 = (($227) + ($232<<4)|0);
          HEAP32[$21>>2] = $scevgep4$i$i$i103;
          $233 = $scevgep4$i$i$i103;
          $308 = $scevgep4$i$i$i103;$309 = $233;
         }
         $234 = (($$088192) + -1)|0;
         $$391 = $234;$246 = $309;$298 = $308;$303 = $309;$31 = $309;
         break;
        }
        else if ((label|0) == 83) {
         label = 0;
         $$pre202 = HEAP32[$21>>2]|0;
         $243 = $$pre202;
         $$391 = $$088192;$246 = $$pre202;$298 = $243;$303 = $$pre202;$31 = $$pre202;
         break;
        }
       }
      } while(0);
      $244 = (($$391) + 1)|0;
      $32 = HEAP32[$2>>2]|0;
      $245 = (($246) - ($32))|0;
      $247 = $245 >> 4;
      $248 = ($244>>>0)<($247>>>0);
      $249 = $32;
      if ($248) {
       $$088192 = $244;$294 = $298;$295 = $303;$296 = $31;$297 = $246;$38 = $249;
      } else {
       label = 5;
       break;
      }
     }
     if ((label|0) == 5) {
      $30 = ($31|0)==($32|0);
      if ($30) {
       $251 = $249;$253 = $298;
       break;
      }
      $33 = ((($0)) + 4|0);
      $34 = ((($0)) + 8|0);
      $$077188 = 0;$260 = $249;$299 = $298;$300 = $249;$301 = $32;$302 = $303;
      L97: while(1) {
       $259 = (($260) + ($$077188<<4)|0);
       $261 = (((($260) + ($$077188<<4)|0)) + 8|0);
       HEAP8[tempDoublePtr>>0]=HEAP8[$261>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$261+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$261+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$261+3>>0];$262 = +HEAPF32[tempDoublePtr>>2];
       $263 = $262 > 0.0;
       do {
        if ($263) {
         $264 = (((($260) + ($$077188<<4)|0)) + 12|0);
         HEAP8[tempDoublePtr>>0]=HEAP8[$264>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$264+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$264+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$264+3>>0];$265 = +HEAPF32[tempDoublePtr>>2];
         $266 = $265 > 0.0;
         if ($266) {
          $267 = HEAP32[$33>>2]|0;
          $268 = HEAP32[$34>>2]|0;
          $269 = ($267|0)==($268|0);
          if (!($269)) {
           dest=$267; src=$259; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
           $270 = HEAP32[$33>>2]|0;
           $271 = ((($270)) + 16|0);
           HEAP32[$33>>2] = $271;
           $280 = $302;$281 = $301;$310 = $299;$311 = $300;
           break;
          }
          __THREW__ = 0;
          invoke_vii(609,($0|0),($259|0));
          $272 = __THREW__; __THREW__ = 0;
          $273 = $272&1;
          if ($273) {
           break L97;
          }
          $$pre204 = HEAP32[$21>>2]|0;
          $$pre205 = HEAP32[$2>>2]|0;
          $274 = $$pre205;
          $275 = $$pre204;
          $280 = $$pre204;$281 = $$pre205;$310 = $275;$311 = $274;
         } else {
          $280 = $302;$281 = $301;$310 = $299;$311 = $300;
         }
        } else {
         $280 = $302;$281 = $301;$310 = $299;$311 = $300;
        }
       } while(0);
       $278 = (($$077188) + 1)|0;
       $279 = (($280) - ($281))|0;
       $282 = $279 >> 4;
       $283 = ($278>>>0)<($282>>>0);
       $284 = $281;
       if ($283) {
        $$077188 = $278;$260 = $284;$299 = $310;$300 = $311;$301 = $281;$302 = $280;
       } else {
        $251 = $311;$253 = $310;
        break L7;
       }
      }
      $276 = ___cxa_find_matching_catch_2()|0;
      $277 = tempRet0;
      $$8 = $276;$$886 = $277;
     }
     else if ((label|0) == 15) {
      $68 = ___cxa_find_matching_catch_2()|0;
      $69 = tempRet0;
      $$8 = $68;$$886 = $69;
     }
     else if ((label|0) == 53) {
      $178 = ___cxa_find_matching_catch_2()|0;
      $179 = tempRet0;
      $$5 = $178;$$583 = $179;
      label = 81;
     }
     else if ((label|0) == 54) {
      $180 = ___cxa_find_matching_catch_2()|0;
      $181 = tempRet0;
      $$4 = $180;$$482 = $181;
      label = 80;
     }
     else if ((label|0) == 55) {
      $182 = ___cxa_find_matching_catch_2()|0;
      $183 = tempRet0;
      $$4 = $182;$$482 = $183;
      label = 80;
     }
     else if ((label|0) == 56) {
      $184 = ___cxa_find_matching_catch_2()|0;
      $185 = tempRet0;
      $$4 = $184;$$482 = $185;
      label = 80;
     }
     else if ((label|0) == 57) {
      $186 = ___cxa_find_matching_catch_2()|0;
      $187 = tempRet0;
      $$1 = $186;$$179 = $187;
      label = 79;
     }
     else if ((label|0) == 78) {
      $235 = ___cxa_find_matching_catch_2()|0;
      $236 = tempRet0;
      $$1 = $235;$$179 = $236;
      label = 79;
     }
     if ((label|0) == 79) {
      $$4 = $$1;$$482 = $$179;
      label = 80;
     }
     if ((label|0) == 80) {
      $$5 = $$4;$$583 = $$482;
      label = 81;
     }
     if ((label|0) == 81) {
      $$8 = $$5;$$886 = $$583;
     }
     $$9 = $$8;$$987 = $$886;
     break L4;
    }
   } while(0);
   $250 = ($251|0)==(0|0);
   if (!($250)) {
    $252 = ($253|0)==($251|0);
    if (!($252)) {
     $scevgep$i$i$i97 = ((($253)) + -16|0);
     $254 = $scevgep$i$i$i97;
     $255 = $251;
     $256 = (($254) - ($255))|0;
     $257 = $256 >>> 4;
     $258 = $257 ^ -1;
     $scevgep4$i$i$i98 = (($253) + ($258<<4)|0);
     HEAP32[$21>>2] = $scevgep4$i$i$i98;
    }
    __ZdlPv($251);
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $285 = HEAP32[$2>>2]|0;
 $286 = ($285|0)==(0|0);
 if ($286) {
  ___resumeException($$9|0);
  // unreachable;
 }
 $287 = HEAP32[$21>>2]|0;
 $288 = ($287|0)==($285|0);
 if (!($288)) {
  $scevgep$i$i$i = ((($287)) + -16|0);
  $289 = $scevgep$i$i$i;
  $290 = $285;
  $291 = (($289) - ($290))|0;
  $292 = $291 >>> 4;
  $293 = $292 ^ -1;
  $scevgep4$i$i$i = (($287) + ($293<<4)|0);
  HEAP32[$21>>2] = $scevgep4$i$i$i;
 }
 __ZdlPv($285);
 ___resumeException($$9|0);
 // unreachable;
}
function __ZNSt3__26vectorI4RECTNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 4;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>(268435455);
 if ($8) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($4))|0;
 $12 = $11 >> 4;
 $13 = ($12>>>0)<(134217727);
 $14 = $11 >> 3;
 $15 = ($14>>>0)<($7>>>0);
 $$sroa$speculated$i = $15 ? $7 : $14;
 $$sroa$speculated$$i = $13 ? $$sroa$speculated$i : 268435455;
 $16 = ($$sroa$speculated$$i|0)==(0);
 do {
  if ($16) {
   $26 = 0;
  } else {
   $17 = ($$sroa$speculated$$i>>>0)>(268435455);
   if (!($17)) {
    $23 = $$sroa$speculated$$i << 4;
    $24 = (__Znwj($23)|0);
    $26 = $24;
    break;
   }
   $18 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(568,($18|0),(23604|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $21 = ___cxa_find_matching_catch_2()|0;
    $22 = tempRet0;
    ___cxa_free_exception(($18|0));
    ___resumeException($21|0);
    // unreachable;
   } else {
    HEAP32[$18>>2] = (9544);
    ___cxa_throw(($18|0),(1992|0),(506|0));
    // unreachable;
   }
  }
 } while(0);
 $25 = (($26) + ($6<<4)|0);
 $27 = (($26) + ($$sroa$speculated$$i<<4)|0);
 $28 = $27;
 dest=$25; src=$1; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $29 = ((($25)) + 16|0);
 $30 = $29;
 $31 = (0 - ($6))|0;
 $32 = (($25) + ($31<<4)|0);
 $33 = $32;
 $34 = ($5|0)>(0);
 if ($34) {
  $35 = $4;
  _memcpy(($32|0),($35|0),($5|0))|0;
 }
 HEAP32[$0>>2] = $33;
 HEAP32[$2>>2] = $30;
 HEAP32[$9>>2] = $28;
 $36 = ($4|0)==(0);
 if ($36) {
  return;
 }
 $37 = $4;
 __ZdlPv($37);
 return;
}
function __ZL20findContainedCornersRK4RECTS1_R7CORNERS($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$3 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0;
 var $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $addconv = 0;
 var $addconv48 = 0, $addconv49 = 0, $phitmp = 0, $phitmp45 = 0, $phitmp46 = 0, $phitmp47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+__ZNK4RECT4leftEv($0));
 $4 = (+__ZNK4RECT4leftEv($1));
 $5 = !($3 >= $4);
 if ($5) {
  $15 = 0;
 } else {
  $6 = (+__ZNK4RECT4leftEv($0));
  $7 = (+__ZNK4RECT5rightEv($1));
  $8 = $6 < $7;
  if ($8) {
   $9 = (+__ZNK4RECT3topEv($0));
   $10 = (+__ZNK4RECT3topEv($1));
   $11 = !($9 >= $10);
   if ($11) {
    $15 = 0;
   } else {
    $12 = (+__ZNK4RECT3topEv($0));
    $13 = (+__ZNK4RECT6bottomEv($1));
    $14 = $12 < $13;
    $phitmp = $14&1;
    $15 = $phitmp;
   }
  } else {
   $15 = 0;
  }
 }
 HEAP8[$2>>0] = $15;
 $16 = (+__ZNK4RECT5rightEv($0));
 $17 = (+__ZNK4RECT4leftEv($1));
 $18 = $16 > $17;
 if ($18) {
  $19 = (+__ZNK4RECT5rightEv($0));
  $20 = (+__ZNK4RECT5rightEv($1));
  $21 = $19 < $20;
  if ($21) {
   $22 = (+__ZNK4RECT3topEv($0));
   $23 = (+__ZNK4RECT3topEv($1));
   $24 = !($22 >= $23);
   if ($24) {
    $29 = 0;
   } else {
    $25 = (+__ZNK4RECT3topEv($0));
    $26 = (+__ZNK4RECT6bottomEv($1));
    $27 = $25 < $26;
    $phitmp45 = $27&1;
    $29 = $phitmp45;
   }
  } else {
   $29 = 0;
  }
 } else {
  $29 = 0;
 }
 $28 = ((($2)) + 1|0);
 HEAP8[$28>>0] = $29;
 $30 = (+__ZNK4RECT4leftEv($0));
 $31 = (+__ZNK4RECT4leftEv($1));
 $32 = !($30 >= $31);
 if ($32) {
  $43 = 0;
 } else {
  $33 = (+__ZNK4RECT4leftEv($0));
  $34 = (+__ZNK4RECT5rightEv($1));
  $35 = $33 < $34;
  if ($35) {
   $36 = (+__ZNK4RECT6bottomEv($0));
   $37 = (+__ZNK4RECT3topEv($1));
   $38 = $36 > $37;
   if ($38) {
    $39 = (+__ZNK4RECT6bottomEv($0));
    $40 = (+__ZNK4RECT6bottomEv($1));
    $41 = $39 < $40;
    $phitmp46 = $41&1;
    $43 = $phitmp46;
   } else {
    $43 = 0;
   }
  } else {
   $43 = 0;
  }
 }
 $42 = ((($2)) + 2|0);
 HEAP8[$42>>0] = $43;
 $44 = (+__ZNK4RECT5rightEv($0));
 $45 = (+__ZNK4RECT4leftEv($1));
 $46 = $44 > $45;
 if ($46) {
  $47 = (+__ZNK4RECT5rightEv($0));
  $48 = (+__ZNK4RECT5rightEv($1));
  $49 = $47 < $48;
  if ($49) {
   $50 = (+__ZNK4RECT6bottomEv($0));
   $51 = (+__ZNK4RECT3topEv($1));
   $52 = $50 > $51;
   if ($52) {
    $53 = (+__ZNK4RECT6bottomEv($0));
    $54 = (+__ZNK4RECT6bottomEv($1));
    $55 = $53 < $54;
    $phitmp47 = $55&1;
    $57 = $phitmp47;
   } else {
    $57 = 0;
   }
  } else {
   $57 = 0;
  }
 } else {
  $57 = 0;
 }
 $56 = ((($2)) + 3|0);
 HEAP8[$56>>0] = $57;
 $58 = HEAP8[$2>>0]|0;
 $59 = HEAP8[$28>>0]|0;
 $60 = HEAP8[$42>>0]|0;
 $addconv = (($58) + ($57))<<24>>24;
 $addconv48 = (($addconv) + ($59))<<24>>24;
 $addconv49 = (($addconv48) + ($60))<<24>>24;
 $$3 = $addconv49&255;
 return ($$3|0);
}
function __ZN6REGION10intersectsE4RECT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$068 = 0, $$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  $15 = 0;
  return ($15|0);
 } else {
  $$068 = 0;$$in = $4;
 }
 while(1) {
  $12 = $$in;
  $13 = (($12) + ($$068<<4)|0);
  $14 = (__ZN4RECT13intersectWithERKS_($13,$1)|0);
  $11 = (($$068) + 1)|0;
  if ($14) {
   $15 = 1;
   label = 4;
   break;
  }
  $6 = HEAP32[$2>>2]|0;
  $7 = HEAP32[$0>>2]|0;
  $8 = (($6) - ($7))|0;
  $9 = $8 >> 4;
  $10 = ($11>>>0)<($9>>>0);
  if ($10) {
   $$068 = $11;$$in = $7;
  } else {
   $15 = 0;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  return ($15|0);
 }
 return (0)|0;
}
function __ZN11RenderBatchD2Ev($0) {
 $0 = $0|0;
 var $$023$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3228);
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 do {
  if (!($3)) {
   $4 = HEAP32[$2>>2]|0;
   __THREW__ = 0;
   invoke_vii(618,($4|0),($2|0));
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    $7 = ___cxa_find_matching_catch_3(0|0)|0;
    $8 = tempRet0;
    $9 = ((($0)) + 8|0);
    __ZNSt3__210__list_impI6ObjPtrI8RenderOpENS_9allocatorIS3_EEED2Ev($9);
    ___clang_call_terminate($7);
    // unreachable;
   } else {
    HEAP32[$1>>2] = 0;
    break;
   }
  }
 } while(0);
 $10 = ((($0)) + 8|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if ($13) {
  return;
 }
 $14 = ((($0)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$10>>2]|0;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$15>>2]|0;
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = $18;
 $21 = HEAP32[$17>>2]|0;
 HEAP32[$21>>2] = $19;
 HEAP32[$11>>2] = 0;
 $22 = ($15|0)==($10|0);
 if ($22) {
  return;
 } else {
  $$023$i$i = $15;
 }
 while(1) {
  $23 = ((($$023$i$i)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($$023$i$i)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(0|0);
  if (!($27)) {
   __THREW__ = 0;
   invoke_vi(525,($26|0));
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    label = 9;
    break;
   }
  }
  __ZdlPv($$023$i$i);
  $32 = ($24|0)==($10|0);
  if ($32) {
   label = 11;
   break;
  } else {
   $$023$i$i = $24;
  }
 }
 if ((label|0) == 9) {
  $30 = ___cxa_find_matching_catch_3(0|0)|0;
  $31 = tempRet0;
  ___clang_call_terminate($30);
  // unreachable;
 }
 else if ((label|0) == 11) {
  return;
 }
}
function __ZN11RenderBatchD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11RenderBatchD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__210__list_impI6ObjPtrI8RenderOpENS_9allocatorIS3_EEED2Ev($0) {
 $0 = $0|0;
 var $$023$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = HEAP32[$7>>2]|0;
 HEAP32[$11>>2] = $9;
 HEAP32[$1>>2] = 0;
 $12 = ($5|0)==($0|0);
 if ($12) {
  return;
 } else {
  $$023$i = $5;
 }
 while(1) {
  $13 = ((($$023$i)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($$023$i)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   __THREW__ = 0;
   invoke_vi(525,($16|0));
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    label = 5;
    break;
   }
  }
  __ZdlPv($$023$i);
  $22 = ($14|0)==($0|0);
  if ($22) {
   label = 7;
   break;
  } else {
   $$023$i = $14;
  }
 }
 if ((label|0) == 5) {
  $20 = ___cxa_find_matching_catch_3(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 }
 else if ((label|0) == 7) {
  return;
 }
}
function __ZN11RenderBatchC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev($0);
 HEAP32[$0>>2] = (3228);
 $1 = ((($0)) + 8|0);
 HEAP32[$1>>2] = $1;
 $2 = ((($0)) + 12|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 16|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 40|0);
 HEAP32[$4>>2] = 0;
 return;
}
function __ZN11RenderBatch18invalidateGeometryEP8RenderOp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 32|0);
 HEAP8[$2>>0] = 1;
 return;
}
function __ZN11RenderBatch6renderEP6WindowP7SurfaceP8RenderOp($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0161 = 0, $$088160 = 0, $$090 = 0, $$091 = 0, $$091$ph = 0, $$092 = 0, $$093 = 0, $$094 = 0, $$096 = 0, $$1 = 0, $$195 = 0, $$2 = 0, $$byval_copy = 0, $$byval_copy3 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre173 = 0, $$sink153 = 0, $$sroa$0110$0 = 0, $$sroa$0110$1 = 0;
 var $$sroa$0124$0 = 0, $$sroa$0124$1 = 0, $$sroa$0132$0$$sroa$0132$0$$sroa$0$0$copyload$i106150 = 0, $$sroa$0132$0$$sroa$0132$0$133162 = 0, $$sroa$0142$0$$sroa$0142$0$$sroa$0$0$copyload$i104151 = 0, $$sroa$0142$0$$sroa$0142$0$164 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep$i$i$i$i = 0, $scevgep$i$i$i$i98 = 0, $scevgep4$i$i$i$i = 0, $scevgep4$i$i$i$i99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy3 = sp + 32|0;
 $$byval_copy = sp + 16|0;
 $4 = sp;
 $5 = sp + 80|0;
 $6 = sp + 64|0;
 $7 = sp + 48|0;
 $8 = ((($0)) + 32|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if (!($10)) {
  HEAP8[$8>>0] = 0;
  $11 = ((($0)) + 24|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($0)) + 8|0);
  $15 = $13;
  $16 = ($15|0)==($14|0);
  if ($16) {
   $36 = 0;
  } else {
   $$sroa$0142$0$$sroa$0142$0$$sroa$0$0$copyload$i104151 = $15;$$sroa$0142$0$$sroa$0142$0$164 = $13;
   while(1) {
    $20 = $$sroa$0142$0$$sroa$0142$0$164;
    $21 = ((($20)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($23)) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (FUNCTION_TABLE_ii[$25 & 1023]($22)|0);
    $27 = HEAP32[$11>>2]|0;
    $28 = (($27) + ($26))|0;
    HEAP32[$11>>2] = $28;
    $29 = ((($$sroa$0142$0$$sroa$0142$0$$sroa$0$0$copyload$i104151)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $30;
    $32 = ($31|0)==($14|0);
    if ($32) {
     $36 = $28;
     break;
    } else {
     $$sroa$0142$0$$sroa$0142$0$$sroa$0$0$copyload$i104151 = $31;$$sroa$0142$0$$sroa$0142$0$164 = $30;
    }
   }
  }
  $17 = ((($0)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if ($19) {
   label = 6;
  } else {
   $33 = ((($18)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)<($36|0);
   if ($35) {
    label = 6;
   } else {
    $41 = $18;
   }
  }
  if ((label|0) == 6) {
   $37 = ((($1)) + 96|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (__ZN8ItemPool5allocEiPNS_5AllocE($38,$36,$18)|0);
   HEAP32[$17>>2] = $39;
   $41 = $39;
  }
  $40 = HEAP32[$41>>2]|0;
  $42 = ((($41)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = HEAP32[$12>>2]|0;
  $45 = $44;
  $46 = ($45|0)==($14|0);
  if ($46) {
   $54 = $43;$56 = $41;
  } else {
   $47 = ((($40)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($40)) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = Math_imul($43, $48)|0;
   $52 = (($50) + ($51)|0);
   $$0161 = $52;$$088160 = 0;$$sroa$0132$0$$sroa$0132$0$$sroa$0$0$copyload$i106150 = $45;$$sroa$0132$0$$sroa$0132$0$133162 = $44;
   while(1) {
    $66 = $$sroa$0132$0$$sroa$0132$0$133162;
    $67 = ((($66)) + 8|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = HEAP32[$68>>2]|0;
    $70 = ((($69)) + 28|0);
    $71 = HEAP32[$70>>2]|0;
    FUNCTION_TABLE_vii[$71 & 1023]($68,$$0161);
    $72 = ((($68)) + 48|0);
    HEAP32[$72>>2] = $$088160;
    $73 = HEAP32[$68>>2]|0;
    $74 = ((($73)) + 8|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (FUNCTION_TABLE_ii[$75 & 1023]($68)|0);
    $77 = (($$0161) + ($76<<7)|0);
    $78 = (($76) + ($$088160))|0;
    $79 = ((($68)) + 56|0);
    HEAP8[$79>>0] = 1;
    $80 = ((($$sroa$0132$0$$sroa$0132$0$$sroa$0$0$copyload$i106150)) + 4|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = $81;
    $83 = ($82|0)==($14|0);
    if ($83) {
     break;
    } else {
     $$0161 = $77;$$088160 = $78;$$sroa$0132$0$$sroa$0132$0$$sroa$0$0$copyload$i106150 = $82;$$sroa$0132$0$$sroa$0132$0$133162 = $81;
    }
   }
   $$pre = HEAP32[$17>>2]|0;
   $$phi$trans$insert = ((($$pre)) + 4|0);
   $$pre173 = HEAP32[$$phi$trans$insert>>2]|0;
   $54 = $$pre173;$56 = $$pre;
  }
  $53 = $54 << 7;
  $55 = ((($56)) + 8|0);
  $57 = HEAP32[$55>>2]|0;
  $58 = $57 << 7;
  $59 = HEAP32[$56>>2]|0;
  $60 = ((($59)) + 8|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($59)) + 12|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = Math_imul($63, $54)|0;
  $65 = (($61) + ($64)|0);
  _glBufferSubData(34962,($53|0),($58|0),($65|0));
 }
 $84 = HEAP32[$3>>2]|0;
 $85 = ((($84)) + 20|0);
 $86 = HEAP32[$85>>2]|0;
 FUNCTION_TABLE_viii[$86 & 1023]($3,$1,$2);
 $87 = ((($3)) + 28|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ($88|0)==(0|0);
 if (!($89)) {
  $90 = HEAP32[$88>>2]|0;
  $91 = ((($90)) + 24|0);
  $92 = HEAP32[$91>>2]|0;
  FUNCTION_TABLE_vi[$92 & 1023]($88);
 }
 $93 = ((($3)) + 44|0);
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$4>>2] = 0;
 $95 = ((($4)) + 4|0);
 HEAP32[$95>>2] = 0;
 $96 = ((($4)) + 8|0);
 HEAP32[$96>>2] = 0;
 $97 = ((($3)) + 36|0);
 $98 = ((($1)) + 116|0);
 $99 = ((($0)) + 8|0);
 $$090 = 0;$$094 = $3;$$096 = $3;$$sroa$0124$0 = $94;
 L22: while(1) {
  $100 = ($$096|0)==($$094|0);
  if ($100) {
   __THREW__ = 0;
   invoke_vii(619,($5|0),($$096|0));
   $101 = __THREW__; __THREW__ = 0;
   $102 = $101&1;
   if ($102) {
    label = 19;
    break;
   }
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$5+12>>2]|0;
   $103 = (invoke_iii(620,($4|0),($$byval_copy|0))|0);
   $104 = __THREW__; __THREW__ = 0;
   $105 = $104&1;
   if ($105) {
    label = 19;
    break;
   }
   if ($103) {
    $$2 = $$090;
    label = 35;
    break;
   }
   $108 = ((($$096)) + 36|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = HEAP32[$97>>2]|0;
   $111 = ($109|0)==($110|0);
   if (!($111)) {
    $$2 = $$090;
    label = 35;
    break;
   }
   $112 = HEAP32[$$096>>2]|0;
   $113 = ((($112)) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   __THREW__ = 0;
   $115 = (invoke_ii($114|0,($$096|0))|0);
   $116 = __THREW__; __THREW__ = 0;
   $117 = $116&1;
   if ($117) {
    label = 19;
    break;
   }
   $118 = (($115) + ($$090))|0;
   $119 = ((($$096)) + 57|0);
   HEAP8[$119>>0] = 0;
   $120 = ((($$096)) + 52|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = HEAP32[$98>>2]|0;
   $123 = ($121|0)==($122|0);
   if ($123) {
    label = 23;
    break;
   }
   HEAP32[$120>>2] = $122;
   $125 = $$sroa$0124$0;
   $126 = ((($125)) + 4|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = $127;
   $129 = ($128|0)==($99|0);
   if ($129) {
    $$2 = $118;
    label = 35;
    break;
   }
   $130 = $127;
   $131 = ((($130)) + 8|0);
   $132 = HEAP32[$131>>2]|0;
   $$1 = $118;$$195 = $132;$$sroa$0124$1 = $127;
  } else {
   __THREW__ = 0;
   invoke_vii(619,($6|0),($$096|0));
   $133 = __THREW__; __THREW__ = 0;
   $134 = $133&1;
   if ($134) {
    label = 19;
    break;
   }
   __THREW__ = 0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$6+12>>2]|0;
   invoke_vii(621,($4|0),($$byval_copy3|0));
   $135 = __THREW__; __THREW__ = 0;
   $136 = $135&1;
   if ($136) {
    label = 19;
    break;
   } else {
    $$1 = $$090;$$195 = $$094;$$sroa$0124$1 = $$sroa$0124$0;
   }
  }
  $137 = ((($$096)) + 8|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = ((($$096)) + 32|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = ((($140)) + 4|0);
  $$091$ph = $138;$$sink153 = $141;
  L36: while(1) {
   $142 = HEAP32[$$sink153>>2]|0;
   $143 = $142;
   $$091 = $$091$ph;
   while(1) {
    $144 = ($$091|0)==(0|0);
    if ($144) {
     $$2 = $$1;
     label = 35;
     break L22;
    }
    $145 = ((($$091)) + 88|0);
    $146 = ($143|0)==($145|0);
    if (!($146)) {
     break L36;
    }
    $147 = ((($$091)) + 84|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(0|0);
    if ($149) {
     $$091 = 0;
    } else {
     break;
    }
   }
   $150 = ((($148)) + 92|0);
   $$091$ph = $148;$$sink153 = $150;
  }
  $151 = $142;
  $152 = ((($151)) + 8|0);
  $153 = HEAP32[$152>>2]|0;
  $$090 = $$1;$$094 = $$195;$$096 = $153;$$sroa$0124$0 = $$sroa$0124$1;
 }
 L44: do {
  if ((label|0) == 23) {
   __THREW__ = 0;
   invoke_viiii(561,(13161|0),(13213|0),93,(13263|0));
   $124 = __THREW__; __THREW__ = 0;
   label = 19;
  }
  else if ((label|0) == 35) {
   $154 = ((($2)) + 192|0);
   $155 = HEAP8[$154>>0]|0;
   $156 = ($155<<24>>24)==(0);
   if ($156) {
    $$sroa$0110$1 = 0;
    label = 42;
   } else {
    $157 = ((($2)) + 16|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ((($2)) + 20|0);
    $160 = HEAP32[$159>>2]|0;
    $161 = ($158|0)==($160|0);
    if ($161) {
     label = 46;
    } else {
     __THREW__ = 0;
     invoke_vii(622,($1|0),1);
     $162 = __THREW__; __THREW__ = 0;
     $163 = $162&1;
     if ($163) {
      label = 41;
     } else {
      $$sroa$0110$0 = $158;
      label = 38;
     }
    }
   }
   while(1) {
    if ((label|0) == 38) {
     label = 0;
     dest=$7; src=$$sroa$0110$0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
     __THREW__ = 0;
     $164 = (+invoke_di(612,($7|0)));
     $165 = __THREW__; __THREW__ = 0;
     $166 = $165&1;
     if ($166) {
      label = 41;
      continue;
     }
     $167 = ((($2)) + 12|0);
     $168 = +HEAPF32[$167>>2];
     __THREW__ = 0;
     $169 = (+invoke_di(615,($7|0)));
     $170 = __THREW__; __THREW__ = 0;
     $171 = $170&1;
     if ($171) {
      label = 41;
      continue;
     }
     $172 = (~~(($164)));
     $173 = $168 - $169;
     $174 = (~~(($173)));
     $175 = ((($7)) + 8|0);
     HEAP8[tempDoublePtr>>0]=HEAP8[$175>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$175+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$175+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$175+3>>0];$176 = +HEAPF32[tempDoublePtr>>2];
     $177 = (~~(($176)));
     $178 = ((($7)) + 12|0);
     HEAP8[tempDoublePtr>>0]=HEAP8[$178>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$178+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$178+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$178+3>>0];$179 = +HEAPF32[tempDoublePtr>>2];
     $180 = (~~(($179)));
     __THREW__ = 0;
     invoke_viiii(623,($172|0),($174|0),($177|0),($180|0));
     $181 = __THREW__; __THREW__ = 0;
     $182 = $181&1;
     if ($182) {
      label = 41;
      continue;
     } else {
      $$sroa$0110$1 = $$sroa$0110$0;
      label = 42;
      continue;
     }
    }
    else if ((label|0) == 41) {
     label = 0;
     $183 = ___cxa_find_matching_catch_2()|0;
     $184 = tempRet0;
     $$092 = $184;$$093 = $183;
     break L44;
    }
    else if ((label|0) == 42) {
     label = 0;
     $185 = ($$2*6)|0;
     $186 = ((($0)) + 20|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = ((($187)) + 4|0);
     $189 = HEAP32[$188>>2]|0;
     $190 = ((($3)) + 48|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (($191) + ($189))|0;
     $193 = ($192*12)|0;
     $194 = $193;
     __THREW__ = 0;
     invoke_viiii(624,4,($185|0),5123,($194|0));
     $195 = __THREW__; __THREW__ = 0;
     $196 = $195&1;
     if ($196) {
      label = 41;
      continue;
     }
     $197 = HEAP8[$154>>0]|0;
     $198 = ($197<<24>>24)==(0);
     if ($198) {
      label = 46;
      continue;
     }
     $199 = ((($$sroa$0110$1)) + 16|0);
     $200 = ((($2)) + 20|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($199|0)==($201|0);
     if (!($202)) {
      $$sroa$0110$0 = $199;
      label = 38;
      continue;
     }
     __THREW__ = 0;
     invoke_vii(622,($1|0),0);
     $203 = __THREW__; __THREW__ = 0;
     $204 = $203&1;
     if ($204) {
      label = 41;
      continue;
     } else {
      label = 46;
      continue;
     }
    }
    else if ((label|0) == 46) {
     label = 0;
     $205 = HEAP32[$4>>2]|0;
     $206 = ($205|0)==(0|0);
     if ($206) {
      label = 50;
      break;
     } else {
      break;
     }
    }
   }
   if ((label|0) == 50) {
    STACKTOP = sp;return;
   }
   $207 = HEAP32[$95>>2]|0;
   $208 = ($207|0)==($205|0);
   if (!($208)) {
    $scevgep$i$i$i$i98 = ((($207)) + -16|0);
    $209 = $scevgep$i$i$i$i98;
    $210 = $205;
    $211 = (($209) - ($210))|0;
    $212 = $211 >>> 4;
    $213 = $212 ^ -1;
    $scevgep4$i$i$i$i99 = (($207) + ($213<<4)|0);
    HEAP32[$95>>2] = $scevgep4$i$i$i$i99;
   }
   __ZdlPv($205);
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 19) {
  $106 = ___cxa_find_matching_catch_2()|0;
  $107 = tempRet0;
  $$092 = $107;$$093 = $106;
 }
 $214 = HEAP32[$4>>2]|0;
 $215 = ($214|0)==(0|0);
 if ($215) {
  ___resumeException($$093|0);
  // unreachable;
 }
 $216 = HEAP32[$95>>2]|0;
 $217 = ($216|0)==($214|0);
 if (!($217)) {
  $scevgep$i$i$i$i = ((($216)) + -16|0);
  $218 = $scevgep$i$i$i$i;
  $219 = $214;
  $220 = (($218) - ($219))|0;
  $221 = $220 >>> 4;
  $222 = $221 ^ -1;
  $scevgep4$i$i$i$i = (($216) + ($222<<4)|0);
  HEAP32[$95>>2] = $scevgep4$i$i$i$i;
 }
 __ZdlPv($214);
 ___resumeException($$093|0);
 // unreachable;
}
function __ZN8RenderOpD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3244);
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($2|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  return;
 }
}
function __ZN8RenderOpD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3244);
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  __ZdlPv($0);
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($2|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZN8RenderOp8numQuadsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN8RenderOp12canMergeWithEPKS_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if (!($6)) {
  $17 = 0;
  return ($17|0);
 }
 $7 = ((($0)) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 60|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8|0)==($10|0);
 if (!($11)) {
  $17 = 0;
  return ($17|0);
 }
 $12 = ((($0)) + 64|0);
 $13 = +HEAPF32[$12>>2];
 $14 = ((($1)) + 64|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $13 == $15;
 $17 = $16;
 return ($17|0);
}
function __ZN8RenderOp7setRectERK4RECT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = (__Z10RECT_equalRK4RECTS1_($1,$2)|0);
 if ($3) {
  return;
 }
 dest=$2; src=$1; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $4 = ((($0)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  return;
 }
 __ZN11RenderBatch18invalidateGeometryEP8RenderOp($5,$0);
 return;
}
function __ZN8RenderOp6renderEP6WindowP7Surface($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 __ZN6Window12setBlendModeEi($1,$4);
 $5 = ((($0)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_vii[$9 & 1023]($6,$1);
 $10 = HEAP32[$5>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($2)) + 28|0);
 FUNCTION_TABLE_vii[$13 & 1023]($10,$14);
 $15 = HEAP32[$5>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($0)) + 64|0);
 $20 = +HEAPF32[$19>>2];
 FUNCTION_TABLE_vid[$18 & 1023]($15,$20);
 return;
}
function __ZN8RenderOp10intersectsEPS_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp;
 $4 = ((($0)) + 12|0);
 dest=$2; src=$4; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 123|0);
 (__ZN6_POINTpLERKS_($2,$7)|0);
 $8 = ((($1)) + 12|0);
 dest=$3; src=$8; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $9 = ((($1)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 123|0);
 (__ZN6_POINTpLERKS_($3,$11)|0);
 $12 = (__ZNK4RECT10intersectsERKS_($2,$3)|0);
 STACKTOP = sp;return ($12|0);
}
function __ZN8RenderOp7asQuadsEP5_QUAD($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$5+12>>2]|0;
 FUNCTION_TABLE_viii[$4 & 1023]($0,$$byval_copy,$1);
 STACKTOP = sp;return;
}
function __ZN8RenderOp17rectToSurfaceQuadE4RECTP5_QUAD($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 104|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $9 = ((($5)) + 123|0);
  (__ZN6_POINTpLERKS_($1,$9)|0);
 }
 $10 = ((($0)) + 68|0);
 $11 = HEAP32[$10>>2]|0;
 __Z12QUADFromRECTRK4RECTj($3,$1,$11);
 dest=$2; src=$3; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function __ZN8RenderOp8setAlphaEf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 64|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $3 != $1;
 if (!($4)) {
  return;
 }
 HEAPF32[$2>>2] = $1;
 __ZN8RenderOp18rebatchIfNecessaryEv($0);
 return;
}
function __ZN8RenderOp9setColourEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 68|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if ($4) {
  return;
 }
 HEAP32[$2>>2] = $1;
 __ZN8RenderOp18rebatchIfNecessaryEv($0);
 return;
}
function __ZN8RenderOp18rebatchIfNecessaryEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  __ZN6Object6retainEv($5);
 }
 __THREW__ = 0;
 invoke_vii(625,($5|0),($0|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  __THREW__ = 0;
  invoke_vii(626,($5|0),($0|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   if ($6) {
    return;
   }
   __THREW__ = 0;
   invoke_vi(525,($5|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $13 = ___cxa_find_matching_catch_3(0|0)|0;
    $14 = tempRet0;
    ___clang_call_terminate($13);
    // unreachable;
   } else {
    return;
   }
  }
 }
 $15 = ___cxa_find_matching_catch_2()|0;
 $16 = tempRet0;
 if ($6) {
  ___resumeException($15|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(525,($5|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $19 = ___cxa_find_matching_catch_3(0|0)|0;
  $20 = tempRet0;
  ___clang_call_terminate($19);
  // unreachable;
 } else {
  ___resumeException($15|0);
  // unreachable;
 }
}
function __ZN17RenderOpMultiRectD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3296);
 $1 = ((($0)) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($0)) + 76|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==($2|0);
  if (!($6)) {
   $scevgep$i$i$i = ((($5)) + -16|0);
   $7 = $scevgep$i$i$i;
   $8 = $2;
   $9 = (($7) - ($8))|0;
   $10 = $9 >>> 4;
   $11 = $10 ^ -1;
   $scevgep4$i$i$i = (($5) + ($11<<4)|0);
   HEAP32[$4>>2] = $scevgep4$i$i$i;
  }
  __ZdlPv($2);
 }
 HEAP32[$0>>2] = (3244);
 $12 = ((($0)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($13|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $17 = ___cxa_find_matching_catch_3(0|0)|0;
  $18 = tempRet0;
  ___clang_call_terminate($17);
  // unreachable;
 } else {
  return;
 }
}
function __ZN17RenderOpMultiRectD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i$i = 0, $scevgep4$i$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3296);
 $1 = ((($0)) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($0)) + 76|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==($2|0);
  if (!($6)) {
   $scevgep$i$i$i$i = ((($5)) + -16|0);
   $7 = $scevgep$i$i$i$i;
   $8 = $2;
   $9 = (($7) - ($8))|0;
   $10 = $9 >>> 4;
   $11 = $10 ^ -1;
   $scevgep4$i$i$i$i = (($5) + ($11<<4)|0);
   HEAP32[$4>>2] = $scevgep4$i$i$i$i;
  }
  __ZdlPv($2);
 }
 HEAP32[$0>>2] = (3244);
 $12 = ((($0)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  __ZdlPv($0);
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($13|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $17 = ___cxa_find_matching_catch_3(0|0)|0;
  $18 = tempRet0;
  ___clang_call_terminate($17);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZN17RenderOpMultiRect8numQuadsEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 72|0);
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 4;
 return ($6|0);
}
function __ZN17RenderOpMultiRect7asQuadsEP5_QUAD($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$015 = 0, $$sroa$07$0$$sroa$07$0$817 = 0, $$sroa$07$0$$sroa$07$0$817$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$sroa$07$0$$sroa$07$0$817$byval_copy = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $$015 = $1;$$sroa$07$0$$sroa$07$0$817 = $3;
 while(1) {
  $7 = HEAP32[$0>>2]|0;
  $8 = ((($7)) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($$015)) + 128|0);
  ;HEAP32[$$sroa$07$0$$sroa$07$0$817$byval_copy>>2]=HEAP32[$$sroa$07$0$$sroa$07$0$817>>2]|0;HEAP32[$$sroa$07$0$$sroa$07$0$817$byval_copy+4>>2]=HEAP32[$$sroa$07$0$$sroa$07$0$817+4>>2]|0;HEAP32[$$sroa$07$0$$sroa$07$0$817$byval_copy+8>>2]=HEAP32[$$sroa$07$0$$sroa$07$0$817+8>>2]|0;HEAP32[$$sroa$07$0$$sroa$07$0$817$byval_copy+12>>2]=HEAP32[$$sroa$07$0$$sroa$07$0$817+12>>2]|0;
  FUNCTION_TABLE_viii[$9 & 1023]($0,$$sroa$07$0$$sroa$07$0$817$byval_copy,$$015);
  $11 = ((($$sroa$07$0$$sroa$07$0$817)) + 16|0);
  $12 = HEAP32[$4>>2]|0;
  $13 = ($11|0)==($12|0);
  if ($13) {
   break;
  } else {
   $$015 = $10;$$sroa$07$0$$sroa$07$0$817 = $11;
  }
 }
 STACKTOP = sp;return;
}
function __ZN8RenderOpC2EP4View($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev($0);
 HEAP32[$0>>2] = (3244);
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 32|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 40|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 44|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 64|0);
 HEAPF32[$6>>2] = 1.0;
 return;
}
function __ZN8RenderOp11surfaceRectEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 dest=$0; src=$2; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 123|0);
 (__ZN6_POINTpLERKS_($0,$5)|0);
 return;
}
function __ZN8RenderOp23invalidateBatchGeometryEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 56|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  return;
 }
 HEAP8[$1>>0] = 0;
 __ZN11RenderBatch18invalidateGeometryEP8RenderOp($5,$0);
 return;
}
function __ZN8RenderOp12setBlendModeEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if ($4) {
  return;
 }
 HEAP32[$2>>2] = $1;
 __ZN8RenderOp18rebatchIfNecessaryEv($0);
 return;
}
function __ZN17RenderOpMultiRectC2EP4View($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev($0);
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 32|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 40|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 44|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 64|0);
 HEAPF32[$6>>2] = 1.0;
 HEAP32[$0>>2] = (3296);
 $7 = ((($0)) + 72|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 76|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 80|0);
 HEAP32[$9>>2] = 0;
 return;
}
function __ZN12BlurRenderOpD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3348);
 $1 = ((($0)) + 220|0);
 __THREW__ = 0;
 invoke_vii(598,3,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = ((($0)) + 232|0);
  __THREW__ = 0;
  invoke_vii(627,2,($4|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   __ZN8RenderOpD2Ev($0);
   return;
  }
 }
 $7 = ___cxa_find_matching_catch_3(0|0)|0;
 $8 = tempRet0;
 __ZN8RenderOpD2Ev($0);
 ___clang_call_terminate($7);
 // unreachable;
}
function __ZN12BlurRenderOpD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3348);
 $1 = ((($0)) + 220|0);
 __THREW__ = 0;
 invoke_vii(598,3,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = ((($0)) + 232|0);
  __THREW__ = 0;
  invoke_vii(627,2,($4|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   __ZN8RenderOpD2Ev($0);
   __ZdlPv($0);
   return;
  }
 }
 $7 = ___cxa_find_matching_catch_3(0|0)|0;
 $8 = tempRet0;
 __ZN8RenderOpD2Ev($0);
 ___clang_call_terminate($7);
 // unreachable;
}
function __ZN12BlurRenderOp7setRectERK4RECT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0.0, $$sroa$4$0$$sroa_idx2 = 0, $$sroa$4$0$copyload = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $2 = sp + 128|0;
 $3 = sp;
 $$sroa$0$0$$sroa_idx = ((($0)) + 20|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$0$0$$sroa_idx>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$0$0$$sroa_idx+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$0$0$$sroa_idx+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$0$0$$sroa_idx+3>>0];$$sroa$0$0$copyload = +HEAPF32[tempDoublePtr>>2];
 $$sroa$4$0$$sroa_idx2 = ((($0)) + 24|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$4$0$$sroa_idx2>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$4$0$$sroa_idx2+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$4$0$$sroa_idx2+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$4$0$$sroa_idx2+3>>0];$$sroa$4$0$copyload = +HEAPF32[tempDoublePtr>>2];
 __ZN8RenderOp7setRectERK4RECT($0,$1);
 $4 = ((($1)) + 8|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$4>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$4+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$4+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$4+3>>0];$5 = +HEAPF32[tempDoublePtr>>2];
 $6 = $$sroa$0$0$copyload == $5;
 if ($6) {
  $7 = ((($1)) + 12|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$7>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$7+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$7+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$7+3>>0];$8 = +HEAPF32[tempDoublePtr>>2];
  $9 = $$sroa$4$0$copyload == $8;
  if ($9) {
   STACKTOP = sp;return;
  }
 }
 $10 = +HEAPF32[$$sroa$0$0$$sroa_idx>>2];
 $11 = $10 * 0.25;
 $12 = (~~(($11)));
 $13 = ((($0)) + 80|0);
 HEAP32[$13>>2] = $12;
 $14 = +HEAPF32[$$sroa$4$0$$sroa_idx2>>2];
 $15 = $14 * 0.25;
 $16 = (~~(($15)));
 $17 = ((($0)) + 84|0);
 HEAP32[$17>>2] = $16;
 $18 = (~~(($10)));
 $19 = ((($0)) + 72|0);
 $20 = (~~(($14)));
 $21 = ((($0)) + 76|0);
 $22 = (+($18|0));
 $23 = (+Math_log((+$22)));
 $24 = $23;
 $25 = $24 * 1.4426950408889634;
 $26 = (+Math_ceil((+$25)));
 $27 = (~~(($26)));
 $28 = 1 << $27;
 HEAP32[$19>>2] = $28;
 $29 = (+($20|0));
 $30 = (+Math_log((+$29)));
 $31 = $30;
 $32 = $31 * 1.4426950408889634;
 $33 = (+Math_ceil((+$32)));
 $34 = (~~(($33)));
 $35 = 1 << $34;
 HEAP32[$21>>2] = $35;
 _glGetIntegerv(32873,($2|0));
 $36 = ((($0)) + 220|0);
 $37 = HEAP32[$36>>2]|0;
 _glBindTexture(3553,($37|0));
 _glTexParameteri(3553,10241,9985);
 _glTexParameteri(3553,33085,2);
 $38 = HEAP32[$19>>2]|0;
 $39 = HEAP32[$21>>2]|0;
 _glTexImage2D(3553,0,6407,($38|0),($39|0),0,6407,33635,(0|0));
 $40 = ((($0)) + 224|0);
 $41 = HEAP32[$40>>2]|0;
 _glBindTexture(3553,($41|0));
 $42 = HEAP32[$13>>2]|0;
 $43 = HEAP32[$17>>2]|0;
 _glTexImage2D(3553,0,6407,($42|0),($43|0),0,6407,5121,(0|0));
 $44 = ((($0)) + 228|0);
 $45 = HEAP32[$44>>2]|0;
 _glBindTexture(3553,($45|0));
 $46 = HEAP32[$13>>2]|0;
 $47 = HEAP32[$17>>2]|0;
 _glTexImage2D(3553,0,6407,($46|0),($47|0),0,6407,5121,(0|0));
 $48 = HEAP32[$2>>2]|0;
 _glBindTexture(3553,($48|0));
 $49 = HEAP32[$13>>2]|0;
 $50 = (+($49|0));
 $51 = HEAP32[$17>>2]|0;
 $52 = (+($51|0));
 __Z15setOrthoFrustumffffff($3,0.0,$50,0.0,$52,-1.0,1.0);
 $53 = ((($0)) + 92|0);
 dest=$53; src=$3; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $54 = ((($0)) + 88|0);
 HEAP8[$54>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN12BlurRenderOp6renderEP6WindowP7Surface($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $$pre$phi32Z2D = 0, $$pre$phiZ2D = 0, $$pre31 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0.0, $$sroa$0$0$copyload21 = 0.0, $$sroa$026$0$copyload = 0.0, $$sroa$4$0$$sroa_idx23 = 0, $$sroa$4$0$$sroa_idx6 = 0, $$sroa$4$0$copyload = 0.0, $$sroa$4$0$copyload24 = 0.0, $$sroa$428$0$$sroa_idx29 = 0, $$sroa$428$0$copyload = 0.0, $$sroa$7$0$$sroa_idx9 = 0, $$sroa$7$0$copyload = 0.0, $$sroa$8$0$$sroa_idx11 = 0, $$sroa$8$0$copyload = 0.0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $3 = sp + 24|0;
 $4 = sp + 16|0;
 $5 = sp + 136|0;
 $6 = sp + 104|0;
 $7 = sp + 72|0;
 $8 = sp + 40|0;
 $9 = sp + 8|0;
 $10 = sp;
 __ZN8RenderOp6renderEP6WindowP7Surface($0,$1,$2);
 _glGetIntegerv(2978,($3|0));
 $11 = ((($0)) + 220|0);
 $12 = HEAP32[$11>>2]|0;
 _glBindTexture(3553,($12|0));
 $$sroa$0$0$$sroa_idx = ((($0)) + 12|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$0$0$$sroa_idx>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$0$0$$sroa_idx+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$0$0$$sroa_idx+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$0$0$$sroa_idx+3>>0];$$sroa$0$0$copyload = +HEAPF32[tempDoublePtr>>2];
 $$sroa$4$0$$sroa_idx6 = ((($0)) + 16|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$4$0$$sroa_idx6>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$4$0$$sroa_idx6+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$4$0$$sroa_idx6+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$4$0$$sroa_idx6+3>>0];$$sroa$4$0$copyload = +HEAPF32[tempDoublePtr>>2];
 $$sroa$7$0$$sroa_idx9 = ((($0)) + 20|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$7$0$$sroa_idx9>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$7$0$$sroa_idx9+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$7$0$$sroa_idx9+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$7$0$$sroa_idx9+3>>0];$$sroa$7$0$copyload = +HEAPF32[tempDoublePtr>>2];
 $$sroa$8$0$$sroa_idx11 = ((($0)) + 24|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$8$0$$sroa_idx11>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$8$0$$sroa_idx11+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$8$0$$sroa_idx11+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$8$0$$sroa_idx11+3>>0];$$sroa$8$0$copyload = +HEAPF32[tempDoublePtr>>2];
 $13 = ((($3)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($14|0));
 $16 = $15 - $$sroa$8$0$copyload;
 $17 = $$sroa$4$0$copyload + $16;
 $18 = (~~(($$sroa$0$0$copyload)));
 $19 = (~~(($17)));
 $20 = (~~(($$sroa$7$0$copyload)));
 $21 = (~~(($$sroa$8$0$copyload)));
 _glCopyTexSubImage2D(3553,0,0,0,($18|0),($19|0),($20|0),($21|0));
 _glGenerateMipmap(3553);
 _glGetIntegerv(36006,($4|0));
 $22 = ((($0)) + 240|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $25 = ((($1)) + 96|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (__ZN8ItemPool5allocEiPNS_5AllocE($26,1,0)|0);
  HEAP32[$22>>2] = $27;
  $32 = $27;
 } else {
  $32 = $23;
 }
 $28 = ((($0)) + 88|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = ($29<<24>>24)==(0);
 if ($30) {
  $31 = HEAP32[$32>>2]|0;
  $33 = ((($31)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($31)) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($32)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = Math_imul($38, $36)|0;
  $40 = (($34) + ($39)|0);
  __Z11VERTEX_Makeffffj($5,0.0,0.0,0.0,0.0,0);
  $41 = ((($40)) + 64|0);
  dest=$41; src=$5; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $42 = ((($0)) + 80|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (+($43|0));
  __Z11VERTEX_Makeffffj($6,$44,0.0,1.0,0.0,0);
  $45 = ((($40)) + 96|0);
  dest=$45; src=$6; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $46 = ((($0)) + 84|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (+($47|0));
  __Z11VERTEX_Makeffffj($7,0.0,$48,0.0,1.0,0);
  dest=$40; src=$7; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $49 = HEAP32[$42>>2]|0;
  $50 = (+($49|0));
  $51 = HEAP32[$46>>2]|0;
  $52 = (+($51|0));
  __Z11VERTEX_Makeffffj($8,$50,$52,1.0,1.0,0);
  $53 = ((($40)) + 32|0);
  dest=$53; src=$8; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $54 = HEAP32[$22>>2]|0;
  $55 = ((($54)) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $56 << 7;
  $58 = ((($54)) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $59 << 7;
  $61 = HEAP32[$54>>2]|0;
  $62 = ((($61)) + 8|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($61)) + 12|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = Math_imul($65, $56)|0;
  $67 = (($63) + ($66)|0);
  _glBufferSubData(34962,($57|0),($60|0),($67|0));
  HEAP8[$28>>0] = 1;
  $$pre$phi32Z2D = $42;$$pre$phiZ2D = $46;
 } else {
  $$pre = ((($0)) + 84|0);
  $$pre31 = ((($0)) + 80|0);
  $$pre$phi32Z2D = $$pre31;$$pre$phiZ2D = $$pre;
 }
 $68 = ((($0)) + 232|0);
 $69 = HEAP32[$68>>2]|0;
 _glBindFramebuffer(36160,($69|0));
 __ZN9GLProgram3useEP6Window(29120,$1);
 $70 = ((($0)) + 92|0);
 __ZN9GLProgram6setMvpERK7Matrix4(29120,$70);
 $71 = HEAP32[$$pre$phiZ2D>>2]|0;
 $72 = (+($71|0));
 $73 = 1.0 / $72;
 __Z10POINT_Makeff($9,0.0,$73);
 $$sroa$026$0$copyload = +HEAPF32[$9>>2];
 $$sroa$428$0$$sroa_idx29 = ((($9)) + 4|0);
 $$sroa$428$0$copyload = +HEAPF32[$$sroa$428$0$$sroa_idx29>>2];
 $74 = HEAP32[(29304)>>2]|0;
 _glUniform2f(($74|0),(+$$sroa$026$0$copyload),(+$$sroa$428$0$copyload));
 $75 = HEAP32[$$pre$phi32Z2D>>2]|0;
 $76 = HEAP32[$$pre$phiZ2D>>2]|0;
 _glViewport(0,0,($75|0),($76|0));
 $77 = HEAP32[$22>>2]|0;
 $78 = ((($77)) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($79*12)|0;
 $81 = $80;
 _glDrawElements(4,6,5123,($81|0));
 $82 = ((($0)) + 224|0);
 $83 = HEAP32[$82>>2]|0;
 _glBindTexture(3553,($83|0));
 $84 = ((($0)) + 236|0);
 $85 = HEAP32[$84>>2]|0;
 _glBindFramebuffer(36160,($85|0));
 $86 = HEAP32[$$pre$phi32Z2D>>2]|0;
 $87 = (+($86|0));
 $88 = 1.0 / $87;
 __Z10POINT_Makeff($10,$88,0.0);
 $$sroa$0$0$copyload21 = +HEAPF32[$10>>2];
 $$sroa$4$0$$sroa_idx23 = ((($10)) + 4|0);
 $$sroa$4$0$copyload24 = +HEAPF32[$$sroa$4$0$$sroa_idx23>>2];
 $89 = HEAP32[(29304)>>2]|0;
 _glUniform2f(($89|0),(+$$sroa$0$0$copyload21),(+$$sroa$4$0$copyload24));
 $90 = HEAP32[$22>>2]|0;
 $91 = ((($90)) + 4|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($92*12)|0;
 $94 = $93;
 _glDrawElements(4,6,5123,($94|0));
 $95 = HEAP32[$4>>2]|0;
 _glBindFramebuffer(36160,($95|0));
 $96 = HEAP32[$3>>2]|0;
 $97 = ((($3)) + 4|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ((($3)) + 8|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = HEAP32[$13>>2]|0;
 _glViewport(($96|0),($98|0),($100|0),($101|0));
 $102 = ((($1)) + 112|0);
 HEAP32[$102>>2] = 0;
 $103 = ((($0)) + 228|0);
 $104 = HEAP32[$103>>2]|0;
 _glBindTexture(3553,($104|0));
 $105 = ((($0)) + 28|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = HEAP32[$106>>2]|0;
 $108 = ((($107)) + 16|0);
 $109 = HEAP32[$108>>2]|0;
 FUNCTION_TABLE_vii[$109 & 1023]($106,$1);
 STACKTOP = sp;return;
}
function __ZN12BlurRenderOp7asQuadsEP5_QUAD($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$5+12>>2]|0;
 FUNCTION_TABLE_viii[$4 & 1023]($0,$$byval_copy,$1);
 $6 = ((($1)) + 72|0);
 HEAPF32[tempDoublePtr>>2]=0.0;HEAP8[$6>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$6+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$6+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$6+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $7 = ((($1)) + 8|0);
 HEAPF32[tempDoublePtr>>2]=0.0;HEAP8[$7>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$7+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$7+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$7+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $8 = ((($0)) + 24|0);
 $9 = +HEAPF32[$8>>2];
 $10 = ((($0)) + 76|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (+($11|0));
 $13 = $9 / $12;
 $14 = ((($1)) + 44|0);
 HEAPF32[tempDoublePtr>>2]=$13;HEAP8[$14>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$14+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$14+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$14+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $15 = ((($1)) + 12|0);
 HEAPF32[tempDoublePtr>>2]=$13;HEAP8[$15>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$15+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$15+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$15+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $16 = ((($0)) + 20|0);
 $17 = +HEAPF32[$16>>2];
 $18 = ((($0)) + 72|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (+($19|0));
 $21 = $17 / $20;
 $22 = ((($1)) + 104|0);
 HEAPF32[tempDoublePtr>>2]=$21;HEAP8[$22>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$22+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$22+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$22+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $23 = ((($1)) + 40|0);
 HEAPF32[tempDoublePtr>>2]=$21;HEAP8[$23>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$23+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$23+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$23+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $24 = ((($1)) + 108|0);
 HEAPF32[tempDoublePtr>>2]=0.0;HEAP8[$24>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$24+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$24+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$24+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $25 = ((($1)) + 76|0);
 HEAPF32[tempDoublePtr>>2]=0.0;HEAP8[$25>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$25+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$25+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$25+3>>0]=HEAP8[tempDoublePtr+3>>0];
 STACKTOP = sp;return;
}
function __ZN13GLProgramBlurD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN13GLProgramBlur4loadEv($0) {
 $0 = $0|0;
 var $$0150187 = 0.0, $$0151186 = 0, $$1 = 0, $$1159 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0;
 var $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0;
 var $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0;
 var $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0;
 var $98 = 0.0, $99 = 0, $exitcond = 0, $pow2 = 0.0, $vararg_buffer = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer33 = 0, $vararg_buffer37 = 0, $vararg_buffer41 = 0, $vararg_buffer45 = 0, $vararg_buffer49 = 0, $vararg_buffer53 = 0, $vararg_buffer57 = 0, $vararg_buffer61 = 0, $vararg_buffer9 = 0;
 var $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr24 = 0, $vararg_ptr28 = 0, $vararg_ptr32 = 0, $vararg_ptr36 = 0, $vararg_ptr40 = 0, $vararg_ptr44 = 0, $vararg_ptr48 = 0, $vararg_ptr52 = 0, $vararg_ptr56 = 0, $vararg_ptr6 = 0, $vararg_ptr60 = 0, $vararg_ptr64 = 0, $vararg_ptr65 = 0, $vararg_ptr66 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(480|0);
 $vararg_buffer61 = sp + 248|0;
 $vararg_buffer57 = sp + 232|0;
 $vararg_buffer53 = sp + 216|0;
 $vararg_buffer49 = sp + 200|0;
 $vararg_buffer45 = sp + 184|0;
 $vararg_buffer41 = sp + 168|0;
 $vararg_buffer37 = sp + 152|0;
 $vararg_buffer33 = sp + 136|0;
 $vararg_buffer29 = sp + 120|0;
 $vararg_buffer25 = sp + 104|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer18 = sp + 80|0;
 $vararg_buffer15 = sp + 72|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 352|0;
 $2 = sp + 336|0;
 $3 = sp + 324|0;
 $4 = sp + 280|0;
 $$0150187 = 0.0;$$0151186 = 0;
 while(1) {
  $58 = (+($$0151186>>>0));
  $pow2 = $58 * $58;
  $59 = $pow2 * -0.03125;
  $60 = (+Math_exp((+$59)));
  $61 = $60 * 0.099735570100358176;
  $62 = $61;
  $63 = (($4) + ($$0151186<<2)|0);
  HEAPF32[$63>>2] = $62;
  $64 = ($$0151186|0)==(0);
  $65 = $64 ? 1.0 : 2.0;
  $66 = $65 * $62;
  $7 = $$0150187 + $66;
  $67 = (($$0151186) + 1)|0;
  $exitcond = ($67|0)==(11);
  if ($exitcond) {
   break;
  } else {
   $$0150187 = $7;$$0151186 = $67;
  }
 }
 $5 = +HEAPF32[$4>>2];
 $6 = $5 / $7;
 HEAPF32[$4>>2] = $6;
 $8 = ((($4)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $9 / $7;
 HEAPF32[$8>>2] = $10;
 $11 = ((($4)) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $12 / $7;
 HEAPF32[$11>>2] = $13;
 $14 = ((($4)) + 12|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $15 / $7;
 HEAPF32[$14>>2] = $16;
 $17 = ((($4)) + 16|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $18 / $7;
 HEAPF32[$17>>2] = $19;
 $20 = ((($4)) + 20|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $21 / $7;
 HEAPF32[$20>>2] = $22;
 $23 = ((($4)) + 24|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $24 / $7;
 HEAPF32[$23>>2] = $25;
 $26 = ((($4)) + 28|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $27 / $7;
 HEAPF32[$26>>2] = $28;
 $29 = ((($4)) + 32|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $30 / $7;
 HEAPF32[$29>>2] = $31;
 $32 = ((($4)) + 36|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $33 / $7;
 HEAPF32[$32>>2] = $34;
 $35 = ((($4)) + 40|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $36 / $7;
 HEAPF32[$35>>2] = $37;
 $38 = $10 + $13;
 $39 = $13 * 2.0;
 $40 = $10 + $39;
 $41 = $40 / $38;
 $42 = $16 + $19;
 $43 = $16 * 3.0;
 $44 = $19 * 4.0;
 $45 = $43 + $44;
 $46 = $45 / $42;
 $47 = $22 + $25;
 $48 = $22 * 5.0;
 $49 = $25 * 6.0;
 $50 = $48 + $49;
 $51 = $50 / $47;
 $52 = (__Znwj(112)|0);
 HEAP32[$2>>2] = $52;
 $53 = ((($2)) + 8|0);
 HEAP32[$53>>2] = -2147483536;
 $54 = ((($2)) + 4|0);
 HEAP32[$54>>2] = 105;
 dest=$52; src=13315; stop=dest+105|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $55 = ((($52)) + 105|0);
 HEAP8[$55>>0] = 0;
 HEAP32[$vararg_buffer>>2] = 7;
 (_sprintf($1,13421,$vararg_buffer)|0);
 __THREW__ = 0;
 (invoke_iii(603,($2|0),($1|0))|0);
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 do {
  if ($57) {
   label = 7;
  } else {
   __THREW__ = 0;
   (invoke_iii(603,($2|0),(13456|0))|0);
   $68 = __THREW__; __THREW__ = 0;
   $69 = $68&1;
   if ($69) {
    label = 7;
   } else {
    __THREW__ = 0;
    (invoke_iii(603,($2|0),(13515|0))|0);
    $70 = __THREW__; __THREW__ = 0;
    $71 = $70&1;
    if ($71) {
     label = 7;
    } else {
     $72 = $41;
     HEAP32[$vararg_buffer3>>2] = 1;
     $vararg_ptr6 = ((($vararg_buffer3)) + 8|0);
     HEAPF64[$vararg_ptr6>>3] = $72;
     $vararg_ptr7 = ((($vararg_buffer3)) + 16|0);
     HEAP32[$vararg_ptr7>>2] = 2;
     $vararg_ptr8 = ((($vararg_buffer3)) + 24|0);
     HEAPF64[$vararg_ptr8>>3] = $72;
     (_sprintf($1,13553,$vararg_buffer3)|0);
     __THREW__ = 0;
     (invoke_iii(603,($2|0),($1|0))|0);
     $73 = __THREW__; __THREW__ = 0;
     $74 = $73&1;
     if (!($74)) {
      $77 = $46;
      HEAP32[$vararg_buffer9>>2] = 3;
      $vararg_ptr12 = ((($vararg_buffer9)) + 8|0);
      HEAPF64[$vararg_ptr12>>3] = $77;
      $vararg_ptr13 = ((($vararg_buffer9)) + 16|0);
      HEAP32[$vararg_ptr13>>2] = 4;
      $vararg_ptr14 = ((($vararg_buffer9)) + 24|0);
      HEAPF64[$vararg_ptr14>>3] = $77;
      (_sprintf($1,13553,$vararg_buffer9)|0);
      __THREW__ = 0;
      (invoke_iii(603,($2|0),($1|0))|0);
      $78 = __THREW__; __THREW__ = 0;
      $79 = $78&1;
      if (!($79)) {
       $174 = $51;
       HEAP32[$vararg_buffer61>>2] = 5;
       $vararg_ptr64 = ((($vararg_buffer61)) + 8|0);
       HEAPF64[$vararg_ptr64>>3] = $174;
       $vararg_ptr65 = ((($vararg_buffer61)) + 16|0);
       HEAP32[$vararg_ptr65>>2] = 6;
       $vararg_ptr66 = ((($vararg_buffer61)) + 24|0);
       HEAPF64[$vararg_ptr66>>3] = $174;
       (_sprintf($1,13553,$vararg_buffer61)|0);
       __THREW__ = 0;
       (invoke_iii(603,($2|0),($1|0))|0);
       $175 = __THREW__; __THREW__ = 0;
       $176 = $175&1;
       if (!($176)) {
        __THREW__ = 0;
        (invoke_iii(603,($2|0),(14057|0))|0);
        $177 = __THREW__; __THREW__ = 0;
        $178 = $177&1;
        if ($178) {
         label = 7;
         break;
        }
        ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
        __THREW__ = 0;
        $82 = (invoke_ii(527,64)|0);
        $83 = __THREW__; __THREW__ = 0;
        $84 = $83&1;
        if ($84) {
         label = 7;
         break;
        }
        HEAP32[$3>>2] = $82;
        $85 = ((($3)) + 8|0);
        HEAP32[$85>>2] = -2147483584;
        $86 = ((($3)) + 4|0);
        HEAP32[$86>>2] = 51;
        dest=$82; src=13666; stop=dest+51|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
        $87 = ((($82)) + 51|0);
        HEAP8[$87>>0] = 0;
        HEAP32[$vararg_buffer15>>2] = 7;
        (_sprintf($1,13718,$vararg_buffer15)|0);
        __THREW__ = 0;
        (invoke_iii(603,($3|0),($1|0))|0);
        $88 = __THREW__; __THREW__ = 0;
        $89 = $88&1;
        do {
         if (!($89)) {
          __THREW__ = 0;
          (invoke_iii(603,($3|0),(13759|0))|0);
          $90 = __THREW__; __THREW__ = 0;
          $91 = $90&1;
          if (!($91)) {
           $92 = +HEAPF32[$4>>2];
           $93 = $92;
           HEAPF64[$vararg_buffer18>>3] = $93;
           (_sprintf($1,13774,$vararg_buffer18)|0);
           __THREW__ = 0;
           (invoke_iii(603,($3|0),($1|0))|0);
           $94 = __THREW__; __THREW__ = 0;
           $95 = $94&1;
           if (!($95)) {
            $96 = +HEAPF32[$8>>2];
            $97 = $96 + $13;
            $98 = $97;
            HEAP32[$vararg_buffer21>>2] = 1;
            $vararg_ptr24 = ((($vararg_buffer21)) + 8|0);
            HEAPF64[$vararg_ptr24>>3] = $98;
            (_sprintf($1,13834,$vararg_buffer21)|0);
            __THREW__ = 0;
            (invoke_iii(603,($3|0),($1|0))|0);
            $99 = __THREW__; __THREW__ = 0;
            $100 = $99&1;
            if (!($100)) {
             HEAP32[$vararg_buffer25>>2] = 2;
             $vararg_ptr28 = ((($vararg_buffer25)) + 8|0);
             HEAPF64[$vararg_ptr28>>3] = $98;
             (_sprintf($1,13834,$vararg_buffer25)|0);
             __THREW__ = 0;
             (invoke_iii(603,($3|0),($1|0))|0);
             $101 = __THREW__; __THREW__ = 0;
             $102 = $101&1;
             if (!($102)) {
              $103 = $42;
              HEAP32[$vararg_buffer29>>2] = 3;
              $vararg_ptr32 = ((($vararg_buffer29)) + 8|0);
              HEAPF64[$vararg_ptr32>>3] = $103;
              (_sprintf($1,13834,$vararg_buffer29)|0);
              __THREW__ = 0;
              (invoke_iii(603,($3|0),($1|0))|0);
              $104 = __THREW__; __THREW__ = 0;
              $105 = $104&1;
              if (!($105)) {
               HEAP32[$vararg_buffer45>>2] = 4;
               $vararg_ptr48 = ((($vararg_buffer45)) + 8|0);
               HEAPF64[$vararg_ptr48>>3] = $103;
               (_sprintf($1,13834,$vararg_buffer45)|0);
               __THREW__ = 0;
               (invoke_iii(603,($3|0),($1|0))|0);
               $160 = __THREW__; __THREW__ = 0;
               $161 = $160&1;
               if (!($161)) {
                $162 = $47;
                HEAP32[$vararg_buffer49>>2] = 5;
                $vararg_ptr52 = ((($vararg_buffer49)) + 8|0);
                HEAPF64[$vararg_ptr52>>3] = $162;
                (_sprintf($1,13834,$vararg_buffer49)|0);
                __THREW__ = 0;
                (invoke_iii(603,($3|0),($1|0))|0);
                $163 = __THREW__; __THREW__ = 0;
                $164 = $163&1;
                if (!($164)) {
                 HEAP32[$vararg_buffer53>>2] = 6;
                 $vararg_ptr56 = ((($vararg_buffer53)) + 8|0);
                 HEAPF64[$vararg_ptr56>>3] = $162;
                 (_sprintf($1,13834,$vararg_buffer53)|0);
                 __THREW__ = 0;
                 (invoke_iii(603,($3|0),($1|0))|0);
                 $165 = __THREW__; __THREW__ = 0;
                 $166 = $165&1;
                 if (!($166)) {
                  $167 = $28 + $31;
                  $168 = $28 * 7.0;
                  $169 = $31 * 8.0;
                  $170 = $168 + $169;
                  $171 = $170 / $167;
                  $106 = $171;
                  $107 = $167;
                  HEAPF64[$vararg_buffer57>>3] = $106;
                  $vararg_ptr60 = ((($vararg_buffer57)) + 8|0);
                  HEAPF64[$vararg_ptr60>>3] = $107;
                  (_sprintf($1,13955,$vararg_buffer57)|0);
                  __THREW__ = 0;
                  (invoke_iii(603,($3|0),($1|0))|0);
                  $172 = __THREW__; __THREW__ = 0;
                  $173 = $172&1;
                  if ($173) {
                   break;
                  }
                  HEAPF64[$vararg_buffer33>>3] = $106;
                  $vararg_ptr36 = ((($vararg_buffer33)) + 8|0);
                  HEAPF64[$vararg_ptr36>>3] = $107;
                  (_sprintf($1,13887,$vararg_buffer33)|0);
                  __THREW__ = 0;
                  (invoke_iii(603,($3|0),($1|0))|0);
                  $108 = __THREW__; __THREW__ = 0;
                  $109 = $108&1;
                  if ($109) {
                   break;
                  }
                  $110 = $34 + $37;
                  $111 = $34 * 9.0;
                  $112 = $37 * 10.0;
                  $113 = $111 + $112;
                  $114 = $113 / $110;
                  $115 = $114;
                  $116 = $110;
                  HEAPF64[$vararg_buffer37>>3] = $115;
                  $vararg_ptr40 = ((($vararg_buffer37)) + 8|0);
                  HEAPF64[$vararg_ptr40>>3] = $116;
                  (_sprintf($1,13955,$vararg_buffer37)|0);
                  __THREW__ = 0;
                  (invoke_iii(603,($3|0),($1|0))|0);
                  $117 = __THREW__; __THREW__ = 0;
                  $118 = $117&1;
                  if ($118) {
                   break;
                  }
                  HEAPF64[$vararg_buffer41>>3] = $115;
                  $vararg_ptr44 = ((($vararg_buffer41)) + 8|0);
                  HEAPF64[$vararg_ptr44>>3] = $116;
                  (_sprintf($1,13887,$vararg_buffer41)|0);
                  __THREW__ = 0;
                  (invoke_iii(603,($3|0),($1|0))|0);
                  $156 = __THREW__; __THREW__ = 0;
                  $157 = $156&1;
                  if ($157) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(603,($3|0),(14033|0))|0);
                  $158 = __THREW__; __THREW__ = 0;
                  $159 = $158&1;
                  if ($159) {
                   break;
                  }
                  $119 = HEAP32[$0>>2]|0;
                  $120 = ((($119)) + 32|0);
                  $121 = HEAP32[$120>>2]|0;
                  $122 = ((($2)) + 11|0);
                  $123 = HEAP8[$122>>0]|0;
                  $124 = ($123<<24>>24)<(0);
                  $125 = HEAP32[$2>>2]|0;
                  $126 = $124 ? $125 : $2;
                  $127 = ((($3)) + 11|0);
                  $128 = HEAP8[$127>>0]|0;
                  $129 = ($128<<24>>24)<(0);
                  $130 = HEAP32[$3>>2]|0;
                  $131 = $129 ? $130 : $3;
                  __THREW__ = 0;
                  invoke_viii($121|0,($0|0),($126|0),($131|0));
                  $132 = __THREW__; __THREW__ = 0;
                  $133 = $132&1;
                  if ($133) {
                   break;
                  }
                  $134 = ((($0)) + 12|0);
                  $135 = HEAP32[$134>>2]|0;
                  __THREW__ = 0;
                  $136 = (invoke_iii(628,($135|0),(14023|0))|0);
                  $137 = __THREW__; __THREW__ = 0;
                  $138 = $137&1;
                  if ($138) {
                   break;
                  }
                  $139 = ((($0)) + 184|0);
                  HEAP32[$139>>2] = $136;
                  $140 = HEAP8[$127>>0]|0;
                  $141 = ($140<<24>>24)<(0);
                  if ($141) {
                   $142 = HEAP32[$3>>2]|0;
                   __ZdlPv($142);
                  }
                  $143 = HEAP8[$122>>0]|0;
                  $144 = ($143<<24>>24)<(0);
                  if (!($144)) {
                   STACKTOP = sp;return;
                  }
                  $145 = HEAP32[$2>>2]|0;
                  __ZdlPv($145);
                  STACKTOP = sp;return;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        } while(0);
        $146 = ___cxa_find_matching_catch_2()|0;
        $147 = tempRet0;
        $148 = ((($3)) + 11|0);
        $149 = HEAP8[$148>>0]|0;
        $150 = ($149<<24>>24)<(0);
        if ($150) {
         $151 = HEAP32[$3>>2]|0;
         __ZdlPv($151);
        }
        $$1 = $146;$$1159 = $147;
        break;
       }
      }
     }
     $80 = ___cxa_find_matching_catch_2()|0;
     $81 = tempRet0;
     $$1 = $80;$$1159 = $81;
    }
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $75 = ___cxa_find_matching_catch_2()|0;
  $76 = tempRet0;
  $$1 = $75;$$1159 = $76;
 }
 $152 = ((($2)) + 11|0);
 $153 = HEAP8[$152>>0]|0;
 $154 = ($153<<24>>24)<(0);
 if (!($154)) {
  ___resumeException($$1|0);
  // unreachable;
 }
 $155 = HEAP32[$2>>2]|0;
 __ZdlPv($155);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZN13GLProgramBlur12setTexOffsetE6_POINT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 184|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP8[tempDoublePtr>>0]=HEAP8[$1>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1+3>>0];$4 = +HEAPF32[tempDoublePtr>>2];
 $5 = ((($1)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$5>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$5+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$5+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$5+3>>0];$6 = +HEAPF32[tempDoublePtr>>2];
 _glUniform2f(($3|0),(+$4),(+$6));
 return;
}
function __ZN17GLProgramPostBlurD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN17GLProgramPostBlur4loadEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[794]|0;
 FUNCTION_TABLE_viii[$3 & 1023]($0,$4,14076);
 return;
}
function __GLOBAL__sub_I_renderop_blur_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev(29120);
 HEAP8[(29156)>>0] = 1;
 HEAP32[(29144)>>2] = (3492);
 HEAP8[(29172)>>0] = 1;
 HEAP32[(29160)>>2] = (3512);
 HEAPF32[(29236)>>2] = 1.0;
 HEAPF32[(29216)>>2] = 1.0;
 HEAPF32[(29196)>>2] = 1.0;
 HEAPF32[(29176)>>2] = 1.0;
 ;HEAP32[(29180)>>2]=0|0;HEAP32[(29180)+4>>2]=0|0;HEAP32[(29180)+8>>2]=0|0;HEAP32[(29180)+12>>2]=0|0;
 ;HEAP32[(29200)>>2]=0|0;HEAP32[(29200)+4>>2]=0|0;HEAP32[(29200)+8>>2]=0|0;HEAP32[(29200)+12>>2]=0|0;
 ;HEAP32[(29220)>>2]=0|0;HEAP32[(29220)+4>>2]=0|0;HEAP32[(29220)+8>>2]=0|0;HEAP32[(29220)+12>>2]=0|0;
 HEAP32[7280] = (3400);
 (___cxa_atexit((116|0),(29120|0),(___dso_handle|0))|0);
 __ZN6ObjectC2Ev(29308);
 HEAP8[(29344)>>0] = 1;
 HEAP32[(29332)>>2] = (3492);
 HEAP8[(29360)>>0] = 1;
 HEAP32[(29348)>>2] = (3512);
 HEAPF32[(29424)>>2] = 1.0;
 HEAPF32[(29404)>>2] = 1.0;
 HEAPF32[(29384)>>2] = 1.0;
 HEAPF32[(29364)>>2] = 1.0;
 ;HEAP32[(29368)>>2]=0|0;HEAP32[(29368)+4>>2]=0|0;HEAP32[(29368)+8>>2]=0|0;HEAP32[(29368)+12>>2]=0|0;
 ;HEAP32[(29388)>>2]=0|0;HEAP32[(29388)+4>>2]=0|0;HEAP32[(29388)+8>>2]=0|0;HEAP32[(29388)+12>>2]=0|0;
 ;HEAP32[(29408)>>2]=0|0;HEAP32[(29408)+4>>2]=0|0;HEAP32[(29408)+8>>2]=0|0;HEAP32[(29408)+12>>2]=0|0;
 HEAP32[7327] = (3448);
 (___cxa_atexit((116|0),(29308|0),(___dso_handle|0))|0);
 return;
}
function __ZN14CachedUniform2IiE3useEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  return;
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vi[$6 & 1023]($0);
 HEAP8[$1>>0] = 0;
 return;
}
function __ZN14CachedUniform2IiE3setEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if ($4) {
  return;
 }
 HEAP32[$2>>2] = $1;
 $5 = ((($0)) + 12|0);
 HEAP8[$5>>0] = 1;
 return;
}
function __ZN10UniformInt4loadEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 _glUniform1i(($2|0),($4|0));
 return;
}
function __ZN14CachedUniform2IfE3useEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  return;
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vi[$6 & 1023]($0);
 HEAP8[$1>>0] = 0;
 return;
}
function __ZN14CachedUniform2IfE3setEf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $3 != $1;
 if (!($4)) {
  return;
 }
 HEAPF32[$2>>2] = $1;
 $5 = ((($0)) + 12|0);
 HEAP8[$5>>0] = 1;
 return;
}
function __ZN12UniformFloat4loadEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = +HEAPF32[$3>>2];
 _glUniform1f(($2|0),(+$4));
 return;
}
function __ZN12BlurRenderOpC2EP4View($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$08 = 0, $$09 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 __ZN8RenderOpC2EP4View($0,$1);
 HEAP32[$0>>2] = (3348);
 $4 = ((($0)) + 152|0);
 HEAPF32[$4>>2] = 1.0;
 $5 = ((($0)) + 132|0);
 HEAPF32[$5>>2] = 1.0;
 $6 = ((($0)) + 112|0);
 HEAPF32[$6>>2] = 1.0;
 $7 = ((($0)) + 92|0);
 HEAPF32[$7>>2] = 1.0;
 $8 = ((($0)) + 136|0);
 $9 = ((($0)) + 116|0);
 $10 = ((($0)) + 96|0);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;HEAP32[$10+12>>2]=0|0;
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;HEAP32[$9+12>>2]=0|0;
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;HEAP32[$8+12>>2]=0|0;
 $11 = ((($0)) + 28|0);
 HEAP32[$11>>2] = 29308;
 __THREW__ = 0;
 invoke_vii(629,32873,($2|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if (!($13)) {
  $14 = ((($0)) + 220|0);
  __THREW__ = 0;
  invoke_vii(630,3,($14|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if (!($16)) {
   $17 = HEAP32[$14>>2]|0;
   __THREW__ = 0;
   invoke_vii(631,3553,($17|0));
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if (!($19)) {
    __THREW__ = 0;
    invoke_viii(632,3553,10242,33071);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if (!($23)) {
     __THREW__ = 0;
     invoke_viii(632,3553,10243,33071);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if (!($25)) {
      __THREW__ = 0;
      invoke_viii(632,3553,10240,9729);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       __THREW__ = 0;
       invoke_viii(632,3553,10241,9729);
       $28 = __THREW__; __THREW__ = 0;
       $29 = $28&1;
       if (!($29)) {
        $30 = ((($0)) + 224|0);
        $31 = HEAP32[$30>>2]|0;
        __THREW__ = 0;
        invoke_vii(631,3553,($31|0));
        $32 = __THREW__; __THREW__ = 0;
        $33 = $32&1;
        if (!($33)) {
         __THREW__ = 0;
         invoke_viii(632,3553,10242,33071);
         $75 = __THREW__; __THREW__ = 0;
         $76 = $75&1;
         if (!($76)) {
          __THREW__ = 0;
          invoke_viii(632,3553,10243,33071);
          $77 = __THREW__; __THREW__ = 0;
          $78 = $77&1;
          if (!($78)) {
           __THREW__ = 0;
           invoke_viii(632,3553,10240,9729);
           $79 = __THREW__; __THREW__ = 0;
           $80 = $79&1;
           if (!($80)) {
            __THREW__ = 0;
            invoke_viii(632,3553,10241,9729);
            $81 = __THREW__; __THREW__ = 0;
            $82 = $81&1;
            if (!($82)) {
             $57 = ((($0)) + 228|0);
             $83 = HEAP32[$57>>2]|0;
             __THREW__ = 0;
             invoke_vii(631,3553,($83|0));
             $84 = __THREW__; __THREW__ = 0;
             $85 = $84&1;
             if (!($85)) {
              __THREW__ = 0;
              invoke_viii(632,3553,10242,33071);
              $86 = __THREW__; __THREW__ = 0;
              $87 = $86&1;
              if (!($87)) {
               __THREW__ = 0;
               invoke_viii(632,3553,10243,33071);
               $88 = __THREW__; __THREW__ = 0;
               $89 = $88&1;
               if (!($89)) {
                __THREW__ = 0;
                invoke_viii(632,3553,10240,9729);
                $90 = __THREW__; __THREW__ = 0;
                $91 = $90&1;
                if (!($91)) {
                 __THREW__ = 0;
                 invoke_viii(632,3553,10241,9729);
                 $92 = __THREW__; __THREW__ = 0;
                 $93 = $92&1;
                 if (!($93)) {
                  __THREW__ = 0;
                  invoke_vii(629,36006,($3|0));
                  $94 = __THREW__; __THREW__ = 0;
                  $95 = $94&1;
                  do {
                   if (!($95)) {
                    $36 = ((($0)) + 232|0);
                    __THREW__ = 0;
                    invoke_vii(633,2,($36|0));
                    $37 = __THREW__; __THREW__ = 0;
                    $38 = $37&1;
                    if ($38) {
                     break;
                    }
                    $39 = HEAP32[$36>>2]|0;
                    __THREW__ = 0;
                    invoke_vii(634,36160,($39|0));
                    $40 = __THREW__; __THREW__ = 0;
                    $41 = $40&1;
                    if ($41) {
                     break;
                    }
                    $42 = HEAP32[$30>>2]|0;
                    __THREW__ = 0;
                    invoke_vii(631,3553,($42|0));
                    $43 = __THREW__; __THREW__ = 0;
                    $44 = $43&1;
                    if ($44) {
                     break;
                    }
                    $45 = HEAP32[$30>>2]|0;
                    __THREW__ = 0;
                    invoke_viiiii(635,36160,36064,3553,($45|0),0);
                    $46 = __THREW__; __THREW__ = 0;
                    $47 = $46&1;
                    if ($47) {
                     break;
                    }
                    __THREW__ = 0;
                    invoke_viiiii(635,36160,36096,3553,0,0);
                    $48 = __THREW__; __THREW__ = 0;
                    $49 = $48&1;
                    if ($49) {
                     break;
                    }
                    __THREW__ = 0;
                    invoke_viiiii(635,36160,36128,3553,0,0);
                    $50 = __THREW__; __THREW__ = 0;
                    $51 = $50&1;
                    if ($51) {
                     break;
                    }
                    $52 = ((($0)) + 236|0);
                    $53 = HEAP32[$52>>2]|0;
                    __THREW__ = 0;
                    invoke_vii(634,36160,($53|0));
                    $54 = __THREW__; __THREW__ = 0;
                    $55 = $54&1;
                    if ($55) {
                     break;
                    }
                    $56 = HEAP32[$57>>2]|0;
                    __THREW__ = 0;
                    invoke_vii(631,3553,($56|0));
                    $58 = __THREW__; __THREW__ = 0;
                    $59 = $58&1;
                    if ($59) {
                     break;
                    }
                    $60 = HEAP32[$57>>2]|0;
                    __THREW__ = 0;
                    invoke_viiiii(635,36160,36064,3553,($60|0),0);
                    $61 = __THREW__; __THREW__ = 0;
                    $62 = $61&1;
                    if ($62) {
                     break;
                    }
                    __THREW__ = 0;
                    invoke_viiiii(635,36160,36096,3553,0,0);
                    $63 = __THREW__; __THREW__ = 0;
                    $64 = $63&1;
                    if ($64) {
                     break;
                    }
                    __THREW__ = 0;
                    invoke_viiiii(635,36160,36128,3553,0,0);
                    $65 = __THREW__; __THREW__ = 0;
                    $66 = $65&1;
                    if ($66) {
                     break;
                    }
                    $67 = HEAP32[$3>>2]|0;
                    __THREW__ = 0;
                    invoke_vii(634,36160,($67|0));
                    $68 = __THREW__; __THREW__ = 0;
                    $69 = $68&1;
                    if ($69) {
                     break;
                    }
                    $70 = HEAP32[$2>>2]|0;
                    __THREW__ = 0;
                    invoke_vii(631,3553,($70|0));
                    $71 = __THREW__; __THREW__ = 0;
                    $72 = $71&1;
                    if ($72) {
                     break;
                    }
                    STACKTOP = sp;return;
                   }
                  } while(0);
                  $73 = ___cxa_find_matching_catch_2()|0;
                  $74 = tempRet0;
                  $$08 = $74;$$09 = $73;
                  __ZN8RenderOpD2Ev($0);
                  ___resumeException($$09|0);
                  // unreachable;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
   $34 = ___cxa_find_matching_catch_2()|0;
   $35 = tempRet0;
   $$08 = $35;$$09 = $34;
   __ZN8RenderOpD2Ev($0);
   ___resumeException($$09|0);
   // unreachable;
  }
 }
 $20 = ___cxa_find_matching_catch_2()|0;
 $21 = tempRet0;
 $$08 = $21;$$09 = $20;
 __ZN8RenderOpD2Ev($0);
 ___resumeException($$09|0);
 // unreachable;
}
function __GLOBAL__sub_I_renderop_fillrect_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev(29492);
 HEAP8[(29528)>>0] = 1;
 HEAP32[(29516)>>2] = (3492);
 HEAP8[(29544)>>0] = 1;
 HEAP32[(29532)>>2] = (3512);
 HEAPF32[(29608)>>2] = 1.0;
 HEAPF32[(29588)>>2] = 1.0;
 HEAPF32[(29568)>>2] = 1.0;
 HEAPF32[(29548)>>2] = 1.0;
 ;HEAP32[(29552)>>2]=0|0;HEAP32[(29552)+4>>2]=0|0;HEAP32[(29552)+8>>2]=0|0;HEAP32[(29552)+12>>2]=0|0;
 ;HEAP32[(29572)>>2]=0|0;HEAP32[(29572)+4>>2]=0|0;HEAP32[(29572)+8>>2]=0|0;HEAP32[(29572)+12>>2]=0|0;
 ;HEAP32[(29592)>>2]=0|0;HEAP32[(29592)+4>>2]=0|0;HEAP32[(29592)+8>>2]=0|0;HEAP32[(29592)+12>>2]=0|0;
 HEAP32[7373] = (3532);
 (___cxa_atexit((116|0),(29492|0),(___dso_handle|0))|0);
 return;
}
function __ZN18GLProgramSolidFillD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN18GLProgramSolidFill4loadEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[793]|0;
 __ZN9GLProgram11loadShadersEPKcS1_($0,$1,14572);
 return;
}
function __ZN21ColorRectFillRenderOpC2EP4View($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8RenderOpC2EP4View($0,$1);
 HEAP32[$0>>2] = (3576);
 $2 = ((($0)) + 28|0);
 HEAP32[$2>>2] = 29492;
 $3 = ((($0)) + 60|0);
 HEAP32[$3>>2] = 0;
 return;
}
function __ZN21ColorRectFillRenderOpD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8RenderOpD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN21ColorRectFillRenderOpC2EP4ViewRK4RECTj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 __ZN8RenderOpC2EP4View($0,$1);
 HEAP32[$0>>2] = (3576);
 $4 = ((($0)) + 12|0);
 dest=$4; src=$2; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $5 = ((($0)) + 28|0);
 HEAP32[$5>>2] = 29492;
 $6 = ((($0)) + 64|0);
 HEAPF32[$6>>2] = 1.0;
 $7 = ((($0)) + 68|0);
 HEAP32[$7>>2] = $3;
 $8 = ($3>>>0)<(4278190080);
 $9 = $8&1;
 $10 = ((($0)) + 60|0);
 HEAP32[$10>>2] = $9;
 return;
}
function __ZN17RoundRectRenderOpD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8RenderOpD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN17RoundRectRenderOp12canMergeWithEPK8RenderOp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN8RenderOp12canMergeWithEPKS_($0,$1)|0);
 if (!($2)) {
  $38 = 0;
  return ($38|0);
 }
 $3 = ((($0)) + 20|0);
 $4 = +HEAPF32[$3>>2];
 $5 = ((($1)) + 20|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $4 == $6;
 if (!($7)) {
  $38 = 0;
  return ($38|0);
 }
 $8 = ((($0)) + 24|0);
 $9 = +HEAPF32[$8>>2];
 $10 = ((($1)) + 24|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $9 == $11;
 if (!($12)) {
  $38 = 0;
  return ($38|0);
 }
 $13 = ((($0)) + 68|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($1)) + 68|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($14|0)==($16|0);
 if (!($17)) {
  $38 = 0;
  return ($38|0);
 }
 $18 = ((($0)) + 96|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($1)) + 96|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($19|0)==($21|0);
 if (!($22)) {
  $38 = 0;
  return ($38|0);
 }
 $23 = ((($0)) + 100|0);
 $24 = +HEAPF32[$23>>2];
 $25 = ((($1)) + 100|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $24 == $26;
 if (!($27)) {
  $38 = 0;
  return ($38|0);
 }
 $28 = ((($0)) + 88|0);
 $29 = +HEAPF32[$28>>2];
 $30 = ((($1)) + 88|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $29 == $31;
 if (!($32)) {
  $38 = 0;
  return ($38|0);
 }
 $33 = ((($0)) + 92|0);
 $34 = +HEAPF32[$33>>2];
 $35 = ((($30)) + 4|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $34 == $36;
 $38 = $37;
 return ($38|0);
}
function __ZN17RoundRectRenderOp7setRectERK4RECT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8RenderOp7setRectERK4RECT($0,$1);
 $2 = ((($1)) + 8|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$2>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$2+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$2+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$2+3>>0];$3 = +HEAPF32[tempDoublePtr>>2];
 $4 = $3 * -0.5;
 $5 = ((($0)) + 72|0);
 HEAPF32[$5>>2] = $4;
 $6 = ((($0)) + 80|0);
 HEAPF32[$6>>2] = $3;
 $7 = ((($1)) + 12|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$7>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$7+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$7+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$7+3>>0];$8 = +HEAPF32[tempDoublePtr>>2];
 $9 = $8 * -0.5;
 $10 = ((($0)) + 76|0);
 HEAPF32[$10>>2] = $9;
 $11 = ((($0)) + 84|0);
 HEAPF32[$11>>2] = $8;
 return;
}
function __ZN17RoundRectRenderOp6renderEP6WindowP7Surface($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8RenderOp6renderEP6WindowP7Surface($0,$1,$2);
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(29676|0);
 $6 = ((($0)) + 88|0);
 if ($5) {
  $7 = +HEAPF32[$6>>2];
  $8 = HEAP32[(29904)>>2]|0;
  _glUniform1f(($8|0),(+$7));
 } else {
  $9 = HEAP32[(30136)>>2]|0;
  _glUniform2fv(($9|0),1,($6|0));
 }
 $10 = ((($0)) + 96|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($4)) + 192|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==($11|0);
 if (!($14)) {
  HEAP32[$12>>2] = $11;
  $15 = ((($4)) + 196|0);
  HEAP8[$15>>0] = 1;
 }
 $16 = ((($0)) + 20|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $17 * 0.5;
 $19 = ((($0)) + 24|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $20 * 0.5;
 $22 = ((($0)) + 100|0);
 $23 = +HEAPF32[$22>>2];
 $24 = ((($4)) + 208|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $18 != $25;
 $$pre = ((($4)) + 212|0);
 if (!($26)) {
  $27 = +HEAPF32[$$pre>>2];
  $28 = $21 != $27;
  if (!($28)) {
   $29 = ((($4)) + 216|0);
   $30 = +HEAPF32[$29>>2];
   $31 = $30 != 0.0;
   if (!($31)) {
    $32 = ((($4)) + 220|0);
    $33 = +HEAPF32[$32>>2];
    $34 = $23 != $33;
    if (!($34)) {
     return;
    }
   }
  }
 }
 HEAPF32[$24>>2] = $18;
 HEAPF32[$$pre>>2] = $21;
 $35 = ((($4)) + 216|0);
 HEAPF32[$35>>2] = 0.0;
 $36 = ((($4)) + 220|0);
 HEAPF32[$36>>2] = $23;
 $37 = ((($4)) + 224|0);
 HEAP8[$37>>0] = 1;
 return;
}
function __ZN17RoundRectRenderOp7asQuadsEP5_QUAD($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$5+12>>2]|0;
 FUNCTION_TABLE_viii[$4 & 1023]($0,$$byval_copy,$1);
 $6 = ((($0)) + 72|0);
 $7 = (+__ZNK4RECT4leftEv($6));
 $8 = ((($1)) + 72|0);
 HEAPF32[tempDoublePtr>>2]=$7;HEAP8[$8>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$8+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$8+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$8+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $9 = ((($1)) + 8|0);
 HEAPF32[tempDoublePtr>>2]=$7;HEAP8[$9>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$9+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$9+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$9+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $10 = (+__ZNK4RECT3topEv($6));
 $11 = ((($1)) + 44|0);
 HEAPF32[tempDoublePtr>>2]=$10;HEAP8[$11>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$11+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$11+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$11+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $12 = ((($1)) + 12|0);
 HEAPF32[tempDoublePtr>>2]=$10;HEAP8[$12>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$12+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$12+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$12+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $13 = (+__ZNK4RECT5rightEv($6));
 $14 = ((($1)) + 104|0);
 HEAPF32[tempDoublePtr>>2]=$13;HEAP8[$14>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$14+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$14+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$14+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $15 = ((($1)) + 40|0);
 HEAPF32[tempDoublePtr>>2]=$13;HEAP8[$15>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$15+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$15+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$15+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $16 = (+__ZNK4RECT6bottomEv($6));
 $17 = ((($1)) + 108|0);
 HEAPF32[tempDoublePtr>>2]=$16;HEAP8[$17>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$17+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$17+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$17+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $18 = ((($1)) + 76|0);
 HEAPF32[tempDoublePtr>>2]=$16;HEAP8[$18>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$18+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$18+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$18+3>>0]=HEAP8[tempDoublePtr+3>>0];
 STACKTOP = sp;return;
}
function __ZN17RoundRectRenderOp15setStrokeColourEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if ($4) {
  return;
 }
 HEAP32[$2>>2] = $1;
 __ZN8RenderOp18rebatchIfNecessaryEv($0);
 return;
}
function __ZN18GLProgramRoundRect16lazyLoadUniformsEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9GLProgram16lazyLoadUniformsEv($0);
 $1 = ((($0)) + 184|0);
 $2 = ((($0)) + 196|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ((($5)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_vi[$7 & 1023]($1);
  HEAP8[$2>>0] = 0;
 }
 $8 = ((($0)) + 200|0);
 $9 = ((($0)) + 224|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  return;
 }
 $12 = HEAP32[$8>>2]|0;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 FUNCTION_TABLE_vi[$14 & 1023]($8);
 HEAP8[$9>>0] = 0;
 return;
}
function __ZN21GLProgramRoundRectOneD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN21GLProgramRoundRectOne4loadEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[794]|0;
 FUNCTION_TABLE_viii[$3 & 1023]($0,$4,14754);
 return;
}
function __ZN21GLProgramRoundRectOne13findVariablesEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9GLProgram13findVariablesEv($0);
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_glGetUniformLocation(($2|0),(14711|0))|0);
 $4 = ((($0)) + 188|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$1>>2]|0;
 $6 = (_glGetUniformLocation(($5|0),(14724|0))|0);
 $7 = ((($0)) + 204|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$1>>2]|0;
 $9 = (_glGetUniformLocation(($8|0),(14747|0))|0);
 $10 = ((($0)) + 228|0);
 HEAP32[$10>>2] = $9;
 return;
}
function __ZN21GLProgramRoundRectOne9setRadiusEf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 228|0);
 $3 = HEAP32[$2>>2]|0;
 _glUniform1f(($3|0),(+$1));
 return;
}
function __ZN21GLProgramRoundRectTwoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN21GLProgramRoundRectTwo4loadEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[794]|0;
 FUNCTION_TABLE_viii[$3 & 1023]($0,$4,15341);
 return;
}
function __ZN21GLProgramRoundRectTwo13findVariablesEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9GLProgram13findVariablesEv($0);
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_glGetUniformLocation(($2|0),(14711|0))|0);
 $4 = ((($0)) + 188|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$1>>2]|0;
 $6 = (_glGetUniformLocation(($5|0),(14724|0))|0);
 $7 = ((($0)) + 204|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$1>>2]|0;
 $9 = (_glGetUniformLocation(($8|0),(15335|0))|0);
 $10 = ((($0)) + 228|0);
 HEAP32[$10>>2] = $9;
 return;
}
function __ZN21GLProgramRoundRectTwo8setRadiiEPf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 228|0);
 $3 = HEAP32[$2>>2]|0;
 _glUniform2fv(($3|0),1,($1|0));
 return;
}
function __GLOBAL__sub_I_renderop_roundrect_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev(29676);
 HEAP8[(29712)>>0] = 1;
 HEAP32[(29700)>>2] = (3492);
 HEAP8[(29728)>>0] = 1;
 HEAP32[(29716)>>2] = (3512);
 HEAPF32[(29792)>>2] = 1.0;
 HEAPF32[(29772)>>2] = 1.0;
 HEAPF32[(29752)>>2] = 1.0;
 HEAPF32[(29732)>>2] = 1.0;
 ;HEAP32[(29736)>>2]=0|0;HEAP32[(29736)+4>>2]=0|0;HEAP32[(29736)+8>>2]=0|0;HEAP32[(29736)+12>>2]=0|0;
 ;HEAP32[(29756)>>2]=0|0;HEAP32[(29756)+4>>2]=0|0;HEAP32[(29756)+8>>2]=0|0;HEAP32[(29756)+12>>2]=0|0;
 ;HEAP32[(29776)>>2]=0|0;HEAP32[(29776)+4>>2]=0|0;HEAP32[(29776)+8>>2]=0|0;HEAP32[(29776)+12>>2]=0|0;
 HEAP8[(29872)>>0] = 1;
 HEAP32[(29860)>>2] = (3780);
 ;HEAP32[(29884)>>2]=0|0;HEAP32[(29884)+4>>2]=0|0;HEAP32[(29884)+8>>2]=0|0;HEAP32[(29884)+12>>2]=0|0;
 HEAP8[(29900)>>0] = 1;
 HEAP32[(29876)>>2] = (3800);
 HEAP32[7419] = (3684);
 (___cxa_atexit((116|0),(29676|0),(___dso_handle|0))|0);
 __ZN6ObjectC2Ev(29908);
 HEAP8[(29944)>>0] = 1;
 HEAP32[(29932)>>2] = (3492);
 HEAP8[(29960)>>0] = 1;
 HEAP32[(29948)>>2] = (3512);
 HEAPF32[(30024)>>2] = 1.0;
 HEAPF32[(30004)>>2] = 1.0;
 HEAPF32[(29984)>>2] = 1.0;
 HEAPF32[(29964)>>2] = 1.0;
 ;HEAP32[(29968)>>2]=0|0;HEAP32[(29968)+4>>2]=0|0;HEAP32[(29968)+8>>2]=0|0;HEAP32[(29968)+12>>2]=0|0;
 ;HEAP32[(29988)>>2]=0|0;HEAP32[(29988)+4>>2]=0|0;HEAP32[(29988)+8>>2]=0|0;HEAP32[(29988)+12>>2]=0|0;
 ;HEAP32[(30008)>>2]=0|0;HEAP32[(30008)+4>>2]=0|0;HEAP32[(30008)+8>>2]=0|0;HEAP32[(30008)+12>>2]=0|0;
 HEAP8[(30104)>>0] = 1;
 HEAP32[(30092)>>2] = (3780);
 ;HEAP32[(30116)>>2]=0|0;HEAP32[(30116)+4>>2]=0|0;HEAP32[(30116)+8>>2]=0|0;HEAP32[(30116)+12>>2]=0|0;
 HEAP8[(30132)>>0] = 1;
 HEAP32[(30108)>>2] = (3800);
 HEAP32[7477] = (3732);
 (___cxa_atexit((116|0),(29908|0),(___dso_handle|0))|0);
 return;
}
function __ZN14CachedUniform2I7Vector4E3useEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  return;
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vi[$6 & 1023]($0);
 HEAP8[$1>>0] = 0;
 return;
}
function __ZN14CachedUniform2I7Vector4E3setES0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = +HEAPF32[$1>>2];
 $4 = +HEAPF32[$2>>2];
 $5 = $3 != $4;
 if (!($5)) {
  $6 = ((($1)) + 4|0);
  $7 = +HEAPF32[$6>>2];
  $8 = ((($0)) + 12|0);
  $9 = +HEAPF32[$8>>2];
  $10 = $7 != $9;
  if (!($10)) {
   $11 = ((($1)) + 8|0);
   $12 = +HEAPF32[$11>>2];
   $13 = ((($0)) + 16|0);
   $14 = +HEAPF32[$13>>2];
   $15 = $12 != $14;
   if (!($15)) {
    $16 = ((($1)) + 12|0);
    $17 = +HEAPF32[$16>>2];
    $18 = ((($0)) + 20|0);
    $19 = +HEAPF32[$18>>2];
    $20 = $17 != $19;
    if (!($20)) {
     return;
    }
   }
  }
 }
 ;HEAP32[$2>>2]=HEAP32[$1>>2]|0;HEAP32[$2+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$1+12>>2]|0;
 $21 = ((($0)) + 24|0);
 HEAP8[$21>>0] = 1;
 return;
}
function __ZN13UniformFloat44loadEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = +HEAPF32[$3>>2];
 $5 = ((($0)) + 12|0);
 $6 = +HEAPF32[$5>>2];
 $7 = ((($0)) + 16|0);
 $8 = +HEAPF32[$7>>2];
 $9 = ((($0)) + 20|0);
 $10 = +HEAPF32[$9>>2];
 _glUniform4f(($2|0),(+$4),(+$6),(+$8),(+$10));
 return;
}
function __ZN13UniformColour4loadEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 >>> 24;
 $4 = (+($3>>>0));
 $5 = $4 / 255.0;
 $6 = $2 & 255;
 $7 = (+($6|0));
 $8 = $7 / 255.0;
 $9 = $2 >>> 8;
 $10 = $9 & 255;
 $11 = (+($10|0));
 $12 = $11 / 255.0;
 $13 = $2 >>> 16;
 $14 = $13 & 255;
 $15 = (+($14|0));
 $16 = $15 / 255.0;
 $17 = ((($0)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 _glUniform4f(($18|0),(+$16),(+$12),(+$8),(+$5));
 return;
}
function __ZN17RoundRectRenderOpC2EP4Viewjfjf($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 $5 = +$5;
 var $10 = 0, $11 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8RenderOpC2EP4View($0,$1);
 HEAP32[$0>>2] = (3628);
 $6 = ((($0)) + 28|0);
 HEAP32[$6>>2] = 29676;
 $7 = ((($0)) + 88|0);
 HEAPF32[$7>>2] = $5;
 $8 = ((($0)) + 68|0);
 HEAP32[$8>>2] = $2;
 $9 = ((($0)) + 96|0);
 HEAP32[$9>>2] = $4;
 $10 = ((($0)) + 100|0);
 HEAPF32[$10>>2] = $3;
 $11 = ((($0)) + 60|0);
 HEAP32[$11>>2] = 1;
 return;
}
function __ZN17RoundRectRenderOpC2EP4ViewjfjPf($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8RenderOpC2EP4View($0,$1);
 HEAP32[$0>>2] = (3628);
 $6 = ((($0)) + 28|0);
 HEAP32[$6>>2] = 29908;
 $7 = HEAP32[$5>>2]|0;
 $8 = ((($0)) + 88|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($5)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 92|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($0)) + 68|0);
 HEAP32[$12>>2] = $2;
 $13 = ((($0)) + 96|0);
 HEAP32[$13>>2] = $4;
 $14 = ((($0)) + 100|0);
 HEAPF32[$14>>2] = $3;
 $15 = ((($0)) + 60|0);
 HEAP32[$15>>2] = 1;
 return;
}
function __ZN12TextRenderOpD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3820);
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __THREW__ = 0;
  invoke_vi(525,($2|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $6 = ___cxa_find_matching_catch_3(0|0)|0;
   $7 = tempRet0;
   ___clang_call_terminate($6);
   // unreachable;
  }
 }
 $8 = ((($0)) + 84|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($0)) + 88|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==($9|0);
  if (!($13)) {
   $scevgep$i$i$i = ((($12)) + -16|0);
   $14 = $scevgep$i$i$i;
   $15 = $9;
   $16 = (($14) - ($15))|0;
   $17 = $16 >>> 4;
   $18 = $17 ^ -1;
   $scevgep4$i$i$i = (($12) + ($18<<4)|0);
   HEAP32[$11>>2] = $scevgep4$i$i$i;
  }
  __ZdlPv($9);
 }
 HEAP32[$0>>2] = (3296);
 $19 = ((($0)) + 72|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  __ZN8RenderOpD2Ev($0);
  return;
 }
 $22 = ((($0)) + 76|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==($20|0);
 if (!($24)) {
  $scevgep$i$i$i$i = ((($23)) + -16|0);
  $25 = $scevgep$i$i$i$i;
  $26 = $20;
  $27 = (($25) - ($26))|0;
  $28 = $27 >>> 4;
  $29 = $28 ^ -1;
  $scevgep4$i$i$i$i = (($23) + ($29<<4)|0);
  HEAP32[$22>>2] = $scevgep4$i$i$i$i;
 }
 __ZdlPv($20);
 __ZN8RenderOpD2Ev($0);
 return;
}
function __ZN12TextRenderOpD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i$i = 0, $scevgep$i$i$i$i$i = 0, $scevgep4$i$i$i$i = 0, $scevgep4$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3820);
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __THREW__ = 0;
  invoke_vi(525,($2|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $6 = ___cxa_find_matching_catch_3(0|0)|0;
   $7 = tempRet0;
   ___clang_call_terminate($6);
   // unreachable;
  }
 }
 $8 = ((($0)) + 84|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($0)) + 88|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==($9|0);
  if (!($13)) {
   $scevgep$i$i$i$i = ((($12)) + -16|0);
   $14 = $scevgep$i$i$i$i;
   $15 = $9;
   $16 = (($14) - ($15))|0;
   $17 = $16 >>> 4;
   $18 = $17 ^ -1;
   $scevgep4$i$i$i$i = (($12) + ($18<<4)|0);
   HEAP32[$11>>2] = $scevgep4$i$i$i$i;
  }
  __ZdlPv($9);
 }
 HEAP32[$0>>2] = (3296);
 $19 = ((($0)) + 72|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  __ZN8RenderOpD2Ev($0);
  __ZdlPv($0);
  return;
 }
 $22 = ((($0)) + 76|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==($20|0);
 if (!($24)) {
  $scevgep$i$i$i$i$i = ((($23)) + -16|0);
  $25 = $scevgep$i$i$i$i$i;
  $26 = $20;
  $27 = (($25) - ($26))|0;
  $28 = $27 >>> 4;
  $29 = $28 ^ -1;
  $scevgep4$i$i$i$i$i = (($23) + ($29<<4)|0);
  HEAP32[$22>>2] = $scevgep4$i$i$i$i$i;
 }
 __ZdlPv($20);
 __ZN8RenderOpD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN12TextRenderOp12canMergeWithEPK8RenderOp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN8RenderOp12canMergeWithEPKS_($0,$1)|0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($1)) + 96|0);
 $4 = ((($0)) + 96|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$3>>2]|0;
 $7 = ($5|0)==($6|0);
 if (!($7)) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = ((($0)) + 100|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9|0)==($11|0);
 $$0 = $12;
 return ($$0|0);
}
function __ZN12TextRenderOp6renderEP6WindowP7Surface($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8RenderOp6renderEP6WindowP7Surface($0,$1,$2);
 $3 = ((($0)) + 96|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 __ZN6Window11bindTextureEP6Bitmap($1,$6);
 return;
}
function __ZN12TextRenderOp7asQuadsEP5_QUAD($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02123 = 0, $$024 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 $2 = ((($0)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 68|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($0)) + 72|0);
 $6 = ((($0)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$5>>2]|0;
 $9 = ($7|0)==($8|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = ((($0)) + 84|0);
 $11 = ((($0)) + 88|0);
 $$02123 = 0;$$024 = $1;$16 = $8;
 while(1) {
  $12 = HEAP32[$0>>2]|0;
  $13 = ((($12)) + 32|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $16;
  $17 = (($15) + ($$02123<<4)|0);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$17+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$17+12>>2]|0;
  FUNCTION_TABLE_viii[$14 & 1023]($0,$$byval_copy,$$024);
  $18 = HEAP32[$11>>2]|0;
  $19 = HEAP32[$10>>2]|0;
  $20 = (($18) - ($19))|0;
  $21 = $20 >> 4;
  $22 = ($21>>>0)>($$02123>>>0);
  if (!($22)) {
   label = 5;
   break;
  }
  $23 = $19;
  $24 = (($23) + ($$02123<<4)|0);
  $25 = (+__ZNK4RECT4leftEv($24));
  $26 = ((($$024)) + 72|0);
  HEAPF32[tempDoublePtr>>2]=$25;HEAP8[$26>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$26+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$26+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$26+3>>0]=HEAP8[tempDoublePtr+3>>0];
  $27 = ((($$024)) + 8|0);
  HEAPF32[tempDoublePtr>>2]=$25;HEAP8[$27>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$27+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$27+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$27+3>>0]=HEAP8[tempDoublePtr+3>>0];
  $28 = (+__ZNK4RECT3topEv($24));
  $29 = ((($$024)) + 44|0);
  HEAPF32[tempDoublePtr>>2]=$28;HEAP8[$29>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$29+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$29+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$29+3>>0]=HEAP8[tempDoublePtr+3>>0];
  $30 = ((($$024)) + 12|0);
  HEAPF32[tempDoublePtr>>2]=$28;HEAP8[$30>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$30+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$30+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$30+3>>0]=HEAP8[tempDoublePtr+3>>0];
  $31 = (+__ZNK4RECT5rightEv($24));
  $32 = ((($$024)) + 104|0);
  HEAPF32[tempDoublePtr>>2]=$31;HEAP8[$32>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$32+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$32+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$32+3>>0]=HEAP8[tempDoublePtr+3>>0];
  $33 = ((($$024)) + 40|0);
  HEAPF32[tempDoublePtr>>2]=$31;HEAP8[$33>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$33+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$33+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$33+3>>0]=HEAP8[tempDoublePtr+3>>0];
  $34 = (+__ZNK4RECT6bottomEv($24));
  $35 = ((($$024)) + 108|0);
  HEAPF32[tempDoublePtr>>2]=$34;HEAP8[$35>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$35+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$35+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$35+3>>0]=HEAP8[tempDoublePtr+3>>0];
  $36 = ((($$024)) + 76|0);
  HEAPF32[tempDoublePtr>>2]=$34;HEAP8[$36>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$36+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$36+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$36+3>>0]=HEAP8[tempDoublePtr+3>>0];
  $37 = ((($$024)) + 128|0);
  $38 = (($$02123) + 1)|0;
  $39 = HEAP32[$6>>2]|0;
  $40 = HEAP32[$5>>2]|0;
  $41 = (($39) - ($40))|0;
  $42 = $41 >> 4;
  $43 = ($38>>>0)<($42>>>0);
  if ($43) {
   $$02123 = $38;$$024 = $37;$16 = $40;
  } else {
   label = 3;
   break;
  }
 }
 if ((label|0) == 3) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 5) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv($10);
  // unreachable;
 }
}
function __GLOBAL__sub_I_renderop_text_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev(30140);
 HEAP8[(30176)>>0] = 1;
 HEAP32[(30164)>>2] = (3492);
 HEAP8[(30192)>>0] = 1;
 HEAP32[(30180)>>2] = (3512);
 HEAPF32[(30256)>>2] = 1.0;
 HEAPF32[(30236)>>2] = 1.0;
 HEAPF32[(30216)>>2] = 1.0;
 HEAPF32[(30196)>>2] = 1.0;
 ;HEAP32[(30200)>>2]=0|0;HEAP32[(30200)+4>>2]=0|0;HEAP32[(30200)+8>>2]=0|0;HEAP32[(30200)+12>>2]=0|0;
 ;HEAP32[(30220)>>2]=0|0;HEAP32[(30220)+4>>2]=0|0;HEAP32[(30220)+8>>2]=0|0;HEAP32[(30220)+12>>2]=0|0;
 ;HEAP32[(30240)>>2]=0|0;HEAP32[(30240)+4>>2]=0|0;HEAP32[(30240)+8>>2]=0|0;HEAP32[(30240)+12>>2]=0|0;
 HEAP32[7535] = (3872);
 (___cxa_atexit((116|0),(30140|0),(___dso_handle|0))|0);
 return;
}
function __ZN18GLProgramTextGlyphD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN18GLProgramTextGlyph4loadEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[794]|0;
 FUNCTION_TABLE_viii[$3 & 1023]($0,$4,16095);
 return;
}
function __ZN12TextRenderOpC2EP4ViewP17_TEXTRENDERPARAMS($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN17RenderOpMultiRectC2EP4View($0,$1);
 HEAP32[$0>>2] = (3820);
 $3 = ((($0)) + 84|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 88|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 92|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 96|0);
 $7 = ((($0)) + 104|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 64|0);
 HEAPF32[$8>>2] = 1.0;
 $9 = $2;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $6;
 $16 = $15;
 HEAP32[$16>>2] = $11;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $14;
 $19 = ((($2)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $24 = ((($0)) + 28|0);
  HEAP32[$24>>2] = 30140;
  $25 = ((($0)) + 60|0);
  HEAP32[$25>>2] = 1;
  return;
 }
 HEAP32[$7>>2] = $20;
 __THREW__ = 0;
 invoke_vi(526,($20|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if (!($23)) {
  $24 = ((($0)) + 28|0);
  HEAP32[$24>>2] = 30140;
  $25 = ((($0)) + 60|0);
  HEAP32[$25>>2] = 1;
  return;
 }
 $26 = ___cxa_find_matching_catch_2()|0;
 $27 = tempRet0;
 $28 = HEAP32[$7>>2]|0;
 $29 = ($28|0)==(0|0);
 if (!($29)) {
  __THREW__ = 0;
  invoke_vi(525,($28|0));
  $30 = __THREW__; __THREW__ = 0;
  $31 = $30&1;
  if ($31) {
   $32 = ___cxa_find_matching_catch_3(0|0)|0;
   $33 = tempRet0;
   ___clang_call_terminate($32);
   // unreachable;
  }
 }
 $34 = HEAP32[$3>>2]|0;
 $35 = ($34|0)==(0|0);
 if (!($35)) {
  $36 = HEAP32[$4>>2]|0;
  $37 = ($36|0)==($34|0);
  if (!($37)) {
   $scevgep$i$i$i = ((($36)) + -16|0);
   $38 = $scevgep$i$i$i;
   $39 = $34;
   $40 = (($38) - ($39))|0;
   $41 = $40 >>> 4;
   $42 = $41 ^ -1;
   $scevgep4$i$i$i = (($36) + ($42<<4)|0);
   HEAP32[$4>>2] = $scevgep4$i$i$i;
  }
  __ZdlPv($34);
 }
 HEAP32[$0>>2] = (3296);
 $43 = ((($0)) + 72|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(0|0);
 if ($45) {
  __ZN8RenderOpD2Ev($0);
  ___resumeException($26|0);
  // unreachable;
 }
 $46 = ((($0)) + 76|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)==($44|0);
 if (!($48)) {
  $scevgep$i$i$i$i = ((($47)) + -16|0);
  $49 = $scevgep$i$i$i$i;
  $50 = $44;
  $51 = (($49) - ($50))|0;
  $52 = $51 >>> 4;
  $53 = $52 ^ -1;
  $scevgep4$i$i$i$i = (($47) + ($53<<4)|0);
  HEAP32[$46>>2] = $scevgep4$i$i$i$i;
 }
 __ZdlPv($44);
 __ZN8RenderOpD2Ev($0);
 ___resumeException($26|0);
 // unreachable;
}
function __ZN12TextRenderOp8addGlyphEP5GlyphRK4RECT($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = sp + 16|0;
 $5 = ((($1)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 16|0);
 dest=$3; src=$7; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $8 = ((($6)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (+($13|0));
 $15 = +HEAPF32[$3>>2];
 $16 = $15 / $14;
 HEAPF32[$3>>2] = $16;
 $17 = ((($11)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (+($18|0));
 $20 = ((($3)) + 4|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $21 / $19;
 HEAPF32[$20>>2] = $22;
 $23 = ((($3)) + 8|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $24 / $14;
 HEAPF32[$23>>2] = $25;
 $26 = ((($3)) + 12|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $27 / $19;
 HEAPF32[$26>>2] = $28;
 $29 = ((($0)) + 72|0);
 $30 = ((($0)) + 76|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($0)) + 80|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($31|0)==($33|0);
 if ($34) {
  __ZNSt3__26vectorI4RECTNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($29,$2);
 } else {
  dest=$31; src=$2; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $35 = HEAP32[$30>>2]|0;
  $36 = ((($35)) + 16|0);
  HEAP32[$30>>2] = $36;
 }
 $37 = ((($0)) + 88|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($0)) + 92|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($38|0)==($40|0);
 if ($41) {
  $44 = ((($0)) + 84|0);
  __ZNSt3__26vectorI4RECTNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($44,$3);
 } else {
  dest=$38; src=$3; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $42 = HEAP32[$37>>2]|0;
  $43 = ((($42)) + 16|0);
  HEAP32[$37>>2] = $43;
 }
 $45 = HEAP32[$30>>2]|0;
 $46 = HEAP32[$29>>2]|0;
 $47 = (($45) - ($46))|0;
 $48 = ($47|0)==(16);
 if ($48) {
  $49 = ((($0)) + 12|0);
  dest=$49; src=$2; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 } else {
  $50 = ((($0)) + 12|0);
  __Z10RECT_unionRK4RECTS1_($4,$50,$2);
  dest=$50; src=$4; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
}
function __ZN12TextRenderOp5resetEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $scevgep$i$i$i = 0, $scevgep$i$i$i1 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $scevgep$i$i$i = ((($4)) + -16|0);
  $6 = $scevgep$i$i$i;
  $7 = $2;
  $8 = (($6) - ($7))|0;
  $9 = $8 >>> 4;
  $10 = $9 ^ -1;
  $scevgep4$i$i$i = (($4) + ($10<<4)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i;
 }
 $11 = ((($0)) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 88|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==($12|0);
 if ($15) {
  return;
 }
 $scevgep$i$i$i1 = ((($14)) + -16|0);
 $16 = $scevgep$i$i$i1;
 $17 = $12;
 $18 = (($16) - ($17))|0;
 $19 = $18 >>> 4;
 $20 = $19 ^ -1;
 $scevgep4$i$i$i2 = (($14) + ($20<<4)|0);
 HEAP32[$13>>2] = $scevgep4$i$i$i2;
 return;
}
function __ZN20SimpleBitmapProviderD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3916);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($2|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  return;
 }
}
function __ZN20SimpleBitmapProviderD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3916);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  __ZdlPv($0);
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($2|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZNK20SimpleBitmapProvider9getBitmapEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZN20SimpleBitmapProvider11addCallbackEPN14BitmapProvider8CallbackE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN20SimpleBitmapProvider14removeCallbackEPN14BitmapProvider8CallbackE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN19AsyncBitmapProviderD2Ev($0) {
 $0 = $0|0;
 var $$023$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3944);
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __THREW__ = 0;
  invoke_vi(525,($2|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $6 = ___cxa_find_matching_catch_3(0|0)|0;
   $7 = tempRet0;
   ___clang_call_terminate($6);
   // unreachable;
  }
 }
 $8 = ((($0)) + 8|0);
 $9 = ((($0)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  return;
 }
 $12 = ((($0)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$8>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$13>>2]|0;
 $18 = ((($17)) + 4|0);
 HEAP32[$18>>2] = $16;
 $19 = HEAP32[$15>>2]|0;
 HEAP32[$19>>2] = $17;
 HEAP32[$9>>2] = 0;
 $20 = ($13|0)==($8|0);
 if ($20) {
  return;
 } else {
  $$023$i$i = $13;
 }
 while(1) {
  $21 = ((($$023$i$i)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  __ZdlPv($$023$i$i);
  $23 = ($22|0)==($8|0);
  if ($23) {
   break;
  } else {
   $$023$i$i = $22;
  }
 }
 return;
}
function __ZN19AsyncBitmapProviderD0Ev($0) {
 $0 = $0|0;
 var $$023$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3944);
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __THREW__ = 0;
  invoke_vi(525,($2|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $6 = ___cxa_find_matching_catch_3(0|0)|0;
   $7 = tempRet0;
   ___clang_call_terminate($6);
   // unreachable;
  }
 }
 $8 = ((($0)) + 8|0);
 $9 = ((($0)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  __ZdlPv($0);
  return;
 }
 $12 = ((($0)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$8>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$13>>2]|0;
 $18 = ((($17)) + 4|0);
 HEAP32[$18>>2] = $16;
 $19 = HEAP32[$15>>2]|0;
 HEAP32[$19>>2] = $17;
 HEAP32[$9>>2] = 0;
 $20 = ($13|0)==($8|0);
 if ($20) {
  __ZdlPv($0);
  return;
 } else {
  $$023$i$i$i = $13;
 }
 while(1) {
  $21 = ((($$023$i$i$i)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  __ZdlPv($$023$i$i$i);
  $23 = ($22|0)==($8|0);
  if ($23) {
   break;
  } else {
   $$023$i$i$i = $22;
  }
 }
 __ZdlPv($0);
 return;
}
function __ZNK19AsyncBitmapProvider9getBitmapEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZN19AsyncBitmapProvider11addCallbackEPN14BitmapProvider8CallbackE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = ((($0)) + 8|0);
 $4 = (__Znwj(12)|0);
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($4)) + 4|0);
 HEAP32[$6>>2] = $3;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$4>>2] = $7;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = $4;
 HEAP32[$3>>2] = $4;
 $9 = ((($0)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 1)|0;
 HEAP32[$9>>2] = $11;
 $12 = ((($0)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  return;
 }
 $15 = HEAP32[$1>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 FUNCTION_TABLE_vi[$16 & 1023]($1);
 return;
}
function __ZN19AsyncBitmapProvider14removeCallbackEPN14BitmapProvider8CallbackE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 __ZNSt3__24listIPN14BitmapProvider8CallbackENS_9allocatorIS3_EEE6removeERKS3_($3,$2);
 STACKTOP = sp;return;
}
function __ZNSt3__24listIPN14BitmapProvider8CallbackENS_9allocatorIS3_EEE6removeERKS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$023$i$i7 = 0, $$lcssa = 0, $$lcssa48 = 0, $$lcssa48$us = 0, $$lcssa49 = 0, $$lcssa49$us = 0, $$lcssa49$us$sink = 0, $$phi$trans$insert = 0, $$pre = 0, $$sink = 0, $$sroa$016$0$lcssa = 0, $$sroa$016$0$lcssa$us = 0, $$sroa$016$051 = 0, $$sroa$016$051$us = 0, $$sroa$031$0$be = 0, $$sroa$031$0$be$us = 0, $$sroa$031$058 = 0, $$sroa$031$058$us = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $2;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6;
 $8 = ($7|0)==($0|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = ($2|0)==($0|0);
 $10 = ((($0)) + 8|0);
 if ($9) {
  $$sroa$031$058$us = $6;$17 = $7;
  while(1) {
   $11 = $$sroa$031$058$us;
   $12 = ((($11)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$1>>2]|0;
   $15 = ($13|0)==($14|0);
   if ($15) {
    $16 = ((($17)) + 4|0);
    $18 = HEAP32[$16>>2]|0;
    $19 = $18;
    $20 = ($19|0)==($0|0);
    L9: do {
     if ($20) {
      $$lcssa48$us = 0;$$lcssa49$us = $0;$$sroa$016$0$lcssa$us = $18;
     } else {
      $$sroa$016$051$us = $18;$36 = $19;
      while(1) {
       $21 = $$sroa$016$051$us;
       $22 = ((($21)) + 8|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = ($23|0)==($13|0);
       if (!($24)) {
        $$lcssa48$us = 1;$$lcssa49$us = $36;$$sroa$016$0$lcssa$us = $$sroa$016$051$us;
        break L9;
       }
       $35 = ((($36)) + 4|0);
       $37 = HEAP32[$35>>2]|0;
       $38 = $37;
       $39 = ($38|0)==($0|0);
       if ($39) {
        $$lcssa48$us = 0;$$lcssa49$us = $0;$$sroa$016$0$lcssa$us = $37;
        break;
       } else {
        $$sroa$016$051$us = $37;$36 = $38;
       }
      }
     }
    } while(0);
    $25 = ($17|0)==($$lcssa49$us|0);
    if (!($25)) {
     $26 = $$sroa$016$0$lcssa$us;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 4|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = HEAP32[$17>>2]|0;
     $31 = ((($30)) + 4|0);
     HEAP32[$31>>2] = $29;
     $32 = HEAP32[$28>>2]|0;
     HEAP32[$32>>2] = $30;
     $33 = HEAP32[$2>>2]|0;
     $34 = ((($33)) + 4|0);
     HEAP32[$34>>2] = $17;
     HEAP32[$17>>2] = $33;
     HEAP32[$2>>2] = $27;
     HEAP32[$28>>2] = $2;
    }
    if ($$lcssa48$us) {
     $$lcssa49$us$sink = $$lcssa49$us;
     label = 10;
    } else {
     $$sroa$031$0$be$us = $$sroa$016$0$lcssa$us;
    }
   } else {
    $$lcssa49$us$sink = $17;
    label = 10;
   }
   if ((label|0) == 10) {
    label = 0;
    $40 = ((($$lcssa49$us$sink)) + 4|0);
    $41 = HEAP32[$40>>2]|0;
    $$sroa$031$0$be$us = $41;
   }
   $42 = $$sroa$031$0$be$us;
   $43 = ($42|0)==($0|0);
   if ($43) {
    break;
   } else {
    $$sroa$031$058$us = $$sroa$031$0$be$us;$17 = $42;
   }
  }
  STACKTOP = sp;return;
 } else {
  $$sroa$031$058 = $6;$63 = $7;$85 = 0;$99 = $2;
 }
 while(1) {
  $57 = $$sroa$031$058;
  $58 = ((($57)) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = HEAP32[$1>>2]|0;
  $61 = ($59|0)==($60|0);
  if ($61) {
   $62 = ((($63)) + 4|0);
   $64 = HEAP32[$62>>2]|0;
   $65 = $64;
   $66 = ($65|0)==($0|0);
   L25: do {
    if ($66) {
     $$lcssa48 = 0;$$lcssa49 = $0;$$sroa$016$0$lcssa = $64;
    } else {
     $$sroa$016$051 = $64;$72 = $65;
     while(1) {
      $67 = $$sroa$016$051;
      $68 = ((($67)) + 8|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==($59|0);
      if (!($70)) {
       $$lcssa48 = 1;$$lcssa49 = $72;$$sroa$016$0$lcssa = $$sroa$016$051;
       break L25;
      }
      $71 = ((($72)) + 4|0);
      $73 = HEAP32[$71>>2]|0;
      $74 = $73;
      $75 = ($74|0)==($0|0);
      if ($75) {
       $$lcssa48 = 0;$$lcssa49 = $0;$$sroa$016$0$lcssa = $73;
       break;
      } else {
       $$sroa$016$051 = $73;$72 = $74;
      }
     }
    }
   } while(0);
   $76 = ($63|0)==($$lcssa49|0);
   if ($76) {
    $102 = $99;$103 = $85;
   } else {
    $77 = ($65|0)==($$lcssa49|0);
    if ($77) {
     $$lcssa = 1;
    } else {
     $78 = $65;$80 = 1;
     while(1) {
      $$phi$trans$insert = ((($78)) + 4|0);
      $$pre = HEAP32[$$phi$trans$insert>>2]|0;
      $79 = (($80) + 1)|0;
      $81 = ($$pre|0)==($$lcssa49|0);
      if ($81) {
       $$lcssa = $79;
       break;
      } else {
       $78 = $$pre;$80 = $79;
      }
     }
    }
    $82 = HEAP32[$10>>2]|0;
    $83 = (($82) - ($$lcssa))|0;
    HEAP32[$10>>2] = $83;
    $84 = (($85) + ($$lcssa))|0;
    HEAP32[$4>>2] = $84;
    $86 = $$sroa$016$0$lcssa;
    $87 = HEAP32[$86>>2]|0;
    $88 = ((($87)) + 4|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = HEAP32[$63>>2]|0;
    $91 = ((($90)) + 4|0);
    HEAP32[$91>>2] = $89;
    $92 = HEAP32[$88>>2]|0;
    HEAP32[$92>>2] = $90;
    $93 = HEAP32[$2>>2]|0;
    $94 = ((($93)) + 4|0);
    HEAP32[$94>>2] = $63;
    HEAP32[$63>>2] = $93;
    HEAP32[$2>>2] = $87;
    HEAP32[$88>>2] = $2;
    $102 = $87;$103 = $84;
   }
   if ($$lcssa48) {
    $$sink = $$lcssa49;$100 = $102;$101 = $103;
    label = 25;
   } else {
    $$sroa$031$0$be = $$sroa$016$0$lcssa;$45 = $103;$48 = $102;
   }
  } else {
   $$sink = $63;$100 = $99;$101 = $85;
   label = 25;
  }
  if ((label|0) == 25) {
   label = 0;
   $95 = ((($$sink)) + 4|0);
   $96 = HEAP32[$95>>2]|0;
   $$sroa$031$0$be = $96;$45 = $101;$48 = $100;
  }
  $97 = $$sroa$031$0$be;
  $98 = ($97|0)==($0|0);
  if ($98) {
   break;
  } else {
   $$sroa$031$058 = $$sroa$031$0$be;$63 = $97;$85 = $45;$99 = $48;
  }
 }
 $44 = ($45|0)==(0);
 if ($44) {
  STACKTOP = sp;return;
 }
 $46 = HEAP32[$3>>2]|0;
 $47 = ((($48)) + 4|0);
 $49 = HEAP32[$47>>2]|0;
 $50 = HEAP32[$46>>2]|0;
 $51 = ((($50)) + 4|0);
 HEAP32[$51>>2] = $49;
 $52 = HEAP32[$47>>2]|0;
 HEAP32[$52>>2] = $50;
 HEAP32[$4>>2] = 0;
 $53 = ($46|0)==($2|0);
 if ($53) {
  STACKTOP = sp;return;
 } else {
  $$023$i$i7 = $46;
 }
 while(1) {
  $54 = ((($$023$i$i7)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  __ZdlPv($$023$i$i7);
  $56 = ($55|0)==($2|0);
  if ($56) {
   break;
  } else {
   $$023$i$i7 = $55;
  }
 }
 STACKTOP = sp;return;
}
function __ZN15TextureRenderOpD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3972);
 $1 = ((($0)) + 72|0);
 HEAP32[$1>>2] = (4040);
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  __ZN8RenderOpD2Ev($0);
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch_3(0|0)|0;
  $8 = tempRet0;
  ___clang_call_terminate($7);
  // unreachable;
 } else {
  __ZN8RenderOpD2Ev($0);
  return;
 }
}
function __ZN15TextureRenderOpD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3972);
 $1 = ((($0)) + 72|0);
 HEAP32[$1>>2] = (4040);
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  __ZN8RenderOpD2Ev($0);
  __ZdlPv($0);
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch_3(0|0)|0;
  $8 = tempRet0;
  ___clang_call_terminate($7);
  // unreachable;
 } else {
  __ZN8RenderOpD2Ev($0);
  __ZdlPv($0);
  return;
 }
}
function __ZN15TextureRenderOp12canMergeWithEPK8RenderOp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN8RenderOp12canMergeWithEPKS_($0,$1)|0);
 if (!($2)) {
  $8 = 0;
  return ($8|0);
 }
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 $8 = $7;
 return ($8|0);
}
function __ZN15TextureRenderOp6renderEP6WindowP7Surface($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  return;
 }
 $6 = HEAP32[$4>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_ii[$8 & 1023]($4)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  return;
 }
 __ZN8RenderOp6renderEP6WindowP7Surface($0,$1,$2);
 __ZN6Window11bindTextureEP6Bitmap($1,$9);
 return;
}
function __ZN15TextureRenderOp7asQuadsEP5_QUAD($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$5+12>>2]|0;
 FUNCTION_TABLE_viii[$4 & 1023]($0,$$byval_copy,$1);
 $6 = ((($0)) + 80|0);
 $7 = (+__ZNK4RECT4leftEv($6));
 $8 = ((($1)) + 72|0);
 HEAPF32[tempDoublePtr>>2]=$7;HEAP8[$8>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$8+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$8+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$8+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $9 = ((($1)) + 8|0);
 HEAPF32[tempDoublePtr>>2]=$7;HEAP8[$9>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$9+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$9+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$9+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $10 = (+__ZNK4RECT3topEv($6));
 $11 = ((($1)) + 44|0);
 HEAPF32[tempDoublePtr>>2]=$10;HEAP8[$11>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$11+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$11+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$11+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $12 = ((($1)) + 12|0);
 HEAPF32[tempDoublePtr>>2]=$10;HEAP8[$12>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$12+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$12+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$12+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $13 = (+__ZNK4RECT5rightEv($6));
 $14 = ((($1)) + 104|0);
 HEAPF32[tempDoublePtr>>2]=$13;HEAP8[$14>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$14+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$14+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$14+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $15 = ((($1)) + 40|0);
 HEAPF32[tempDoublePtr>>2]=$13;HEAP8[$15>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$15+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$15+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$15+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $16 = (+__ZNK4RECT6bottomEv($6));
 $17 = ((($1)) + 108|0);
 HEAPF32[tempDoublePtr>>2]=$16;HEAP8[$17>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$17+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$17+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$17+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $18 = ((($1)) + 76|0);
 HEAPF32[tempDoublePtr>>2]=$16;HEAP8[$18>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$18+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$18+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$18+3>>0]=HEAP8[tempDoublePtr+3>>0];
 STACKTOP = sp;return;
}
function __ZN15TextureRenderOp8setAlphaEf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 64|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $3 != $1;
 if (!($4)) {
  return;
 }
 $5 = ((($0)) + 28|0);
 $6 = $1 < 1.0;
 $7 = $6 ? 30692 : 30508;
 HEAPF32[$2>>2] = $1;
 HEAP32[$5>>2] = $7;
 __ZN8RenderOp18rebatchIfNecessaryEv($0);
 return;
}
function __ZN15TextureRenderOp9setColourEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 68|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if ($4) {
  return;
 }
 $5 = ($1|0)!=(0);
 $$sink = $5 ? 30508 : 30324;
 $6 = ((($0)) + 28|0);
 HEAP32[$2>>2] = $1;
 HEAP32[$6>>2] = $$sink;
 __ZN8RenderOp18rebatchIfNecessaryEv($0);
 return;
}
function __ZN15TextureRenderOp10setTexRectERK4RECT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 80|0);
 dest=$2; src=$1; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 __ZN8RenderOp23invalidateBatchGeometryEv($0);
 return;
}
function __ZN15TextureRenderOp9setBitmapEP6Bitmap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $10 = 0;
 } else {
  $5 = HEAP32[$3>>2]|0;
  $6 = ((($5)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (FUNCTION_TABLE_ii[$7 & 1023]($3)|0);
  $10 = $8;
 }
 $9 = ($10|0)==($1|0);
 if ($9) {
  return;
 }
 $11 = (__ZN6ObjectnwEj(12)|0);
 __THREW__ = 0;
 invoke_vi(555,($11|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $32 = ___cxa_find_matching_catch_2()|0;
  $33 = tempRet0;
  $eh$lpad$body$index2Z2D = $33;$eh$lpad$body$indexZ2D = $32;
  __ZdlPv($11);
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
 HEAP32[$11>>2] = (3916);
 $14 = ((($11)) + 8|0);
 HEAP32[$14>>2] = 0;
 $15 = ($1|0)==(0|0);
 if (!($15)) {
  HEAP32[$14>>2] = $1;
  __THREW__ = 0;
  invoke_vi(526,($1|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $18 = ___cxa_find_matching_catch_2()|0;
   $19 = tempRet0;
   $20 = HEAP32[$14>>2]|0;
   $21 = ($20|0)==(0|0);
   if (!($21)) {
    __THREW__ = 0;
    invoke_vi(525,($20|0));
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     $24 = ___cxa_find_matching_catch_3(0|0)|0;
     $25 = tempRet0;
     ___clang_call_terminate($24);
     // unreachable;
    }
   }
   $eh$lpad$body$index2Z2D = $19;$eh$lpad$body$indexZ2D = $18;
   __ZdlPv($11);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  }
 }
 $26 = HEAP32[$2>>2]|0;
 $27 = ($26|0)==($11|0);
 if (!($27)) {
  $28 = ($26|0)==(0|0);
  if (!($28)) {
   __ZN6Object7releaseEv($26);
  }
  HEAP32[$2>>2] = $11;
  __ZN6Object6retainEv($11);
 }
 $29 = HEAP32[$0>>2]|0;
 $30 = ((($29)) + 56|0);
 $31 = HEAP32[$30>>2]|0;
 FUNCTION_TABLE_vi[$31 & 1023]($0);
 return;
}
function __ZN15TextureRenderOp17setBitmapProviderEP14BitmapProvider($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $$pre5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if ($4) {
  return;
 }
 $5 = ($3|0)==(0|0);
 if ($5) {
  $11 = 0;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = ((($6)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($0)) + 72|0);
  FUNCTION_TABLE_vii[$8 & 1023]($3,$9);
  $$pre = HEAP32[$2>>2]|0;
  $11 = $$pre;
 }
 $10 = ($11|0)==($1|0);
 if ($10) {
  $14 = ($1|0)==(0|0);
  if (!($14)) {
   $16 = $1;
   label = 10;
  }
 } else {
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   __ZN6Object7releaseEv($11);
  }
  HEAP32[$2>>2] = $1;
  $13 = ($1|0)==(0|0);
  if (!($13)) {
   __ZN6Object6retainEv($1);
   $$pre5 = HEAP32[$2>>2]|0;
   $16 = $$pre5;
   label = 10;
  }
 }
 if ((label|0) == 10) {
  $15 = HEAP32[$16>>2]|0;
  $17 = ((($15)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($0)) + 72|0);
  FUNCTION_TABLE_vii[$18 & 1023]($16,$19);
 }
 __ZN8RenderOp18rebatchIfNecessaryEv($0);
 return;
}
function __ZN15TextureRenderOp15onBitmapChangedEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = (__ZN6Bitmap8hasAlphaEv($6)|0);
 $8 = $7&1;
 __ZN8RenderOp12setBlendModeEi($0,$8);
 __ZN8RenderOp18rebatchIfNecessaryEv($0);
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  return;
 }
 $12 = HEAP32[$10>>2]|0;
 $13 = ((($12)) + 176|0);
 $14 = HEAP32[$13>>2]|0;
 FUNCTION_TABLE_vi[$14 & 1023]($10);
 return;
}
function __ZThn72_N15TextureRenderOp15onBitmapChangedEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + -72|0);
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 1023]($3)|0);
 $8 = (__ZN6Bitmap8hasAlphaEv($7)|0);
 $9 = $8&1;
 __ZN8RenderOp12setBlendModeEi($1,$9);
 __ZN8RenderOp18rebatchIfNecessaryEv($1);
 $10 = ((($1)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  return;
 }
 $13 = HEAP32[$11>>2]|0;
 $14 = ((($13)) + 176|0);
 $15 = HEAP32[$14>>2]|0;
 FUNCTION_TABLE_vi[$15 & 1023]($11);
 return;
}
function __ZN16GLProgramTextureD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN16GLProgramTexture4loadEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[794]|0;
 FUNCTION_TABLE_viii[$3 & 1023]($0,$4,16448);
 return;
}
function __GLOBAL__sub_I_renderop_texture_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev(30324);
 HEAP8[(30360)>>0] = 1;
 HEAP32[(30348)>>2] = (3492);
 HEAP8[(30376)>>0] = 1;
 HEAP32[(30364)>>2] = (3512);
 HEAPF32[(30440)>>2] = 1.0;
 HEAPF32[(30420)>>2] = 1.0;
 HEAPF32[(30400)>>2] = 1.0;
 HEAPF32[(30380)>>2] = 1.0;
 ;HEAP32[(30384)>>2]=0|0;HEAP32[(30384)+4>>2]=0|0;HEAP32[(30384)+8>>2]=0|0;HEAP32[(30384)+12>>2]=0|0;
 ;HEAP32[(30404)>>2]=0|0;HEAP32[(30404)+4>>2]=0|0;HEAP32[(30404)+8>>2]=0|0;HEAP32[(30404)+12>>2]=0|0;
 ;HEAP32[(30424)>>2]=0|0;HEAP32[(30424)+4>>2]=0|0;HEAP32[(30424)+8>>2]=0|0;HEAP32[(30424)+12>>2]=0|0;
 HEAP32[7581] = (4052);
 (___cxa_atexit((116|0),(30324|0),(___dso_handle|0))|0);
 __ZN6ObjectC2Ev(30876);
 HEAP8[(30912)>>0] = 1;
 HEAP32[(30900)>>2] = (3492);
 HEAP8[(30928)>>0] = 1;
 HEAP32[(30916)>>2] = (3512);
 HEAPF32[(30992)>>2] = 1.0;
 HEAPF32[(30972)>>2] = 1.0;
 HEAPF32[(30952)>>2] = 1.0;
 HEAPF32[(30932)>>2] = 1.0;
 ;HEAP32[(30936)>>2]=0|0;HEAP32[(30936)+4>>2]=0|0;HEAP32[(30936)+8>>2]=0|0;HEAP32[(30936)+12>>2]=0|0;
 ;HEAP32[(30956)>>2]=0|0;HEAP32[(30956)+4>>2]=0|0;HEAP32[(30956)+8>>2]=0|0;HEAP32[(30956)+12>>2]=0|0;
 ;HEAP32[(30976)>>2]=0|0;HEAP32[(30976)+4>>2]=0|0;HEAP32[(30976)+8>>2]=0|0;HEAP32[(30976)+12>>2]=0|0;
 HEAP32[7719] = (4096);
 (___cxa_atexit((116|0),(30876|0),(___dso_handle|0))|0);
 __ZN6ObjectC2Ev(30508);
 HEAP8[(30544)>>0] = 1;
 HEAP32[(30532)>>2] = (3492);
 HEAP8[(30560)>>0] = 1;
 HEAP32[(30548)>>2] = (3512);
 HEAPF32[(30624)>>2] = 1.0;
 HEAPF32[(30604)>>2] = 1.0;
 HEAPF32[(30584)>>2] = 1.0;
 HEAPF32[(30564)>>2] = 1.0;
 ;HEAP32[(30568)>>2]=0|0;HEAP32[(30568)+4>>2]=0|0;HEAP32[(30568)+8>>2]=0|0;HEAP32[(30568)+12>>2]=0|0;
 ;HEAP32[(30588)>>2]=0|0;HEAP32[(30588)+4>>2]=0|0;HEAP32[(30588)+8>>2]=0|0;HEAP32[(30588)+12>>2]=0|0;
 ;HEAP32[(30608)>>2]=0|0;HEAP32[(30608)+4>>2]=0|0;HEAP32[(30608)+8>>2]=0|0;HEAP32[(30608)+12>>2]=0|0;
 HEAP32[7627] = (4140);
 (___cxa_atexit((116|0),(30508|0),(___dso_handle|0))|0);
 __ZN6ObjectC2Ev(30692);
 HEAP8[(30728)>>0] = 1;
 HEAP32[(30716)>>2] = (3492);
 HEAP8[(30744)>>0] = 1;
 HEAP32[(30732)>>2] = (3512);
 HEAPF32[(30808)>>2] = 1.0;
 HEAPF32[(30788)>>2] = 1.0;
 HEAPF32[(30768)>>2] = 1.0;
 HEAPF32[(30748)>>2] = 1.0;
 ;HEAP32[(30752)>>2]=0|0;HEAP32[(30752)+4>>2]=0|0;HEAP32[(30752)+8>>2]=0|0;HEAP32[(30752)+12>>2]=0|0;
 ;HEAP32[(30772)>>2]=0|0;HEAP32[(30772)+4>>2]=0|0;HEAP32[(30772)+8>>2]=0|0;HEAP32[(30772)+12>>2]=0|0;
 ;HEAP32[(30792)>>2]=0|0;HEAP32[(30792)+4>>2]=0|0;HEAP32[(30792)+8>>2]=0|0;HEAP32[(30792)+12>>2]=0|0;
 HEAP32[7673] = (4184);
 (___cxa_atexit((116|0),(30692|0),(___dso_handle|0))|0);
 return;
}
function __ZN25GLProgramTextureTintAlphaD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN25GLProgramTextureTintAlpha4loadEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[794]|0;
 FUNCTION_TABLE_viii[$3 & 1023]($0,$4,16587);
 return;
}
function __ZN20GLProgramTextureTintD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN20GLProgramTextureTint4loadEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[794]|0;
 FUNCTION_TABLE_viii[$3 & 1023]($0,$4,16866);
 return;
}
function __ZN21GLProgramTextureAlphaD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN21GLProgramTextureAlpha4loadEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[794]|0;
 FUNCTION_TABLE_viii[$3 & 1023]($0,$4,17036);
 return;
}
function __ZN19AsyncBitmapProviderC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$023$i$i = 0, $$1 = 0, $$18 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 __ZN6ObjectC2Ev($0);
 HEAP32[$0>>2] = (3944);
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $3;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = 0;
 __THREW__ = 0;
 $7 = (invoke_iii(636,(28952|0),($1|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $28 = ___cxa_find_matching_catch_2()|0;
   $29 = tempRet0;
   $$1 = $28;$$18 = $29;
  } else {
   $10 = ((($7)) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($7)) + 16|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $0;
   $15 = ((($2)) + 16|0);
   HEAP32[$2>>2] = (4228);
   $16 = ((($2)) + 4|0);
   HEAP32[$16>>2] = $14;
   HEAP32[$15>>2] = $2;
   __THREW__ = 0;
   invoke_viii(637,($11|0),($13|0),($2|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $30 = ___cxa_find_matching_catch_2()|0;
    $31 = tempRet0;
    $32 = HEAP32[$15>>2]|0;
    $33 = ($32|0)==($2|0);
    if ($33) {
     $34 = HEAP32[$32>>2]|0;
     $35 = ((($34)) + 16|0);
     $36 = HEAP32[$35>>2]|0;
     FUNCTION_TABLE_vi[$36 & 1023]($32);
     $$1 = $30;$$18 = $31;
     break;
    }
    $37 = ($32|0)==(0|0);
    if ($37) {
     $$1 = $30;$$18 = $31;
     break;
    }
    $38 = HEAP32[$32>>2]|0;
    $39 = ((($38)) + 20|0);
    $40 = HEAP32[$39>>2]|0;
    FUNCTION_TABLE_vi[$40 & 1023]($32);
    $$1 = $30;$$18 = $31;
    break;
   }
   $19 = HEAP32[$15>>2]|0;
   $20 = ($19|0)==($2|0);
   if ($20) {
    $21 = HEAP32[$19>>2]|0;
    $22 = ((($21)) + 16|0);
    $23 = HEAP32[$22>>2]|0;
    FUNCTION_TABLE_vi[$23 & 1023]($19);
    STACKTOP = sp;return;
   }
   $24 = ($19|0)==(0|0);
   if ($24) {
    STACKTOP = sp;return;
   }
   $25 = HEAP32[$19>>2]|0;
   $26 = ((($25)) + 20|0);
   $27 = HEAP32[$26>>2]|0;
   FUNCTION_TABLE_vi[$27 & 1023]($19);
   STACKTOP = sp;return;
  }
 } while(0);
 $41 = HEAP32[$6>>2]|0;
 $42 = ($41|0)==(0|0);
 if (!($42)) {
  __THREW__ = 0;
  invoke_vi(525,($41|0));
  $43 = __THREW__; __THREW__ = 0;
  $44 = $43&1;
  if ($44) {
   $45 = ___cxa_find_matching_catch_3(0|0)|0;
   $46 = tempRet0;
   ___clang_call_terminate($45);
   // unreachable;
  }
 }
 $47 = HEAP32[$5>>2]|0;
 $48 = ($47|0)==(0);
 if ($48) {
  ___resumeException($$1|0);
  // unreachable;
 }
 $49 = HEAP32[$4>>2]|0;
 $50 = HEAP32[$3>>2]|0;
 $51 = ((($50)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = HEAP32[$49>>2]|0;
 $54 = ((($53)) + 4|0);
 HEAP32[$54>>2] = $52;
 $55 = HEAP32[$51>>2]|0;
 HEAP32[$55>>2] = $53;
 HEAP32[$5>>2] = 0;
 $56 = ($49|0)==($3|0);
 if ($56) {
  ___resumeException($$1|0);
  // unreachable;
 } else {
  $$023$i$i = $49;
 }
 while(1) {
  $57 = ((($$023$i$i)) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  __ZdlPv($$023$i$i);
  $59 = ($58|0)==($3|0);
  if ($59) {
   break;
  } else {
   $$023$i$i = $58;
  }
 }
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__210__function6__funcIZN19AsyncBitmapProviderC1EPKcE3__0NS_9allocatorIS5_EEFvP6BitmapEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210__function6__funcIZN19AsyncBitmapProviderC1EPKcE3__0NS_9allocatorIS5_EEFvP6BitmapEE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $2 = ((($0)) + 4|0);
 HEAP32[$1>>2] = (4228);
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 return ($1|0);
}
function __ZNKSt3__210__function6__funcIZN19AsyncBitmapProviderC1EPKcE3__0NS_9allocatorIS5_EEFvP6BitmapEE7__cloneEPNS0_6__baseISA_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 HEAP32[$1>>2] = (4228);
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 return;
}
function __ZNSt3__210__function6__funcIZN19AsyncBitmapProviderC1EPKcE3__0NS_9allocatorIS5_EEFvP6BitmapEE7destroyEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__210__function6__funcIZN19AsyncBitmapProviderC1EPKcE3__0NS_9allocatorIS5_EEFvP6BitmapEE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__210__function6__funcIZN19AsyncBitmapProviderC1EPKcE3__0NS_9allocatorIS5_EEFvP6BitmapEEclEOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx = 0, $$idx$val = 0, $$sroa$02$0$i$i$i = 0, $$sroa$02$07$i$i$i = 0, $$sroa$02$08$i$i$i = 0, $$val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx = ((($0)) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$val = HEAP32[$1>>2]|0;
 $2 = ((($$idx$val)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($$val|0);
 if (!($4)) {
  $5 = ($3|0)==(0|0);
  if (!($5)) {
   __ZN6Object7releaseEv($3);
  }
  HEAP32[$2>>2] = $$val;
  $6 = ($$val|0)==(0|0);
  if (!($6)) {
   __ZN6Object6retainEv($$val);
  }
 }
 $7 = ((($$idx$val)) + 12|0);
 $8 = ((($$idx$val)) + 8|0);
 $$sroa$02$07$i$i$i = HEAP32[$7>>2]|0;
 $9 = $$sroa$02$07$i$i$i;
 $10 = ($9|0)==($8|0);
 if ($10) {
  return;
 } else {
  $$sroa$02$08$i$i$i = $$sroa$02$07$i$i$i;$17 = $9;
 }
 while(1) {
  $11 = $$sroa$02$08$i$i$i;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_vi[$15 & 1023]($13);
  $16 = ((($17)) + 4|0);
  $$sroa$02$0$i$i$i = HEAP32[$16>>2]|0;
  $18 = $$sroa$02$0$i$i$i;
  $19 = ($18|0)==($8|0);
  if ($19) {
   break;
  } else {
   $$sroa$02$08$i$i$i = $$sroa$02$0$i$i$i;$17 = $18;
  }
 }
 return;
}
function __ZNKSt3__210__function6__funcIZN19AsyncBitmapProviderC1EPKcE3__0NS_9allocatorIS5_EEFvP6BitmapEE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(17238|0);
 $5 = ((($0)) + 4|0);
 $$0 = $4 ? $5 : 0;
 return ($$0|0);
}
function __ZNKSt3__210__function6__funcIZN19AsyncBitmapProviderC1EPKcE3__0NS_9allocatorIS5_EEFvP6BitmapEE11target_typeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1072|0);
}
function __ZN15TextureRenderOpC2EP4View($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 __ZN8RenderOpC2EP4View($0,$1);
 $3 = ((($0)) + 72|0);
 HEAP32[$0>>2] = (3972);
 HEAP32[$3>>2] = (4040);
 $4 = ((($0)) + 76|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 64|0);
 HEAPF32[$5>>2] = 1.0;
 $6 = ((($0)) + 28|0);
 HEAP32[$6>>2] = 30324;
 __THREW__ = 0;
 invoke_vidddd(614,($2|0),0.0,0.0,1.0,1.0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  $9 = ((($0)) + 80|0);
  dest=$9; src=$2; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
 $10 = ___cxa_find_matching_catch_2()|0;
 $11 = tempRet0;
 $12 = HEAP32[$4>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  __ZN8RenderOpD2Ev($0);
  ___resumeException($10|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(525,($12|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch_3(0|0)|0;
  $17 = tempRet0;
  ___clang_call_terminate($16);
  // unreachable;
 } else {
  __ZN8RenderOpD2Ev($0);
  ___resumeException($10|0);
  // unreachable;
 }
}
function __ZN15TextureRenderOpC2EP4ViewRK4RECTP6BitmapPS3_j($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$08 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 __ZN8RenderOpC2EP4View($0,$1);
 $7 = ((($0)) + 72|0);
 HEAP32[$0>>2] = (3972);
 HEAP32[$7>>2] = (4040);
 $8 = ((($0)) + 76|0);
 HEAP32[$8>>2] = 0;
 __THREW__ = 0;
 $9 = (invoke_ii(523,12)|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 L1: do {
  if ($11) {
   label = 14;
  } else {
   __THREW__ = 0;
   invoke_vi(555,($9|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   do {
    if ($13) {
     $41 = ___cxa_find_matching_catch_2()|0;
     $42 = tempRet0;
     $eh$lpad$body$index2Z2D = $42;$eh$lpad$body$indexZ2D = $41;
    } else {
     HEAP32[$9>>2] = (3916);
     $14 = ((($9)) + 8|0);
     HEAP32[$14>>2] = 0;
     $15 = ($3|0)==(0|0);
     if (!($15)) {
      HEAP32[$14>>2] = $3;
      __THREW__ = 0;
      invoke_vi(526,($3|0));
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if ($17) {
       $18 = ___cxa_find_matching_catch_2()|0;
       $19 = tempRet0;
       $20 = HEAP32[$14>>2]|0;
       $21 = ($20|0)==(0|0);
       if (!($21)) {
        __THREW__ = 0;
        invoke_vi(525,($20|0));
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if ($23) {
         $24 = ___cxa_find_matching_catch_3(0|0)|0;
         $25 = tempRet0;
         ___clang_call_terminate($24);
         // unreachable;
        }
       }
       $eh$lpad$body$index2Z2D = $19;$eh$lpad$body$indexZ2D = $18;
       break;
      }
     }
     $26 = HEAP32[$8>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      $28 = ($26|0)==(0|0);
      if (!($28)) {
       __THREW__ = 0;
       invoke_vi(525,($26|0));
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        label = 14;
        break L1;
       }
      }
      HEAP32[$8>>2] = $9;
      __THREW__ = 0;
      invoke_vi(526,($9|0));
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       label = 14;
       break L1;
      }
     }
     $33 = ((($0)) + 64|0);
     HEAPF32[$33>>2] = 1.0;
     $34 = ((($0)) + 68|0);
     HEAP32[$34>>2] = $5;
     $35 = ($5|0)!=(0);
     $36 = ((($0)) + 28|0);
     $$sink = $35 ? 30508 : 30324;
     HEAP32[$36>>2] = $$sink;
     $37 = ((($0)) + 12|0);
     dest=$37; src=$2; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
     $38 = ($4|0)==(0|0);
     if (!($38)) {
      $43 = ((($0)) + 80|0);
      dest=$43; src=$4; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
      STACKTOP = sp;return;
     }
     __THREW__ = 0;
     invoke_vidddd(614,($6|0),0.0,1.0,1.0,-1.0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      $47 = ___cxa_find_matching_catch_2()|0;
      $48 = tempRet0;
      $$0 = $48;$$08 = $47;
      break L1;
     }
     $46 = ((($0)) + 80|0);
     dest=$46; src=$6; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
     STACKTOP = sp;return;
    }
   } while(0);
   __ZdlPv($9);
   $$0 = $eh$lpad$body$index2Z2D;$$08 = $eh$lpad$body$indexZ2D;
  }
 } while(0);
 if ((label|0) == 14) {
  $39 = ___cxa_find_matching_catch_2()|0;
  $40 = tempRet0;
  $$0 = $40;$$08 = $39;
 }
 $49 = HEAP32[$8>>2]|0;
 $50 = ($49|0)==(0|0);
 if ($50) {
  __ZN8RenderOpD2Ev($0);
  ___resumeException($$08|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(525,($49|0));
 $51 = __THREW__; __THREW__ = 0;
 $52 = $51&1;
 if ($52) {
  $53 = ___cxa_find_matching_catch_3(0|0)|0;
  $54 = tempRet0;
  ___clang_call_terminate($53);
  // unreachable;
 } else {
  __ZN8RenderOpD2Ev($0);
  ___resumeException($$08|0);
  // unreachable;
 }
}
function __ZN15TextureRenderOpC2EP4ViewPKci($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$1 = 0, $$110 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 40|0;
 $5 = sp;
 $6 = sp + 24|0;
 __ZN8RenderOpC2EP4View($0,$1);
 $7 = ((($0)) + 72|0);
 HEAP32[$0>>2] = (3972);
 HEAP32[$7>>2] = (4040);
 $8 = ((($0)) + 76|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 64|0);
 HEAPF32[$9>>2] = 1.0;
 $10 = ((($0)) + 28|0);
 HEAP32[$10>>2] = 30324;
 __THREW__ = 0;
 invoke_vidddd(614,($4|0),0.0,0.0,1.0,1.0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  $15 = HEAP32[$8>>2]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   __ZN8RenderOpD2Ev($0);
   ___resumeException($13|0);
   // unreachable;
  }
  __THREW__ = 0;
  invoke_vi(525,($15|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if ($18) {
   $19 = ___cxa_find_matching_catch_3(0|0)|0;
   $20 = tempRet0;
   ___clang_call_terminate($19);
   // unreachable;
  } else {
   __ZN8RenderOpD2Ev($0);
   ___resumeException($13|0);
   // unreachable;
  }
 }
 $21 = ((($0)) + 80|0);
 dest=$21; src=$4; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 HEAP32[$10>>2] = 30692;
 HEAPF32[$9>>2] = 1.0;
 $22 = ((($0)) + 68|0);
 HEAP32[$22>>2] = $3;
 __THREW__ = 0;
 $23 = (invoke_iii(636,(28952|0),($2|0))|0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 do {
  if ($25) {
   $48 = ___cxa_find_matching_catch_2()|0;
   $49 = tempRet0;
   $$1 = $49;$$110 = $48;
  } else {
   $26 = ((($23)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($23)) + 16|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $0;
   $31 = ((($5)) + 16|0);
   HEAP32[$5>>2] = (4272);
   $32 = ((($5)) + 4|0);
   HEAP32[$32>>2] = $30;
   HEAP32[$31>>2] = $5;
   __THREW__ = 0;
   invoke_viii(637,($27|0),($29|0),($5|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    $52 = ___cxa_find_matching_catch_2()|0;
    $53 = tempRet0;
    $54 = HEAP32[$31>>2]|0;
    $55 = ($54|0)==($5|0);
    if ($55) {
     $56 = HEAP32[$54>>2]|0;
     $57 = ((($56)) + 16|0);
     $58 = HEAP32[$57>>2]|0;
     FUNCTION_TABLE_vi[$58 & 1023]($54);
     $$1 = $53;$$110 = $52;
     break;
    }
    $59 = ($54|0)==(0|0);
    if ($59) {
     $$1 = $53;$$110 = $52;
     break;
    }
    $60 = HEAP32[$54>>2]|0;
    $61 = ((($60)) + 20|0);
    $62 = HEAP32[$61>>2]|0;
    FUNCTION_TABLE_vi[$62 & 1023]($54);
    $$1 = $53;$$110 = $52;
    break;
   }
   $35 = HEAP32[$31>>2]|0;
   $36 = ($35|0)==($5|0);
   if ($36) {
    $37 = HEAP32[$35>>2]|0;
    $38 = ((($37)) + 16|0);
    $39 = HEAP32[$38>>2]|0;
    FUNCTION_TABLE_vi[$39 & 1023]($35);
   } else {
    $40 = ($35|0)==(0|0);
    if (!($40)) {
     $41 = HEAP32[$35>>2]|0;
     $42 = ((($41)) + 20|0);
     $43 = HEAP32[$42>>2]|0;
     FUNCTION_TABLE_vi[$43 & 1023]($35);
    }
   }
   __THREW__ = 0;
   invoke_vidddd(614,($6|0),0.0,0.0,1.0,1.0);
   $44 = __THREW__; __THREW__ = 0;
   $45 = $44&1;
   if ($45) {
    $63 = ___cxa_find_matching_catch_2()|0;
    $64 = tempRet0;
    $$1 = $64;$$110 = $63;
    break;
   }
   dest=$21; src=$6; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   __THREW__ = 0;
   invoke_vii(638,($0|0),1);
   $46 = __THREW__; __THREW__ = 0;
   $47 = $46&1;
   if ($47) {
    $50 = ___cxa_find_matching_catch_2()|0;
    $51 = tempRet0;
    $$1 = $51;$$110 = $50;
    break;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 HEAP32[$0>>2] = (3972);
 HEAP32[$7>>2] = (4040);
 $65 = HEAP32[$8>>2]|0;
 $66 = ($65|0)==(0|0);
 if ($66) {
  __ZN8RenderOpD2Ev($0);
  ___resumeException($$110|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(525,($65|0));
 $67 = __THREW__; __THREW__ = 0;
 $68 = $67&1;
 if ($68) {
  $69 = ___cxa_find_matching_catch_3(0|0)|0;
  $70 = tempRet0;
  ___clang_call_terminate($69);
  // unreachable;
 } else {
  __ZN8RenderOpD2Ev($0);
  ___resumeException($$110|0);
  // unreachable;
 }
}
function __ZNSt3__210__function6__funcIZN15TextureRenderOpC1EP4ViewPKciE3__1NS_9allocatorIS7_EEFvP6BitmapEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210__function6__funcIZN15TextureRenderOpC1EP4ViewPKciE3__1NS_9allocatorIS7_EEFvP6BitmapEE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $2 = ((($0)) + 4|0);
 HEAP32[$1>>2] = (4272);
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 return ($1|0);
}
function __ZNKSt3__210__function6__funcIZN15TextureRenderOpC1EP4ViewPKciE3__1NS_9allocatorIS7_EEFvP6BitmapEE7__cloneEPNS0_6__baseISC_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 HEAP32[$1>>2] = (4272);
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 return;
}
function __ZNSt3__210__function6__funcIZN15TextureRenderOpC1EP4ViewPKciE3__1NS_9allocatorIS7_EEFvP6BitmapEE7destroyEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__210__function6__funcIZN15TextureRenderOpC1EP4ViewPKciE3__1NS_9allocatorIS7_EEFvP6BitmapEE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__210__function6__funcIZN15TextureRenderOpC1EP4ViewPKciE3__1NS_9allocatorIS7_EEFvP6BitmapEEclEOSB_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx = 0, $$idx$val = 0, $$val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$i$index2Z2D = 0, $eh$lpad$body$i$i$i$indexZ2D = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $$idx = ((($0)) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$val = HEAP32[$1>>2]|0;
 $3 = (__ZN6ObjectnwEj(12)|0);
 __THREW__ = 0;
 invoke_vi(555,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $22 = ___cxa_find_matching_catch_2()|0;
  $23 = tempRet0;
  $eh$lpad$body$i$i$i$index2Z2D = $23;$eh$lpad$body$i$i$i$indexZ2D = $22;
  __ZdlPv($3);
  ___resumeException($eh$lpad$body$i$i$i$indexZ2D|0);
  // unreachable;
 }
 HEAP32[$3>>2] = (3916);
 $6 = ((($3)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = ($$val|0)==(0|0);
 if (!($7)) {
  HEAP32[$6>>2] = $$val;
  __THREW__ = 0;
  invoke_vi(526,($$val|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $10 = ___cxa_find_matching_catch_2()|0;
   $11 = tempRet0;
   $12 = HEAP32[$6>>2]|0;
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    __THREW__ = 0;
    invoke_vi(525,($12|0));
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     $16 = ___cxa_find_matching_catch_3(0|0)|0;
     $17 = tempRet0;
     ___clang_call_terminate($16);
     // unreachable;
    }
   }
   $eh$lpad$body$i$i$i$index2Z2D = $11;$eh$lpad$body$i$i$i$indexZ2D = $10;
   __ZdlPv($3);
   ___resumeException($eh$lpad$body$i$i$i$indexZ2D|0);
   // unreachable;
  }
 }
 $18 = ((($$idx$val)) + 76|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==($3|0);
 if (!($20)) {
  $21 = ($19|0)==(0|0);
  if (!($21)) {
   __ZN6Object7releaseEv($19);
  }
  HEAP32[$18>>2] = $3;
  __ZN6Object6retainEv($3);
 }
 $24 = ((($$val)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (+($25|0));
 $27 = ((($$val)) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (+($28|0));
 __Z9RECT_Makeffff($2,0.0,0.0,$26,$29);
 $30 = ((($$idx$val)) + 12|0);
 dest=$30; src=$2; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function __ZNKSt3__210__function6__funcIZN15TextureRenderOpC1EP4ViewPKciE3__1NS_9allocatorIS7_EEFvP6BitmapEE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(17367|0);
 $5 = ((($0)) + 4|0);
 $$0 = $4 ? $5 : 0;
 return ($$0|0);
}
function __ZNKSt3__210__function6__funcIZN15TextureRenderOpC1EP4ViewPKciE3__1NS_9allocatorIS7_EEFvP6BitmapEE11target_typeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1096|0);
}
function __ZN7SurfaceD2Ev($0) {
 $0 = $0|0;
 var $$023$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i$i = 0, $scevgep4$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4316);
 $1 = ((($0)) + 160|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 do {
  if (!($3)) {
   __THREW__ = 0;
   invoke_vii(598,1,($1|0));
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $50 = ___cxa_find_matching_catch_3(0|0)|0;
    $51 = tempRet0;
    $52 = ((($0)) + 196|0);
    __ZN6ObjPtrI22PrivateSurfaceRenderOpED2Ev($52);
    $53 = ((($0)) + 180|0);
    __ZNSt3__210__list_impI6ObjPtrI11RenderBatchENS_9allocatorIS3_EEED2Ev($53);
    $54 = ((($0)) + 16|0);
    __ZN6REGIOND2Ev($54);
    ___clang_call_terminate($50);
    // unreachable;
   }
   HEAP32[$1>>2] = 0;
   $6 = ((($0)) + 156|0);
   __THREW__ = 0;
   invoke_vii(627,1,($6|0));
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $50 = ___cxa_find_matching_catch_3(0|0)|0;
    $51 = tempRet0;
    $52 = ((($0)) + 196|0);
    __ZN6ObjPtrI22PrivateSurfaceRenderOpED2Ev($52);
    $53 = ((($0)) + 180|0);
    __ZNSt3__210__list_impI6ObjPtrI11RenderBatchENS_9allocatorIS3_EEED2Ev($53);
    $54 = ((($0)) + 16|0);
    __ZN6REGIOND2Ev($54);
    ___clang_call_terminate($50);
    // unreachable;
   } else {
    HEAP32[$6>>2] = 0;
    break;
   }
  }
 } while(0);
 $9 = ((($0)) + 196|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  __THREW__ = 0;
  invoke_vi(525,($10|0));
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  }
 }
 $16 = ((($0)) + 180|0);
 $17 = ((($0)) + 188|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 L14: do {
  if (!($19)) {
   $20 = ((($0)) + 184|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = HEAP32[$16>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[$21>>2]|0;
   $26 = ((($25)) + 4|0);
   HEAP32[$26>>2] = $24;
   $27 = HEAP32[$23>>2]|0;
   HEAP32[$27>>2] = $25;
   HEAP32[$17>>2] = 0;
   $28 = ($21|0)==($16|0);
   if (!($28)) {
    $$023$i$i = $21;
    while(1) {
     $29 = ((($$023$i$i)) + 4|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ((($$023$i$i)) + 8|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==(0|0);
     if (!($33)) {
      __THREW__ = 0;
      invoke_vi(525,($32|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       break;
      }
     }
     __ZdlPv($$023$i$i);
     $38 = ($30|0)==($16|0);
     if ($38) {
      break L14;
     } else {
      $$023$i$i = $30;
     }
    }
    $36 = ___cxa_find_matching_catch_3(0|0)|0;
    $37 = tempRet0;
    ___clang_call_terminate($36);
    // unreachable;
   }
  }
 } while(0);
 $39 = ((($0)) + 16|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0|0);
 if ($41) {
  return;
 }
 $42 = ((($0)) + 20|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==($40|0);
 if (!($44)) {
  $scevgep$i$i$i$i = ((($43)) + -16|0);
  $45 = $scevgep$i$i$i$i;
  $46 = $40;
  $47 = (($45) - ($46))|0;
  $48 = $47 >>> 4;
  $49 = $48 ^ -1;
  $scevgep4$i$i$i$i = (($43) + ($49<<4)|0);
  HEAP32[$42>>2] = $scevgep4$i$i$i$i;
 }
 __ZdlPv($40);
 return;
}
function __ZN7SurfaceD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN7SurfaceD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN6ObjPtrI22PrivateSurfaceRenderOpED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_3(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt3__210__list_impI6ObjPtrI11RenderBatchENS_9allocatorIS3_EEED2Ev($0) {
 $0 = $0|0;
 var $$023$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = HEAP32[$7>>2]|0;
 HEAP32[$11>>2] = $9;
 HEAP32[$1>>2] = 0;
 $12 = ($5|0)==($0|0);
 if ($12) {
  return;
 } else {
  $$023$i = $5;
 }
 while(1) {
  $13 = ((($$023$i)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($$023$i)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   __THREW__ = 0;
   invoke_vi(525,($16|0));
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    label = 5;
    break;
   }
  }
  __ZdlPv($$023$i);
  $22 = ($14|0)==($0|0);
  if ($22) {
   label = 7;
   break;
  } else {
   $$023$i = $14;
  }
 }
 if ((label|0) == 5) {
  $20 = ___cxa_find_matching_catch_3(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 }
 else if ((label|0) == 7) {
  return;
 }
}
function __ZN6REGIOND2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if (!($5)) {
  $scevgep$i$i$i = ((($4)) + -16|0);
  $6 = $scevgep$i$i$i;
  $7 = $1;
  $8 = (($6) - ($7))|0;
  $9 = $8 >>> 4;
  $10 = $9 ^ -1;
  $scevgep4$i$i$i = (($4) + ($10<<4)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i;
 }
 __ZdlPv($1);
 return;
}
function __ZN22PrivateSurfaceRenderOpD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4332);
 $1 = ((($0)) + 72|0);
 HEAP32[$1>>2] = (4400);
 $2 = ((($0)) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if (!($4)) {
   $5 = HEAP32[$3>>2]|0;
   __THREW__ = 0;
   invoke_vii(618,($5|0),($3|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    $8 = ___cxa_find_matching_catch_3(0|0)|0;
    $9 = tempRet0;
    __ZN15TextureRenderOpD2Ev($0);
    ___clang_call_terminate($8);
    // unreachable;
   } else {
    HEAP32[$2>>2] = 0;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = (3972);
 HEAP32[$1>>2] = (4040);
 $10 = ((($0)) + 76|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  __ZN8RenderOpD2Ev($0);
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($11|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $15 = ___cxa_find_matching_catch_3(0|0)|0;
  $16 = tempRet0;
  ___clang_call_terminate($15);
  // unreachable;
 } else {
  __ZN8RenderOpD2Ev($0);
  return;
 }
}
function __ZN22PrivateSurfaceRenderOpD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN22PrivateSurfaceRenderOpD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN22PrivateSurfaceRenderOp6renderEP6WindowP7Surface($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8RenderOp6renderEP6WindowP7Surface($0,$1,$2);
 $3 = ((($1)) + 112|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 100|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 160|0);
 $9 = HEAP32[$8>>2]|0;
 _glBindTexture(3553,($9|0));
 $10 = ((($0)) + 100|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $$pre = ((($0)) + 96|0);
  $$pre$phiZ2D = $$pre;
  $41 = HEAP32[$$pre$phiZ2D>>2]|0;
  $42 = ((($41)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43*12)|0;
  $45 = $44;
  _glDrawElements(4,6,5123,($45|0));
  return;
 } else {
  HEAP8[$10>>0] = 0;
  $13 = ((($0)) + 96|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($15)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($14)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = Math_imul($21, $19)|0;
  $23 = (($17) + ($22)|0);
  $24 = HEAP32[$0>>2]|0;
  $25 = ((($24)) + 28|0);
  $26 = HEAP32[$25>>2]|0;
  FUNCTION_TABLE_vii[$26 & 1023]($0,$23);
  $27 = HEAP32[$13>>2]|0;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29 << 7;
  $31 = ((($27)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 << 7;
  $34 = HEAP32[$27>>2]|0;
  $35 = ((($34)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($34)) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = Math_imul($38, $29)|0;
  $40 = (($36) + ($39)|0);
  _glBufferSubData(34962,($30|0),($33|0),($40|0));
  $$pre$phiZ2D = $13;
  $41 = HEAP32[$$pre$phiZ2D>>2]|0;
  $42 = ((($41)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43*12)|0;
  $45 = $44;
  _glDrawElements(4,6,5123,($45|0));
  return;
 }
}
function __ZN22PrivateSurfaceRenderOp17rectToSurfaceQuadE4RECTP5_QUAD($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 123|0);
 (__ZN6_POINTpLERKS_($1,$6)|0);
 __Z12QUADFromRECTRK4RECTj($3,$1,0);
 dest=$2; src=$3; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function __Z15setOrthoFrustumffffff($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ((($0)) + 60|0);
 HEAPF32[$7>>2] = 1.0;
 $8 = ((($0)) + 40|0);
 $9 = ((($0)) + 20|0);
 $10 = ((($0)) + 44|0);
 $11 = ((($0)) + 24|0);
 $12 = ((($0)) + 4|0);
 ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;HEAP32[$12+12>>2]=0|0;
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;HEAP32[$11+12>>2]=0|0;
 HEAP32[$10>>2] = 0;
 $13 = $2 - $1;
 $14 = 2.0 / $13;
 HEAPF32[$0>>2] = $14;
 $15 = $4 - $3;
 $16 = 2.0 / $15;
 HEAPF32[$9>>2] = $16;
 $17 = $6 - $5;
 $18 = -2.0 / $17;
 HEAPF32[$8>>2] = $18;
 $19 = $1 + $2;
 $20 = -$19;
 $21 = $20 / $13;
 $22 = ((($0)) + 48|0);
 HEAPF32[$22>>2] = $21;
 $23 = $3 + $4;
 $24 = -$23;
 $25 = $24 / $15;
 $26 = ((($0)) + 52|0);
 HEAPF32[$26>>2] = $25;
 $27 = $5 + $6;
 $28 = -$27;
 $29 = $28 / $17;
 $30 = ((($0)) + 56|0);
 HEAPF32[$30>>2] = $29;
 return;
}
function __ZN7SurfaceC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev($0);
 HEAP32[$0>>2] = (4316);
 $1 = ((($0)) + 16|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 20|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 24|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 88|0);
 HEAPF32[$4>>2] = 1.0;
 $5 = ((($0)) + 68|0);
 HEAPF32[$5>>2] = 1.0;
 $6 = ((($0)) + 48|0);
 HEAPF32[$6>>2] = 1.0;
 $7 = ((($0)) + 28|0);
 HEAPF32[$7>>2] = 1.0;
 $8 = ((($0)) + 72|0);
 $9 = ((($0)) + 52|0);
 $10 = ((($0)) + 32|0);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;HEAP32[$10+12>>2]=0|0;
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;HEAP32[$9+12>>2]=0|0;
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;HEAP32[$8+12>>2]=0|0;
 $11 = ((($0)) + 180|0);
 HEAP32[$11>>2] = $11;
 $12 = ((($0)) + 184|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($0)) + 188|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($0)) + 196|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($0)) + 192|0);
 HEAP8[$15>>0] = 0;
 return;
}
function __ZN7SurfaceC2EP4View($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev($0);
 HEAP32[$0>>2] = (4316);
 $2 = ((($0)) + 16|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 24|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 88|0);
 HEAPF32[$5>>2] = 1.0;
 $6 = ((($0)) + 68|0);
 HEAPF32[$6>>2] = 1.0;
 $7 = ((($0)) + 48|0);
 HEAPF32[$7>>2] = 1.0;
 $8 = ((($0)) + 28|0);
 HEAPF32[$8>>2] = 1.0;
 $9 = ((($0)) + 72|0);
 $10 = ((($0)) + 52|0);
 $11 = ((($0)) + 32|0);
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;HEAP32[$11+12>>2]=0|0;
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;HEAP32[$10+12>>2]=0|0;
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;HEAP32[$9+12>>2]=0|0;
 $12 = ((($0)) + 180|0);
 HEAP32[$12>>2] = $12;
 $13 = ((($0)) + 184|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 188|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($0)) + 196|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($0)) + 192|0);
 HEAP8[$16>>0] = 1;
 $17 = ((($0)) + 164|0);
 __THREW__ = 0;
 invoke_vii(629,35738,($17|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if (!($19)) {
  $20 = ((($0)) + 168|0);
  __THREW__ = 0;
  invoke_vii(629,35739,($20|0));
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if (!($22)) {
   $23 = ((($0)) + 160|0);
   __THREW__ = 0;
   invoke_vii(630,1,($23|0));
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if (!($25)) {
    $26 = ((($0)) + 156|0);
    __THREW__ = 0;
    invoke_vii(633,1,($26|0));
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     return;
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch_2()|0;
 $30 = tempRet0;
 __ZN7SurfaceD2Ev($0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZN7Surface15setupPrivateFboEv($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 _glGetIntegerv(36006,($1|0));
 _glGetIntegerv(32873,($2|0));
 $3 = ((($0)) + 160|0);
 $4 = HEAP32[$3>>2]|0;
 _glBindTexture(3553,($4|0));
 _glTexParameteri(3553,10241,9728);
 _glTexParameteri(3553,10240,9728);
 _glTexParameteri(3553,10242,33071);
 _glTexParameteri(3553,10243,33071);
 $5 = ((($0)) + 168|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(32993);
 $$ = $7 ? 6408 : $6;
 $8 = ((($0)) + 8|0);
 $9 = +HEAPF32[$8>>2];
 $10 = (~~(($9)));
 $11 = ((($0)) + 12|0);
 $12 = +HEAPF32[$11>>2];
 $13 = (~~(($12)));
 $14 = ((($0)) + 164|0);
 $15 = HEAP32[$14>>2]|0;
 _glTexImage2D(3553,0,($$|0),($10|0),($13|0),0,($$|0),($15|0),(0|0));
 $16 = HEAP32[$2>>2]|0;
 _glBindTexture(3553,($16|0));
 $17 = ((($0)) + 156|0);
 $18 = HEAP32[$17>>2]|0;
 _glBindFramebuffer(36160,($18|0));
 $19 = HEAP32[$3>>2]|0;
 _glFramebufferTexture2D(36160,36064,3553,($19|0),0);
 _glFramebufferTexture2D(36160,36096,3553,0,0);
 _glFramebufferTexture2D(36160,36128,3553,0,0);
 $20 = (_glCheckFramebufferStatus(36160)|0);
 $21 = ($20|0)==(36053);
 if ($21) {
  $22 = HEAP32[$1>>2]|0;
  _glBindFramebuffer(36160,($22|0));
  STACKTOP = sp;return;
 } else {
  ___assert_fail((17536|0),(17604|0),62,(17650|0));
  // unreachable;
 }
}
function __ZN7Surface7setSizeE5_SIZE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$phi$trans$insert = 0, $$pre = 0.0, $$sroa$0$0$$sroa_idx = 0, $$sroa$10$0$$sroa_idx14 = 0, $$sroa$11$0$$sroa_idx16 = 0, $$sroa$12$0$$sroa_idx18 = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$5$0$$sroa_idx4 = 0, $$sroa$6$0$$sroa_idx = 0, $$sroa$7$0$$sroa_idx8 = 0, $$sroa$8$0$$sroa_idx10 = 0, $$sroa$9$0$$sroa_idx12 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0;
 var $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp;
 $2 = sp + 16|0;
 $3 = ((($0)) + 8|0);
 $4 = +HEAPF32[$3>>2];
 HEAP8[tempDoublePtr>>0]=HEAP8[$1>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1+3>>0];$5 = +HEAPF32[tempDoublePtr>>2];
 $6 = $4 != $5;
 if ($6) {
  $$phi$trans$insert = ((($1)) + 4|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$$phi$trans$insert>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$phi$trans$insert+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$phi$trans$insert+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$phi$trans$insert+3>>0];$$pre = +HEAPF32[tempDoublePtr>>2];
  $25 = $$pre;
 } else {
  $7 = ((($0)) + 12|0);
  $8 = +HEAPF32[$7>>2];
  $9 = ((($1)) + 4|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$9>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$9+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$9+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$9+3>>0];$10 = +HEAPF32[tempDoublePtr>>2];
  $11 = $8 != $10;
  if ($11) {
   $25 = $10;
  } else {
   STACKTOP = sp;return;
  }
 }
 $12 = $1;
 $13 = $12;
 $14 = HEAPU8[$13>>0]|(HEAPU8[$13+1>>0]<<8)|(HEAPU8[$13+2>>0]<<16)|(HEAPU8[$13+3>>0]<<24);
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAPU8[$16>>0]|(HEAPU8[$16+1>>0]<<8)|(HEAPU8[$16+2>>0]<<16)|(HEAPU8[$16+3>>0]<<24);
 $18 = $3;
 $19 = $18;
 HEAP8[$19>>0]=$14&255;HEAP8[$19+1>>0]=($14>>8)&255;HEAP8[$19+2>>0]=($14>>16)&255;HEAP8[$19+3>>0]=$14>>24;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP8[$21>>0]=$17&255;HEAP8[$21+1>>0]=($17>>8)&255;HEAP8[$21+2>>0]=($17>>16)&255;HEAP8[$21+3>>0]=$17>>24;
 $22 = (HEAP32[tempDoublePtr>>2]=$14,+HEAPF32[tempDoublePtr>>2]);
 $23 = 2.0 / $22;
 $24 = 0.0 - $25;
 $26 = 2.0 / $24;
 $27 = $22 + 0.0;
 $28 = -$27;
 $29 = $28 / $22;
 $30 = $25 + 0.0;
 $31 = -$30;
 $32 = $31 / $24;
 $$sroa$0$0$$sroa_idx = ((($0)) + 28|0);
 HEAPF32[$$sroa$0$0$$sroa_idx>>2] = $23;
 $$sroa$4$0$$sroa_idx = ((($0)) + 32|0);
 ;HEAP32[$$sroa$4$0$$sroa_idx>>2]=0|0;HEAP32[$$sroa$4$0$$sroa_idx+4>>2]=0|0;HEAP32[$$sroa$4$0$$sroa_idx+8>>2]=0|0;HEAP32[$$sroa$4$0$$sroa_idx+12>>2]=0|0;
 $$sroa$5$0$$sroa_idx4 = ((($0)) + 48|0);
 HEAPF32[$$sroa$5$0$$sroa_idx4>>2] = $26;
 $$sroa$6$0$$sroa_idx = ((($0)) + 52|0);
 ;HEAP32[$$sroa$6$0$$sroa_idx>>2]=0|0;HEAP32[$$sroa$6$0$$sroa_idx+4>>2]=0|0;HEAP32[$$sroa$6$0$$sroa_idx+8>>2]=0|0;HEAP32[$$sroa$6$0$$sroa_idx+12>>2]=0|0;
 $$sroa$7$0$$sroa_idx8 = ((($0)) + 68|0);
 HEAPF32[$$sroa$7$0$$sroa_idx8>>2] = -1.0;
 $$sroa$8$0$$sroa_idx10 = ((($0)) + 72|0);
 HEAP32[$$sroa$8$0$$sroa_idx10>>2] = 0;
 $$sroa$9$0$$sroa_idx12 = ((($0)) + 76|0);
 HEAPF32[$$sroa$9$0$$sroa_idx12>>2] = $29;
 $$sroa$10$0$$sroa_idx14 = ((($0)) + 80|0);
 HEAPF32[$$sroa$10$0$$sroa_idx14>>2] = $32;
 $$sroa$11$0$$sroa_idx16 = ((($0)) + 84|0);
 HEAPF32[$$sroa$11$0$$sroa_idx16>>2] = -0.0;
 $$sroa$12$0$$sroa_idx18 = ((($0)) + 88|0);
 HEAPF32[$$sroa$12$0$$sroa_idx18>>2] = 1.0;
 $33 = ((($0)) + 192|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = ($34<<24>>24)==(0);
 if (!($35)) {
  $36 = ((($0)) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($0)) + 20|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==($37|0);
  if (!($40)) {
   $scevgep$i$i$i = ((($39)) + -16|0);
   $41 = $scevgep$i$i$i;
   $42 = $37;
   $43 = (($41) - ($42))|0;
   $44 = $43 >>> 4;
   $45 = $44 ^ -1;
   $scevgep4$i$i$i = (($39) + ($45<<4)|0);
   HEAP32[$38>>2] = $scevgep4$i$i$i;
  }
  __Z9RECT_Makeffff($2,0.0,0.0,$22,$25);
  ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
  __ZN6REGION7addRectE4RECT($36,$$byval_copy);
 }
 $46 = ((($0)) + 160|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)==(0);
 if ($48) {
  STACKTOP = sp;return;
 }
 __ZN7Surface15setupPrivateFboEv($0);
 STACKTOP = sp;return;
}
function __ZN7Surface3useEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 160|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $6 = 0;
 } else {
  $4 = ((($0)) + 156|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5;
 }
 _glBindFramebuffer(36160,($6|0));
 $7 = ((($0)) + 8|0);
 $8 = +HEAPF32[$7>>2];
 $9 = (~~(($8)));
 $10 = ((($0)) + 12|0);
 $11 = +HEAPF32[$10>>2];
 $12 = (~~(($11)));
 _glViewport(0,0,($9|0),($12|0));
 return;
}
function __ZN7Surface13detachViewOpsEP4View($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$08$0$$sroa$08$0$$sroa$0$0$copyload$i15 = 0, $$sroa$08$0$$sroa$08$0$917 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 92|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 88|0);
 $5 = $3;
 $6 = ($5|0)==($4|0);
 if ($6) {
  return;
 } else {
  $$sroa$08$0$$sroa$08$0$$sroa$0$0$copyload$i15 = $5;$$sroa$08$0$$sroa$08$0$917 = $3;
 }
 while(1) {
  $7 = $$sroa$08$0$$sroa$08$0$917;
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  __ZN7Surface14removeRenderOpEP8RenderOp($0,$9);
  $10 = ((($$sroa$08$0$$sroa$08$0$$sroa$0$0$copyload$i15)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11;
  $13 = ($12|0)==($4|0);
  if ($13) {
   break;
  } else {
   $$sroa$08$0$$sroa$08$0$$sroa$0$0$copyload$i15 = $12;$$sroa$08$0$$sroa$08$0$917 = $11;
  }
 }
 return;
}
function __ZN7Surface14removeRenderOpEP8RenderOp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  ___assert_fail((17666|0),(17604|0),158,(17672|0));
  // unreachable;
 }
 __ZN6Object7releaseEv($3);
 HEAP32[$2>>2] = 0;
 $5 = ((($3)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==($0|0);
 if (!($7)) {
  ___assert_fail((17687|0),(17604|0),159,(17672|0));
  // unreachable;
 }
 $8 = ((($1)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$9>>2]|0;
 $13 = ((($12)) + 4|0);
 HEAP32[$13>>2] = $11;
 $14 = HEAP32[$10>>2]|0;
 HEAP32[$14>>2] = $12;
 $15 = ((($3)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + -1)|0;
 HEAP32[$15>>2] = $17;
 $18 = ((($9)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if (!($20)) {
  __THREW__ = 0;
  invoke_vi(525,($19|0));
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if ($22) {
   $23 = ___cxa_find_matching_catch_3(0|0)|0;
   $24 = tempRet0;
   ___clang_call_terminate($23);
   // unreachable;
  }
 }
 __ZdlPv($9);
 $25 = ((($3)) + 32|0);
 HEAP8[$25>>0] = 1;
 $26 = HEAP32[$15>>2]|0;
 $27 = ($26|0)==(0);
 if (!($27)) {
  return;
 }
 $28 = ((($3)) + 40|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$29>>2]|0;
 $33 = ((($32)) + 4|0);
 HEAP32[$33>>2] = $31;
 $34 = HEAP32[$30>>2]|0;
 HEAP32[$34>>2] = $32;
 $35 = ((($0)) + 188|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + -1)|0;
 HEAP32[$35>>2] = $37;
 $38 = ((($29)) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0|0);
 if (!($40)) {
  __THREW__ = 0;
  invoke_vi(525,($39|0));
  $41 = __THREW__; __THREW__ = 0;
  $42 = $41&1;
  if ($42) {
   $43 = ___cxa_find_matching_catch_3(0|0)|0;
   $44 = tempRet0;
   ___clang_call_terminate($43);
   // unreachable;
  }
 }
 __ZdlPv($29);
 return;
}
function __ZN7Surface13attachViewOpsEP4View($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$08$0$$sroa$08$0$$sroa$0$0$copyload$i15 = 0, $$sroa$08$0$$sroa$08$0$917 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 92|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 88|0);
 $5 = $3;
 $6 = ($5|0)==($4|0);
 if ($6) {
  return;
 } else {
  $$sroa$08$0$$sroa$08$0$$sroa$0$0$copyload$i15 = $5;$$sroa$08$0$$sroa$08$0$917 = $3;
 }
 while(1) {
  $7 = $$sroa$08$0$$sroa$08$0$917;
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  __ZN7Surface11addRenderOpEP8RenderOp($0,$9);
  $10 = ((($$sroa$08$0$$sroa$08$0$$sroa$0$0$copyload$i15)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11;
  $13 = ($12|0)==($4|0);
  if ($13) {
   break;
  } else {
   $$sroa$08$0$$sroa$08$0$$sroa$0$0$copyload$i15 = $12;$$sroa$08$0$$sroa$08$0$917 = $11;
  }
 }
 return;
}
function __ZN7Surface11addRenderOpEP8RenderOp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$056 = 0, $$057 = 0, $$3 = 0, $$pre$phi164Z2D = 0, $$pre$phi166Z2D = 0, $$pre$phiZ2D = 0, $$sink23$i = 0, $$sink24$i = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$012$0$$sroa_idx = 0, $$sroa$017$0$$sroa_idx = 0, $$sroa$090$0$$sroa$090$0$$sroa$0$0$copyload$i131 = 0, $$sroa$090$0$$sroa$090$0$139 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 57|0);
 HEAP8[$2>>0] = 1;
 $3 = ((($0)) + 180|0);
 $4 = ((($0)) + 184|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5;
 $7 = ($6|0)==($3|0);
 L1: do {
  if ($7) {
   label = 5;
  } else {
   $9 = $5;
   while(1) {
    $8 = $9;
    $10 = ((($8)) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($11)) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($13)) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_iii[$18 & 1023]($15,$1)|0);
    if ($19) {
     break;
    }
    $20 = $9;
    $21 = ((($20)) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $22;
    $24 = ($23|0)==($3|0);
    if ($24) {
     label = 5;
     break L1;
    } else {
     $9 = $22;
    }
   }
   $25 = $9;
   $26 = ((($25)) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    label = 5;
   } else {
    $$3 = $27;
   }
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $29 = (__ZN6ObjectnwEj(44)|0);
   __THREW__ = 0;
   invoke_vi(639,($29|0));
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    $52 = ___cxa_find_matching_catch_2()|0;
    $53 = tempRet0;
    __ZdlPv($29);
    $$056 = $52;$$057 = $53;
    ___resumeException($$056|0);
    // unreachable;
   }
   $32 = ((($29)) + 36|0);
   HEAP32[$32>>2] = $0;
   $33 = ($29|0)==(0|0);
   if (!($33)) {
    __ZN6Object6retainEv($29);
   }
   __THREW__ = 0;
   $34 = (invoke_ii(527,12)|0);
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   do {
    if ($36) {
     $54 = ___cxa_find_matching_catch_2()|0;
     $55 = tempRet0;
     if ($33) {
      $$056 = $54;$$057 = $55;
      ___resumeException($$056|0);
      // unreachable;
     } else {
      $$pre$phi166Z2D = $29;$140 = $55;$141 = $54;
      break;
     }
    } else {
     HEAP32[$34>>2] = 0;
     $37 = ((($34)) + 8|0);
     HEAP32[$37>>2] = $29;
     if (!($33)) {
      __THREW__ = 0;
      invoke_vi(526,($29|0));
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       $40 = ___cxa_find_matching_catch_2()|0;
       $41 = tempRet0;
       __ZdlPv($34);
       $$pre$phi166Z2D = $29;$140 = $41;$141 = $40;
       break;
      }
     }
     $42 = HEAP32[$3>>2]|0;
     $43 = ((($42)) + 4|0);
     HEAP32[$43>>2] = $34;
     HEAP32[$34>>2] = $42;
     HEAP32[$3>>2] = $34;
     $44 = ((($34)) + 4|0);
     HEAP32[$44>>2] = $3;
     $45 = ((($0)) + 188|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (($46) + 1)|0;
     HEAP32[$45>>2] = $47;
     $$sroa$017$0$$sroa_idx = ((($29)) + 40|0);
     HEAP32[$$sroa$017$0$$sroa_idx>>2] = $34;
     if ($33) {
      $$3 = 0;
      break L6;
     }
     __THREW__ = 0;
     invoke_vi(525,($29|0));
     $48 = __THREW__; __THREW__ = 0;
     $49 = $48&1;
     if (!($49)) {
      $$3 = $29;
      break L6;
     }
     $50 = ___cxa_find_matching_catch_3(0|0)|0;
     $51 = tempRet0;
     ___clang_call_terminate($50);
     // unreachable;
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(525,($$pre$phi166Z2D|0));
   $56 = __THREW__; __THREW__ = 0;
   $57 = $56&1;
   if ($57) {
    $58 = ___cxa_find_matching_catch_3(0|0)|0;
    $59 = tempRet0;
    ___clang_call_terminate($58);
    // unreachable;
   } else {
    $$056 = $141;$$057 = $140;
    ___resumeException($$056|0);
    // unreachable;
   }
  }
 } while(0);
 $60 = ((($1)) + 40|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)==(0|0);
 if (!($62)) {
  ___assert_fail((17711|0),(17604|0),141,(17723|0));
  // unreachable;
 }
 $63 = ($$3|0)==(0|0);
 if (!($63)) {
  HEAP32[$60>>2] = $$3;
  __ZN6Object6retainEv($$3);
 }
 $64 = ((($$3)) + 32|0);
 HEAP8[$64>>0] = 1;
 $65 = ((($$3)) + 8|0);
 $66 = ((($$3)) + 12|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $67;
 $69 = ($68|0)==($65|0);
 do {
  if ($69) {
   label = 46;
  } else {
   $70 = ((($1)) + 8|0);
   $71 = HEAP32[$70>>2]|0;
   $$sroa$090$0$$sroa$090$0$$sroa$0$0$copyload$i131 = $68;$$sroa$090$0$$sroa$090$0$139 = $67;
   L40: while(1) {
    $72 = $$sroa$090$0$$sroa$090$0$139;
    $73 = ((($72)) + 8|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ((($74)) + 8|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($71|0)==($76|0);
    if (!($77)) {
     $$sink23$i = $76;
     while(1) {
      $78 = ((($$sink23$i)) + 80|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($79|0)==(0|0);
      if ($80) {
       $$sink24$i = $76;
       break;
      }
      $81 = ($79|0)==($71|0);
      if ($81) {
       break L40;
      } else {
       $$sink23$i = $79;
      }
     }
     while(1) {
      $82 = ((($$sink24$i)) + 84|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ($83|0)==(0|0);
      if ($84) {
       break L40;
      }
      $85 = ($83|0)==($71|0);
      if ($85) {
       break;
      } else {
       $$sink24$i = $83;
      }
     }
    }
    $111 = ((($$sroa$090$0$$sroa$090$0$$sroa$0$0$copyload$i131)) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $112;
    $114 = ($113|0)==($65|0);
    if ($114) {
     label = 45;
     break;
    } else {
     $$sroa$090$0$$sroa$090$0$$sroa$0$0$copyload$i131 = $113;$$sroa$090$0$$sroa$090$0$139 = $112;
    }
   }
   if ((label|0) == 45) {
    $115 = ($1|0)==(0|0);
    if ($115) {
     $144 = 1;
     break;
    } else {
     label = 46;
     break;
    }
   }
   $86 = ($1|0)==(0|0);
   if (!($86)) {
    __ZN6Object6retainEv($1);
   }
   __THREW__ = 0;
   $87 = (invoke_ii(527,12)|0);
   $88 = __THREW__; __THREW__ = 0;
   $89 = $88&1;
   do {
    if ($89) {
     $105 = ___cxa_find_matching_catch_2()|0;
     $106 = tempRet0;
     if ($86) {
      $$056 = $105;$$057 = $106;
      ___resumeException($$056|0);
      // unreachable;
     } else {
      $$pre$phi164Z2D = $1;$142 = $106;$143 = $105;
      break;
     }
    } else {
     HEAP32[$87>>2] = 0;
     $90 = ((($87)) + 8|0);
     HEAP32[$90>>2] = $1;
     if (!($86)) {
      __THREW__ = 0;
      invoke_vi(526,($1|0));
      $91 = __THREW__; __THREW__ = 0;
      $92 = $91&1;
      if ($92) {
       $93 = ___cxa_find_matching_catch_2()|0;
       $94 = tempRet0;
       __ZdlPv($87);
       $$pre$phi164Z2D = $1;$142 = $94;$143 = $93;
       break;
      }
     }
     $95 = HEAP32[$$sroa$090$0$$sroa$090$0$$sroa$0$0$copyload$i131>>2]|0;
     $96 = ((($95)) + 4|0);
     HEAP32[$96>>2] = $87;
     HEAP32[$87>>2] = $95;
     HEAP32[$$sroa$090$0$$sroa$090$0$$sroa$0$0$copyload$i131>>2] = $87;
     $97 = ((($87)) + 4|0);
     HEAP32[$97>>2] = $$sroa$090$0$$sroa$090$0$$sroa$0$0$copyload$i131;
     $98 = ((($$3)) + 16|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = (($99) + 1)|0;
     HEAP32[$98>>2] = $100;
     $$sroa$012$0$$sroa_idx = ((($1)) + 44|0);
     HEAP32[$$sroa$012$0$$sroa_idx>>2] = $87;
     if ($86) {
      return;
     }
     __THREW__ = 0;
     invoke_vi(525,($1|0));
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      $103 = ___cxa_find_matching_catch_3(0|0)|0;
      $104 = tempRet0;
      ___clang_call_terminate($103);
      // unreachable;
     } else {
      return;
     }
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(525,($$pre$phi164Z2D|0));
   $107 = __THREW__; __THREW__ = 0;
   $108 = $107&1;
   if ($108) {
    $109 = ___cxa_find_matching_catch_3(0|0)|0;
    $110 = tempRet0;
    ___clang_call_terminate($109);
    // unreachable;
   } else {
    $$056 = $143;$$057 = $142;
    ___resumeException($$056|0);
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 46) {
  __ZN6Object6retainEv($1);
  $144 = 0;
 }
 __THREW__ = 0;
 $116 = (invoke_ii(527,12)|0);
 $117 = __THREW__; __THREW__ = 0;
 $118 = $117&1;
 do {
  if ($118) {
   $134 = ___cxa_find_matching_catch_2()|0;
   $135 = tempRet0;
   if ($144) {
    $$056 = $134;$$057 = $135;
    ___resumeException($$056|0);
    // unreachable;
   } else {
    $$pre$phiZ2D = $1;$145 = $135;$146 = $134;
    break;
   }
  } else {
   HEAP32[$116>>2] = 0;
   $119 = ((($116)) + 8|0);
   HEAP32[$119>>2] = $1;
   if (!($144)) {
    __THREW__ = 0;
    invoke_vi(526,($1|0));
    $120 = __THREW__; __THREW__ = 0;
    $121 = $120&1;
    if ($121) {
     $122 = ___cxa_find_matching_catch_2()|0;
     $123 = tempRet0;
     __ZdlPv($116);
     $$pre$phiZ2D = $1;$145 = $123;$146 = $122;
     break;
    }
   }
   $124 = HEAP32[$65>>2]|0;
   $125 = ((($124)) + 4|0);
   HEAP32[$125>>2] = $116;
   HEAP32[$116>>2] = $124;
   HEAP32[$65>>2] = $116;
   $126 = ((($116)) + 4|0);
   HEAP32[$126>>2] = $65;
   $127 = ((($$3)) + 16|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = (($128) + 1)|0;
   HEAP32[$127>>2] = $129;
   $$sroa$0$0$$sroa_idx = ((($1)) + 44|0);
   HEAP32[$$sroa$0$0$$sroa_idx>>2] = $116;
   if ($144) {
    return;
   }
   __THREW__ = 0;
   invoke_vi(525,($1|0));
   $130 = __THREW__; __THREW__ = 0;
   $131 = $130&1;
   if ($131) {
    $132 = ___cxa_find_matching_catch_3(0|0)|0;
    $133 = tempRet0;
    ___clang_call_terminate($132);
    // unreachable;
   } else {
    return;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(525,($$pre$phiZ2D|0));
 $136 = __THREW__; __THREW__ = 0;
 $137 = $136&1;
 if ($137) {
  $138 = ___cxa_find_matching_catch_3(0|0)|0;
  $139 = tempRet0;
  ___clang_call_terminate($138);
  // unreachable;
 } else {
  $$056 = $146;$$057 = $145;
  ___resumeException($$056|0);
  // unreachable;
 }
}
function __ZN7Surface6renderEP4ViewP6Window($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$val = 0.0, $$1 = 0, $$1$val = 0.0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 200|0);
 HEAP32[$4>>2] = 0;
 __Z10POINT_Makeff($3,0.0,0.0);
 $$0$val = +HEAPF32[$3>>2];
 $$1 = ((($3)) + 4|0);
 $$1$val = +HEAPF32[$$1>>2];
 __ZL12renderPhase1P7SurfaceP4ViewP6Window6_POINT($0,$1,$2,$$0$val,$$1$val);
 __ZL12renderPhase2P7SurfaceP4ViewP6Window(0,$1,$2);
 STACKTOP = sp;return;
}
function __ZL12renderPhase1P7SurfaceP4ViewP6Window6_POINT($0,$1,$2,$$02,$$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $$02 = +$$02;
 $$13 = +$$13;
 var $$0 = 0, $$061$off0 = 0, $$in = 0, $$in62 = 0, $$pre = 0, $$sroa$010$0$$sroa$010$0$1134 = 0, $$sroa$022$0 = 0, $$sroa$022$036 = 0, $$sroa$022$037 = 0, $$sroa_raw_idx = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0;
 var $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $tmpcast64$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $tmpcast64$byval_copy = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 40|0;
 $5 = sp + 24|0;
 $6 = sp;
 $7 = ((($1)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = ((($1)) + 100|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==($0|0);
 if ($12) {
  $68 = ((($1)) + 107|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$68>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$68+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$68+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$68+3>>0];$69 = +HEAPF32[tempDoublePtr>>2];
  $70 = $69 + $$02;
  $71 = ((($1)) + 111|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$71>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$71+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$71+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$71+3>>0];$72 = +HEAPF32[tempDoublePtr>>2];
  $73 = $72 + $$13;
  $$0 = $0;$138 = $70;$139 = $73;
 } else {
  $13 = ((($11)) + 8|0);
  $14 = +HEAPF32[$13>>2];
  $15 = ((($1)) + 115|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$15>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$15+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$15+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$15+3>>0];$16 = +HEAPF32[tempDoublePtr>>2];
  $17 = $14 != $16;
  if ($17) {
   label = 5;
  } else {
   $18 = ((($11)) + 12|0);
   $19 = +HEAPF32[$18>>2];
   $20 = ((($1)) + 119|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$20>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$20+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$20+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$20+3>>0];$21 = +HEAPF32[tempDoublePtr>>2];
   $22 = $19 != $21;
   if ($22) {
    label = 5;
   } else {
    $$061$off0 = 0;$34 = $11;
   }
  }
  if ((label|0) == 5) {
   $23 = $15;
   $24 = $23;
   $25 = HEAPU8[$24>>0]|(HEAPU8[$24+1>>0]<<8)|(HEAPU8[$24+2>>0]<<16)|(HEAPU8[$24+3>>0]<<24);
   $26 = (($23) + 4)|0;
   $27 = $26;
   $28 = HEAPU8[$27>>0]|(HEAPU8[$27+1>>0]<<8)|(HEAPU8[$27+2>>0]<<16)|(HEAPU8[$27+3>>0]<<24);
   $29 = $3;
   $30 = $29;
   HEAP32[$30>>2] = $25;
   $31 = (($29) + 4)|0;
   $32 = $31;
   HEAP32[$32>>2] = $28;
   ;HEAP32[$tmpcast64$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$tmpcast64$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
   __ZN7Surface7setSizeE5_SIZE($11,$tmpcast64$byval_copy);
   $$pre = HEAP32[$10>>2]|0;
   $$061$off0 = 1;$34 = $$pre;
  }
  $33 = ((($34)) + 196|0);
  $35 = HEAP32[$33>>2]|0;
  $36 = ($35|0)==(0|0);
  if ($36) {
   $37 = HEAP32[$1>>2]|0;
   $38 = ((($37)) + 48|0);
   $39 = HEAP32[$38>>2]|0;
   FUNCTION_TABLE_vii[$39 & 1023]($4,$1);
   $40 = (__ZN6ObjectnwEj(104)|0);
   __THREW__ = 0;
   invoke_viiiiii(640,($40|0),($1|0),($4|0),(0|0),(0|0),0);
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   if ($42) {
    $57 = ___cxa_find_matching_catch_2()|0;
    $58 = tempRet0;
    __ZdlPv($40);
    ___resumeException($57|0);
    // unreachable;
   }
   HEAP32[$40>>2] = (4332);
   $43 = ((($40)) + 72|0);
   HEAP32[$43>>2] = (4400);
   $44 = ((($40)) + 100|0);
   HEAP8[$44>>0] = 1;
   $45 = HEAP32[$10>>2]|0;
   $46 = ((($45)) + 196|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==($40|0);
   if (!($48)) {
    $49 = ($47|0)==(0|0);
    if (!($49)) {
     __ZN6Object7releaseEv($47);
    }
    HEAP32[$46>>2] = $40;
    __ZN6Object6retainEv($40);
   }
   $50 = ((($2)) + 96|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (__ZN8ItemPool5allocEiPNS_5AllocE($51,1,0)|0);
   $53 = HEAP32[$10>>2]|0;
   $54 = ((($53)) + 196|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($55)) + 96|0);
   HEAP32[$56>>2] = $52;
  } else {
   if ($$061$off0) {
    $59 = HEAP32[$35>>2]|0;
    $60 = ((($59)) + 16|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = HEAP32[$1>>2]|0;
    $63 = ((($62)) + 48|0);
    $64 = HEAP32[$63>>2]|0;
    FUNCTION_TABLE_vii[$64 & 1023]($5,$1);
    FUNCTION_TABLE_vii[$61 & 1023]($35,$5);
   }
  }
  __Z10POINT_Makeff($6,0.0,0.0);
  $65 = +HEAPF32[$6>>2];
  $$sroa_raw_idx = ((($6)) + 4|0);
  $66 = +HEAPF32[$$sroa_raw_idx>>2];
  $67 = HEAP32[$10>>2]|0;
  $$0 = $67;$138 = $65;$139 = $66;
 }
 $74 = ((($1)) + 228|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = ($75<<24>>24)==(0);
 if ($76) {
  $77 = ((($1)) + 132|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($78|0)==(2);
  if ($79) {
   ___assert_fail((17735|0),(17604|0),207,(17784|0));
   // unreachable;
  }
  $80 = ((($1)) + 148|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($81|0)==(2);
  if ($82) {
   ___assert_fail((17797|0),(17604|0),208,(17784|0));
   // unreachable;
  }
  $83 = ((($1)) + 24|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ($84|0)==(0|0);
  if ($85) {
   $88 = ((($1)) + 20|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ((($89)) + 36|0);
   $91 = ((($89)) + 40|0);
   $$in = $90;$$in62 = $91;
  } else {
   $86 = ((($84)) + 115|0);
   $87 = ((($84)) + 119|0);
   $$in = $86;$$in62 = $87;
  }
  HEAP8[tempDoublePtr>>0]=HEAP8[$$in>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$in+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$in+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$in+3>>0];$92 = +HEAPF32[tempDoublePtr>>2];
  HEAP8[tempDoublePtr>>0]=HEAP8[$$in62>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$in62+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$in62+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$in62+3>>0];$93 = +HEAPF32[tempDoublePtr>>2];
  $94 = HEAP32[$1>>2]|0;
  $95 = ((($94)) + 84|0);
  $96 = HEAP32[$95>>2]|0;
  FUNCTION_TABLE_vidd[$96 & 1023]($1,$92,$93);
  HEAP8[$74>>0] = 1;
 }
 $97 = ((($1)) + 304|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ($98|0)==(0|0);
 if ($99) {
  $100 = ((($1)) + 208|0);
  $101 = +HEAPF32[$100>>2];
  $102 = $101 != 0.0;
  if ($102) {
   label = 29;
  } else {
   $146 = 0;
  }
 } else {
  label = 29;
 }
 if ((label|0) == 29) {
  $103 = ((($$0)) + 200|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($104) + 1)|0;
  HEAP32[$103>>2] = $105;
  $146 = 1;
 }
 $106 = ((($1)) + 92|0);
 $107 = ((($1)) + 88|0);
 $$sroa$022$036 = HEAP32[$106>>2]|0;
 $108 = $$sroa$022$036;
 $109 = ($108|0)==($107|0);
 L45: do {
  if (!($109)) {
   $110 = ((($$0)) + 200|0);
   $$sroa$022$037 = $$sroa$022$036;$126 = $108;
   while(1) {
    $114 = $$sroa$022$037;
    $115 = ((($114)) + 8|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ($116|0)==(0|0);
    if ($117) {
     $118 = HEAP32[$110>>2]|0;
     HEAP32[(36)>>2] = $118;
    } else {
     __ZN6Object6retainEv($116);
     $119 = HEAP32[$110>>2]|0;
     $120 = ((($116)) + 36|0);
     HEAP32[$120>>2] = $119;
     __THREW__ = 0;
     invoke_vi(525,($116|0));
     $121 = __THREW__; __THREW__ = 0;
     $122 = $121&1;
     if ($122) {
      break;
     }
    }
    $125 = ((($126)) + 4|0);
    $$sroa$022$0 = HEAP32[$125>>2]|0;
    $127 = $$sroa$022$0;
    $128 = ($127|0)==($107|0);
    if ($128) {
     break L45;
    } else {
     $$sroa$022$037 = $$sroa$022$0;$126 = $127;
    }
   }
   $123 = ___cxa_find_matching_catch_3(0|0)|0;
   $124 = tempRet0;
   ___clang_call_terminate($123);
   // unreachable;
  }
 } while(0);
 $111 = ((($1)) + 106|0);
 $112 = HEAP8[$111>>0]|0;
 $113 = ($112<<24>>24)==(0);
 if (!($113)) {
  $129 = HEAP32[$1>>2]|0;
  $130 = ((($129)) + 16|0);
  $131 = HEAP32[$130>>2]|0;
  FUNCTION_TABLE_vi[$131 & 1023]($1);
  HEAP8[$111>>0] = 0;
 }
 $132 = ((($1)) + 28|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = ((($1)) + 32|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = ($133|0)==($135|0);
 if (!($136)) {
  $$sroa$010$0$$sroa$010$0$1134 = $133;
  while(1) {
   $137 = HEAP32[$$sroa$010$0$$sroa$010$0$1134>>2]|0;
   __ZL12renderPhase1P7SurfaceP4ViewP6Window6_POINT($$0,$137,$2,$138,$139);
   $140 = ((($$sroa$010$0$$sroa$010$0$1134)) + 4|0);
   $141 = HEAP32[$134>>2]|0;
   $142 = ($140|0)==($141|0);
   if ($142) {
    break;
   } else {
    $$sroa$010$0$$sroa$010$0$1134 = $140;
   }
  }
 }
 if (!($146)) {
  STACKTOP = sp;return;
 }
 $143 = ((($$0)) + 200|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = (($144) + -1)|0;
 HEAP32[$143>>2] = $145;
 STACKTOP = sp;return;
}
function __ZL12renderPhase2P7SurfaceP4ViewP6Window($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$not = 0, $$sroa$070$0$$sroa$070$0$71137 = 0, $$sroa$080$0$$sroa$080$0$$sroa$0$0$copyload$i67134 = 0, $$sroa$080$0$$sroa$080$0$81139 = 0, $$sroa$087$0$$sroa_idx = 0, $$sroa$087$0$$sroa_idx88 = 0, $$sroa$087$0$copyload = 0.0, $$sroa$087$0146 = 0.0, $$sroa$10$0$$sroa_idx114 = 0, $$sroa$10$0$$sroa_idx115 = 0, $$sroa$10$0$copyload = 0.0, $$sroa$10$0148 = 0.0, $$sroa$11 = 0, $$sroa$11$0$$sroa_idx = 0, $$sroa$11$0$$sroa_idx119 = 0, $$sroa$5 = 0, $$sroa$5$0$$sroa_idx = 0, $$sroa$5$0$$sroa_idx92 = 0, $$sroa$6$0$$sroa_idx96 = 0;
 var $$sroa$6$0$$sroa_idx97 = 0, $$sroa$6$0$copyload = 0.0, $$sroa$6$0145 = 0.0, $$sroa$7 = 0, $$sroa$7$0$$sroa_idx = 0, $$sroa$7$0$$sroa_idx101 = 0, $$sroa$8$0$$sroa_idx105 = 0, $$sroa$8$0$$sroa_idx106 = 0, $$sroa$8$0$copyload = 0.0, $$sroa$8$0147 = 0.0, $$sroa$9 = 0, $$sroa$9$0$$sroa_idx = 0, $$sroa$9$0$$sroa_idx110 = 0, $10 = 0, $100 = 0.0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $$byval_copy = sp + 496|0;
 $3 = sp + 368|0;
 $4 = sp + 240|0;
 $$sroa$5 = sp + 224|0;
 $$sroa$7 = sp + 208|0;
 $$sroa$9 = sp + 192|0;
 $$sroa$11 = sp + 128|0;
 $5 = sp;
 $6 = sp + 504|0;
 $7 = ((($1)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = ((($1)) + 100|0);
 $11 = HEAP32[$10>>2]|0;
 ;HEAP32[$$sroa$5>>2]=0|0;HEAP32[$$sroa$5+4>>2]=0|0;HEAP32[$$sroa$5+8>>2]=0|0;HEAP32[$$sroa$5+12>>2]=0|0;
 ;HEAP32[$$sroa$7>>2]=0|0;HEAP32[$$sroa$7+4>>2]=0|0;HEAP32[$$sroa$7+8>>2]=0|0;HEAP32[$$sroa$7+12>>2]=0|0;
 ;HEAP32[$$sroa$9>>2]=0|0;HEAP32[$$sroa$9+4>>2]=0|0;HEAP32[$$sroa$9+8>>2]=0|0;HEAP32[$$sroa$9+12>>2]=0|0;
 $12 = ((($1)) + 304|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $15 = ((($1)) + 208|0);
  $16 = +HEAPF32[$15>>2];
  $17 = $16 != 0.0;
  if ($17) {
   label = 4;
  } else {
   $$sroa$087$0146 = 1.0;$$sroa$10$0148 = 1.0;$$sroa$6$0145 = 1.0;$$sroa$8$0147 = 1.0;$101 = 0;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $$sroa$087$0$$sroa_idx = ((($11)) + 28|0);
  $$sroa$087$0$copyload = +HEAPF32[$$sroa$087$0$$sroa_idx>>2];
  $$sroa$5$0$$sroa_idx = ((($11)) + 32|0);
  ;HEAP32[$$sroa$5>>2]=HEAP32[$$sroa$5$0$$sroa_idx>>2]|0;HEAP32[$$sroa$5+4>>2]=HEAP32[$$sroa$5$0$$sroa_idx+4>>2]|0;HEAP32[$$sroa$5+8>>2]=HEAP32[$$sroa$5$0$$sroa_idx+8>>2]|0;HEAP32[$$sroa$5+12>>2]=HEAP32[$$sroa$5$0$$sroa_idx+12>>2]|0;
  $$sroa$6$0$$sroa_idx96 = ((($11)) + 48|0);
  $$sroa$6$0$copyload = +HEAPF32[$$sroa$6$0$$sroa_idx96>>2];
  $$sroa$7$0$$sroa_idx = ((($11)) + 52|0);
  ;HEAP32[$$sroa$7>>2]=HEAP32[$$sroa$7$0$$sroa_idx>>2]|0;HEAP32[$$sroa$7+4>>2]=HEAP32[$$sroa$7$0$$sroa_idx+4>>2]|0;HEAP32[$$sroa$7+8>>2]=HEAP32[$$sroa$7$0$$sroa_idx+8>>2]|0;HEAP32[$$sroa$7+12>>2]=HEAP32[$$sroa$7$0$$sroa_idx+12>>2]|0;
  $$sroa$8$0$$sroa_idx105 = ((($11)) + 68|0);
  $$sroa$8$0$copyload = +HEAPF32[$$sroa$8$0$$sroa_idx105>>2];
  $$sroa$9$0$$sroa_idx = ((($11)) + 72|0);
  ;HEAP32[$$sroa$9>>2]=HEAP32[$$sroa$9$0$$sroa_idx>>2]|0;HEAP32[$$sroa$9+4>>2]=HEAP32[$$sroa$9$0$$sroa_idx+4>>2]|0;HEAP32[$$sroa$9+8>>2]=HEAP32[$$sroa$9$0$$sroa_idx+8>>2]|0;HEAP32[$$sroa$9+12>>2]=HEAP32[$$sroa$9$0$$sroa_idx+12>>2]|0;
  $$sroa$10$0$$sroa_idx114 = ((($11)) + 88|0);
  $$sroa$10$0$copyload = +HEAPF32[$$sroa$10$0$$sroa_idx114>>2];
  $$sroa$11$0$$sroa_idx = ((($11)) + 92|0);
  dest=$$sroa$11; src=$$sroa$11$0$$sroa_idx; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  if ($14) {
   $$sroa$087$0146 = $$sroa$087$0$copyload;$$sroa$10$0148 = $$sroa$10$0$copyload;$$sroa$6$0145 = $$sroa$6$0$copyload;$$sroa$8$0147 = $$sroa$8$0$copyload;$101 = 1;
  } else {
   $18 = ((($11)) + 28|0);
   __ZNK7Matrix4mlERKS_($4,$18,$13);
   dest=$18; src=$4; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $$sroa$087$0146 = $$sroa$087$0$copyload;$$sroa$10$0148 = $$sroa$10$0$copyload;$$sroa$6$0145 = $$sroa$6$0$copyload;$$sroa$8$0147 = $$sroa$8$0$copyload;$101 = 1;
  }
 }
 $19 = ((($1)) + 208|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $20 != 0.0;
 if ($21) {
  $22 = ((($5)) + 60|0);
  HEAPF32[$22>>2] = 1.0;
  $23 = ((($5)) + 40|0);
  HEAPF32[$23>>2] = 1.0;
  $24 = ((($5)) + 20|0);
  HEAPF32[$24>>2] = 1.0;
  HEAPF32[$5>>2] = 1.0;
  $25 = ((($5)) + 44|0);
  $26 = ((($5)) + 24|0);
  $27 = ((($5)) + 4|0);
  ;HEAP32[$27>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;HEAP32[$27+12>>2]=0|0;
  ;HEAP32[$26>>2]=0|0;HEAP32[$26+4>>2]=0|0;HEAP32[$26+8>>2]=0|0;HEAP32[$26+12>>2]=0|0;
  ;HEAP32[$25>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;HEAP32[$25+12>>2]=0|0;
  $28 = -$20;
  (__ZN7Matrix49translateEfff($5,0.0,$28,0.0)|0);
  $29 = ((($11)) + 28|0);
  __ZNK7Matrix4mlERKS_($3,$29,$5);
  dest=$29; src=$3; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 }
 $30 = ((($1)) + 92|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($1)) + 88|0);
 $33 = $31;
 $34 = ($33|0)==($32|0);
 if (!($34)) {
  $35 = ((($11)) + 192|0);
  $36 = ((($2)) + 116|0);
  $$sroa$080$0$$sroa$080$0$$sroa$0$0$copyload$i67134 = $33;$$sroa$080$0$$sroa$080$0$81139 = $31;
  while(1) {
   $42 = $$sroa$080$0$$sroa$080$0$81139;
   $43 = ((($42)) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = HEAP8[$35>>0]|0;
   $46 = ($45<<24>>24)==(0);
   if ($46) {
    label = 13;
   } else {
    $47 = ((($44)) + 57|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = ($48<<24>>24)==(0);
    if (!($49)) {
     label = 13;
    }
   }
   if ((label|0) == 13) {
    label = 0;
    $50 = ((($44)) + 52|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = HEAP32[$36>>2]|0;
    $53 = ($51|0)==($52|0);
    if (!($53)) {
     __ZN6Window17setCurrentSurfaceEP7Surface($2,$11);
     $54 = ((($44)) + 40|0);
     $55 = HEAP32[$54>>2]|0;
     __ZN11RenderBatch6renderEP6WindowP7SurfaceP8RenderOp($55,$2,$11,$44);
    }
   }
   $56 = ((($$sroa$080$0$$sroa$080$0$$sroa$0$0$copyload$i67134)) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57;
   $59 = ($58|0)==($32|0);
   if ($59) {
    break;
   } else {
    $$sroa$080$0$$sroa$080$0$$sroa$0$0$copyload$i67134 = $58;$$sroa$080$0$$sroa$080$0$81139 = $57;
   }
  }
 }
 $37 = ((($1)) + 28|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($1)) + 32|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($38|0)==($40|0);
 if (!($41)) {
  $$sroa$070$0$$sroa$070$0$71137 = $38;
  while(1) {
   $60 = HEAP32[$$sroa$070$0$$sroa$070$0$71137>>2]|0;
   __ZL12renderPhase2P7SurfaceP4ViewP6Window($11,$60,$2);
   $61 = ((($$sroa$070$0$$sroa$070$0$71137)) + 4|0);
   $62 = HEAP32[$39>>2]|0;
   $63 = ($61|0)==($62|0);
   if ($63) {
    break;
   } else {
    $$sroa$070$0$$sroa$070$0$71137 = $61;
   }
  }
 }
 if ($101) {
  $$sroa$087$0$$sroa_idx88 = ((($11)) + 28|0);
  HEAPF32[$$sroa$087$0$$sroa_idx88>>2] = $$sroa$087$0146;
  $$sroa$5$0$$sroa_idx92 = ((($11)) + 32|0);
  ;HEAP32[$$sroa$5$0$$sroa_idx92>>2]=HEAP32[$$sroa$5>>2]|0;HEAP32[$$sroa$5$0$$sroa_idx92+4>>2]=HEAP32[$$sroa$5+4>>2]|0;HEAP32[$$sroa$5$0$$sroa_idx92+8>>2]=HEAP32[$$sroa$5+8>>2]|0;HEAP32[$$sroa$5$0$$sroa_idx92+12>>2]=HEAP32[$$sroa$5+12>>2]|0;
  $$sroa$6$0$$sroa_idx97 = ((($11)) + 48|0);
  HEAPF32[$$sroa$6$0$$sroa_idx97>>2] = $$sroa$6$0145;
  $$sroa$7$0$$sroa_idx101 = ((($11)) + 52|0);
  ;HEAP32[$$sroa$7$0$$sroa_idx101>>2]=HEAP32[$$sroa$7>>2]|0;HEAP32[$$sroa$7$0$$sroa_idx101+4>>2]=HEAP32[$$sroa$7+4>>2]|0;HEAP32[$$sroa$7$0$$sroa_idx101+8>>2]=HEAP32[$$sroa$7+8>>2]|0;HEAP32[$$sroa$7$0$$sroa_idx101+12>>2]=HEAP32[$$sroa$7+12>>2]|0;
  $$sroa$8$0$$sroa_idx106 = ((($11)) + 68|0);
  HEAPF32[$$sroa$8$0$$sroa_idx106>>2] = $$sroa$8$0147;
  $$sroa$9$0$$sroa_idx110 = ((($11)) + 72|0);
  ;HEAP32[$$sroa$9$0$$sroa_idx110>>2]=HEAP32[$$sroa$9>>2]|0;HEAP32[$$sroa$9$0$$sroa_idx110+4>>2]=HEAP32[$$sroa$9+4>>2]|0;HEAP32[$$sroa$9$0$$sroa_idx110+8>>2]=HEAP32[$$sroa$9+8>>2]|0;HEAP32[$$sroa$9$0$$sroa_idx110+12>>2]=HEAP32[$$sroa$9+12>>2]|0;
  $$sroa$10$0$$sroa_idx115 = ((($11)) + 88|0);
  HEAPF32[$$sroa$10$0$$sroa_idx115>>2] = $$sroa$10$0148;
  $$sroa$11$0$$sroa_idx119 = ((($11)) + 92|0);
  dest=$$sroa$11$0$$sroa_idx119; src=$$sroa$11; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 }
 $$not = ($11|0)!=($0|0);
 $64 = ($0|0)!=(0|0);
 $or$cond = $64 & $$not;
 if ($or$cond) {
  __ZN6Window17setCurrentSurfaceEP7Surface($2,$0);
  $65 = ((($11)) + 196|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = HEAP32[$66>>2]|0;
  $68 = ((($67)) + 20|0);
  $69 = HEAP32[$68>>2]|0;
  FUNCTION_TABLE_viii[$69 & 1023]($66,$2,$0);
  $70 = ((($11)) + 192|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = ($71<<24>>24)==(0);
  if (!($72)) {
   $73 = ((($11)) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($11)) + 20|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if (!($77)) {
    $scevgep$i$i$i = ((($76)) + -16|0);
    $78 = $scevgep$i$i$i;
    $79 = $74;
    $80 = (($78) - ($79))|0;
    $81 = $80 >>> 4;
    $82 = $81 ^ -1;
    $scevgep4$i$i$i = (($76) + ($82<<4)|0);
    HEAP32[$75>>2] = $scevgep4$i$i$i;
   }
  }
 }
 $83 = ((($1)) + 105|0);
 $84 = HEAP8[$83>>0]|0;
 $85 = ($84<<24>>24)==(0);
 if (!($85)) {
  HEAP8[$83>>0] = 0;
 }
 $86 = ((($1)) + 256|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)==(0|0);
 if (!($88)) {
  $89 = ((($87)) + 48|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = ($90<<24>>24)==(0);
  if ($91) {
   $92 = HEAP32[$87>>2]|0;
   $93 = ((($92)) + 8|0);
   $94 = HEAP32[$93>>2]|0;
   (FUNCTION_TABLE_ii[$94 & 1023]($87)|0);
   $95 = HEAP32[$1>>2]|0;
   $96 = ((($95)) + 24|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = HEAP32[$86>>2]|0;
   $99 = ((($98)) + 28|0);
   $100 = +HEAPF32[$99>>2];
   __Z10POINT_Makeff($6,0.0,$100);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$6+4>>2]|0;
   FUNCTION_TABLE_vii[$97 & 1023]($1,$$byval_copy);
  }
 }
 STACKTOP = sp;return;
}
function __ZNK7Matrix4mlERKS_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0;
 var $190 = 0, $191 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0;
 var $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0;
 var $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0;
 var $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = +HEAPF32[$1>>2];
 $4 = +HEAPF32[$2>>2];
 $5 = $3 * $4;
 $6 = ((($1)) + 16|0);
 $7 = +HEAPF32[$6>>2];
 $8 = ((($2)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $7 * $9;
 $11 = $5 + $10;
 $12 = ((($1)) + 32|0);
 $13 = +HEAPF32[$12>>2];
 $14 = ((($2)) + 8|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $13 * $15;
 $17 = $11 + $16;
 $18 = ((($1)) + 48|0);
 $19 = +HEAPF32[$18>>2];
 $20 = ((($2)) + 12|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $19 * $21;
 $23 = $17 + $22;
 $24 = ((($1)) + 4|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $4 * $25;
 $27 = ((($1)) + 20|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $9 * $28;
 $30 = $26 + $29;
 $31 = ((($1)) + 36|0);
 $32 = +HEAPF32[$31>>2];
 $33 = $15 * $32;
 $34 = $30 + $33;
 $35 = ((($1)) + 52|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $21 * $36;
 $38 = $34 + $37;
 $39 = ((($1)) + 8|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $4 * $40;
 $42 = ((($1)) + 24|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $9 * $43;
 $45 = $41 + $44;
 $46 = ((($1)) + 40|0);
 $47 = +HEAPF32[$46>>2];
 $48 = $15 * $47;
 $49 = $45 + $48;
 $50 = ((($1)) + 56|0);
 $51 = +HEAPF32[$50>>2];
 $52 = $21 * $51;
 $53 = $49 + $52;
 $54 = ((($1)) + 12|0);
 $55 = +HEAPF32[$54>>2];
 $56 = $4 * $55;
 $57 = ((($1)) + 28|0);
 $58 = +HEAPF32[$57>>2];
 $59 = $9 * $58;
 $60 = $56 + $59;
 $61 = ((($1)) + 44|0);
 $62 = +HEAPF32[$61>>2];
 $63 = $15 * $62;
 $64 = $60 + $63;
 $65 = ((($1)) + 60|0);
 $66 = +HEAPF32[$65>>2];
 $67 = $21 * $66;
 $68 = $64 + $67;
 $69 = ((($2)) + 16|0);
 $70 = +HEAPF32[$69>>2];
 $71 = $3 * $70;
 $72 = ((($2)) + 20|0);
 $73 = +HEAPF32[$72>>2];
 $74 = $7 * $73;
 $75 = $71 + $74;
 $76 = ((($2)) + 24|0);
 $77 = +HEAPF32[$76>>2];
 $78 = $13 * $77;
 $79 = $75 + $78;
 $80 = ((($2)) + 28|0);
 $81 = +HEAPF32[$80>>2];
 $82 = $19 * $81;
 $83 = $79 + $82;
 $84 = $25 * $70;
 $85 = $28 * $73;
 $86 = $84 + $85;
 $87 = $32 * $77;
 $88 = $86 + $87;
 $89 = $36 * $81;
 $90 = $88 + $89;
 $91 = $40 * $70;
 $92 = $43 * $73;
 $93 = $91 + $92;
 $94 = $47 * $77;
 $95 = $93 + $94;
 $96 = $51 * $81;
 $97 = $95 + $96;
 $98 = $55 * $70;
 $99 = $58 * $73;
 $100 = $98 + $99;
 $101 = $62 * $77;
 $102 = $100 + $101;
 $103 = $66 * $81;
 $104 = $102 + $103;
 $105 = ((($2)) + 32|0);
 $106 = +HEAPF32[$105>>2];
 $107 = $3 * $106;
 $108 = ((($2)) + 36|0);
 $109 = +HEAPF32[$108>>2];
 $110 = $7 * $109;
 $111 = $107 + $110;
 $112 = ((($2)) + 40|0);
 $113 = +HEAPF32[$112>>2];
 $114 = $13 * $113;
 $115 = $111 + $114;
 $116 = ((($2)) + 44|0);
 $117 = +HEAPF32[$116>>2];
 $118 = $19 * $117;
 $119 = $115 + $118;
 $120 = $25 * $106;
 $121 = $28 * $109;
 $122 = $120 + $121;
 $123 = $32 * $113;
 $124 = $122 + $123;
 $125 = $36 * $117;
 $126 = $124 + $125;
 $127 = $40 * $106;
 $128 = $43 * $109;
 $129 = $127 + $128;
 $130 = $47 * $113;
 $131 = $129 + $130;
 $132 = $51 * $117;
 $133 = $131 + $132;
 $134 = $55 * $106;
 $135 = $58 * $109;
 $136 = $134 + $135;
 $137 = $62 * $113;
 $138 = $136 + $137;
 $139 = $66 * $117;
 $140 = $138 + $139;
 $141 = ((($2)) + 48|0);
 $142 = +HEAPF32[$141>>2];
 $143 = $3 * $142;
 $144 = ((($2)) + 52|0);
 $145 = +HEAPF32[$144>>2];
 $146 = $7 * $145;
 $147 = $143 + $146;
 $148 = ((($2)) + 56|0);
 $149 = +HEAPF32[$148>>2];
 $150 = $13 * $149;
 $151 = $147 + $150;
 $152 = ((($2)) + 60|0);
 $153 = +HEAPF32[$152>>2];
 $154 = $19 * $153;
 $155 = $151 + $154;
 $156 = $25 * $142;
 $157 = $28 * $145;
 $158 = $156 + $157;
 $159 = $32 * $149;
 $160 = $158 + $159;
 $161 = $36 * $153;
 $162 = $160 + $161;
 $163 = $40 * $142;
 $164 = $43 * $145;
 $165 = $163 + $164;
 $166 = $47 * $149;
 $167 = $165 + $166;
 $168 = $51 * $153;
 $169 = $167 + $168;
 $170 = $55 * $142;
 $171 = $58 * $145;
 $172 = $170 + $171;
 $173 = $62 * $149;
 $174 = $172 + $173;
 $175 = $66 * $153;
 $176 = $174 + $175;
 HEAPF32[$0>>2] = $23;
 $177 = ((($0)) + 4|0);
 HEAPF32[$177>>2] = $38;
 $178 = ((($0)) + 8|0);
 HEAPF32[$178>>2] = $53;
 $179 = ((($0)) + 12|0);
 HEAPF32[$179>>2] = $68;
 $180 = ((($0)) + 16|0);
 HEAPF32[$180>>2] = $83;
 $181 = ((($0)) + 20|0);
 HEAPF32[$181>>2] = $90;
 $182 = ((($0)) + 24|0);
 HEAPF32[$182>>2] = $97;
 $183 = ((($0)) + 28|0);
 HEAPF32[$183>>2] = $104;
 $184 = ((($0)) + 32|0);
 HEAPF32[$184>>2] = $119;
 $185 = ((($0)) + 36|0);
 HEAPF32[$185>>2] = $126;
 $186 = ((($0)) + 40|0);
 HEAPF32[$186>>2] = $133;
 $187 = ((($0)) + 44|0);
 HEAPF32[$187>>2] = $140;
 $188 = ((($0)) + 48|0);
 HEAPF32[$188>>2] = $155;
 $189 = ((($0)) + 52|0);
 HEAPF32[$189>>2] = $162;
 $190 = ((($0)) + 56|0);
 HEAPF32[$190>>2] = $169;
 $191 = ((($0)) + 60|0);
 HEAPF32[$191>>2] = $176;
 return;
}
function __ZN12TextRendererC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev($0);
 HEAP32[$0>>2] = (4412);
 $1 = ((($0)) + 8|0);
 $2 = ((($0)) + 56|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 60|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 56|0);
 $5 = ((($0)) + 52|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;HEAP32[$1+24>>2]=0|0;
 HEAP32[$5>>2] = $4;
 $6 = ((($0)) + 64|0);
 HEAP32[$6>>2] = $6;
 $7 = ((($0)) + 68|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($0)) + 72|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 80|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 84|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 88|0);
 HEAP32[$11>>2] = 0;
 return;
}
function __ZN12TextRendererD2Ev($0) {
 $0 = $0|0;
 var $$023$i$i = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4412);
 $1 = ((($0)) + 80|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($0)) + 84|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==($2|0);
  if ($6) {
   $22 = $2;
  } else {
   $8 = $5;
   while(1) {
    $7 = ((($8)) + -36|0);
    HEAP32[$4>>2] = $7;
    $9 = ((($8)) + -16|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $13 = $7;
    } else {
     $14 = ((($8)) + -12|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($10|0);
     if (!($16)) {
      $scevgep$i$i$i$i$i$i$i$i$i$i = ((($15)) + -24|0);
      $17 = $scevgep$i$i$i$i$i$i$i$i$i$i;
      $18 = $10;
      $19 = (($17) - ($18))|0;
      $20 = (($19>>>0) / 24)&-1;
      $21 = $20 ^ -1;
      $scevgep4$i$i$i$i$i$i$i$i$i$i = (($15) + (($21*24)|0)|0);
      HEAP32[$14>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i;
     }
     __ZdlPv($10);
     $$pre$i$i$i = HEAP32[$4>>2]|0;
     $13 = $$pre$i$i$i;
    }
    $12 = ($13|0)==($2|0);
    if ($12) {
     break;
    } else {
     $8 = $13;
    }
   }
   $$pre$i = HEAP32[$1>>2]|0;
   $22 = $$pre$i;
  }
  __ZdlPv($22);
 }
 $23 = ((($0)) + 64|0);
 $24 = ((($0)) + 72|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0);
 if (!($26)) {
  $27 = ((($0)) + 68|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$23>>2]|0;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$28>>2]|0;
  $33 = ((($32)) + 4|0);
  HEAP32[$33>>2] = $31;
  $34 = HEAP32[$30>>2]|0;
  HEAP32[$34>>2] = $32;
  HEAP32[$24>>2] = 0;
  $35 = ($28|0)==($23|0);
  if (!($35)) {
   $$023$i$i = $28;
   while(1) {
    $36 = ((($$023$i$i)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    __ZdlPv($$023$i$i);
    $38 = ($37|0)==($23|0);
    if ($38) {
     break;
    } else {
     $$023$i$i = $37;
    }
   }
  }
 }
 $39 = ((($0)) + 52|0);
 $40 = ((($0)) + 56|0);
 $41 = HEAP32[$40>>2]|0;
 __ZNSt3__26__treeI17_TEXTRENDERPARAMSNS_4lessIS1_EENS_9allocatorIS1_EEE7destroyEPNS_11__tree_nodeIS1_PvEE($39,$41);
 $42 = ((($0)) + 32|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(0|0);
 if (!($44)) {
  __THREW__ = 0;
  invoke_vi(525,($43|0));
  $45 = __THREW__; __THREW__ = 0;
  $46 = $45&1;
  if ($46) {
   $47 = ___cxa_find_matching_catch_3(0|0)|0;
   $48 = tempRet0;
   ___clang_call_terminate($47);
   // unreachable;
  }
 }
 $49 = ((($0)) + 20|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0|0);
 if (!($51)) {
  $52 = ((($0)) + 24|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)==($50|0);
  do {
   if ($54) {
    $65 = $50;
   } else {
    $56 = $53;
    while(1) {
     $55 = ((($56)) + -4|0);
     HEAP32[$52>>2] = $55;
     $57 = HEAP32[$55>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $60 = $55;
     } else {
      __THREW__ = 0;
      invoke_vi(525,($57|0));
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       label = 22;
       break;
      }
      $$pre$i$i$i2 = HEAP32[$52>>2]|0;
      $60 = $$pre$i$i$i2;
     }
     $59 = ($60|0)==($50|0);
     if ($59) {
      label = 23;
      break;
     } else {
      $56 = $60;
     }
    }
    if ((label|0) == 22) {
     $63 = ___cxa_find_matching_catch_3(0|0)|0;
     $64 = tempRet0;
     ___clang_call_terminate($63);
     // unreachable;
    }
    else if ((label|0) == 23) {
     $$pre$i4 = HEAP32[$49>>2]|0;
     $65 = $$pre$i4;
     break;
    }
   }
  } while(0);
  __ZdlPv($65);
 }
 $66 = ((($0)) + 8|0);
 $67 = ((($66)) + 11|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = ($68<<24>>24)<(0);
 if (!($69)) {
  return;
 }
 $70 = HEAP32[$66>>2]|0;
 __ZdlPv($70);
 return;
}
function __ZN12TextRendererD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12TextRendererD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__26__treeI17_TEXTRENDERPARAMSNS_4lessIS1_EENS_9allocatorIS1_EEE7destroyEPNS_11__tree_nodeIS1_PvEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 __ZNSt3__26__treeI17_TEXTRENDERPARAMSNS_4lessIS1_EENS_9allocatorIS1_EEE7destroyEPNS_11__tree_nodeIS1_PvEE($0,$3);
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 __ZNSt3__26__treeI17_TEXTRENDERPARAMSNS_4lessIS1_EENS_9allocatorIS1_EEE7destroyEPNS_11__tree_nodeIS1_PvEE($0,$5);
 $6 = ((($1)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  __THREW__ = 0;
  invoke_vi(525,($7|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $11 = ___cxa_find_matching_catch_3(0|0)|0;
   $12 = tempRet0;
   ___clang_call_terminate($11);
   // unreachable;
  }
 }
 __ZdlPv($1);
 return;
}
function __ZN12TextRenderer7setTextERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($2,$1)|0);
 $3 = ((($0)) + 41|0);
 HEAP8[$3>>0] = 0;
 return;
}
function __ZN12TextRenderer16setDefaultColourEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 36|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 41|0);
 HEAP8[$3>>0] = 0;
 return;
}
function __ZN12TextRenderer14setDefaultFontEP4Font($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $5 = ($3|0)==(0|0);
  if (!($5)) {
   __ZN6Object7releaseEv($3);
  }
  HEAP32[$2>>2] = $1;
  $6 = ($1|0)==(0|0);
  if (!($6)) {
   __ZN6Object6retainEv($1);
  }
 }
 $7 = ((($0)) + 41|0);
 HEAP8[$7>>0] = 0;
 return;
}
function __ZN12TextRenderer11setMaxLinesEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 92|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 41|0);
 HEAP8[$3>>0] = 0;
 return;
}
function __ZN12TextRenderer10setGravityE7GRAVITY($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 40|0);
 $3 = HEAP8[$1>>0]|0;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 76|0);
 HEAP8[$4>>0] = 0;
 return;
}
function __ZN12TextRenderer7measureEv($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 $1 = sp + 8|0;
 __Z9SIZE_Makeff($1,0.0,0.0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 __ZN12TextRenderer7measureE5_SIZE($0,$$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12TextRenderer7measureE5_SIZE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$0154$$0157 = 0, $$$i$i$i$i = 0, $$$i$i$i$i266 = 0, $$$i$i$i$i300 = 0, $$$i$i$i$i303 = 0, $$0122$lcssa = 0.0, $$0122411 = 0.0, $$0124$lcssa = 0.0, $$0124410 = 0.0, $$0137417590 = 0, $$0138416591 = 0.0, $$0139$ph = 0, $$0142$off0 = 0, $$0142$off0$ph = 0, $$0150345 = 0, $$0151$ph = 0, $$0151$ph357 = 0, $$0154$$0157 = 0, $$0154$ph = 0, $$0157$ph = 0;
 var $$0163 = 0, $$08$i$i = 0, $$08$i$i196 = 0, $$08$i$i228 = 0, $$08$i$i254 = 0, $$1123 = 0.0, $$1125 = 0.0, $$1140 = 0, $$1143$off0$lcssa = 0, $$1143$off0426 = 0, $$1152 = 0, $$1155 = 0, $$2 = 0, $$2128 = 0, $$2144$off0 = 0, $$3145$off0$lcssa = 0, $$3145$off0439 = 0, $$3160 = 0, $$4146$off0 = 0, $$4161 = 0;
 var $$7 = 0, $$7133 = 0, $$9 = 0, $$9135 = 0, $$cast$i$i = 0, $$cast$i$i190 = 0, $$cast$i$i221 = 0, $$cast$i$i247 = 0, $$in = 0, $$in$i$i = 0, $$in$i$i189 = 0, $$in$i$i220 = 0, $$in$i$i246 = 0, $$lcssa$i$i = 0, $$lcssa$i$i192 = 0, $$lcssa$i$i223 = 0, $$lcssa$i$i249 = 0, $$neg$i = 0, $$neg$i304 = 0, $$phi$trans$insert = 0;
 var $$phi$trans$insert485 = 0, $$phi$trans$insert488 = 0, $$phi$trans$insert491 = 0, $$pre = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i198 = 0, $$pre$i$i230 = 0, $$pre$i$i256 = 0, $$pre$i$i264 = 0, $$pre$i$i268 = 0, $$pre4$i$i = 0, $$pre4$i$i269 = 0, $$pre487 = 0, $$pre490 = 0, $$pre492 = 0, $$pre494 = 0, $$pre495 = 0, $$pre496 = 0, $$pre498 = 0;
 var $$pre499 = 0, $$pre5$i$i = 0, $$pre5$i$i270 = 0, $$pre500 = 0, $$pre502 = 0.0, $$pre503 = 0.0, $$pre9$i$i = 0, $$pre9$i$i199 = 0, $$pre9$i$i231 = 0, $$pre9$i$i257 = 0, $$promoted = 0, $$sink$i$i = 0, $$sink$i$i194 = 0, $$sink$i$i225 = 0, $$sink$i$i251 = 0, $$sroa$0$sroa$0 = 0, $$sroa$011$0$ph$i$i = 0, $$sroa$011$0$ph$i$i186 = 0, $$sroa$011$0$ph$i$i215 = 0, $$sroa$011$0$ph$i$i241 = 0;
 var $$sroa$0308$0$$sroa$0308$0$309414 = 0, $$sroa$0308$0$$sroa$0308$0$309414$lcssa421 = 0, $$sroa$0308$0$$sroa$0308$0$309414$lcssa422$lcssa = 0, $$sroa$0308$0$$sroa$0308$0$309414$lcssa422589 = 0, $$sroa$0331$0 = 0, $$sroa$0331$0$ph = 0, $$sroa$0331$0$ph354 = 0, $$sroa$0331$1$lcssa = 0, $$sroa$0331$1424 = 0, $$sroa$0331$2 = 0, $$sroa$0331$3$lcssa = 0, $$sroa$0331$3437 = 0, $$sroa$0331$4 = 0, $$sroa$0335$0 = 0, $$sroa$0335$0$ph = 0, $$sroa$0335$0$ph355 = 0, $$sroa$0335$1$lcssa = 0, $$sroa$0335$1438 = 0, $$sroa$0340$0 = 0, $$sroa$0340$0$ph = 0;
 var $$sroa$0340$0$ph356 = 0, $$sroa$0340$1$lcssa = 0, $$sroa$0340$1425 = 0, $$sroa$6$0$i$i = 0, $$sroa$6$0$i$i188 = 0, $$sroa$6$0$i$i218 = 0, $$sroa$6$0$i$i244 = 0, $$sroa$6$0$ph$i$i = 0, $$sroa$6$0$ph$i$i187 = 0, $$sroa$6$0$ph$i$i216 = 0, $$sroa$6$0$ph$i$i242 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0.0, $334 = 0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0.0, $393 = 0, $394 = 0.0, $395 = 0.0, $396 = 0.0;
 var $397 = 0.0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0.0, $529 = 0.0, $53 = 0, $530 = 0, $531 = 0.0, $532 = 0.0, $533 = 0, $534 = 0, $535 = 0.0, $536 = 0, $537 = 0, $538 = 0.0, $539 = 0.0, $54 = 0;
 var $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0.0;
 var $559 = 0.0, $56 = 0, $560 = 0, $561 = 0, $562 = 0.0, $563 = 0.0, $564 = 0, $565 = 0, $566 = 0.0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond183 = 0, $or$cond184 = 0, $phitmp$i$i = 0, $phitmp$i$i185 = 0, $phitmp$i$i213 = 0, $phitmp$i$i239 = 0, $scevgep$i$i$i$i = 0, $scevgep$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i201 = 0, $scevgep$i$i$i$i$i$i233 = 0, $scevgep$i$i$i$i$i$i259 = 0;
 var $scevgep$i$i$i$i205 = 0, $scevgep$i$i$i$i274 = 0, $scevgep$i$i$i$i279 = 0, $scevgep$i$i$i$i288 = 0, $scevgep$i$i$i$i293 = 0, $scevgep4$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i202 = 0, $scevgep4$i$i$i$i$i$i234 = 0, $scevgep4$i$i$i$i$i$i260 = 0, $scevgep4$i$i$i$i206 = 0, $scevgep4$i$i$i$i275 = 0, $scevgep4$i$i$i$i280 = 0, $scevgep4$i$i$i$i289 = 0, $scevgep4$i$i$i$i294 = 0, $sum$i$i$i = 0, $sum$i$i$i267 = 0, $sum$i$neg$i = 0, $sum$i$neg$i305 = 0;
 var $vararg_buffer = 0, $vararg_buffer3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $2 = sp + 240|0;
 $3 = sp + 224|0;
 $4 = sp + 200|0;
 $5 = sp + 176|0;
 $6 = sp + 136|0;
 $7 = sp + 128|0;
 $8 = sp + 88|0;
 $9 = sp + 64|0;
 $10 = sp + 24|0;
 $$sroa$0$sroa$0 = sp + 20|0;
 $11 = sp;
 $12 = ((($0)) + 41|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)==(0);
 if (!($14)) {
  ___assert_fail((17862|0),(17882|0),45,(17933|0));
  // unreachable;
 }
 $15 = ((($0)) + 42|0);
 HEAPF32[tempDoublePtr>>2]=0.0;HEAP16[$15>>1]=HEAP16[tempDoublePtr>>1];HEAP16[$15+2>>1]=HEAP16[tempDoublePtr+2>>1];
 $16 = ((($0)) + 46|0);
 HEAPF32[tempDoublePtr>>2]=0.0;HEAP16[$16>>1]=HEAP16[tempDoublePtr>>1];HEAP16[$16+2>>1]=HEAP16[tempDoublePtr+2>>1];
 $17 = ((($0)) + 52|0);
 $18 = ((($0)) + 56|0);
 $19 = HEAP32[$18>>2]|0;
 __ZNSt3__26__treeI17_TEXTRENDERPARAMSNS_4lessIS1_EENS_9allocatorIS1_EEE7destroyEPNS_11__tree_nodeIS1_PvEE($17,$19);
 $20 = ((($0)) + 60|0);
 HEAP32[$20>>2] = 0;
 HEAP32[$17>>2] = $18;
 HEAP32[$18>>2] = 0;
 $21 = ((($3)) + 8|0);
 HEAP32[$21>>2] = 0;
 HEAP32[$3>>2] = 0;
 $22 = ((($0)) + 36|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($3)) + 4|0);
 HEAP32[$24>>2] = $23;
 $$phi$trans$insert = ((($0)) + 20|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 $$phi$trans$insert485 = ((($0)) + 32|0);
 $$pre487 = HEAP32[$$phi$trans$insert485>>2]|0;
 $$phi$trans$insert488 = ((($0)) + 80|0);
 $$pre490 = HEAP32[$$phi$trans$insert488>>2]|0;
 $$phi$trans$insert491 = ((($0)) + 84|0);
 $$pre492 = HEAP32[$$phi$trans$insert491>>2]|0;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;HEAP32[$4+16>>2]=0|0;HEAP32[$4+20>>2]=0|0;
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP32[$5+16>>2]=0|0;HEAP32[$5+20>>2]=0|0;
 $25 = ($$pre492|0)==($$pre490|0);
 if ($25) {
  $$in = $$pre492;
 } else {
  $27 = $$pre492;
  while(1) {
   $26 = ((($27)) + -36|0);
   HEAP32[$$phi$trans$insert491>>2] = $26;
   $28 = ((($27)) + -16|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(0|0);
   if ($30) {
    $32 = $26;
   } else {
    $33 = ((($27)) + -12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==($29|0);
    if (!($35)) {
     $scevgep$i$i$i$i$i$i$i$i$i$i = ((($34)) + -24|0);
     $36 = $scevgep$i$i$i$i$i$i$i$i$i$i;
     $37 = $29;
     $38 = (($36) - ($37))|0;
     $39 = (($38>>>0) / 24)&-1;
     $40 = $39 ^ -1;
     $scevgep4$i$i$i$i$i$i$i$i$i$i = (($34) + (($40*24)|0)|0);
     HEAP32[$33>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i;
    }
    __ZdlPv($29);
    $$pre$i$i$i = HEAP32[$$phi$trans$insert491>>2]|0;
    $32 = $$pre$i$i$i;
   }
   $31 = ($32|0)==($$pre490|0);
   if ($31) {
    $$in = $$pre490;
    break;
   } else {
    $27 = $32;
   }
  }
 }
 $41 = ((($6)) + 20|0);
 $42 = ((($6)) + 24|0);
 $43 = ((($0)) + 88|0);
 dest=$6; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $44 = HEAP32[$43>>2]|0;
 $45 = ($$in>>>0)<($44>>>0);
 do {
  if ($45) {
   ;HEAP32[$$in>>2]=HEAP32[$6>>2]|0;HEAP32[$$in+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$$in+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$$in+12>>2]=HEAP32[$6+12>>2]|0;HEAP32[$$in+16>>2]=HEAP32[$6+16>>2]|0;
   $46 = ((($$in)) + 20|0);
   $47 = ((($6)) + 20|0);
   HEAP32[$46>>2] = 0;
   $48 = ((($$in)) + 24|0);
   HEAP32[$48>>2] = 0;
   $49 = ((($$in)) + 28|0);
   HEAP32[$49>>2] = 0;
   $50 = HEAP32[$47>>2]|0;
   HEAP32[$46>>2] = $50;
   $51 = HEAP32[$42>>2]|0;
   HEAP32[$48>>2] = $51;
   $52 = ((($6)) + 28|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ((($$in)) + 28|0);
   HEAP32[$54>>2] = $53;
   HEAP32[$52>>2] = 0;
   HEAP32[$42>>2] = 0;
   HEAP32[$47>>2] = 0;
   $55 = ((($$in)) + 32|0);
   $56 = ((($6)) + 32|0);
   $57 = HEAP8[$56>>0]|0;
   HEAP8[$55>>0] = $57;
   $58 = HEAP32[$$phi$trans$insert491>>2]|0;
   $59 = ((($58)) + 36|0);
   HEAP32[$$phi$trans$insert491>>2] = $59;
   label = 16;
  } else {
   __THREW__ = 0;
   invoke_vii(641,($$phi$trans$insert488|0),($6|0));
   $60 = __THREW__; __THREW__ = 0;
   $61 = $60&1;
   if (!($61)) {
    $$pre494 = HEAP32[$41>>2]|0;
    $62 = ($$pre494|0)==(0|0);
    if ($62) {
     label = 16;
     break;
    }
    $63 = HEAP32[$42>>2]|0;
    $64 = ($63|0)==($$pre494|0);
    if (!($64)) {
     $scevgep$i$i$i$i = ((($63)) + -24|0);
     $65 = $scevgep$i$i$i$i;
     $66 = $$pre494;
     $67 = (($65) - ($66))|0;
     $68 = (($67>>>0) / 24)&-1;
     $69 = $68 ^ -1;
     $scevgep4$i$i$i$i = (($63) + (($69*24)|0)|0);
     HEAP32[$42>>2] = $scevgep4$i$i$i$i;
    }
    __ZdlPv($$pre494);
    label = 16;
    break;
   }
   $105 = ___cxa_find_matching_catch_2()|0;
   $106 = tempRet0;
   $107 = HEAP32[$41>>2]|0;
   $108 = ($107|0)==(0|0);
   if (!($108)) {
    $109 = HEAP32[$42>>2]|0;
    $110 = ($109|0)==($107|0);
    if (!($110)) {
     $scevgep$i$i$i$i205 = ((($109)) + -24|0);
     $111 = $scevgep$i$i$i$i205;
     $112 = $107;
     $113 = (($111) - ($112))|0;
     $114 = (($113>>>0) / 24)&-1;
     $115 = $114 ^ -1;
     $scevgep4$i$i$i$i206 = (($109) + (($115*24)|0)|0);
     HEAP32[$42>>2] = $scevgep4$i$i$i$i206;
    }
    __ZdlPv($107);
   }
   $$9 = $105;$$9135 = $106;
  }
 } while(0);
 do {
  if ((label|0) == 16) {
   $70 = HEAP32[$$phi$trans$insert491>>2]|0;
   $71 = ((($0)) + 8|0);
   __THREW__ = 0;
   invoke_vii(543,($7|0),($71|0));
   $72 = __THREW__; __THREW__ = 0;
   $73 = $72&1;
   if ($73) {
    $116 = ___cxa_find_matching_catch_2()|0;
    $117 = tempRet0;
    $$9 = $116;$$9135 = $117;
    break;
   }
   $74 = ((($70)) + -36|0);
   $75 = ((($0)) + 24|0);
   $76 = ((($5)) + 20|0);
   $77 = ((($5)) + 16|0);
   $78 = ((($5)) + 4|0);
   $79 = ((($5)) + 8|0);
   $80 = ((($4)) + 20|0);
   $81 = ((($4)) + 16|0);
   $82 = ((($4)) + 4|0);
   $83 = ((($4)) + 8|0);
   $84 = ((($8)) + 20|0);
   $85 = ((($8)) + 24|0);
   $86 = ((($8)) + 20|0);
   $87 = ((($8)) + 28|0);
   $88 = ((($8)) + 32|0);
   $89 = ((($9)) + 4|0);
   $90 = ((($9)) + 8|0);
   $91 = ((($9)) + 12|0);
   $92 = ((($9)) + 16|0);
   $93 = ((($9)) + 20|0);
   $94 = ((($10)) + 20|0);
   $95 = ((($10)) + 24|0);
   $96 = ((($10)) + 20|0);
   $97 = ((($10)) + 28|0);
   $98 = ((($10)) + 32|0);
   $$0139$ph = $3;$$0151$ph = $74;$$0154$ph = 0;$$0157$ph = -1;$$sroa$0331$0$ph = $$pre487;$$sroa$0335$0$ph = $$pre;$$sroa$0340$0$ph = $$pre;
   L35: while(1) {
    $$0142$off0$ph = 0;$$0151$ph357 = $$0151$ph;$$sroa$0331$0$ph354 = $$sroa$0331$0$ph;$$sroa$0335$0$ph355 = $$sroa$0335$0$ph;$$sroa$0340$0$ph356 = $$sroa$0340$0$ph;
    L37: while(1) {
     $$0142$off0 = $$0142$off0$ph;$$sroa$0331$0 = $$sroa$0331$0$ph354;$$sroa$0335$0 = $$sroa$0335$0$ph355;$$sroa$0340$0 = $$sroa$0340$0$ph356;
     L39: while(1) {
      __THREW__ = 0;
      $99 = (invoke_ii(553,($7|0))|0);
      $100 = __THREW__; __THREW__ = 0;
      $101 = $100&1;
      if ($101) {
       label = 29;
       break L35;
      }
      $102 = ($99|0)==(0);
      if ($102) {
       label = 105;
       break L35;
      }
      $103 = HEAP32[$75>>2]|0;
      $104 = ($$sroa$0340$0|0)==($103|0);
      L43: do {
       if ($104) {
        $$1143$off0$lcssa = $$0142$off0;$$sroa$0331$1$lcssa = $$sroa$0331$0;$$sroa$0340$1$lcssa = $$sroa$0340$0;$121 = $$sroa$0340$0;
       } else {
        $$1143$off0426 = $$0142$off0;$$sroa$0331$1424 = $$sroa$0331$0;$$sroa$0340$1425 = $$sroa$0340$0;$693 = $103;
        while(1) {
         $122 = HEAP32[$$sroa$0340$1425>>2]|0;
         $123 = ((($122)) + 8|0);
         $124 = HEAP32[$123>>2]|0;
         $125 = ($$0154$ph|0)<($124|0);
         if ($125) {
          $$1143$off0$lcssa = $$1143$off0426;$$sroa$0331$1$lcssa = $$sroa$0331$1424;$$sroa$0340$1$lcssa = $$sroa$0340$1425;$121 = $693;
          break L43;
         }
         $126 = ((($122)) + 16|0);
         $127 = HEAP32[$126>>2]|0;
         $128 = ($127|0)==(0|0);
         if ($128) {
          $$sroa$0331$2 = $$sroa$0331$1424;
         } else {
          $129 = HEAP32[$83>>2]|0;
          $130 = HEAP32[$82>>2]|0;
          $131 = (($129) - ($130))|0;
          $132 = ($131|0)==(0);
          $133 = $131 << 8;
          $134 = (($133) + -1)|0;
          $$$i$i$i$i = $132 ? 0 : $134;
          $135 = HEAP32[$81>>2]|0;
          $136 = HEAP32[$80>>2]|0;
          $sum$i$i$i = (($136) + ($135))|0;
          $137 = ($$$i$i$i$i|0)==($sum$i$i$i|0);
          $138 = $130;
          if ($137) {
           __THREW__ = 0;
           invoke_vi(642,($4|0));
           $139 = __THREW__; __THREW__ = 0;
           $140 = $139&1;
           if ($140) {
            label = 38;
            break L35;
           }
           $$pre$i$i264 = HEAP32[$80>>2]|0;
           $$pre4$i$i = HEAP32[$81>>2]|0;
           $$pre5$i$i = HEAP32[$82>>2]|0;
           $142 = $$pre$i$i264;$143 = $$pre4$i$i;$146 = $$pre5$i$i;
          } else {
           $142 = $136;$143 = $135;$146 = $138;
          }
          $141 = (($142) + ($143))|0;
          $144 = $141 >>> 10;
          $145 = (($146) + ($144<<2)|0);
          $147 = $141 & 1023;
          $148 = HEAP32[$145>>2]|0;
          $149 = (($148) + ($147<<2)|0);
          HEAP32[$149>>2] = $$sroa$0331$1424;
          $150 = (($142) + 1)|0;
          HEAP32[$80>>2] = $150;
          $151 = HEAP32[$126>>2]|0;
          $$sroa$0331$2 = $151;
         }
         $156 = ((($122)) + 20|0);
         $157 = HEAP32[$156>>2]|0;
         $158 = ($157|0)==(0);
         $159 = HEAP32[$24>>2]|0;
         $160 = ($157|0)==($159|0);
         $or$cond183 = $158 | $160;
         if ($or$cond183) {
          $$2144$off0 = $$1143$off0426;
         } else {
          $161 = HEAP32[$79>>2]|0;
          $162 = HEAP32[$78>>2]|0;
          $163 = (($161) - ($162))|0;
          $164 = ($163|0)==(0);
          $165 = $163 << 8;
          $166 = (($165) + -1)|0;
          $$$i$i$i$i266 = $164 ? 0 : $166;
          $167 = HEAP32[$77>>2]|0;
          $168 = HEAP32[$76>>2]|0;
          $sum$i$i$i267 = (($168) + ($167))|0;
          $169 = ($$$i$i$i$i266|0)==($sum$i$i$i267|0);
          $170 = $162;
          if ($169) {
           __THREW__ = 0;
           invoke_vi(643,($5|0));
           $171 = __THREW__; __THREW__ = 0;
           $172 = $171&1;
           if ($172) {
            label = 44;
            break L35;
           }
           $$pre$i$i268 = HEAP32[$76>>2]|0;
           $$pre4$i$i269 = HEAP32[$77>>2]|0;
           $$pre5$i$i270 = HEAP32[$78>>2]|0;
           $174 = $$pre$i$i268;$175 = $$pre4$i$i269;$178 = $$pre5$i$i270;
          } else {
           $174 = $168;$175 = $167;$178 = $170;
          }
          $173 = (($174) + ($175))|0;
          $176 = $173 >>> 10;
          $177 = (($178) + ($176<<2)|0);
          $179 = $173 & 1023;
          $180 = HEAP32[$177>>2]|0;
          $181 = (($180) + ($179<<2)|0);
          HEAP32[$181>>2] = $159;
          $182 = HEAP32[$76>>2]|0;
          $183 = (($182) + 1)|0;
          HEAP32[$76>>2] = $183;
          $184 = HEAP32[$156>>2]|0;
          HEAP32[$24>>2] = $184;
          $$2144$off0 = 1;
         }
         $187 = ((($$sroa$0340$1425)) + 4|0);
         $188 = HEAP32[$75>>2]|0;
         $189 = ($187|0)==($188|0);
         if ($189) {
          $$1143$off0$lcssa = $$2144$off0;$$sroa$0331$1$lcssa = $$sroa$0331$2;$$sroa$0340$1$lcssa = $187;$121 = $187;
          break;
         } else {
          $$1143$off0426 = $$2144$off0;$$sroa$0331$1424 = $$sroa$0331$2;$$sroa$0340$1425 = $187;$693 = $188;
         }
        }
       }
      } while(0);
      $120 = ($$sroa$0335$0|0)==($121|0);
      L62: do {
       if ($120) {
        $$3145$off0$lcssa = $$1143$off0$lcssa;$$sroa$0331$3$lcssa = $$sroa$0331$1$lcssa;$$sroa$0335$1$lcssa = $$sroa$0335$0;
       } else {
        $$3145$off0439 = $$1143$off0$lcssa;$$sroa$0331$3437 = $$sroa$0331$1$lcssa;$$sroa$0335$1438 = $$sroa$0335$0;
        while(1) {
         $190 = HEAP32[$$sroa$0335$1438>>2]|0;
         $191 = ((($190)) + 12|0);
         $192 = HEAP32[$191>>2]|0;
         $193 = ($$0154$ph|0)<($192|0);
         if ($193) {
          $$3145$off0$lcssa = $$3145$off0439;$$sroa$0331$3$lcssa = $$sroa$0331$3437;$$sroa$0335$1$lcssa = $$sroa$0335$1438;
          break L62;
         }
         $194 = ((($190)) + 16|0);
         $195 = HEAP32[$194>>2]|0;
         $196 = ($195|0)==(0|0);
         if ($196) {
          $$sroa$0331$4 = $$sroa$0331$3437;
         } else {
          $197 = HEAP32[$80>>2]|0;
          $198 = HEAP32[$81>>2]|0;
          $199 = (($197) + -1)|0;
          $200 = (($199) + ($198))|0;
          $201 = HEAP32[$82>>2]|0;
          $202 = $200 >>> 10;
          $203 = (($201) + ($202<<2)|0);
          $204 = HEAP32[$203>>2]|0;
          $205 = $200 & 1023;
          $206 = (($204) + ($205<<2)|0);
          $207 = HEAP32[$206>>2]|0;
          HEAP32[$80>>2] = $199;
          $208 = HEAP32[$83>>2]|0;
          $209 = $201;
          $210 = (($208) - ($209))|0;
          $211 = ($210|0)==(0);
          $212 = $210 << 8;
          $213 = (($212) + -1)|0;
          $$$i$i$i$i300 = $211 ? 0 : $213;
          $$neg$i = (1 - ($197))|0;
          $sum$i$neg$i = (($$neg$i) - ($198))|0;
          $214 = (($sum$i$neg$i) + ($$$i$i$i$i300))|0;
          $215 = ($214>>>0)>(2047);
          if ($215) {
           $216 = $208;
           $217 = ((($216)) + -4|0);
           $218 = HEAP32[$217>>2]|0;
           __ZdlPv($218);
           $219 = HEAP32[$83>>2]|0;
           $220 = ((($219)) + -4|0);
           HEAP32[$83>>2] = $220;
           $$sroa$0331$4 = $207;
          } else {
           $$sroa$0331$4 = $207;
          }
         }
         $221 = ((($190)) + 20|0);
         $222 = HEAP32[$221>>2]|0;
         $223 = ($222|0)==(0);
         if ($223) {
          $$4146$off0 = $$3145$off0439;
         } else {
          $224 = HEAP32[$24>>2]|0;
          $225 = HEAP32[$76>>2]|0;
          $226 = HEAP32[$77>>2]|0;
          $227 = (($225) + -1)|0;
          $228 = (($227) + ($226))|0;
          $229 = HEAP32[$78>>2]|0;
          $230 = $228 >>> 10;
          $231 = (($229) + ($230<<2)|0);
          $232 = HEAP32[$231>>2]|0;
          $233 = $228 & 1023;
          $234 = (($232) + ($233<<2)|0);
          $235 = HEAP32[$234>>2]|0;
          $236 = ($224|0)==($235|0);
          if ($236) {
           $$4146$off0 = $$3145$off0439;
          } else {
           $237 = $229;
           HEAP32[$24>>2] = $235;
           HEAP32[$76>>2] = $227;
           $238 = HEAP32[$79>>2]|0;
           $239 = (($238) - ($237))|0;
           $240 = ($239|0)==(0);
           $241 = $239 << 8;
           $242 = (($241) + -1)|0;
           $$$i$i$i$i303 = $240 ? 0 : $242;
           $$neg$i304 = (1 - ($225))|0;
           $sum$i$neg$i305 = (($$neg$i304) - ($226))|0;
           $243 = (($sum$i$neg$i305) + ($$$i$i$i$i303))|0;
           $244 = ($243>>>0)>(2047);
           if ($244) {
            $245 = $238;
            $246 = ((($245)) + -4|0);
            $247 = HEAP32[$246>>2]|0;
            __ZdlPv($247);
            $248 = HEAP32[$79>>2]|0;
            $249 = ((($248)) + -4|0);
            HEAP32[$79>>2] = $249;
            $$4146$off0 = 1;
           } else {
            $$4146$off0 = 1;
           }
          }
         }
         $250 = ((($$sroa$0335$1438)) + 4|0);
         $251 = HEAP32[$75>>2]|0;
         $252 = ($250|0)==($251|0);
         if ($252) {
          $$3145$off0$lcssa = $$4146$off0;$$sroa$0331$3$lcssa = $$sroa$0331$4;$$sroa$0335$1$lcssa = $250;
          break;
         } else {
          $$3145$off0439 = $$4146$off0;$$sroa$0331$3437 = $$sroa$0331$4;$$sroa$0335$1438 = $250;
         }
        }
       }
      } while(0);
      switch ($99|0) {
      case 9:  {
       label = 69;
       break L37;
       break;
      }
      case 13:  {
       $$0142$off0 = $$3145$off0$lcssa;$$sroa$0331$0 = $$sroa$0331$3$lcssa;$$sroa$0335$0 = $$sroa$0335$1$lcssa;$$sroa$0340$0 = $$sroa$0340$1$lcssa;
       break;
      }
      case 10:  {
       break L39;
       break;
      }
      default: {
       $$0163 = $99;
       break L37;
      }
      }
     }
     dest=$8; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
     $253 = HEAP32[$$phi$trans$insert491>>2]|0;
     $254 = HEAP32[$43>>2]|0;
     $255 = ($253>>>0)<($254>>>0);
     if ($255) {
      ;HEAP32[$253>>2]=HEAP32[$8>>2]|0;HEAP32[$253+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$253+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$253+12>>2]=HEAP32[$8+12>>2]|0;HEAP32[$253+16>>2]=HEAP32[$8+16>>2]|0;
      $256 = ((($253)) + 20|0);
      HEAP32[$256>>2] = 0;
      $257 = ((($253)) + 24|0);
      HEAP32[$257>>2] = 0;
      $258 = ((($253)) + 28|0);
      HEAP32[$258>>2] = 0;
      $259 = HEAP32[$86>>2]|0;
      HEAP32[$256>>2] = $259;
      $260 = HEAP32[$85>>2]|0;
      HEAP32[$257>>2] = $260;
      $261 = HEAP32[$87>>2]|0;
      $262 = ((($253)) + 28|0);
      HEAP32[$262>>2] = $261;
      HEAP32[$87>>2] = 0;
      HEAP32[$85>>2] = 0;
      HEAP32[$86>>2] = 0;
      $263 = ((($253)) + 32|0);
      $264 = HEAP8[$88>>0]|0;
      HEAP8[$263>>0] = $264;
      $265 = HEAP32[$$phi$trans$insert491>>2]|0;
      $266 = ((($265)) + 36|0);
      HEAP32[$$phi$trans$insert491>>2] = $266;
     } else {
      __THREW__ = 0;
      invoke_vii(641,($$phi$trans$insert488|0),($8|0));
      $267 = __THREW__; __THREW__ = 0;
      $268 = $267&1;
      if ($268) {
       label = 64;
       break L35;
      }
      $$pre495 = HEAP32[$84>>2]|0;
      $269 = ($$pre495|0)==(0|0);
      if (!($269)) {
       $270 = HEAP32[$85>>2]|0;
       $271 = ($270|0)==($$pre495|0);
       if (!($271)) {
        $scevgep$i$i$i$i293 = ((($270)) + -24|0);
        $272 = $scevgep$i$i$i$i293;
        $273 = $$pre495;
        $274 = (($272) - ($273))|0;
        $275 = (($274>>>0) / 24)&-1;
        $276 = $275 ^ -1;
        $scevgep4$i$i$i$i294 = (($270) + (($276*24)|0)|0);
        HEAP32[$85>>2] = $scevgep4$i$i$i$i294;
       }
       __ZdlPv($$pre495);
      }
     }
     $277 = HEAP32[$$phi$trans$insert491>>2]|0;
     $278 = ((($277)) + -36|0);
     $$0142$off0$ph = $$3145$off0$lcssa;$$0151$ph357 = $278;$$sroa$0331$0$ph354 = $$sroa$0331$3$lcssa;$$sroa$0335$0$ph355 = $$sroa$0335$1$lcssa;$$sroa$0340$0$ph356 = $$sroa$0340$1$lcssa;
    }
    if ((label|0) == 69) {
     label = 0;
     __THREW__ = 0;
     invoke_viii(545,(28952|0),(17941|0),($vararg_buffer|0));
     $290 = __THREW__; __THREW__ = 0;
     $291 = $290&1;
     if ($291) {
      label = 37;
      break;
     } else {
      $$0163 = 32;
     }
    }
    $292 = ($$0163|0)==(32);
    $293 = ($$0157$ph|0)<(0);
    $or$cond = $293 & $292;
    $$0154$$0157 = $or$cond ? $$0154$ph : $$0157$ph;
    $294 = $$sroa$0331$3$lcssa;
    __THREW__ = 0;
    $295 = (invoke_iii(644,($294|0),($$0163|0))|0);
    $296 = __THREW__; __THREW__ = 0;
    $297 = $296&1;
    if ($297) {
     label = 37;
     break;
    }
    $298 = ($295|0)==(0|0);
    if ($298) {
     __THREW__ = 0;
     $299 = (invoke_iii(644,($294|0),63)|0);
     $300 = __THREW__; __THREW__ = 0;
     $301 = $300&1;
     if ($301) {
      label = 73;
      break;
     }
     $304 = ($299|0)==(0|0);
     if ($304) {
      label = 75;
      break;
     } else {
      $$0150345 = $299;
     }
    } else {
     $$0150345 = $295;
    }
    $306 = ((($$0150345)) + 32|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = ((($307)) + 8|0);
    $309 = HEAP32[$308>>2]|0;
    $310 = HEAP32[$3>>2]|0;
    $311 = ($309|0)==($310|0);
    if ($311) {
     if ($$3145$off0$lcssa) {
      label = 79;
     } else {
      $$1140 = $$0139$ph;
     }
    } else {
     HEAP32[$3>>2] = $309;
     label = 79;
    }
    if ((label|0) == 79) {
     label = 0;
     __THREW__ = 0;
     invoke_viiii(645,($2|0),($17|0),($3|0),($3|0));
     $312 = __THREW__; __THREW__ = 0;
     $313 = $312&1;
     if ($313) {
      label = 73;
      break;
     }
     $314 = HEAP32[$2>>2]|0;
     $315 = ((($314)) + 16|0);
     $$1140 = $315;
    }
    HEAP32[$9>>2] = $$0150345;
    HEAPF32[$89>>2] = 0.0;
    HEAPF32[$90>>2] = 0.0;
    $316 = ((($$0150345)) + 16|0);
    $317 = HEAP32[$316>>2]|0;
    $318 = (+($317|0));
    HEAPF32[$91>>2] = $318;
    $319 = ((($$0150345)) + 20|0);
    $320 = HEAP32[$319>>2]|0;
    $321 = (+($320|0));
    HEAPF32[$92>>2] = $321;
    HEAP32[$93>>2] = $$1140;
    $322 = ((($$0151$ph357)) + 24|0);
    $323 = HEAP32[$322>>2]|0;
    $324 = ((($$0151$ph357)) + 28|0);
    $325 = HEAP32[$324>>2]|0;
    $326 = ($323|0)==($325|0);
    if ($326) {
     $329 = ((($$0151$ph357)) + 20|0);
     __THREW__ = 0;
     invoke_vii(646,($329|0),($9|0));
     $330 = __THREW__; __THREW__ = 0;
     $331 = $330&1;
     if ($331) {
      label = 86;
      break;
     }
    } else {
     ;HEAP32[$323>>2]=HEAP32[$9>>2]|0;HEAP32[$323+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$323+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$323+12>>2]=HEAP32[$9+12>>2]|0;HEAP32[$323+16>>2]=HEAP32[$9+16>>2]|0;HEAP32[$323+20>>2]=HEAP32[$9+20>>2]|0;
     $327 = HEAP32[$322>>2]|0;
     $328 = ((($327)) + 24|0);
     HEAP32[$322>>2] = $328;
    }
    $332 = ((($$0150345)) + 36|0);
    $333 = +HEAPF32[$332>>2];
    $334 = ((($$0151$ph357)) + 8|0);
    $335 = +HEAPF32[$334>>2];
    $336 = $333 + $335;
    HEAPF32[$334>>2] = $336;
    HEAP8[tempDoublePtr>>0]=HEAP8[$1>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1+3>>0];$337 = +HEAPF32[tempDoublePtr>>2];
    $338 = $337 <= 0.0;
    $339 = $336 < $337;
    $or$cond184 = $338 | $339;
    if ($or$cond184) {
     $340 = ($$0154$$0157|0)<(-1);
     $$$0154$$0157 = $340 ? $$0154$$0157 : -1;
     $$1152 = $$0151$ph357;$$1155 = $$0154$ph;$$4161 = $$$0154$$0157;
    } else {
     dest=$10; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
     $343 = HEAP32[$$phi$trans$insert491>>2]|0;
     $344 = HEAP32[$43>>2]|0;
     $345 = ($343>>>0)<($344>>>0);
     if ($345) {
      ;HEAP32[$343>>2]=HEAP32[$10>>2]|0;HEAP32[$343+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$343+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$343+12>>2]=HEAP32[$10+12>>2]|0;HEAP32[$343+16>>2]=HEAP32[$10+16>>2]|0;
      $346 = ((($343)) + 20|0);
      HEAP32[$346>>2] = 0;
      $347 = ((($343)) + 24|0);
      HEAP32[$347>>2] = 0;
      $348 = ((($343)) + 28|0);
      HEAP32[$348>>2] = 0;
      $349 = HEAP32[$96>>2]|0;
      HEAP32[$346>>2] = $349;
      $350 = HEAP32[$95>>2]|0;
      HEAP32[$347>>2] = $350;
      $351 = HEAP32[$97>>2]|0;
      $352 = ((($343)) + 28|0);
      HEAP32[$352>>2] = $351;
      HEAP32[$97>>2] = 0;
      HEAP32[$95>>2] = 0;
      HEAP32[$96>>2] = 0;
      $353 = ((($343)) + 32|0);
      $354 = HEAP8[$98>>0]|0;
      HEAP8[$353>>0] = $354;
      $355 = HEAP32[$$phi$trans$insert491>>2]|0;
      $356 = ((($355)) + 36|0);
      HEAP32[$$phi$trans$insert491>>2] = $356;
     } else {
      __THREW__ = 0;
      invoke_vii(641,($$phi$trans$insert488|0),($10|0));
      $357 = __THREW__; __THREW__ = 0;
      $358 = $357&1;
      if ($358) {
       label = 96;
       break;
      }
      $$pre496 = HEAP32[$94>>2]|0;
      $359 = ($$pre496|0)==(0|0);
      if (!($359)) {
       $360 = HEAP32[$95>>2]|0;
       $361 = ($360|0)==($$pre496|0);
       if (!($361)) {
        $scevgep$i$i$i$i279 = ((($360)) + -24|0);
        $362 = $scevgep$i$i$i$i279;
        $363 = $$pre496;
        $364 = (($362) - ($363))|0;
        $365 = (($364>>>0) / 24)&-1;
        $366 = $365 ^ -1;
        $scevgep4$i$i$i$i280 = (($360) + (($366*24)|0)|0);
        HEAP32[$95>>2] = $scevgep4$i$i$i$i280;
       }
       __ZdlPv($$pre496);
      }
     }
     $367 = HEAP32[$$phi$trans$insert491>>2]|0;
     $368 = ((($367)) + -36|0);
     $369 = ($$0154$$0157|0)>(-1);
     if ($369) {
      __THREW__ = 0;
      invoke_viii(545,(28952|0),(17963|0),($vararg_buffer3|0));
      $370 = __THREW__; __THREW__ = 0;
      $371 = $370&1;
      if ($371) {
       label = 101;
       break;
      } else {
       $$3160 = -1;
      }
     } else {
      $$3160 = $$0154$$0157;
     }
     $385 = (($$0154$ph) + 1)|0;
     $$1152 = $368;$$1155 = $385;$$4161 = $$3160;
    }
    $$0139$ph = $$1140;$$0151$ph = $$1152;$$0154$ph = $$1155;$$0157$ph = $$4161;$$sroa$0331$0$ph = $$sroa$0331$3$lcssa;$$sroa$0335$0$ph = $$sroa$0335$1$lcssa;$$sroa$0340$0$ph = $$sroa$0340$1$lcssa;
   }
   L121:    switch (label|0) {
    case 29: {
     $118 = ___cxa_find_matching_catch_2()|0;
     $119 = tempRet0;
     $$7 = $118;$$7133 = $119;
     break;
    }
    case 37: {
     $152 = ___cxa_find_matching_catch_2()|0;
     $153 = tempRet0;
     $$7 = $152;$$7133 = $153;
     break;
    }
    case 38: {
     $154 = ___cxa_find_matching_catch_2()|0;
     $155 = tempRet0;
     $$7 = $154;$$7133 = $155;
     break;
    }
    case 44: {
     $185 = ___cxa_find_matching_catch_2()|0;
     $186 = tempRet0;
     $$7 = $185;$$7133 = $186;
     break;
    }
    case 64: {
     $279 = ___cxa_find_matching_catch_2()|0;
     $280 = tempRet0;
     $281 = HEAP32[$84>>2]|0;
     $282 = ($281|0)==(0|0);
     if (!($282)) {
      $283 = HEAP32[$85>>2]|0;
      $284 = ($283|0)==($281|0);
      if (!($284)) {
       $scevgep$i$i$i$i288 = ((($283)) + -24|0);
       $285 = $scevgep$i$i$i$i288;
       $286 = $281;
       $287 = (($285) - ($286))|0;
       $288 = (($287>>>0) / 24)&-1;
       $289 = $288 ^ -1;
       $scevgep4$i$i$i$i289 = (($283) + (($289*24)|0)|0);
       HEAP32[$85>>2] = $scevgep4$i$i$i$i289;
      }
      __ZdlPv($281);
     }
     $$7 = $279;$$7133 = $280;
     break;
    }
    case 75: {
     __THREW__ = 0;
     invoke_viiii(561,(17957|0),(17882|0),142,(17933|0));
     $305 = __THREW__; __THREW__ = 0;
     label = 73;
     break;
    }
    case 86: {
     $341 = ___cxa_find_matching_catch_2()|0;
     $342 = tempRet0;
     $$2 = $341;$$2128 = $342;
     label = 104;
     break;
    }
    case 96: {
     $372 = ___cxa_find_matching_catch_2()|0;
     $373 = tempRet0;
     $374 = HEAP32[$94>>2]|0;
     $375 = ($374|0)==(0|0);
     if (!($375)) {
      $376 = HEAP32[$95>>2]|0;
      $377 = ($376|0)==($374|0);
      if (!($377)) {
       $scevgep$i$i$i$i274 = ((($376)) + -24|0);
       $378 = $scevgep$i$i$i$i274;
       $379 = $374;
       $380 = (($378) - ($379))|0;
       $381 = (($380>>>0) / 24)&-1;
       $382 = $381 ^ -1;
       $scevgep4$i$i$i$i275 = (($376) + (($382*24)|0)|0);
       HEAP32[$95>>2] = $scevgep4$i$i$i$i275;
      }
      __ZdlPv($374);
     }
     $$2 = $372;$$2128 = $373;
     label = 104;
     break;
    }
    case 101: {
     $383 = ___cxa_find_matching_catch_2()|0;
     $384 = tempRet0;
     $$2 = $383;$$2128 = $384;
     label = 104;
     break;
    }
    case 105: {
     $386 = HEAP32[$$phi$trans$insert491>>2]|0;
     $387 = HEAP32[$$phi$trans$insert488>>2]|0;
     $388 = (($386) - ($387))|0;
     $389 = (($388|0) / 36)&-1;
     $390 = ($388|0)>(0);
     L134: do {
      if ($390) {
       $$promoted = HEAP32[$$sroa$0$sroa$0>>2]|0;
       $391 = ($386|0)==($387|0);
       L136: do {
        if ($391) {
         $$sroa$0308$0$$sroa$0308$0$309414$lcssa422$lcssa = $$promoted;
        } else {
         $$0137417590 = 0;$$0138416591 = 0.0;$$sroa$0308$0$$sroa$0308$0$309414$lcssa422589 = $$promoted;$515 = $387;
         while(1) {
          $514 = $515;
          $516 = (($514) + (($$0137417590*36)|0)|0);
          $517 = (((($514) + (($$0137417590*36)|0)|0)) + 20|0);
          $518 = HEAP32[$517>>2]|0;
          $519 = (((($514) + (($$0137417590*36)|0)|0)) + 24|0);
          $520 = HEAP32[$519>>2]|0;
          $521 = ($518|0)==($520|0);
          if ($521) {
           $$0122$lcssa = 0.0;$$0124$lcssa = 0.0;$$sroa$0308$0$$sroa$0308$0$309414$lcssa421 = $$sroa$0308$0$$sroa$0308$0$309414$lcssa422589;
          } else {
           $$0122411 = 0.0;$$0124410 = 0.0;$$sroa$0308$0$$sroa$0308$0$309414 = $518;
           while(1) {
            $524 = HEAP32[$$sroa$0308$0$$sroa$0308$0$309414>>2]|0;
            $525 = ((($524)) + 8|0);
            $526 = HEAP32[$525>>2]|0;
            $527 = ((($526)) + 36|0);
            $528 = +HEAPF32[$527>>2];
            $529 = (+_fmaxf($$0124410,$528));
            $530 = ((($526)) + 40|0);
            $531 = +HEAPF32[$530>>2];
            $532 = (+_fmaxf($$0122411,$531));
            $533 = ((($524)) + 20|0);
            $534 = HEAP32[$533>>2]|0;
            $535 = (+($534|0));
            $536 = $535 > $529;
            if ($536) {
             $537 = ((($526)) + 44|0);
             $538 = +HEAPF32[$537>>2];
             $539 = $531 - $538;
             $540 = $528 - $539;
             $541 = $535 + $540;
             $542 = $538 + $541;
             $$1123 = $542;$$1125 = $541;
            } else {
             $$1123 = $532;$$1125 = $529;
            }
            $543 = ((($$sroa$0308$0$$sroa$0308$0$309414)) + 24|0);
            $544 = ($543|0)==($520|0);
            if ($544) {
             $$0122$lcssa = $$1123;$$0124$lcssa = $$1125;$$sroa$0308$0$$sroa$0308$0$309414$lcssa421 = $$sroa$0308$0$$sroa$0308$0$309414;
             break;
            } else {
             $$0122411 = $$1123;$$0124410 = $$1125;$$sroa$0308$0$$sroa$0308$0$309414 = $543;
            }
           }
          }
          __THREW__ = 0;
          invoke_vidd(648,($11|0),0.0,(+$$0138416591));
          $522 = __THREW__; __THREW__ = 0;
          $523 = $522&1;
          if ($523) {
           label = 159;
           break;
          }
          $545 = $11;
          $546 = $545;
          $547 = HEAP32[$546>>2]|0;
          $548 = (($545) + 4)|0;
          $549 = $548;
          $550 = HEAP32[$549>>2]|0;
          $551 = $516;
          $552 = $551;
          HEAP8[$552>>0]=$547&255;HEAP8[$552+1>>0]=($547>>8)&255;HEAP8[$552+2>>0]=($547>>16)&255;HEAP8[$552+3>>0]=$547>>24;
          $553 = (($551) + 4)|0;
          $554 = $553;
          HEAP8[$554>>0]=$550&255;HEAP8[$554+1>>0]=($550>>8)&255;HEAP8[$554+2>>0]=($550>>16)&255;HEAP8[$554+3>>0]=$550>>24;
          $555 = (((($514) + (($$0137417590*36)|0)|0)) + 12|0);
          HEAPF32[$555>>2] = $$0124$lcssa;
          $556 = (((($514) + (($$0137417590*36)|0)|0)) + 16|0);
          HEAPF32[$556>>2] = $$0122$lcssa;
          $557 = (((($514) + (($$0137417590*36)|0)|0)) + 8|0);
          $558 = +HEAPF32[$15>>2];
          $559 = +HEAPF32[$557>>2];
          $560 = $558 < $559;
          $561 = $560 ? $557 : $15;
          $393 = HEAP32[$561>>2]|0;
          HEAP16[$15>>1]=$393&65535;HEAP16[$15+2>>1]=$393>>>16;
          HEAP16[tempDoublePtr>>1]=HEAP16[$16>>1];HEAP16[tempDoublePtr+2>>1]=HEAP16[$16+2>>1];$562 = +HEAPF32[tempDoublePtr>>2];
          $563 = $$0124$lcssa + $562;
          HEAPF32[tempDoublePtr>>2]=$563;HEAP16[$16>>1]=HEAP16[tempDoublePtr>>1];HEAP16[$16+2>>1]=HEAP16[tempDoublePtr+2>>1];
          $564 = (($$0137417590) + 1)|0;
          $565 = ($564|0)<($389|0);
          if (!($565)) {
           label = 108;
           break;
          }
          $566 = $$0138416591 + $$0124$lcssa;
          $$pre498 = HEAP32[$$phi$trans$insert491>>2]|0;
          $$pre499 = HEAP32[$$phi$trans$insert488>>2]|0;
          $567 = (($$pre498) - ($$pre499))|0;
          $568 = (($567|0) / 36)&-1;
          $569 = ($568>>>0)>($564>>>0);
          if ($569) {
           $$0137417590 = $564;$$0138416591 = $566;$$sroa$0308$0$$sroa$0308$0$309414$lcssa422589 = $$sroa$0308$0$$sroa$0308$0$309414$lcssa421;$515 = $$pre499;
          } else {
           $$sroa$0308$0$$sroa$0308$0$309414$lcssa422$lcssa = $$sroa$0308$0$$sroa$0308$0$309414$lcssa421;
           break L136;
          }
         }
         if ((label|0) == 108) {
          $392 = (HEAP32[tempDoublePtr>>2]=$393,+HEAPF32[tempDoublePtr>>2]);
          HEAP32[$$sroa$0$sroa$0>>2] = $$sroa$0308$0$$sroa$0308$0$309414$lcssa421;
          $394 = $392;$396 = $563;
          break L134;
         }
         else if ((label|0) == 159) {
          $570 = ___cxa_find_matching_catch_2()|0;
          $571 = tempRet0;
          HEAP32[$$sroa$0$sroa$0>>2] = $$sroa$0308$0$$sroa$0308$0$309414$lcssa421;
          $$7 = $570;$$7133 = $571;
          break L121;
         }
        }
       } while(0);
       HEAP32[$$sroa$0$sroa$0>>2] = $$sroa$0308$0$$sroa$0308$0$309414$lcssa422$lcssa;
       __THREW__ = 0;
       invoke_vi(647,($$phi$trans$insert488|0));
       $511 = __THREW__; __THREW__ = 0;
       $512 = ___cxa_find_matching_catch_2()|0;
       $513 = tempRet0;
       $$7 = $512;$$7133 = $513;
       break L121;
      } else {
       HEAP16[tempDoublePtr>>1]=HEAP16[$15>>1];HEAP16[tempDoublePtr+2>>1]=HEAP16[$15+2>>1];$$pre502 = +HEAPF32[tempDoublePtr>>2];
       HEAP16[tempDoublePtr>>1]=HEAP16[$16>>1];HEAP16[tempDoublePtr+2>>1]=HEAP16[$16+2>>1];$$pre503 = +HEAPF32[tempDoublePtr>>2];
       $394 = $$pre502;$396 = $$pre503;
      }
     } while(0);
     $395 = (+Math_ceil((+$394)));
     HEAPF32[tempDoublePtr>>2]=$395;HEAP16[$15>>1]=HEAP16[tempDoublePtr>>1];HEAP16[$15+2>>1]=HEAP16[tempDoublePtr+2>>1];
     $397 = (+Math_ceil((+$396)));
     HEAPF32[tempDoublePtr>>2]=$397;HEAP16[$16>>1]=HEAP16[tempDoublePtr>>1];HEAP16[$16+2>>1]=HEAP16[tempDoublePtr+2>>1];
     HEAP8[$12>>0] = 1;
     $398 = ((($0)) + 76|0);
     HEAP8[$398>>0] = 0;
     $399 = HEAP32[$78>>2]|0;
     $400 = HEAP32[$77>>2]|0;
     $401 = $400 >>> 10;
     $402 = (($399) + ($401<<2)|0);
     $403 = HEAP32[$79>>2]|0;
     $404 = ($403|0)==($399|0);
     $405 = $403;
     $406 = $399;
     if ($404) {
      $419 = 0;$694 = 0;
     } else {
      $407 = $400 & 1023;
      $408 = HEAP32[$402>>2]|0;
      $409 = (($408) + ($407<<2)|0);
      $phitmp$i$i239 = $409;
      $410 = HEAP32[$76>>2]|0;
      $411 = (($410) + ($400))|0;
      $412 = $411 & 1023;
      $413 = $411 >>> 10;
      $414 = (($399) + ($413<<2)|0);
      $415 = HEAP32[$414>>2]|0;
      $416 = (($415) + ($412<<2)|0);
      $419 = $416;$694 = $phitmp$i$i239;
     }
     $$sroa$011$0$ph$i$i241 = $402;$$sroa$6$0$ph$i$i242 = $694;
     L157: while(1) {
      $$sroa$6$0$i$i244 = $$sroa$6$0$ph$i$i242;
      while(1) {
       $417 = $$sroa$6$0$i$i244;
       $418 = ($417|0)==($419|0);
       if ($418) {
        break L157;
       }
       $423 = ((($417)) + 4|0);
       $424 = $423;
       $425 = HEAP32[$$sroa$011$0$ph$i$i241>>2]|0;
       $426 = (($424) - ($425))|0;
       $427 = ($426|0)==(4096);
       if ($427) {
        break;
       } else {
        $$sroa$6$0$i$i244 = $424;
       }
      }
      $428 = ((($$sroa$011$0$ph$i$i241)) + 4|0);
      $429 = HEAP32[$428>>2]|0;
      $$sroa$011$0$ph$i$i241 = $428;$$sroa$6$0$ph$i$i242 = $429;
     }
     HEAP32[$76>>2] = 0;
     $420 = (($405) - ($406))|0;
     $421 = $420 >> 2;
     $422 = ($421>>>0)>(2);
     if ($422) {
      $$in$i$i246 = $399;
      while(1) {
       $430 = HEAP32[$$in$i$i246>>2]|0;
       __ZdlPv($430);
       $431 = HEAP32[$78>>2]|0;
       $432 = ((($431)) + 4|0);
       HEAP32[$78>>2] = $432;
       $433 = HEAP32[$79>>2]|0;
       $$cast$i$i247 = $432;
       $434 = (($433) - ($$cast$i$i247))|0;
       $435 = $434 >> 2;
       $436 = ($435>>>0)>(2);
       if ($436) {
        $$in$i$i246 = $432;
       } else {
        break;
       }
      }
      $437 = $433;
      $$lcssa$i$i249 = $435;$439 = $432;$440 = $437;
     } else {
      $$lcssa$i$i249 = $421;$439 = $399;$440 = $403;
     }
     switch ($$lcssa$i$i249|0) {
     case 1:  {
      $$sink$i$i251 = 512;
      label = 121;
      break;
     }
     case 2:  {
      $$sink$i$i251 = 1024;
      label = 121;
      break;
     }
     default: {
     }
     }
     if ((label|0) == 121) {
      HEAP32[$77>>2] = $$sink$i$i251;
     }
     $438 = ($439|0)==($440|0);
     if (!($438)) {
      $$08$i$i254 = $439;
      while(1) {
       $441 = HEAP32[$$08$i$i254>>2]|0;
       __ZdlPv($441);
       $442 = ((($$08$i$i254)) + 4|0);
       $443 = ($442|0)==($440|0);
       if ($443) {
        break;
       } else {
        $$08$i$i254 = $442;
       }
      }
      $$pre$i$i256 = HEAP32[$78>>2]|0;
      $$pre9$i$i257 = HEAP32[$79>>2]|0;
      $444 = ($$pre9$i$i257|0)==($$pre$i$i256|0);
      if (!($444)) {
       $scevgep$i$i$i$i$i$i259 = ((($$pre9$i$i257)) + -4|0);
       $445 = $scevgep$i$i$i$i$i$i259;
       $446 = $$pre$i$i256;
       $447 = (($445) - ($446))|0;
       $448 = $447 >>> 2;
       $449 = $448 ^ -1;
       $scevgep4$i$i$i$i$i$i260 = (($$pre9$i$i257) + ($449<<2)|0);
       HEAP32[$79>>2] = $scevgep4$i$i$i$i$i$i260;
      }
     }
     $450 = HEAP32[$5>>2]|0;
     $451 = ($450|0)==(0|0);
     if (!($451)) {
      __ZdlPv($450);
     }
     $452 = HEAP32[$82>>2]|0;
     $453 = HEAP32[$81>>2]|0;
     $454 = $453 >>> 10;
     $455 = (($452) + ($454<<2)|0);
     $456 = HEAP32[$83>>2]|0;
     $457 = ($456|0)==($452|0);
     $458 = $456;
     $459 = $452;
     if ($457) {
      $472 = 0;$695 = 0;
     } else {
      $460 = $453 & 1023;
      $461 = HEAP32[$455>>2]|0;
      $462 = (($461) + ($460<<2)|0);
      $phitmp$i$i213 = $462;
      $463 = HEAP32[$80>>2]|0;
      $464 = (($463) + ($453))|0;
      $465 = $464 & 1023;
      $466 = $464 >>> 10;
      $467 = (($452) + ($466<<2)|0);
      $468 = HEAP32[$467>>2]|0;
      $469 = (($468) + ($465<<2)|0);
      $472 = $469;$695 = $phitmp$i$i213;
     }
     $$sroa$011$0$ph$i$i215 = $455;$$sroa$6$0$ph$i$i216 = $695;
     L186: while(1) {
      $$sroa$6$0$i$i218 = $$sroa$6$0$ph$i$i216;
      while(1) {
       $470 = $$sroa$6$0$i$i218;
       $471 = ($470|0)==($472|0);
       if ($471) {
        break L186;
       }
       $476 = ((($470)) + 4|0);
       $477 = $476;
       $478 = HEAP32[$$sroa$011$0$ph$i$i215>>2]|0;
       $479 = (($477) - ($478))|0;
       $480 = ($479|0)==(4096);
       if ($480) {
        break;
       } else {
        $$sroa$6$0$i$i218 = $477;
       }
      }
      $481 = ((($$sroa$011$0$ph$i$i215)) + 4|0);
      $482 = HEAP32[$481>>2]|0;
      $$sroa$011$0$ph$i$i215 = $481;$$sroa$6$0$ph$i$i216 = $482;
     }
     HEAP32[$80>>2] = 0;
     $473 = (($458) - ($459))|0;
     $474 = $473 >> 2;
     $475 = ($474>>>0)>(2);
     if ($475) {
      $$in$i$i220 = $452;
      while(1) {
       $483 = HEAP32[$$in$i$i220>>2]|0;
       __ZdlPv($483);
       $484 = HEAP32[$82>>2]|0;
       $485 = ((($484)) + 4|0);
       HEAP32[$82>>2] = $485;
       $486 = HEAP32[$83>>2]|0;
       $$cast$i$i221 = $485;
       $487 = (($486) - ($$cast$i$i221))|0;
       $488 = $487 >> 2;
       $489 = ($488>>>0)>(2);
       if ($489) {
        $$in$i$i220 = $485;
       } else {
        break;
       }
      }
      $490 = $486;
      $$lcssa$i$i223 = $488;$492 = $485;$493 = $490;
     } else {
      $$lcssa$i$i223 = $474;$492 = $452;$493 = $456;
     }
     switch ($$lcssa$i$i223|0) {
     case 1:  {
      $$sink$i$i225 = 512;
      label = 140;
      break;
     }
     case 2:  {
      $$sink$i$i225 = 1024;
      label = 140;
      break;
     }
     default: {
     }
     }
     if ((label|0) == 140) {
      HEAP32[$81>>2] = $$sink$i$i225;
     }
     $491 = ($492|0)==($493|0);
     if (!($491)) {
      $$08$i$i228 = $492;
      while(1) {
       $494 = HEAP32[$$08$i$i228>>2]|0;
       __ZdlPv($494);
       $495 = ((($$08$i$i228)) + 4|0);
       $496 = ($495|0)==($493|0);
       if ($496) {
        break;
       } else {
        $$08$i$i228 = $495;
       }
      }
      $$pre$i$i230 = HEAP32[$82>>2]|0;
      $$pre9$i$i231 = HEAP32[$83>>2]|0;
      $497 = ($$pre9$i$i231|0)==($$pre$i$i230|0);
      if (!($497)) {
       $scevgep$i$i$i$i$i$i233 = ((($$pre9$i$i231)) + -4|0);
       $498 = $scevgep$i$i$i$i$i$i233;
       $499 = $$pre$i$i230;
       $500 = (($498) - ($499))|0;
       $501 = $500 >>> 2;
       $502 = $501 ^ -1;
       $scevgep4$i$i$i$i$i$i234 = (($$pre9$i$i231) + ($502<<2)|0);
       HEAP32[$83>>2] = $scevgep4$i$i$i$i$i$i234;
      }
     }
     $503 = HEAP32[$4>>2]|0;
     $504 = ($503|0)==(0|0);
     if (!($504)) {
      __ZdlPv($503);
     }
     $505 = HEAP32[$21>>2]|0;
     $506 = ($505|0)==(0|0);
     if ($506) {
      STACKTOP = sp;return;
     }
     __THREW__ = 0;
     invoke_vi(525,($505|0));
     $507 = __THREW__; __THREW__ = 0;
     $508 = $507&1;
     if ($508) {
      $509 = ___cxa_find_matching_catch_3(0|0)|0;
      $510 = tempRet0;
      ___clang_call_terminate($509);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
     break;
    }
   }
   if ((label|0) == 73) {
    $302 = ___cxa_find_matching_catch_2()|0;
    $303 = tempRet0;
    $$7 = $302;$$7133 = $303;
   }
   else if ((label|0) == 104) {
    $$7 = $$2;$$7133 = $$2128;
   }
   $$9 = $$7;$$9135 = $$7133;
  }
 } while(0);
 $572 = ((($5)) + 4|0);
 $573 = HEAP32[$572>>2]|0;
 $574 = ((($5)) + 16|0);
 $575 = HEAP32[$574>>2]|0;
 $576 = $575 >>> 10;
 $577 = (($573) + ($576<<2)|0);
 $578 = ((($5)) + 8|0);
 $579 = HEAP32[$578>>2]|0;
 $580 = ($579|0)==($573|0);
 $581 = $579;
 $582 = $573;
 if ($580) {
  $583 = ((($5)) + 20|0);
  $597 = 0;$598 = $583;$696 = 0;
 } else {
  $584 = $575 & 1023;
  $585 = HEAP32[$577>>2]|0;
  $586 = (($585) + ($584<<2)|0);
  $phitmp$i$i185 = $586;
  $587 = ((($5)) + 20|0);
  $588 = HEAP32[$587>>2]|0;
  $589 = (($588) + ($575))|0;
  $590 = $589 & 1023;
  $591 = $589 >>> 10;
  $592 = (($573) + ($591<<2)|0);
  $593 = HEAP32[$592>>2]|0;
  $594 = (($593) + ($590<<2)|0);
  $597 = $594;$598 = $587;$696 = $phitmp$i$i185;
 }
 $$sroa$011$0$ph$i$i186 = $577;$$sroa$6$0$ph$i$i187 = $696;
 L237: while(1) {
  $$sroa$6$0$i$i188 = $$sroa$6$0$ph$i$i187;
  while(1) {
   $595 = $$sroa$6$0$i$i188;
   $596 = ($595|0)==($597|0);
   if ($596) {
    break L237;
   }
   $602 = ((($595)) + 4|0);
   $603 = $602;
   $604 = HEAP32[$$sroa$011$0$ph$i$i186>>2]|0;
   $605 = (($603) - ($604))|0;
   $606 = ($605|0)==(4096);
   if ($606) {
    break;
   } else {
    $$sroa$6$0$i$i188 = $603;
   }
  }
  $607 = ((($$sroa$011$0$ph$i$i186)) + 4|0);
  $608 = HEAP32[$607>>2]|0;
  $$sroa$011$0$ph$i$i186 = $607;$$sroa$6$0$ph$i$i187 = $608;
 }
 HEAP32[$598>>2] = 0;
 $599 = (($581) - ($582))|0;
 $600 = $599 >> 2;
 $601 = ($600>>>0)>(2);
 if ($601) {
  $$in$i$i189 = $573;
  while(1) {
   $609 = HEAP32[$$in$i$i189>>2]|0;
   __ZdlPv($609);
   $610 = HEAP32[$572>>2]|0;
   $611 = ((($610)) + 4|0);
   HEAP32[$572>>2] = $611;
   $612 = HEAP32[$578>>2]|0;
   $$cast$i$i190 = $611;
   $613 = (($612) - ($$cast$i$i190))|0;
   $614 = $613 >> 2;
   $615 = ($614>>>0)>(2);
   if ($615) {
    $$in$i$i189 = $611;
   } else {
    $$lcssa$i$i192 = $614;
    break;
   }
  }
 } else {
  $$lcssa$i$i192 = $600;
 }
 switch ($$lcssa$i$i192|0) {
 case 1:  {
  $$sink$i$i194 = 512;
  label = 173;
  break;
 }
 case 2:  {
  $$sink$i$i194 = 1024;
  label = 173;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 173) {
  HEAP32[$574>>2] = $$sink$i$i194;
 }
 $616 = HEAP32[$572>>2]|0;
 $617 = HEAP32[$578>>2]|0;
 $618 = ($616|0)==($617|0);
 if (!($618)) {
  $$08$i$i196 = $616;
  while(1) {
   $619 = HEAP32[$$08$i$i196>>2]|0;
   __ZdlPv($619);
   $620 = ((($$08$i$i196)) + 4|0);
   $621 = ($620|0)==($617|0);
   if ($621) {
    break;
   } else {
    $$08$i$i196 = $620;
   }
  }
  $$pre$i$i198 = HEAP32[$572>>2]|0;
  $$pre9$i$i199 = HEAP32[$578>>2]|0;
  $622 = ($$pre9$i$i199|0)==($$pre$i$i198|0);
  if (!($622)) {
   $scevgep$i$i$i$i$i$i201 = ((($$pre9$i$i199)) + -4|0);
   $623 = $scevgep$i$i$i$i$i$i201;
   $624 = $$pre$i$i198;
   $625 = (($623) - ($624))|0;
   $626 = $625 >>> 2;
   $627 = $626 ^ -1;
   $scevgep4$i$i$i$i$i$i202 = (($$pre9$i$i199) + ($627<<2)|0);
   HEAP32[$578>>2] = $scevgep4$i$i$i$i$i$i202;
  }
 }
 $628 = HEAP32[$5>>2]|0;
 $629 = ($628|0)==(0|0);
 if (!($629)) {
  __ZdlPv($628);
 }
 $630 = ((($4)) + 4|0);
 $631 = HEAP32[$630>>2]|0;
 $632 = ((($4)) + 16|0);
 $633 = HEAP32[$632>>2]|0;
 $634 = $633 >>> 10;
 $635 = (($631) + ($634<<2)|0);
 $636 = ((($4)) + 8|0);
 $637 = HEAP32[$636>>2]|0;
 $638 = ($637|0)==($631|0);
 $639 = $637;
 $640 = $631;
 if ($638) {
  $641 = ((($4)) + 20|0);
  $655 = 0;$656 = $641;$697 = 0;
 } else {
  $642 = $633 & 1023;
  $643 = HEAP32[$635>>2]|0;
  $644 = (($643) + ($642<<2)|0);
  $phitmp$i$i = $644;
  $645 = ((($4)) + 20|0);
  $646 = HEAP32[$645>>2]|0;
  $647 = (($646) + ($633))|0;
  $648 = $647 & 1023;
  $649 = $647 >>> 10;
  $650 = (($631) + ($649<<2)|0);
  $651 = HEAP32[$650>>2]|0;
  $652 = (($651) + ($648<<2)|0);
  $655 = $652;$656 = $645;$697 = $phitmp$i$i;
 }
 $$sroa$011$0$ph$i$i = $635;$$sroa$6$0$ph$i$i = $697;
 L266: while(1) {
  $$sroa$6$0$i$i = $$sroa$6$0$ph$i$i;
  while(1) {
   $653 = $$sroa$6$0$i$i;
   $654 = ($653|0)==($655|0);
   if ($654) {
    break L266;
   }
   $660 = ((($653)) + 4|0);
   $661 = $660;
   $662 = HEAP32[$$sroa$011$0$ph$i$i>>2]|0;
   $663 = (($661) - ($662))|0;
   $664 = ($663|0)==(4096);
   if ($664) {
    break;
   } else {
    $$sroa$6$0$i$i = $661;
   }
  }
  $665 = ((($$sroa$011$0$ph$i$i)) + 4|0);
  $666 = HEAP32[$665>>2]|0;
  $$sroa$011$0$ph$i$i = $665;$$sroa$6$0$ph$i$i = $666;
 }
 HEAP32[$656>>2] = 0;
 $657 = (($639) - ($640))|0;
 $658 = $657 >> 2;
 $659 = ($658>>>0)>(2);
 if ($659) {
  $$in$i$i = $631;
  while(1) {
   $667 = HEAP32[$$in$i$i>>2]|0;
   __ZdlPv($667);
   $668 = HEAP32[$630>>2]|0;
   $669 = ((($668)) + 4|0);
   HEAP32[$630>>2] = $669;
   $670 = HEAP32[$636>>2]|0;
   $$cast$i$i = $669;
   $671 = (($670) - ($$cast$i$i))|0;
   $672 = $671 >> 2;
   $673 = ($672>>>0)>(2);
   if ($673) {
    $$in$i$i = $669;
   } else {
    $$lcssa$i$i = $672;
    break;
   }
  }
 } else {
  $$lcssa$i$i = $658;
 }
 switch ($$lcssa$i$i|0) {
 case 1:  {
  $$sink$i$i = 512;
  label = 192;
  break;
 }
 case 2:  {
  $$sink$i$i = 1024;
  label = 192;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 192) {
  HEAP32[$632>>2] = $$sink$i$i;
 }
 $674 = HEAP32[$630>>2]|0;
 $675 = HEAP32[$636>>2]|0;
 $676 = ($674|0)==($675|0);
 if (!($676)) {
  $$08$i$i = $674;
  while(1) {
   $677 = HEAP32[$$08$i$i>>2]|0;
   __ZdlPv($677);
   $678 = ((($$08$i$i)) + 4|0);
   $679 = ($678|0)==($675|0);
   if ($679) {
    break;
   } else {
    $$08$i$i = $678;
   }
  }
  $$pre$i$i = HEAP32[$630>>2]|0;
  $$pre9$i$i = HEAP32[$636>>2]|0;
  $680 = ($$pre9$i$i|0)==($$pre$i$i|0);
  if (!($680)) {
   $scevgep$i$i$i$i$i$i = ((($$pre9$i$i)) + -4|0);
   $681 = $scevgep$i$i$i$i$i$i;
   $682 = $$pre$i$i;
   $683 = (($681) - ($682))|0;
   $684 = $683 >>> 2;
   $685 = $684 ^ -1;
   $scevgep4$i$i$i$i$i$i = (($$pre9$i$i) + ($685<<2)|0);
   HEAP32[$636>>2] = $scevgep4$i$i$i$i$i$i;
  }
 }
 $686 = HEAP32[$4>>2]|0;
 $687 = ($686|0)==(0|0);
 if (!($687)) {
  __ZdlPv($686);
 }
 $$pre500 = HEAP32[$21>>2]|0;
 $688 = ($$pre500|0)==(0|0);
 if ($688) {
  ___resumeException($$9|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(525,($$pre500|0));
 $689 = __THREW__; __THREW__ = 0;
 $690 = $689&1;
 if ($690) {
  $691 = ___cxa_find_matching_catch_3(0|0)|0;
  $692 = tempRet0;
  ___clang_call_terminate($691);
  // unreachable;
 } else {
  ___resumeException($$9|0);
  // unreachable;
 }
}
function __ZNSt3__26vectorIN12TextRenderer8TEXTLINEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$06$i$i = 0, $$pre = 0, $$pre$i = 0, $$sroa$7$0 = 0, $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $scevgep$i$i$i$i$i$i$i$i$i$i$i9 = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i$i10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = (($5|0) / 36)&-1;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>(119304647);
 if ($8) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($4))|0;
 $12 = (($11|0) / 36)&-1;
 $13 = ($12>>>0)<(59652323);
 $14 = $12 << 1;
 $15 = ($14>>>0)<($7>>>0);
 $$sroa$speculated$i = $15 ? $7 : $14;
 $$sroa$speculated$$i = $13 ? $$sroa$speculated$i : 119304647;
 $16 = ($$sroa$speculated$$i|0)==(0);
 do {
  if ($16) {
   $26 = 0;
  } else {
   $17 = ($$sroa$speculated$$i>>>0)>(119304647);
   if (!($17)) {
    $23 = ($$sroa$speculated$$i*36)|0;
    $24 = (__Znwj($23)|0);
    $26 = $24;
    break;
   }
   $18 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(568,($18|0),(23604|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $21 = ___cxa_find_matching_catch_2()|0;
    $22 = tempRet0;
    ___cxa_free_exception(($18|0));
    ___resumeException($21|0);
    // unreachable;
   } else {
    HEAP32[$18>>2] = (9544);
    ___cxa_throw(($18|0),(1992|0),(506|0));
    // unreachable;
   }
  }
 } while(0);
 $25 = (($26) + (($6*36)|0)|0);
 $27 = $25;
 $28 = (($26) + (($$sroa$speculated$$i*36)|0)|0);
 $29 = $28;
 ;HEAP32[$25>>2]=HEAP32[$1>>2]|0;HEAP32[$25+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$25+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$25+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$25+16>>2]=HEAP32[$1+16>>2]|0;
 $30 = (((($26) + (($6*36)|0)|0)) + 20|0);
 $31 = ((($1)) + 20|0);
 $32 = (((($26) + (($6*36)|0)|0)) + 24|0);
 $33 = (((($26) + (($6*36)|0)|0)) + 28|0);
 HEAP32[$33>>2] = 0;
 $34 = HEAP32[$31>>2]|0;
 HEAP32[$30>>2] = $34;
 $35 = ((($1)) + 24|0);
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$32>>2] = $36;
 $37 = ((($1)) + 28|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (((($26) + (($6*36)|0)|0)) + 28|0);
 HEAP32[$39>>2] = $38;
 HEAP32[$37>>2] = 0;
 HEAP32[$35>>2] = 0;
 HEAP32[$31>>2] = 0;
 $40 = (((($26) + (($6*36)|0)|0)) + 32|0);
 $41 = ((($1)) + 32|0);
 $42 = HEAP8[$41>>0]|0;
 HEAP8[$40>>0] = $42;
 $43 = ((($25)) + 36|0);
 $44 = $43;
 $45 = HEAP32[$0>>2]|0;
 $46 = HEAP32[$2>>2]|0;
 $47 = ($46|0)==($45|0);
 if ($47) {
  $48 = $45;
  $69 = $27;$71 = $48;$73 = $45;
 } else {
  $$06$i$i = $46;$$sroa$7$0 = $27;$50 = $25;
  while(1) {
   $49 = ((($50)) + -36|0);
   $51 = ((($$06$i$i)) + -36|0);
   ;HEAP32[$49>>2]=HEAP32[$51>>2]|0;HEAP32[$49+4>>2]=HEAP32[$51+4>>2]|0;HEAP32[$49+8>>2]=HEAP32[$51+8>>2]|0;HEAP32[$49+12>>2]=HEAP32[$51+12>>2]|0;HEAP32[$49+16>>2]=HEAP32[$51+16>>2]|0;
   $52 = ((($50)) + -16|0);
   $53 = ((($$06$i$i)) + -16|0);
   HEAP32[$52>>2] = 0;
   $54 = ((($50)) + -12|0);
   HEAP32[$54>>2] = 0;
   $55 = ((($50)) + -8|0);
   HEAP32[$55>>2] = 0;
   $56 = HEAP32[$53>>2]|0;
   HEAP32[$52>>2] = $56;
   $57 = ((($$06$i$i)) + -12|0);
   $58 = HEAP32[$57>>2]|0;
   HEAP32[$54>>2] = $58;
   $59 = ((($$06$i$i)) + -8|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($50)) + -8|0);
   HEAP32[$61>>2] = $60;
   HEAP32[$59>>2] = 0;
   HEAP32[$57>>2] = 0;
   HEAP32[$53>>2] = 0;
   $62 = ((($50)) + -4|0);
   $63 = ((($$06$i$i)) + -4|0);
   $64 = HEAP8[$63>>0]|0;
   HEAP8[$62>>0] = $64;
   $65 = $$sroa$7$0;
   $66 = ((($65)) + -36|0);
   $67 = $66;
   $68 = ($51|0)==($45|0);
   if ($68) {
    break;
   } else {
    $$06$i$i = $51;$$sroa$7$0 = $67;$50 = $66;
   }
  }
  $$pre$i = HEAP32[$0>>2]|0;
  $$pre = HEAP32[$2>>2]|0;
  $69 = $67;$71 = $$pre$i;$73 = $$pre;
 }
 HEAP32[$0>>2] = $69;
 HEAP32[$2>>2] = $44;
 HEAP32[$9>>2] = $29;
 $70 = $71;
 $72 = ($73|0)==($70|0);
 if (!($72)) {
  $75 = $73;
  while(1) {
   $74 = ((($75)) + -36|0);
   $76 = ((($75)) + -16|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($77|0)==(0|0);
   if (!($78)) {
    $80 = ((($75)) + -12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ($81|0)==($77|0);
    if (!($82)) {
     $scevgep$i$i$i$i$i$i$i$i$i$i$i9 = ((($81)) + -24|0);
     $83 = $scevgep$i$i$i$i$i$i$i$i$i$i$i9;
     $84 = $77;
     $85 = (($83) - ($84))|0;
     $86 = (($85>>>0) / 24)&-1;
     $87 = $86 ^ -1;
     $scevgep4$i$i$i$i$i$i$i$i$i$i$i10 = (($81) + (($87*24)|0)|0);
     HEAP32[$80>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i$i10;
    }
    __ZdlPv($77);
   }
   $79 = ($74|0)==($70|0);
   if ($79) {
    break;
   } else {
    $75 = $74;
   }
  }
 }
 $88 = ($71|0)==(0);
 if ($88) {
  return;
 }
 $89 = $71;
 __ZdlPv($89);
 return;
}
function __ZNSt3__25dequeIP4FontNS_9allocatorIS2_EEE19__add_back_capacityEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$1 = 0, $$115 = 0, $$in$i = 0, $$in$i26 = 0, $$pre$i = 0, $$pre$i28 = 0, $$pre47$i = 0, $$pre47$i21 = 0, $$pre48$i = 0, $$pre48$i33 = 0, $$sroa$13$0$i = 0, $$sroa$13$0$i25 = 0, $$sroa$13$1$i = 0, $$sroa$13$1$i30 = 0, $$sroa$speculated = 0, $$sroa$speculated$i = 0, $$sroa$speculated$i23 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep$i$i$i$i = 0, $scevgep$i$i$i$i16 = 0, $scevgep4$i$i$i$i = 0, $scevgep4$i$i$i$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = ((($0)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6>>>0)>(1023);
 if ($7) {
  $8 = (($6) + -1024)|0;
  HEAP32[$5>>2] = $8;
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($10)) + 4|0);
  HEAP32[$9>>2] = $12;
  $13 = ((($0)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($14|0)==($16|0);
  $18 = $16;
  $19 = $14;
  do {
   if ($17) {
    $20 = HEAP32[$0>>2]|0;
    $21 = ($12>>>0)>($20>>>0);
    $22 = $20;
    if ($21) {
     $23 = $12;
     $24 = (($23) - ($22))|0;
     $25 = $24 >> 2;
     $26 = (($25) + 1)|0;
     $27 = (($26|0) / -2)&-1;
     $28 = (($12) + ($27<<2)|0);
     $29 = (($19) - ($23))|0;
     $30 = $29 >> 2;
     $31 = ($30|0)==(0);
     if ($31) {
      $34 = $12;
     } else {
      _memmove(($28|0),($12|0),($29|0))|0;
      $$pre47$i = HEAP32[$9>>2]|0;
      $34 = $$pre47$i;
     }
     $32 = (($28) + ($30<<2)|0);
     HEAP32[$13>>2] = $32;
     $33 = (($34) + ($27<<2)|0);
     HEAP32[$9>>2] = $33;
     $63 = $32;
     break;
    }
    $35 = (($18) - ($22))|0;
    $36 = $35 >> 1;
    $37 = ($36|0)==(0);
    $$sroa$speculated$i = $37 ? 1 : $36;
    $38 = ($$sroa$speculated$i>>>0)>(1073741823);
    if ($38) {
     $39 = (___cxa_allocate_exception(8)|0);
     __THREW__ = 0;
     invoke_vii(568,($39|0),(23604|0));
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if ($41) {
      $42 = ___cxa_find_matching_catch_2()|0;
      $43 = tempRet0;
      ___cxa_free_exception(($39|0));
      ___resumeException($42|0);
      // unreachable;
     } else {
      HEAP32[$39>>2] = (9544);
      ___cxa_throw(($39|0),(1992|0),(506|0));
      // unreachable;
     }
    }
    $44 = $$sroa$speculated$i >>> 2;
    $45 = $$sroa$speculated$i << 2;
    $46 = (__Znwj($45)|0);
    $47 = $46;
    $48 = (($46) + ($44<<2)|0);
    $49 = $48;
    $50 = (($46) + ($$sroa$speculated$i<<2)|0);
    $51 = $50;
    $52 = ($12|0)==($14|0);
    if ($52) {
     $$sroa$13$1$i = $49;$61 = $20;
    } else {
     $$in$i = $48;$$sroa$13$0$i = $49;$54 = $12;
     while(1) {
      $53 = HEAP32[$54>>2]|0;
      HEAP32[$$in$i>>2] = $53;
      $55 = $$sroa$13$0$i;
      $56 = ((($55)) + 4|0);
      $57 = $56;
      $58 = ((($54)) + 4|0);
      $59 = ($58|0)==($14|0);
      if ($59) {
       break;
      } else {
       $$in$i = $56;$$sroa$13$0$i = $57;$54 = $58;
      }
     }
     $$pre$i = HEAP32[$0>>2]|0;
     $$sroa$13$1$i = $57;$61 = $$pre$i;
    }
    HEAP32[$0>>2] = $47;
    HEAP32[$9>>2] = $49;
    HEAP32[$13>>2] = $$sroa$13$1$i;
    HEAP32[$15>>2] = $51;
    $60 = ($61|0)==(0|0);
    $62 = $$sroa$13$1$i;
    if ($60) {
     $63 = $62;
    } else {
     __ZdlPv($61);
     $$pre48$i = HEAP32[$13>>2]|0;
     $63 = $$pre48$i;
    }
   } else {
    $63 = $14;
   }
  } while(0);
  HEAP32[$63>>2] = $11;
  $64 = HEAP32[$13>>2]|0;
  $65 = ((($64)) + 4|0);
  HEAP32[$13>>2] = $65;
  STACKTOP = sp;return;
 }
 $66 = ((($0)) + 8|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ((($0)) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($67) - ($69))|0;
 $71 = ((($0)) + 12|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = HEAP32[$0>>2]|0;
 $74 = (($72) - ($73))|0;
 $75 = ($70>>>0)<($74>>>0);
 if ($75) {
  $76 = ($72|0)==($67|0);
  if (!($76)) {
   $77 = (__Znwj(4096)|0);
   HEAP32[$1>>2] = $77;
   __ZNSt3__214__split_bufferIPP4FontNS_9allocatorIS3_EEE9push_backEOS3_($0,$1);
   STACKTOP = sp;return;
  }
  $78 = (__Znwj(4096)|0);
  HEAP32[$2>>2] = $78;
  __ZNSt3__214__split_bufferIPP4FontNS_9allocatorIS3_EEE10push_frontEOS3_($0,$2);
  $79 = HEAP32[$68>>2]|0;
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($79)) + 4|0);
  HEAP32[$68>>2] = $81;
  $82 = HEAP32[$66>>2]|0;
  $83 = HEAP32[$71>>2]|0;
  $84 = ($82|0)==($83|0);
  $85 = $83;
  $86 = $82;
  do {
   if ($84) {
    $87 = HEAP32[$0>>2]|0;
    $88 = ($81>>>0)>($87>>>0);
    $89 = $87;
    if ($88) {
     $90 = $81;
     $91 = (($90) - ($89))|0;
     $92 = $91 >> 2;
     $93 = (($92) + 1)|0;
     $94 = (($93|0) / -2)&-1;
     $95 = (($81) + ($94<<2)|0);
     $96 = (($86) - ($90))|0;
     $97 = $96 >> 2;
     $98 = ($97|0)==(0);
     if ($98) {
      $101 = $81;
     } else {
      _memmove(($95|0),($81|0),($96|0))|0;
      $$pre47$i21 = HEAP32[$68>>2]|0;
      $101 = $$pre47$i21;
     }
     $99 = (($95) + ($97<<2)|0);
     HEAP32[$66>>2] = $99;
     $100 = (($101) + ($94<<2)|0);
     HEAP32[$68>>2] = $100;
     $130 = $99;
     break;
    }
    $102 = (($85) - ($89))|0;
    $103 = $102 >> 1;
    $104 = ($103|0)==(0);
    $$sroa$speculated$i23 = $104 ? 1 : $103;
    $105 = ($$sroa$speculated$i23>>>0)>(1073741823);
    if ($105) {
     $106 = (___cxa_allocate_exception(8)|0);
     __THREW__ = 0;
     invoke_vii(568,($106|0),(23604|0));
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     if ($108) {
      $109 = ___cxa_find_matching_catch_2()|0;
      $110 = tempRet0;
      ___cxa_free_exception(($106|0));
      ___resumeException($109|0);
      // unreachable;
     } else {
      HEAP32[$106>>2] = (9544);
      ___cxa_throw(($106|0),(1992|0),(506|0));
      // unreachable;
     }
    }
    $111 = $$sroa$speculated$i23 >>> 2;
    $112 = $$sroa$speculated$i23 << 2;
    $113 = (__Znwj($112)|0);
    $114 = $113;
    $115 = (($113) + ($111<<2)|0);
    $116 = $115;
    $117 = (($113) + ($$sroa$speculated$i23<<2)|0);
    $118 = $117;
    $119 = ($81|0)==($82|0);
    if ($119) {
     $$sroa$13$1$i30 = $116;$128 = $87;
    } else {
     $$in$i26 = $115;$$sroa$13$0$i25 = $116;$121 = $81;
     while(1) {
      $120 = HEAP32[$121>>2]|0;
      HEAP32[$$in$i26>>2] = $120;
      $122 = $$sroa$13$0$i25;
      $123 = ((($122)) + 4|0);
      $124 = $123;
      $125 = ((($121)) + 4|0);
      $126 = ($125|0)==($82|0);
      if ($126) {
       break;
      } else {
       $$in$i26 = $123;$$sroa$13$0$i25 = $124;$121 = $125;
      }
     }
     $$pre$i28 = HEAP32[$0>>2]|0;
     $$sroa$13$1$i30 = $124;$128 = $$pre$i28;
    }
    HEAP32[$0>>2] = $114;
    HEAP32[$68>>2] = $116;
    HEAP32[$66>>2] = $$sroa$13$1$i30;
    HEAP32[$71>>2] = $118;
    $127 = ($128|0)==(0|0);
    $129 = $$sroa$13$1$i30;
    if ($127) {
     $130 = $129;
    } else {
     __ZdlPv($128);
     $$pre48$i33 = HEAP32[$66>>2]|0;
     $130 = $$pre48$i33;
    }
   } else {
    $130 = $82;
   }
  } while(0);
  HEAP32[$130>>2] = $80;
  $131 = HEAP32[$66>>2]|0;
  $132 = ((($131)) + 4|0);
  HEAP32[$66>>2] = $132;
  STACKTOP = sp;return;
 }
 $133 = $74 >> 1;
 $134 = ($133|0)==(0);
 $$sroa$speculated = $134 ? 1 : $133;
 $135 = ((($0)) + 12|0);
 $136 = ((($3)) + 12|0);
 HEAP32[$136>>2] = 0;
 $137 = ((($3)) + 16|0);
 HEAP32[$137>>2] = $135;
 $138 = ($$sroa$speculated>>>0)>(1073741823);
 if ($138) {
  $139 = (___cxa_allocate_exception(8)|0);
  __THREW__ = 0;
  invoke_vii(568,($139|0),(23604|0));
  $140 = __THREW__; __THREW__ = 0;
  $141 = $140&1;
  if ($141) {
   $142 = ___cxa_find_matching_catch_2()|0;
   $143 = tempRet0;
   ___cxa_free_exception(($139|0));
   ___resumeException($142|0);
   // unreachable;
  } else {
   HEAP32[$139>>2] = (9544);
   ___cxa_throw(($139|0),(1992|0),(506|0));
   // unreachable;
  }
 }
 $144 = $70 >> 2;
 $145 = $$sroa$speculated << 2;
 $146 = (__Znwj($145)|0);
 HEAP32[$3>>2] = $146;
 $147 = (($146) + ($144<<2)|0);
 $148 = ((($3)) + 8|0);
 HEAP32[$148>>2] = $147;
 $149 = ((($3)) + 4|0);
 HEAP32[$149>>2] = $147;
 $150 = (($146) + ($$sroa$speculated<<2)|0);
 $151 = ((($3)) + 12|0);
 HEAP32[$151>>2] = $150;
 __THREW__ = 0;
 $152 = (invoke_ii(527,4096)|0);
 $153 = __THREW__; __THREW__ = 0;
 $154 = $153&1;
 do {
  if ($154) {
   $176 = ___cxa_find_matching_catch_2()|0;
   $177 = tempRet0;
   $$1 = $177;$$115 = $176;
  } else {
   HEAP32[$4>>2] = $152;
   __THREW__ = 0;
   invoke_vii(649,($3|0),($4|0));
   $155 = __THREW__; __THREW__ = 0;
   $156 = $155&1;
   if ($156) {
    $183 = ___cxa_find_matching_catch_2()|0;
    $184 = tempRet0;
    __ZdlPv($152);
    $$1 = $184;$$115 = $183;
    break;
   }
   $157 = HEAP32[$66>>2]|0;
   $$0 = $157;
   while(1) {
    $158 = HEAP32[$68>>2]|0;
    $159 = ($$0|0)==($158|0);
    if ($159) {
     break;
    }
    $178 = ((($$0)) + -4|0);
    __THREW__ = 0;
    invoke_vii(650,($3|0),($178|0));
    $179 = __THREW__; __THREW__ = 0;
    $180 = $179&1;
    if ($180) {
     label = 50;
     break;
    } else {
     $$0 = $178;
    }
   }
   if ((label|0) == 50) {
    $181 = ___cxa_find_matching_catch_2()|0;
    $182 = tempRet0;
    $$1 = $182;$$115 = $181;
    break;
   }
   $160 = $158;
   $161 = HEAP32[$0>>2]|0;
   $162 = HEAP32[$3>>2]|0;
   HEAP32[$0>>2] = $162;
   HEAP32[$3>>2] = $161;
   $163 = HEAP32[$149>>2]|0;
   HEAP32[$68>>2] = $163;
   HEAP32[$149>>2] = $160;
   $164 = HEAP32[$66>>2]|0;
   $165 = HEAP32[$148>>2]|0;
   HEAP32[$66>>2] = $165;
   HEAP32[$148>>2] = $164;
   $166 = HEAP32[$71>>2]|0;
   $167 = HEAP32[$151>>2]|0;
   HEAP32[$71>>2] = $167;
   HEAP32[$151>>2] = $166;
   $168 = $164;
   $169 = ($168|0)==($$0|0);
   if (!($169)) {
    $scevgep$i$i$i$i16 = ((($168)) + -4|0);
    $170 = $scevgep$i$i$i$i16;
    $171 = (($170) - ($160))|0;
    $172 = $171 >>> 2;
    $173 = $172 ^ -1;
    $scevgep4$i$i$i$i17 = (($168) + ($173<<2)|0);
    HEAP32[$148>>2] = $scevgep4$i$i$i$i17;
   }
   $174 = ($161|0)==(0);
   if (!($174)) {
    $175 = $161;
    __ZdlPv($175);
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $185 = HEAP32[$149>>2]|0;
 $186 = HEAP32[$148>>2]|0;
 $187 = ($186|0)==($185|0);
 if (!($187)) {
  $scevgep$i$i$i$i = ((($186)) + -4|0);
  $188 = $scevgep$i$i$i$i;
  $189 = $185;
  $190 = (($188) - ($189))|0;
  $191 = $190 >>> 2;
  $192 = $191 ^ -1;
  $scevgep4$i$i$i$i = (($186) + ($192<<2)|0);
  HEAP32[$148>>2] = $scevgep4$i$i$i$i;
 }
 $193 = HEAP32[$3>>2]|0;
 $194 = ($193|0)==(0|0);
 if ($194) {
  ___resumeException($$115|0);
  // unreachable;
 }
 __ZdlPv($193);
 ___resumeException($$115|0);
 // unreachable;
}
function __ZNSt3__25dequeIjNS_9allocatorIjEEE19__add_back_capacityEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$1 = 0, $$115 = 0, $$in$i = 0, $$in$i26 = 0, $$pre$i = 0, $$pre$i28 = 0, $$pre47$i = 0, $$pre47$i21 = 0, $$pre48$i = 0, $$pre48$i33 = 0, $$sroa$13$0$i = 0, $$sroa$13$0$i25 = 0, $$sroa$13$1$i = 0, $$sroa$13$1$i30 = 0, $$sroa$speculated = 0, $$sroa$speculated$i = 0, $$sroa$speculated$i23 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep$i$i$i$i = 0, $scevgep$i$i$i$i16 = 0, $scevgep4$i$i$i$i = 0, $scevgep4$i$i$i$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = ((($0)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6>>>0)>(1023);
 if ($7) {
  $8 = (($6) + -1024)|0;
  HEAP32[$5>>2] = $8;
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($10)) + 4|0);
  HEAP32[$9>>2] = $12;
  $13 = ((($0)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($14|0)==($16|0);
  $18 = $16;
  $19 = $14;
  do {
   if ($17) {
    $20 = HEAP32[$0>>2]|0;
    $21 = ($12>>>0)>($20>>>0);
    $22 = $20;
    if ($21) {
     $23 = $12;
     $24 = (($23) - ($22))|0;
     $25 = $24 >> 2;
     $26 = (($25) + 1)|0;
     $27 = (($26|0) / -2)&-1;
     $28 = (($12) + ($27<<2)|0);
     $29 = (($19) - ($23))|0;
     $30 = $29 >> 2;
     $31 = ($30|0)==(0);
     if ($31) {
      $34 = $12;
     } else {
      _memmove(($28|0),($12|0),($29|0))|0;
      $$pre47$i = HEAP32[$9>>2]|0;
      $34 = $$pre47$i;
     }
     $32 = (($28) + ($30<<2)|0);
     HEAP32[$13>>2] = $32;
     $33 = (($34) + ($27<<2)|0);
     HEAP32[$9>>2] = $33;
     $63 = $32;
     break;
    }
    $35 = (($18) - ($22))|0;
    $36 = $35 >> 1;
    $37 = ($36|0)==(0);
    $$sroa$speculated$i = $37 ? 1 : $36;
    $38 = ($$sroa$speculated$i>>>0)>(1073741823);
    if ($38) {
     $39 = (___cxa_allocate_exception(8)|0);
     __THREW__ = 0;
     invoke_vii(568,($39|0),(23604|0));
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if ($41) {
      $42 = ___cxa_find_matching_catch_2()|0;
      $43 = tempRet0;
      ___cxa_free_exception(($39|0));
      ___resumeException($42|0);
      // unreachable;
     } else {
      HEAP32[$39>>2] = (9544);
      ___cxa_throw(($39|0),(1992|0),(506|0));
      // unreachable;
     }
    }
    $44 = $$sroa$speculated$i >>> 2;
    $45 = $$sroa$speculated$i << 2;
    $46 = (__Znwj($45)|0);
    $47 = $46;
    $48 = (($46) + ($44<<2)|0);
    $49 = $48;
    $50 = (($46) + ($$sroa$speculated$i<<2)|0);
    $51 = $50;
    $52 = ($12|0)==($14|0);
    if ($52) {
     $$sroa$13$1$i = $49;$61 = $20;
    } else {
     $$in$i = $48;$$sroa$13$0$i = $49;$54 = $12;
     while(1) {
      $53 = HEAP32[$54>>2]|0;
      HEAP32[$$in$i>>2] = $53;
      $55 = $$sroa$13$0$i;
      $56 = ((($55)) + 4|0);
      $57 = $56;
      $58 = ((($54)) + 4|0);
      $59 = ($58|0)==($14|0);
      if ($59) {
       break;
      } else {
       $$in$i = $56;$$sroa$13$0$i = $57;$54 = $58;
      }
     }
     $$pre$i = HEAP32[$0>>2]|0;
     $$sroa$13$1$i = $57;$61 = $$pre$i;
    }
    HEAP32[$0>>2] = $47;
    HEAP32[$9>>2] = $49;
    HEAP32[$13>>2] = $$sroa$13$1$i;
    HEAP32[$15>>2] = $51;
    $60 = ($61|0)==(0|0);
    $62 = $$sroa$13$1$i;
    if ($60) {
     $63 = $62;
    } else {
     __ZdlPv($61);
     $$pre48$i = HEAP32[$13>>2]|0;
     $63 = $$pre48$i;
    }
   } else {
    $63 = $14;
   }
  } while(0);
  HEAP32[$63>>2] = $11;
  $64 = HEAP32[$13>>2]|0;
  $65 = ((($64)) + 4|0);
  HEAP32[$13>>2] = $65;
  STACKTOP = sp;return;
 }
 $66 = ((($0)) + 8|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ((($0)) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($67) - ($69))|0;
 $71 = ((($0)) + 12|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = HEAP32[$0>>2]|0;
 $74 = (($72) - ($73))|0;
 $75 = ($70>>>0)<($74>>>0);
 if ($75) {
  $76 = ($72|0)==($67|0);
  if (!($76)) {
   $77 = (__Znwj(4096)|0);
   HEAP32[$1>>2] = $77;
   __ZNSt3__214__split_bufferIPjNS_9allocatorIS1_EEE9push_backEOS1_($0,$1);
   STACKTOP = sp;return;
  }
  $78 = (__Znwj(4096)|0);
  HEAP32[$2>>2] = $78;
  __ZNSt3__214__split_bufferIPjNS_9allocatorIS1_EEE10push_frontEOS1_($0,$2);
  $79 = HEAP32[$68>>2]|0;
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($79)) + 4|0);
  HEAP32[$68>>2] = $81;
  $82 = HEAP32[$66>>2]|0;
  $83 = HEAP32[$71>>2]|0;
  $84 = ($82|0)==($83|0);
  $85 = $83;
  $86 = $82;
  do {
   if ($84) {
    $87 = HEAP32[$0>>2]|0;
    $88 = ($81>>>0)>($87>>>0);
    $89 = $87;
    if ($88) {
     $90 = $81;
     $91 = (($90) - ($89))|0;
     $92 = $91 >> 2;
     $93 = (($92) + 1)|0;
     $94 = (($93|0) / -2)&-1;
     $95 = (($81) + ($94<<2)|0);
     $96 = (($86) - ($90))|0;
     $97 = $96 >> 2;
     $98 = ($97|0)==(0);
     if ($98) {
      $101 = $81;
     } else {
      _memmove(($95|0),($81|0),($96|0))|0;
      $$pre47$i21 = HEAP32[$68>>2]|0;
      $101 = $$pre47$i21;
     }
     $99 = (($95) + ($97<<2)|0);
     HEAP32[$66>>2] = $99;
     $100 = (($101) + ($94<<2)|0);
     HEAP32[$68>>2] = $100;
     $130 = $99;
     break;
    }
    $102 = (($85) - ($89))|0;
    $103 = $102 >> 1;
    $104 = ($103|0)==(0);
    $$sroa$speculated$i23 = $104 ? 1 : $103;
    $105 = ($$sroa$speculated$i23>>>0)>(1073741823);
    if ($105) {
     $106 = (___cxa_allocate_exception(8)|0);
     __THREW__ = 0;
     invoke_vii(568,($106|0),(23604|0));
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     if ($108) {
      $109 = ___cxa_find_matching_catch_2()|0;
      $110 = tempRet0;
      ___cxa_free_exception(($106|0));
      ___resumeException($109|0);
      // unreachable;
     } else {
      HEAP32[$106>>2] = (9544);
      ___cxa_throw(($106|0),(1992|0),(506|0));
      // unreachable;
     }
    }
    $111 = $$sroa$speculated$i23 >>> 2;
    $112 = $$sroa$speculated$i23 << 2;
    $113 = (__Znwj($112)|0);
    $114 = $113;
    $115 = (($113) + ($111<<2)|0);
    $116 = $115;
    $117 = (($113) + ($$sroa$speculated$i23<<2)|0);
    $118 = $117;
    $119 = ($81|0)==($82|0);
    if ($119) {
     $$sroa$13$1$i30 = $116;$128 = $87;
    } else {
     $$in$i26 = $115;$$sroa$13$0$i25 = $116;$121 = $81;
     while(1) {
      $120 = HEAP32[$121>>2]|0;
      HEAP32[$$in$i26>>2] = $120;
      $122 = $$sroa$13$0$i25;
      $123 = ((($122)) + 4|0);
      $124 = $123;
      $125 = ((($121)) + 4|0);
      $126 = ($125|0)==($82|0);
      if ($126) {
       break;
      } else {
       $$in$i26 = $123;$$sroa$13$0$i25 = $124;$121 = $125;
      }
     }
     $$pre$i28 = HEAP32[$0>>2]|0;
     $$sroa$13$1$i30 = $124;$128 = $$pre$i28;
    }
    HEAP32[$0>>2] = $114;
    HEAP32[$68>>2] = $116;
    HEAP32[$66>>2] = $$sroa$13$1$i30;
    HEAP32[$71>>2] = $118;
    $127 = ($128|0)==(0|0);
    $129 = $$sroa$13$1$i30;
    if ($127) {
     $130 = $129;
    } else {
     __ZdlPv($128);
     $$pre48$i33 = HEAP32[$66>>2]|0;
     $130 = $$pre48$i33;
    }
   } else {
    $130 = $82;
   }
  } while(0);
  HEAP32[$130>>2] = $80;
  $131 = HEAP32[$66>>2]|0;
  $132 = ((($131)) + 4|0);
  HEAP32[$66>>2] = $132;
  STACKTOP = sp;return;
 }
 $133 = $74 >> 1;
 $134 = ($133|0)==(0);
 $$sroa$speculated = $134 ? 1 : $133;
 $135 = ((($0)) + 12|0);
 $136 = ((($3)) + 12|0);
 HEAP32[$136>>2] = 0;
 $137 = ((($3)) + 16|0);
 HEAP32[$137>>2] = $135;
 $138 = ($$sroa$speculated>>>0)>(1073741823);
 if ($138) {
  $139 = (___cxa_allocate_exception(8)|0);
  __THREW__ = 0;
  invoke_vii(568,($139|0),(23604|0));
  $140 = __THREW__; __THREW__ = 0;
  $141 = $140&1;
  if ($141) {
   $142 = ___cxa_find_matching_catch_2()|0;
   $143 = tempRet0;
   ___cxa_free_exception(($139|0));
   ___resumeException($142|0);
   // unreachable;
  } else {
   HEAP32[$139>>2] = (9544);
   ___cxa_throw(($139|0),(1992|0),(506|0));
   // unreachable;
  }
 }
 $144 = $70 >> 2;
 $145 = $$sroa$speculated << 2;
 $146 = (__Znwj($145)|0);
 HEAP32[$3>>2] = $146;
 $147 = (($146) + ($144<<2)|0);
 $148 = ((($3)) + 8|0);
 HEAP32[$148>>2] = $147;
 $149 = ((($3)) + 4|0);
 HEAP32[$149>>2] = $147;
 $150 = (($146) + ($$sroa$speculated<<2)|0);
 $151 = ((($3)) + 12|0);
 HEAP32[$151>>2] = $150;
 __THREW__ = 0;
 $152 = (invoke_ii(527,4096)|0);
 $153 = __THREW__; __THREW__ = 0;
 $154 = $153&1;
 do {
  if ($154) {
   $176 = ___cxa_find_matching_catch_2()|0;
   $177 = tempRet0;
   $$1 = $177;$$115 = $176;
  } else {
   HEAP32[$4>>2] = $152;
   __THREW__ = 0;
   invoke_vii(651,($3|0),($4|0));
   $155 = __THREW__; __THREW__ = 0;
   $156 = $155&1;
   if ($156) {
    $183 = ___cxa_find_matching_catch_2()|0;
    $184 = tempRet0;
    __ZdlPv($152);
    $$1 = $184;$$115 = $183;
    break;
   }
   $157 = HEAP32[$66>>2]|0;
   $$0 = $157;
   while(1) {
    $158 = HEAP32[$68>>2]|0;
    $159 = ($$0|0)==($158|0);
    if ($159) {
     break;
    }
    $178 = ((($$0)) + -4|0);
    __THREW__ = 0;
    invoke_vii(652,($3|0),($178|0));
    $179 = __THREW__; __THREW__ = 0;
    $180 = $179&1;
    if ($180) {
     label = 50;
     break;
    } else {
     $$0 = $178;
    }
   }
   if ((label|0) == 50) {
    $181 = ___cxa_find_matching_catch_2()|0;
    $182 = tempRet0;
    $$1 = $182;$$115 = $181;
    break;
   }
   $160 = $158;
   $161 = HEAP32[$0>>2]|0;
   $162 = HEAP32[$3>>2]|0;
   HEAP32[$0>>2] = $162;
   HEAP32[$3>>2] = $161;
   $163 = HEAP32[$149>>2]|0;
   HEAP32[$68>>2] = $163;
   HEAP32[$149>>2] = $160;
   $164 = HEAP32[$66>>2]|0;
   $165 = HEAP32[$148>>2]|0;
   HEAP32[$66>>2] = $165;
   HEAP32[$148>>2] = $164;
   $166 = HEAP32[$71>>2]|0;
   $167 = HEAP32[$151>>2]|0;
   HEAP32[$71>>2] = $167;
   HEAP32[$151>>2] = $166;
   $168 = $164;
   $169 = ($168|0)==($$0|0);
   if (!($169)) {
    $scevgep$i$i$i$i16 = ((($168)) + -4|0);
    $170 = $scevgep$i$i$i$i16;
    $171 = (($170) - ($160))|0;
    $172 = $171 >>> 2;
    $173 = $172 ^ -1;
    $scevgep4$i$i$i$i17 = (($168) + ($173<<2)|0);
    HEAP32[$148>>2] = $scevgep4$i$i$i$i17;
   }
   $174 = ($161|0)==(0);
   if (!($174)) {
    $175 = $161;
    __ZdlPv($175);
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $185 = HEAP32[$149>>2]|0;
 $186 = HEAP32[$148>>2]|0;
 $187 = ($186|0)==($185|0);
 if (!($187)) {
  $scevgep$i$i$i$i = ((($186)) + -4|0);
  $188 = $scevgep$i$i$i$i;
  $189 = $185;
  $190 = (($188) - ($189))|0;
  $191 = $190 >>> 2;
  $192 = $191 ^ -1;
  $scevgep4$i$i$i$i = (($186) + ($192<<2)|0);
  HEAP32[$148>>2] = $scevgep4$i$i$i$i;
 }
 $193 = HEAP32[$3>>2]|0;
 $194 = ($193|0)==(0|0);
 if ($194) {
  ___resumeException($$115|0);
  // unreachable;
 }
 __ZdlPv($193);
 ___resumeException($$115|0);
 // unreachable;
}
function __ZNSt3__26__treeI17_TEXTRENDERPARAMSNS_4lessIS1_EENS_9allocatorIS1_EEE25__emplace_unique_key_argsIS1_JRKS1_EEENS_4pairINS_15__tree_iteratorIS1_PNS_11__tree_nodeIS1_PvEEiEEbEERKT_DpOT0_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$i = 0, $$0$ph$i = 0, $$020 = 0, $$021 = 0, $$024$i = 0, $$025$i = 0, $$in$i = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $$020 = $4;$$025$i = $4;
  } else {
   $7 = ((($1)) + 4|0);
   $8 = HEAP32[$2>>2]|0;
   $9 = ((($2)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $$0$i = $7;$$024$i = $5;
   while(1) {
    $11 = ((($$024$i)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($8>>>0)<($12>>>0);
    if ($13) {
     $14 = ((($$024$i)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($10|0)<($15|0);
     if ($16) {
      $17 = HEAP32[$$024$i>>2]|0;
      $18 = ($17|0)==(0|0);
      if ($18) {
       label = 7;
       break;
      } else {
       $$0$ph$i = $$024$i;$$in$i = $17;
      }
     } else {
      label = 8;
     }
    } else {
     label = 8;
    }
    if ((label|0) == 8) {
     label = 0;
     $19 = ($12>>>0)<($8>>>0);
     if (!($19)) {
      label = 12;
      break;
     }
     $20 = ((($$024$i)) + 20|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)<($10|0);
     if (!($22)) {
      label = 12;
      break;
     }
     $23 = ((($$024$i)) + 4|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(0|0);
     if ($25) {
      label = 11;
      break;
     } else {
      $$0$ph$i = $23;$$in$i = $24;
     }
    }
    $$0$i = $$0$ph$i;$$024$i = $$in$i;
   }
   if ((label|0) == 7) {
    $$020 = $$024$i;$$025$i = $$024$i;
    break;
   }
   else if ((label|0) == 11) {
    $$020 = $$024$i;$$025$i = $23;
    break;
   }
   else if ((label|0) == 12) {
    $$020 = $$024$i;$$025$i = $$0$i;
    break;
   }
  }
 } while(0);
 $26 = HEAP32[$$025$i>>2]|0;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  $$0 = $26;$$021 = 0;
  $60 = $$0;
  HEAP32[$0>>2] = $60;
  $61 = ((($0)) + 4|0);
  HEAP8[$61>>0] = $$021;
  return;
 }
 $28 = (__Znwj(28)|0);
 $29 = ((($28)) + 16|0);
 $30 = $3;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = $29;
 $37 = $36;
 HEAP32[$37>>2] = $32;
 $38 = (($36) + 4)|0;
 $39 = $38;
 HEAP32[$39>>2] = $35;
 $40 = ((($28)) + 24|0);
 $41 = ((($3)) + 8|0);
 $42 = HEAP32[$41>>2]|0;
 HEAP32[$40>>2] = $42;
 $43 = ($42|0)==(0|0);
 if (!($43)) {
  __THREW__ = 0;
  invoke_vi(526,($42|0));
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if ($45) {
   $46 = ___cxa_find_matching_catch_2()|0;
   $47 = tempRet0;
   __ZdlPv($28);
   ___resumeException($46|0);
   // unreachable;
  }
 }
 HEAP32[$28>>2] = 0;
 $48 = ((($28)) + 4|0);
 HEAP32[$48>>2] = 0;
 $49 = ((($28)) + 8|0);
 HEAP32[$49>>2] = $$020;
 HEAP32[$$025$i>>2] = $28;
 $50 = HEAP32[$1>>2]|0;
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)==(0|0);
 if ($52) {
  $56 = $28;
 } else {
  $53 = $51;
  HEAP32[$1>>2] = $53;
  $$pre$i = HEAP32[$$025$i>>2]|0;
  $56 = $$pre$i;
 }
 $54 = ((($1)) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($55,$56);
 $57 = ((($1)) + 8|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($58) + 1)|0;
 HEAP32[$57>>2] = $59;
 $$0 = $28;$$021 = 1;
 $60 = $$0;
 HEAP32[$0>>2] = $60;
 $61 = ((($0)) + 4|0);
 HEAP8[$61>>0] = $$021;
 return;
}
function __ZNSt3__26vectorIN12TextRenderer9GLYPHINFOENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = (($5|0) / 24)&-1;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>(178956970);
 if ($8) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($4))|0;
 $12 = (($11|0) / 24)&-1;
 $13 = ($12>>>0)<(89478485);
 $14 = $12 << 1;
 $15 = ($14>>>0)<($7>>>0);
 $$sroa$speculated$i = $15 ? $7 : $14;
 $$sroa$speculated$$i = $13 ? $$sroa$speculated$i : 178956970;
 $16 = ($$sroa$speculated$$i|0)==(0);
 do {
  if ($16) {
   $26 = 0;
  } else {
   $17 = ($$sroa$speculated$$i>>>0)>(178956970);
   if (!($17)) {
    $23 = ($$sroa$speculated$$i*24)|0;
    $24 = (__Znwj($23)|0);
    $26 = $24;
    break;
   }
   $18 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(568,($18|0),(23604|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $21 = ___cxa_find_matching_catch_2()|0;
    $22 = tempRet0;
    ___cxa_free_exception(($18|0));
    ___resumeException($21|0);
    // unreachable;
   } else {
    HEAP32[$18>>2] = (9544);
    ___cxa_throw(($18|0),(1992|0),(506|0));
    // unreachable;
   }
  }
 } while(0);
 $25 = (($26) + (($6*24)|0)|0);
 $27 = (($26) + (($$sroa$speculated$$i*24)|0)|0);
 $28 = $27;
 ;HEAP32[$25>>2]=HEAP32[$1>>2]|0;HEAP32[$25+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$25+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$25+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$25+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$25+20>>2]=HEAP32[$1+20>>2]|0;
 $29 = ((($25)) + 24|0);
 $30 = $29;
 $31 = (($5|0) / -24)&-1;
 $32 = (($25) + (($31*24)|0)|0);
 $33 = $32;
 $34 = ($5|0)>(0);
 if ($34) {
  $35 = $4;
  _memcpy(($32|0),($35|0),($5|0))|0;
 }
 HEAP32[$0>>2] = $33;
 HEAP32[$2>>2] = $30;
 HEAP32[$9>>2] = $28;
 $36 = ($4|0)==(0);
 if ($36) {
  return;
 }
 $37 = $4;
 __ZdlPv($37);
 return;
}
function __ZNSt3__214__split_bufferIPjNS_9allocatorIS1_EEE9push_backEOS1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$in = 0, $$pre = 0, $$pre47 = 0, $$pre48 = 0, $$sroa$13$0 = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 $7 = $5;
 $8 = $3;
 do {
  if ($6) {
   $9 = ((($0)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$0>>2]|0;
   $12 = ($10>>>0)>($11>>>0);
   $13 = $11;
   if ($12) {
    $14 = $10;
    $15 = (($14) - ($13))|0;
    $16 = $15 >> 2;
    $17 = (($16) + 1)|0;
    $18 = (($17|0) / -2)&-1;
    $19 = (($10) + ($18<<2)|0);
    $20 = (($8) - ($14))|0;
    $21 = $20 >> 2;
    $22 = ($21|0)==(0);
    if ($22) {
     $25 = $10;
    } else {
     _memmove(($19|0),($10|0),($20|0))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $25 = $$pre47;
    }
    $23 = (($19) + ($21<<2)|0);
    HEAP32[$2>>2] = $23;
    $24 = (($25) + ($18<<2)|0);
    HEAP32[$9>>2] = $24;
    $55 = $23;
    break;
   }
   $26 = (($7) - ($13))|0;
   $27 = $26 >> 1;
   $28 = ($27|0)==(0);
   $$sroa$speculated = $28 ? 1 : $27;
   $29 = ($$sroa$speculated>>>0)>(1073741823);
   if ($29) {
    $30 = (___cxa_allocate_exception(8)|0);
    __THREW__ = 0;
    invoke_vii(568,($30|0),(23604|0));
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $33 = ___cxa_find_matching_catch_2()|0;
     $34 = tempRet0;
     ___cxa_free_exception(($30|0));
     ___resumeException($33|0);
     // unreachable;
    } else {
     HEAP32[$30>>2] = (9544);
     ___cxa_throw(($30|0),(1992|0),(506|0));
     // unreachable;
    }
   }
   $35 = $$sroa$speculated >>> 2;
   $36 = $$sroa$speculated << 2;
   $37 = (__Znwj($36)|0);
   $38 = $37;
   $39 = (($37) + ($35<<2)|0);
   $40 = $39;
   $41 = (($37) + ($$sroa$speculated<<2)|0);
   $42 = $41;
   $43 = ($10|0)==($3|0);
   if ($43) {
    $$sroa$13$1 = $40;$52 = $11;
   } else {
    $$in = $39;$$sroa$13$0 = $40;$45 = $10;
    while(1) {
     $44 = HEAP32[$45>>2]|0;
     HEAP32[$$in>>2] = $44;
     $46 = $$sroa$13$0;
     $47 = ((($46)) + 4|0);
     $48 = $47;
     $49 = ((($45)) + 4|0);
     $50 = ($49|0)==($3|0);
     if ($50) {
      break;
     } else {
      $$in = $47;$$sroa$13$0 = $48;$45 = $49;
     }
    }
    $$pre = HEAP32[$0>>2]|0;
    $$sroa$13$1 = $48;$52 = $$pre;
   }
   HEAP32[$0>>2] = $38;
   HEAP32[$9>>2] = $40;
   HEAP32[$2>>2] = $$sroa$13$1;
   HEAP32[$4>>2] = $42;
   $51 = ($52|0)==(0|0);
   $53 = $$sroa$13$1;
   if ($51) {
    $55 = $53;
   } else {
    __ZdlPv($52);
    $$pre48 = HEAP32[$2>>2]|0;
    $55 = $$pre48;
   }
  } else {
   $55 = $3;
  }
 } while(0);
 $54 = HEAP32[$1>>2]|0;
 HEAP32[$55>>2] = $54;
 $56 = HEAP32[$2>>2]|0;
 $57 = ((($56)) + 4|0);
 HEAP32[$2>>2] = $57;
 return;
}
function __ZNSt3__214__split_bufferIPjNS_9allocatorIS1_EEE10push_frontEOS1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $$cast = 0, $$in = 0, $$pre = 0, $$pre47 = 0, $$pre48 = 0, $$sroa$13$0 = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ($3|0)==($4|0);
 $6 = $4;
 do {
  if ($5) {
   $7 = ((($0)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($0)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8>>>0)<($10>>>0);
   $$cast = $10;
   if ($11) {
    $12 = $8;
    $13 = (($$cast) - ($12))|0;
    $14 = $13 >> 2;
    $15 = (($14) + 1)|0;
    $16 = (($15|0) / 2)&-1;
    $17 = (($8) + ($16<<2)|0);
    $18 = $3;
    $19 = (($12) - ($18))|0;
    $20 = $19 >> 2;
    $21 = ($20|0)==(0);
    $22 = (0 - ($20))|0;
    $23 = (($17) + ($22<<2)|0);
    if ($21) {
     $$0$i$i = $17;$25 = $8;
    } else {
     _memmove(($23|0),($3|0),($19|0))|0;
     $$pre47 = HEAP32[$7>>2]|0;
     $$0$i$i = $23;$25 = $$pre47;
    }
    HEAP32[$2>>2] = $$0$i$i;
    $24 = (($25) + ($16<<2)|0);
    HEAP32[$7>>2] = $24;
    $55 = $$0$i$i;
    break;
   }
   $26 = (($$cast) - ($6))|0;
   $27 = $26 >> 1;
   $28 = ($27|0)==(0);
   $$sroa$speculated = $28 ? 1 : $27;
   $29 = ($$sroa$speculated>>>0)>(1073741823);
   if ($29) {
    $30 = (___cxa_allocate_exception(8)|0);
    __THREW__ = 0;
    invoke_vii(568,($30|0),(23604|0));
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $33 = ___cxa_find_matching_catch_2()|0;
     $34 = tempRet0;
     ___cxa_free_exception(($30|0));
     ___resumeException($33|0);
     // unreachable;
    } else {
     HEAP32[$30>>2] = (9544);
     ___cxa_throw(($30|0),(1992|0),(506|0));
     // unreachable;
    }
   }
   $35 = (($$sroa$speculated) + 3)|0;
   $36 = $35 >>> 2;
   $37 = $$sroa$speculated << 2;
   $38 = (__Znwj($37)|0);
   $39 = $38;
   $40 = (($38) + ($36<<2)|0);
   $41 = $40;
   $42 = (($38) + ($$sroa$speculated<<2)|0);
   $43 = $42;
   $44 = ($3|0)==($8|0);
   if ($44) {
    $$sroa$13$1 = $41;$53 = $3;
   } else {
    $$in = $40;$$sroa$13$0 = $41;$46 = $3;
    while(1) {
     $45 = HEAP32[$46>>2]|0;
     HEAP32[$$in>>2] = $45;
     $47 = $$sroa$13$0;
     $48 = ((($47)) + 4|0);
     $49 = $48;
     $50 = ((($46)) + 4|0);
     $51 = ($50|0)==($8|0);
     if ($51) {
      break;
     } else {
      $$in = $48;$$sroa$13$0 = $49;$46 = $50;
     }
    }
    $$pre = HEAP32[$0>>2]|0;
    $$sroa$13$1 = $49;$53 = $$pre;
   }
   HEAP32[$0>>2] = $39;
   HEAP32[$2>>2] = $41;
   HEAP32[$7>>2] = $$sroa$13$1;
   HEAP32[$9>>2] = $43;
   $52 = ($53|0)==(0|0);
   if ($52) {
    $55 = $40;
   } else {
    __ZdlPv($53);
    $$pre48 = HEAP32[$2>>2]|0;
    $55 = $$pre48;
   }
  } else {
   $55 = $3;
  }
 } while(0);
 $54 = ((($55)) + -4|0);
 $56 = HEAP32[$1>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = HEAP32[$2>>2]|0;
 $58 = ((($57)) + -4|0);
 HEAP32[$2>>2] = $58;
 return;
}
function __ZNSt3__214__split_bufferIPjRNS_9allocatorIS1_EEE9push_backEOS1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$in = 0, $$pre = 0, $$pre47 = 0, $$pre48 = 0, $$sroa$13$0 = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 $7 = $5;
 $8 = $3;
 do {
  if ($6) {
   $9 = ((($0)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$0>>2]|0;
   $12 = ($10>>>0)>($11>>>0);
   $13 = $11;
   if ($12) {
    $14 = $10;
    $15 = (($14) - ($13))|0;
    $16 = $15 >> 2;
    $17 = (($16) + 1)|0;
    $18 = (($17|0) / -2)&-1;
    $19 = (($10) + ($18<<2)|0);
    $20 = (($8) - ($14))|0;
    $21 = $20 >> 2;
    $22 = ($21|0)==(0);
    if ($22) {
     $25 = $10;
    } else {
     _memmove(($19|0),($10|0),($20|0))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $25 = $$pre47;
    }
    $23 = (($19) + ($21<<2)|0);
    HEAP32[$2>>2] = $23;
    $24 = (($25) + ($18<<2)|0);
    HEAP32[$9>>2] = $24;
    $55 = $23;
    break;
   }
   $26 = (($7) - ($13))|0;
   $27 = $26 >> 1;
   $28 = ($27|0)==(0);
   $$sroa$speculated = $28 ? 1 : $27;
   $29 = ($$sroa$speculated>>>0)>(1073741823);
   if ($29) {
    $30 = (___cxa_allocate_exception(8)|0);
    __THREW__ = 0;
    invoke_vii(568,($30|0),(23604|0));
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $33 = ___cxa_find_matching_catch_2()|0;
     $34 = tempRet0;
     ___cxa_free_exception(($30|0));
     ___resumeException($33|0);
     // unreachable;
    } else {
     HEAP32[$30>>2] = (9544);
     ___cxa_throw(($30|0),(1992|0),(506|0));
     // unreachable;
    }
   }
   $35 = $$sroa$speculated >>> 2;
   $36 = $$sroa$speculated << 2;
   $37 = (__Znwj($36)|0);
   $38 = $37;
   $39 = (($37) + ($35<<2)|0);
   $40 = $39;
   $41 = (($37) + ($$sroa$speculated<<2)|0);
   $42 = $41;
   $43 = ($10|0)==($3|0);
   if ($43) {
    $$sroa$13$1 = $40;$52 = $11;
   } else {
    $$in = $39;$$sroa$13$0 = $40;$45 = $10;
    while(1) {
     $44 = HEAP32[$45>>2]|0;
     HEAP32[$$in>>2] = $44;
     $46 = $$sroa$13$0;
     $47 = ((($46)) + 4|0);
     $48 = $47;
     $49 = ((($45)) + 4|0);
     $50 = ($49|0)==($3|0);
     if ($50) {
      break;
     } else {
      $$in = $47;$$sroa$13$0 = $48;$45 = $49;
     }
    }
    $$pre = HEAP32[$0>>2]|0;
    $$sroa$13$1 = $48;$52 = $$pre;
   }
   HEAP32[$0>>2] = $38;
   HEAP32[$9>>2] = $40;
   HEAP32[$2>>2] = $$sroa$13$1;
   HEAP32[$4>>2] = $42;
   $51 = ($52|0)==(0|0);
   $53 = $$sroa$13$1;
   if ($51) {
    $55 = $53;
   } else {
    __ZdlPv($52);
    $$pre48 = HEAP32[$2>>2]|0;
    $55 = $$pre48;
   }
  } else {
   $55 = $3;
  }
 } while(0);
 $54 = HEAP32[$1>>2]|0;
 HEAP32[$55>>2] = $54;
 $56 = HEAP32[$2>>2]|0;
 $57 = ((($56)) + 4|0);
 HEAP32[$2>>2] = $57;
 return;
}
function __ZNSt3__214__split_bufferIPjRNS_9allocatorIS1_EEE10push_frontERKS1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $$cast = 0, $$in = 0, $$pre = 0, $$pre47 = 0, $$pre48 = 0, $$sroa$13$0 = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ($3|0)==($4|0);
 $6 = $4;
 do {
  if ($5) {
   $7 = ((($0)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($0)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8>>>0)<($10>>>0);
   $$cast = $10;
   if ($11) {
    $12 = $8;
    $13 = (($$cast) - ($12))|0;
    $14 = $13 >> 2;
    $15 = (($14) + 1)|0;
    $16 = (($15|0) / 2)&-1;
    $17 = (($8) + ($16<<2)|0);
    $18 = $3;
    $19 = (($12) - ($18))|0;
    $20 = $19 >> 2;
    $21 = ($20|0)==(0);
    $22 = (0 - ($20))|0;
    $23 = (($17) + ($22<<2)|0);
    if ($21) {
     $$0$i$i = $17;$25 = $8;
    } else {
     _memmove(($23|0),($3|0),($19|0))|0;
     $$pre47 = HEAP32[$7>>2]|0;
     $$0$i$i = $23;$25 = $$pre47;
    }
    HEAP32[$2>>2] = $$0$i$i;
    $24 = (($25) + ($16<<2)|0);
    HEAP32[$7>>2] = $24;
    $55 = $$0$i$i;
    break;
   }
   $26 = (($$cast) - ($6))|0;
   $27 = $26 >> 1;
   $28 = ($27|0)==(0);
   $$sroa$speculated = $28 ? 1 : $27;
   $29 = ($$sroa$speculated>>>0)>(1073741823);
   if ($29) {
    $30 = (___cxa_allocate_exception(8)|0);
    __THREW__ = 0;
    invoke_vii(568,($30|0),(23604|0));
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $33 = ___cxa_find_matching_catch_2()|0;
     $34 = tempRet0;
     ___cxa_free_exception(($30|0));
     ___resumeException($33|0);
     // unreachable;
    } else {
     HEAP32[$30>>2] = (9544);
     ___cxa_throw(($30|0),(1992|0),(506|0));
     // unreachable;
    }
   }
   $35 = (($$sroa$speculated) + 3)|0;
   $36 = $35 >>> 2;
   $37 = $$sroa$speculated << 2;
   $38 = (__Znwj($37)|0);
   $39 = $38;
   $40 = (($38) + ($36<<2)|0);
   $41 = $40;
   $42 = (($38) + ($$sroa$speculated<<2)|0);
   $43 = $42;
   $44 = ($3|0)==($8|0);
   if ($44) {
    $$sroa$13$1 = $41;$53 = $3;
   } else {
    $$in = $40;$$sroa$13$0 = $41;$46 = $3;
    while(1) {
     $45 = HEAP32[$46>>2]|0;
     HEAP32[$$in>>2] = $45;
     $47 = $$sroa$13$0;
     $48 = ((($47)) + 4|0);
     $49 = $48;
     $50 = ((($46)) + 4|0);
     $51 = ($50|0)==($8|0);
     if ($51) {
      break;
     } else {
      $$in = $48;$$sroa$13$0 = $49;$46 = $50;
     }
    }
    $$pre = HEAP32[$0>>2]|0;
    $$sroa$13$1 = $49;$53 = $$pre;
   }
   HEAP32[$0>>2] = $39;
   HEAP32[$2>>2] = $41;
   HEAP32[$7>>2] = $$sroa$13$1;
   HEAP32[$9>>2] = $43;
   $52 = ($53|0)==(0|0);
   if ($52) {
    $55 = $40;
   } else {
    __ZdlPv($53);
    $$pre48 = HEAP32[$2>>2]|0;
    $55 = $$pre48;
   }
  } else {
   $55 = $3;
  }
 } while(0);
 $54 = ((($55)) + -4|0);
 $56 = HEAP32[$1>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = HEAP32[$2>>2]|0;
 $58 = ((($57)) + -4|0);
 HEAP32[$2>>2] = $58;
 return;
}
function __ZNSt3__214__split_bufferIPP4FontNS_9allocatorIS3_EEE9push_backEOS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$in = 0, $$pre = 0, $$pre47 = 0, $$pre48 = 0, $$sroa$13$0 = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 $7 = $5;
 $8 = $3;
 do {
  if ($6) {
   $9 = ((($0)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$0>>2]|0;
   $12 = ($10>>>0)>($11>>>0);
   $13 = $11;
   if ($12) {
    $14 = $10;
    $15 = (($14) - ($13))|0;
    $16 = $15 >> 2;
    $17 = (($16) + 1)|0;
    $18 = (($17|0) / -2)&-1;
    $19 = (($10) + ($18<<2)|0);
    $20 = (($8) - ($14))|0;
    $21 = $20 >> 2;
    $22 = ($21|0)==(0);
    if ($22) {
     $25 = $10;
    } else {
     _memmove(($19|0),($10|0),($20|0))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $25 = $$pre47;
    }
    $23 = (($19) + ($21<<2)|0);
    HEAP32[$2>>2] = $23;
    $24 = (($25) + ($18<<2)|0);
    HEAP32[$9>>2] = $24;
    $55 = $23;
    break;
   }
   $26 = (($7) - ($13))|0;
   $27 = $26 >> 1;
   $28 = ($27|0)==(0);
   $$sroa$speculated = $28 ? 1 : $27;
   $29 = ($$sroa$speculated>>>0)>(1073741823);
   if ($29) {
    $30 = (___cxa_allocate_exception(8)|0);
    __THREW__ = 0;
    invoke_vii(568,($30|0),(23604|0));
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $33 = ___cxa_find_matching_catch_2()|0;
     $34 = tempRet0;
     ___cxa_free_exception(($30|0));
     ___resumeException($33|0);
     // unreachable;
    } else {
     HEAP32[$30>>2] = (9544);
     ___cxa_throw(($30|0),(1992|0),(506|0));
     // unreachable;
    }
   }
   $35 = $$sroa$speculated >>> 2;
   $36 = $$sroa$speculated << 2;
   $37 = (__Znwj($36)|0);
   $38 = $37;
   $39 = (($37) + ($35<<2)|0);
   $40 = $39;
   $41 = (($37) + ($$sroa$speculated<<2)|0);
   $42 = $41;
   $43 = ($10|0)==($3|0);
   if ($43) {
    $$sroa$13$1 = $40;$52 = $11;
   } else {
    $$in = $39;$$sroa$13$0 = $40;$45 = $10;
    while(1) {
     $44 = HEAP32[$45>>2]|0;
     HEAP32[$$in>>2] = $44;
     $46 = $$sroa$13$0;
     $47 = ((($46)) + 4|0);
     $48 = $47;
     $49 = ((($45)) + 4|0);
     $50 = ($49|0)==($3|0);
     if ($50) {
      break;
     } else {
      $$in = $47;$$sroa$13$0 = $48;$45 = $49;
     }
    }
    $$pre = HEAP32[$0>>2]|0;
    $$sroa$13$1 = $48;$52 = $$pre;
   }
   HEAP32[$0>>2] = $38;
   HEAP32[$9>>2] = $40;
   HEAP32[$2>>2] = $$sroa$13$1;
   HEAP32[$4>>2] = $42;
   $51 = ($52|0)==(0|0);
   $53 = $$sroa$13$1;
   if ($51) {
    $55 = $53;
   } else {
    __ZdlPv($52);
    $$pre48 = HEAP32[$2>>2]|0;
    $55 = $$pre48;
   }
  } else {
   $55 = $3;
  }
 } while(0);
 $54 = HEAP32[$1>>2]|0;
 HEAP32[$55>>2] = $54;
 $56 = HEAP32[$2>>2]|0;
 $57 = ((($56)) + 4|0);
 HEAP32[$2>>2] = $57;
 return;
}
function __ZNSt3__214__split_bufferIPP4FontNS_9allocatorIS3_EEE10push_frontEOS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $$cast = 0, $$in = 0, $$pre = 0, $$pre47 = 0, $$pre48 = 0, $$sroa$13$0 = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ($3|0)==($4|0);
 $6 = $4;
 do {
  if ($5) {
   $7 = ((($0)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($0)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8>>>0)<($10>>>0);
   $$cast = $10;
   if ($11) {
    $12 = $8;
    $13 = (($$cast) - ($12))|0;
    $14 = $13 >> 2;
    $15 = (($14) + 1)|0;
    $16 = (($15|0) / 2)&-1;
    $17 = (($8) + ($16<<2)|0);
    $18 = $3;
    $19 = (($12) - ($18))|0;
    $20 = $19 >> 2;
    $21 = ($20|0)==(0);
    $22 = (0 - ($20))|0;
    $23 = (($17) + ($22<<2)|0);
    if ($21) {
     $$0$i$i = $17;$25 = $8;
    } else {
     _memmove(($23|0),($3|0),($19|0))|0;
     $$pre47 = HEAP32[$7>>2]|0;
     $$0$i$i = $23;$25 = $$pre47;
    }
    HEAP32[$2>>2] = $$0$i$i;
    $24 = (($25) + ($16<<2)|0);
    HEAP32[$7>>2] = $24;
    $55 = $$0$i$i;
    break;
   }
   $26 = (($$cast) - ($6))|0;
   $27 = $26 >> 1;
   $28 = ($27|0)==(0);
   $$sroa$speculated = $28 ? 1 : $27;
   $29 = ($$sroa$speculated>>>0)>(1073741823);
   if ($29) {
    $30 = (___cxa_allocate_exception(8)|0);
    __THREW__ = 0;
    invoke_vii(568,($30|0),(23604|0));
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $33 = ___cxa_find_matching_catch_2()|0;
     $34 = tempRet0;
     ___cxa_free_exception(($30|0));
     ___resumeException($33|0);
     // unreachable;
    } else {
     HEAP32[$30>>2] = (9544);
     ___cxa_throw(($30|0),(1992|0),(506|0));
     // unreachable;
    }
   }
   $35 = (($$sroa$speculated) + 3)|0;
   $36 = $35 >>> 2;
   $37 = $$sroa$speculated << 2;
   $38 = (__Znwj($37)|0);
   $39 = $38;
   $40 = (($38) + ($36<<2)|0);
   $41 = $40;
   $42 = (($38) + ($$sroa$speculated<<2)|0);
   $43 = $42;
   $44 = ($3|0)==($8|0);
   if ($44) {
    $$sroa$13$1 = $41;$53 = $3;
   } else {
    $$in = $40;$$sroa$13$0 = $41;$46 = $3;
    while(1) {
     $45 = HEAP32[$46>>2]|0;
     HEAP32[$$in>>2] = $45;
     $47 = $$sroa$13$0;
     $48 = ((($47)) + 4|0);
     $49 = $48;
     $50 = ((($46)) + 4|0);
     $51 = ($50|0)==($8|0);
     if ($51) {
      break;
     } else {
      $$in = $48;$$sroa$13$0 = $49;$46 = $50;
     }
    }
    $$pre = HEAP32[$0>>2]|0;
    $$sroa$13$1 = $49;$53 = $$pre;
   }
   HEAP32[$0>>2] = $39;
   HEAP32[$2>>2] = $41;
   HEAP32[$7>>2] = $$sroa$13$1;
   HEAP32[$9>>2] = $43;
   $52 = ($53|0)==(0|0);
   if ($52) {
    $55 = $40;
   } else {
    __ZdlPv($53);
    $$pre48 = HEAP32[$2>>2]|0;
    $55 = $$pre48;
   }
  } else {
   $55 = $3;
  }
 } while(0);
 $54 = ((($55)) + -4|0);
 $56 = HEAP32[$1>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = HEAP32[$2>>2]|0;
 $58 = ((($57)) + -4|0);
 HEAP32[$2>>2] = $58;
 return;
}
function __ZNSt3__214__split_bufferIPP4FontRNS_9allocatorIS3_EEE9push_backEOS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$in = 0, $$pre = 0, $$pre47 = 0, $$pre48 = 0, $$sroa$13$0 = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 $7 = $5;
 $8 = $3;
 do {
  if ($6) {
   $9 = ((($0)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$0>>2]|0;
   $12 = ($10>>>0)>($11>>>0);
   $13 = $11;
   if ($12) {
    $14 = $10;
    $15 = (($14) - ($13))|0;
    $16 = $15 >> 2;
    $17 = (($16) + 1)|0;
    $18 = (($17|0) / -2)&-1;
    $19 = (($10) + ($18<<2)|0);
    $20 = (($8) - ($14))|0;
    $21 = $20 >> 2;
    $22 = ($21|0)==(0);
    if ($22) {
     $25 = $10;
    } else {
     _memmove(($19|0),($10|0),($20|0))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $25 = $$pre47;
    }
    $23 = (($19) + ($21<<2)|0);
    HEAP32[$2>>2] = $23;
    $24 = (($25) + ($18<<2)|0);
    HEAP32[$9>>2] = $24;
    $55 = $23;
    break;
   }
   $26 = (($7) - ($13))|0;
   $27 = $26 >> 1;
   $28 = ($27|0)==(0);
   $$sroa$speculated = $28 ? 1 : $27;
   $29 = ($$sroa$speculated>>>0)>(1073741823);
   if ($29) {
    $30 = (___cxa_allocate_exception(8)|0);
    __THREW__ = 0;
    invoke_vii(568,($30|0),(23604|0));
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $33 = ___cxa_find_matching_catch_2()|0;
     $34 = tempRet0;
     ___cxa_free_exception(($30|0));
     ___resumeException($33|0);
     // unreachable;
    } else {
     HEAP32[$30>>2] = (9544);
     ___cxa_throw(($30|0),(1992|0),(506|0));
     // unreachable;
    }
   }
   $35 = $$sroa$speculated >>> 2;
   $36 = $$sroa$speculated << 2;
   $37 = (__Znwj($36)|0);
   $38 = $37;
   $39 = (($37) + ($35<<2)|0);
   $40 = $39;
   $41 = (($37) + ($$sroa$speculated<<2)|0);
   $42 = $41;
   $43 = ($10|0)==($3|0);
   if ($43) {
    $$sroa$13$1 = $40;$52 = $11;
   } else {
    $$in = $39;$$sroa$13$0 = $40;$45 = $10;
    while(1) {
     $44 = HEAP32[$45>>2]|0;
     HEAP32[$$in>>2] = $44;
     $46 = $$sroa$13$0;
     $47 = ((($46)) + 4|0);
     $48 = $47;
     $49 = ((($45)) + 4|0);
     $50 = ($49|0)==($3|0);
     if ($50) {
      break;
     } else {
      $$in = $47;$$sroa$13$0 = $48;$45 = $49;
     }
    }
    $$pre = HEAP32[$0>>2]|0;
    $$sroa$13$1 = $48;$52 = $$pre;
   }
   HEAP32[$0>>2] = $38;
   HEAP32[$9>>2] = $40;
   HEAP32[$2>>2] = $$sroa$13$1;
   HEAP32[$4>>2] = $42;
   $51 = ($52|0)==(0|0);
   $53 = $$sroa$13$1;
   if ($51) {
    $55 = $53;
   } else {
    __ZdlPv($52);
    $$pre48 = HEAP32[$2>>2]|0;
    $55 = $$pre48;
   }
  } else {
   $55 = $3;
  }
 } while(0);
 $54 = HEAP32[$1>>2]|0;
 HEAP32[$55>>2] = $54;
 $56 = HEAP32[$2>>2]|0;
 $57 = ((($56)) + 4|0);
 HEAP32[$2>>2] = $57;
 return;
}
function __ZNSt3__214__split_bufferIPP4FontRNS_9allocatorIS3_EEE10push_frontERKS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $$cast = 0, $$in = 0, $$pre = 0, $$pre47 = 0, $$pre48 = 0, $$sroa$13$0 = 0, $$sroa$13$1 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ($3|0)==($4|0);
 $6 = $4;
 do {
  if ($5) {
   $7 = ((($0)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($0)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8>>>0)<($10>>>0);
   $$cast = $10;
   if ($11) {
    $12 = $8;
    $13 = (($$cast) - ($12))|0;
    $14 = $13 >> 2;
    $15 = (($14) + 1)|0;
    $16 = (($15|0) / 2)&-1;
    $17 = (($8) + ($16<<2)|0);
    $18 = $3;
    $19 = (($12) - ($18))|0;
    $20 = $19 >> 2;
    $21 = ($20|0)==(0);
    $22 = (0 - ($20))|0;
    $23 = (($17) + ($22<<2)|0);
    if ($21) {
     $$0$i$i = $17;$25 = $8;
    } else {
     _memmove(($23|0),($3|0),($19|0))|0;
     $$pre47 = HEAP32[$7>>2]|0;
     $$0$i$i = $23;$25 = $$pre47;
    }
    HEAP32[$2>>2] = $$0$i$i;
    $24 = (($25) + ($16<<2)|0);
    HEAP32[$7>>2] = $24;
    $55 = $$0$i$i;
    break;
   }
   $26 = (($$cast) - ($6))|0;
   $27 = $26 >> 1;
   $28 = ($27|0)==(0);
   $$sroa$speculated = $28 ? 1 : $27;
   $29 = ($$sroa$speculated>>>0)>(1073741823);
   if ($29) {
    $30 = (___cxa_allocate_exception(8)|0);
    __THREW__ = 0;
    invoke_vii(568,($30|0),(23604|0));
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $33 = ___cxa_find_matching_catch_2()|0;
     $34 = tempRet0;
     ___cxa_free_exception(($30|0));
     ___resumeException($33|0);
     // unreachable;
    } else {
     HEAP32[$30>>2] = (9544);
     ___cxa_throw(($30|0),(1992|0),(506|0));
     // unreachable;
    }
   }
   $35 = (($$sroa$speculated) + 3)|0;
   $36 = $35 >>> 2;
   $37 = $$sroa$speculated << 2;
   $38 = (__Znwj($37)|0);
   $39 = $38;
   $40 = (($38) + ($36<<2)|0);
   $41 = $40;
   $42 = (($38) + ($$sroa$speculated<<2)|0);
   $43 = $42;
   $44 = ($3|0)==($8|0);
   if ($44) {
    $$sroa$13$1 = $41;$53 = $3;
   } else {
    $$in = $40;$$sroa$13$0 = $41;$46 = $3;
    while(1) {
     $45 = HEAP32[$46>>2]|0;
     HEAP32[$$in>>2] = $45;
     $47 = $$sroa$13$0;
     $48 = ((($47)) + 4|0);
     $49 = $48;
     $50 = ((($46)) + 4|0);
     $51 = ($50|0)==($8|0);
     if ($51) {
      break;
     } else {
      $$in = $48;$$sroa$13$0 = $49;$46 = $50;
     }
    }
    $$pre = HEAP32[$0>>2]|0;
    $$sroa$13$1 = $49;$53 = $$pre;
   }
   HEAP32[$0>>2] = $39;
   HEAP32[$2>>2] = $41;
   HEAP32[$7>>2] = $$sroa$13$1;
   HEAP32[$9>>2] = $43;
   $52 = ($53|0)==(0|0);
   if ($52) {
    $55 = $40;
   } else {
    __ZdlPv($53);
    $$pre48 = HEAP32[$2>>2]|0;
    $55 = $$pre48;
   }
  } else {
   $55 = $3;
  }
 } while(0);
 $54 = ((($55)) + -4|0);
 $56 = HEAP32[$1>>2]|0;
 HEAP32[$54>>2] = $56;
 $57 = HEAP32[$2>>2]|0;
 $58 = ((($57)) + -4|0);
 HEAP32[$2>>2] = $58;
 return;
}
function __ZN12TextRenderer6layoutE4RECT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0.0, $$0 = 0.0, $$04360 = 0, $$04457 = 0.0, $$045 = 0.0, $$sroa$048$0$$sroa$048$0$5059 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0;
 var $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0.0, $trunc = 0, $trunc$clear = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 96|0);
 dest=$3; src=$1; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $4 = ((($0)) + 40|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5&255) >>> 4;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$0 = 0.0;
 } else {
  $8 = ((($1)) + 12|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$8>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$8+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$8+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$8+3>>0];$9 = +HEAPF32[tempDoublePtr>>2];
  $10 = ((($0)) + 46|0);
  HEAP16[tempDoublePtr>>1]=HEAP16[$10>>1];HEAP16[tempDoublePtr+2>>1]=HEAP16[$10+2>>1];$11 = +HEAPF32[tempDoublePtr>>2];
  $12 = $9 - $11;
  $13 = ($6<<24>>24)==(2);
  $14 = $12 * 0.5;
  $$ = $13 ? $14 : $12;
  $$0 = $$;
 }
 $15 = ((($0)) + 80|0);
 $16 = ((($0)) + 84|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$15>>2]|0;
 $19 = ($17|0)==($18|0);
 if ($19) {
  $22 = ((($0)) + 76|0);
  HEAP8[$22>>0] = 0;
  STACKTOP = sp;return;
 }
 $20 = ((($1)) + 8|0);
 $21 = ((($1)) + 4|0);
 $$04360 = 0;$24 = $18;
 while(1) {
  $23 = $24;
  $25 = (($23) + (($$04360*36)|0)|0);
  $26 = $1;
  $27 = $26;
  $28 = HEAPU8[$27>>0]|(HEAPU8[$27+1>>0]<<8)|(HEAPU8[$27+2>>0]<<16)|(HEAPU8[$27+3>>0]<<24);
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAPU8[$30>>0]|(HEAPU8[$30+1>>0]<<8)|(HEAPU8[$30+2>>0]<<16)|(HEAPU8[$30+3>>0]<<24);
  $32 = $25;
  $33 = $32;
  HEAP8[$33>>0]=$28&255;HEAP8[$33+1>>0]=($28>>8)&255;HEAP8[$33+2>>0]=($28>>16)&255;HEAP8[$33+3>>0]=$28>>24;
  $34 = (($32) + 4)|0;
  $35 = $34;
  HEAP8[$35>>0]=$31&255;HEAP8[$35+1>>0]=($31>>8)&255;HEAP8[$35+2>>0]=($31>>16)&255;HEAP8[$35+3>>0]=$31>>24;
  $36 = (((($23) + (($$04360*36)|0)|0)) + 4|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $$0 + $37;
  HEAPF32[$36>>2] = $38;
  HEAP8[tempDoublePtr>>0]=HEAP8[$20>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$20+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$20+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$20+3>>0];$39 = +HEAPF32[tempDoublePtr>>2];
  $40 = (((($23) + (($$04360*36)|0)|0)) + 8|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $39 - $41;
  $43 = $42 > 0.0;
  $44 = (HEAP32[tempDoublePtr>>2]=$28,+HEAPF32[tempDoublePtr>>2]);
  L9: do {
   if ($43) {
    $trunc = HEAP8[$4>>0]|0;
    $trunc$clear = $trunc & 15;
    switch ($trunc$clear<<24>>24) {
    case 0:  {
     $90 = $44;
     break L9;
     break;
    }
    case 2:  {
     $45 = $42 * 0.5;
     $$045 = $45;
     break;
    }
    default: {
     $$045 = $42;
    }
    }
    $46 = $$045 + $44;
    HEAPF32[$25>>2] = $46;
    $90 = $46;
   } else {
    $90 = $44;
   }
  } while(0);
  $47 = (((($23) + (($$04360*36)|0)|0)) + 20|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (((($23) + (($$04360*36)|0)|0)) + 24|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($48|0)==($50|0);
  if (!($51)) {
   $52 = (((($23) + (($$04360*36)|0)|0)) + 16|0);
   $$04457 = $90;$$sroa$048$0$$sroa$048$0$5059 = $48;
   while(1) {
    $63 = HEAP32[$$sroa$048$0$$sroa$048$0$5059>>2]|0;
    $64 = ((($63)) + 24|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (+($65|0));
    $67 = $$04457 + $66;
    $68 = +HEAPF32[$52>>2];
    $69 = $38 + $68;
    $70 = ((($63)) + 20|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ((($63)) + 28|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (($73) + ($71))|0;
    $75 = (+($74|0));
    $76 = $69 - $75;
    $77 = ((($63)) + 32|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ((($78)) + 24|0);
    $80 = +HEAPF32[$79>>2];
    $81 = ((($78)) + 28|0);
    $82 = +HEAPF32[$81>>2];
    __Z9RECT_Makeffff($2,$67,$76,$80,$82);
    $83 = ((($$sroa$048$0$$sroa$048$0$5059)) + 4|0);
    dest=$83; src=$2; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $84 = ((($63)) + 36|0);
    $85 = +HEAPF32[$84>>2];
    $86 = $$04457 + $85;
    $87 = ((($$sroa$048$0$$sroa$048$0$5059)) + 24|0);
    $88 = HEAP32[$49>>2]|0;
    $89 = ($87|0)==($88|0);
    if ($89) {
     break;
    } else {
     $$04457 = $86;$$sroa$048$0$$sroa$048$0$5059 = $87;
    }
   }
  }
  $53 = (((($23) + (($$04360*36)|0)|0)) + 12|0);
  $54 = +HEAPF32[$53>>2];
  HEAP8[tempDoublePtr>>0]=HEAP8[$21>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$21+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$21+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$21+3>>0];$55 = +HEAPF32[tempDoublePtr>>2];
  $56 = $54 + $55;
  HEAPF32[tempDoublePtr>>2]=$56;HEAP8[$21>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$21+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$21+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$21+3>>0]=HEAP8[tempDoublePtr+3>>0];
  $57 = (($$04360) + 1)|0;
  $58 = HEAP32[$16>>2]|0;
  $59 = HEAP32[$15>>2]|0;
  $60 = (($58) - ($59))|0;
  $61 = (($60|0) / 36)&-1;
  $62 = ($57>>>0)<($61>>>0);
  if ($62) {
   $$04360 = $57;$24 = $59;
  } else {
   break;
  }
 }
 $22 = ((($0)) + 76|0);
 HEAP8[$22>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN12TextRenderer15updateRenderOpsEP4View($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$ph$i$i$i$i = 0, $$018$i$i$i = 0, $$023$i$i = 0, $$024$i$i$i$i = 0, $$025$i$i$i$i = 0, $$034 = 0, $$039118 = 0, $$4 = 0, $$438 = 0, $$in$i$i$i$i = 0, $$pre$i$i$i$i = 0, $$pre$phiZ2D = 0, $$promoted = 0, $$sroa$0$sroa$0 = 0, $$sroa$048$0$$sroa$048$0$$sroa$0$0$copyload$i95 = 0, $$sroa$048$0$$sroa$048$0$$sroa$0$0$copyload$i95110 = 0, $$sroa$048$0$$sroa$048$0$$sroa$0$0$copyload$i95110$phi = 0, $$sroa$048$0$$sroa$048$0$49109 = 0;
 var $$sroa$068 = 0, $$sroa$068$0$$sroa$068$0$$sroa$0$0$copyload$i41 = 0, $$sroa$068$0$$sroa$068$0$$sroa$0$0$copyload$i41137 = 0, $$sroa$068$0$$sroa$068$0$70$pre = 0, $$sroa$068$0$$sroa$068$0$73111$cast = 0, $$sroa$081$0117 = 0, $$sroa$081$1$lcssa = 0, $$sroa$081$1112 = 0, $$sroa$081$2 = 0, $$sroa$081$3 = 0, $$sroa$091$0 = 0, $$sroa$091$0122 = 0, $$sroa$091$0123 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 24|0;
 $3 = sp + 8|0;
 $$sroa$068 = sp + 4|0;
 $$sroa$0$sroa$0 = sp;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vii[$6 & 1023]($2,$1);
 $7 = ((($1)) + 208|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($2)) + 4|0);
 HEAP8[$9>>0]=$8&255;HEAP8[$9+1>>0]=($8>>8)&255;HEAP8[$9+2>>0]=($8>>16)&255;HEAP8[$9+3>>0]=$8>>24;
 $10 = ((($0)) + 64|0);
 $11 = ((($0)) + 68|0);
 $$sroa$091$0122 = HEAP32[$11>>2]|0;
 $12 = $$sroa$091$0122;
 $13 = ($12|0)==($10|0);
 if (!($13)) {
  $$sroa$091$0123 = $$sroa$091$0122;$43 = $12;
  while(1) {
   $36 = $$sroa$091$0123;
   $37 = ((($36)) + 8|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = HEAP32[$1>>2]|0;
   $40 = ((($39)) + 168|0);
   $41 = HEAP32[$40>>2]|0;
   FUNCTION_TABLE_vii[$41 & 1023]($1,$38);
   __ZN12TextRenderOp5resetEv($38);
   $42 = ((($43)) + 4|0);
   $$sroa$091$0 = HEAP32[$42>>2]|0;
   $44 = $$sroa$091$0;
   $45 = ($44|0)==($10|0);
   if ($45) {
    break;
   } else {
    $$sroa$091$0123 = $$sroa$091$0;$43 = $44;
   }
  }
 }
 $14 = ((($0)) + 72|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if (!($16)) {
  $17 = HEAP32[$11>>2]|0;
  $18 = HEAP32[$10>>2]|0;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$17>>2]|0;
  $22 = ((($21)) + 4|0);
  HEAP32[$22>>2] = $20;
  $23 = HEAP32[$19>>2]|0;
  HEAP32[$23>>2] = $21;
  HEAP32[$14>>2] = 0;
  $24 = ($17|0)==($10|0);
  if (!($24)) {
   $$023$i$i = $17;
   while(1) {
    $25 = ((($$023$i$i)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    __ZdlPv($$023$i$i);
    $27 = ($26|0)==($10|0);
    if ($27) {
     break;
    } else {
     $$023$i$i = $26;
    }
   }
  }
 }
 $28 = ((($3)) + 4|0);
 HEAP32[$28>>2] = 0;
 $29 = ((($3)) + 8|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($3)) + 4|0);
 HEAP32[$3>>2] = $30;
 $31 = ((($0)) + 80|0);
 $32 = ((($0)) + 84|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$31>>2]|0;
 $35 = ($33|0)==($34|0);
 L11: do {
  if (!($35)) {
   $$039118 = 0;$$sroa$081$0117 = 0;$50 = $34;
   L13: while(1) {
    $49 = $50;
    $51 = (($49) + (($$039118*36)|0)|0);
    __THREW__ = 0;
    $52 = (invoke_iii(611,($2|0),($51|0))|0);
    $53 = __THREW__; __THREW__ = 0;
    $54 = $53&1;
    if ($54) {
     label = 15;
     break;
    }
    if ($52) {
     $55 = (((($49) + (($$039118*36)|0)|0)) + 20|0);
     $56 = HEAP32[$55>>2]|0;
     HEAP32[$$sroa$068>>2] = $56;
     $57 = (((($49) + (($$039118*36)|0)|0)) + 24|0);
     $58 = HEAP32[$57>>2]|0;
     $$sroa$068$0$$sroa$068$0$73111$cast = $56;
     $59 = ($$sroa$068$0$$sroa$068$0$73111$cast|0)==($58|0);
     if ($59) {
      $$sroa$081$1$lcssa = $$sroa$081$0117;
     } else {
      $$sroa$068$0$$sroa$068$0$$sroa$0$0$copyload$i41137 = $$sroa$068$0$$sroa$068$0$73111$cast;$$sroa$081$1112 = $$sroa$081$0117;
      while(1) {
       $62 = $$sroa$081$1112;
       $63 = ((($$sroa$068$0$$sroa$068$0$$sroa$0$0$copyload$i41137)) + 20|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = ($62|0)==($64|0);
       if ($65) {
        $$sroa$068$0$$sroa$068$0$$sroa$0$0$copyload$i41 = $$sroa$068$0$$sroa$068$0$$sroa$0$0$copyload$i41137;$$sroa$081$2 = $$sroa$081$1112;
       } else {
        $66 = $64;
        $67 = ((($64)) + 8|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = ($68|0)==(0|0);
        if ($69) {
         __THREW__ = 0;
         $70 = (invoke_ii(523,108)|0);
         $71 = __THREW__; __THREW__ = 0;
         $72 = $71&1;
         if ($72) {
          label = 25;
          break L13;
         }
         __THREW__ = 0;
         invoke_viii(653,($70|0),($1|0),($64|0));
         $73 = __THREW__; __THREW__ = 0;
         $74 = $73&1;
         if ($74) {
          label = 26;
          break L13;
         }
         $75 = HEAP32[$67>>2]|0;
         $76 = ($75|0)==($70|0);
         if (!($76)) {
          $77 = ($75|0)==(0|0);
          if (!($77)) {
           __THREW__ = 0;
           invoke_vi(525,($75|0));
           $78 = __THREW__; __THREW__ = 0;
           $79 = $78&1;
           if ($79) {
            label = 25;
            break L13;
           }
          }
          HEAP32[$67>>2] = $70;
          $80 = ($70|0)==(0|0);
          if (!($80)) {
           __THREW__ = 0;
           invoke_vi(526,($70|0));
           $81 = __THREW__; __THREW__ = 0;
           $82 = $81&1;
           if ($82) {
            label = 25;
            break L13;
           }
          }
         }
        }
        $87 = HEAP32[$30>>2]|0;
        $88 = ($87|0)==(0|0);
        do {
         if ($88) {
          $$018$i$i$i = $30;$$025$i$i$i$i = $30;
         } else {
          $$0$i$i$i$i = $28;$$024$i$i$i$i = $87;
          while(1) {
           $89 = ((($$024$i$i$i$i)) + 16|0);
           $90 = HEAP32[$89>>2]|0;
           $91 = ($64>>>0)<($90>>>0);
           if ($91) {
            $92 = HEAP32[$$024$i$i$i$i>>2]|0;
            $93 = ($92|0)==(0|0);
            if ($93) {
             label = 31;
             break;
            } else {
             $$0$ph$i$i$i$i = $$024$i$i$i$i;$$in$i$i$i$i = $92;
            }
           } else {
            $94 = ($90>>>0)<($64>>>0);
            if (!($94)) {
             label = 35;
             break;
            }
            $95 = ((($$024$i$i$i$i)) + 4|0);
            $96 = HEAP32[$95>>2]|0;
            $97 = ($96|0)==(0|0);
            if ($97) {
             label = 34;
             break;
            } else {
             $$0$ph$i$i$i$i = $95;$$in$i$i$i$i = $96;
            }
           }
           $$0$i$i$i$i = $$0$ph$i$i$i$i;$$024$i$i$i$i = $$in$i$i$i$i;
          }
          if ((label|0) == 31) {
           label = 0;
           $$018$i$i$i = $$024$i$i$i$i;$$025$i$i$i$i = $$024$i$i$i$i;
           break;
          }
          else if ((label|0) == 34) {
           label = 0;
           $$018$i$i$i = $$024$i$i$i$i;$$025$i$i$i$i = $95;
           break;
          }
          else if ((label|0) == 35) {
           label = 0;
           $$018$i$i$i = $$024$i$i$i$i;$$025$i$i$i$i = $$0$i$i$i$i;
           break;
          }
         }
        } while(0);
        $98 = HEAP32[$$025$i$i$i$i>>2]|0;
        $99 = ($98|0)==(0|0);
        if ($99) {
         __THREW__ = 0;
         $100 = (invoke_ii(527,20)|0);
         $101 = __THREW__; __THREW__ = 0;
         $102 = $101&1;
         if ($102) {
          label = 25;
          break L13;
         }
         $103 = ((($100)) + 16|0);
         HEAP32[$103>>2] = $66;
         HEAP32[$100>>2] = 0;
         $104 = ((($100)) + 4|0);
         HEAP32[$104>>2] = 0;
         $105 = ((($100)) + 8|0);
         HEAP32[$105>>2] = $$018$i$i$i;
         HEAP32[$$025$i$i$i$i>>2] = $100;
         $106 = HEAP32[$3>>2]|0;
         $107 = HEAP32[$106>>2]|0;
         $108 = ($107|0)==(0|0);
         if ($108) {
          $111 = $100;
         } else {
          $109 = $107;
          HEAP32[$3>>2] = $109;
          $$pre$i$i$i$i = HEAP32[$$025$i$i$i$i>>2]|0;
          $111 = $$pre$i$i$i$i;
         }
         $110 = HEAP32[$28>>2]|0;
         __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($110,$111);
         $112 = HEAP32[$29>>2]|0;
         $113 = (($112) + 1)|0;
         HEAP32[$29>>2] = $113;
         $114 = HEAP32[$67>>2]|0;
         __THREW__ = 0;
         $115 = (invoke_ii(527,12)|0);
         $116 = __THREW__; __THREW__ = 0;
         $117 = $116&1;
         if ($117) {
          label = 42;
          break L13;
         }
         $118 = ((($115)) + 8|0);
         HEAP32[$118>>2] = $114;
         $119 = ((($115)) + 4|0);
         HEAP32[$119>>2] = $10;
         $120 = HEAP32[$10>>2]|0;
         HEAP32[$115>>2] = $120;
         $121 = ((($120)) + 4|0);
         HEAP32[$121>>2] = $115;
         HEAP32[$10>>2] = $115;
         $122 = HEAP32[$14>>2]|0;
         $123 = (($122) + 1)|0;
         HEAP32[$14>>2] = $123;
         $$sroa$068$0$$sroa$068$0$70$pre = HEAP32[$$sroa$068>>2]|0;
         $$sroa$068$0$$sroa$068$0$$sroa$0$0$copyload$i41 = $$sroa$068$0$$sroa$068$0$70$pre;$$sroa$081$2 = $66;
        } else {
         $$sroa$068$0$$sroa$068$0$$sroa$0$0$copyload$i41 = $$sroa$068$0$$sroa$068$0$$sroa$0$0$copyload$i41137;$$sroa$081$2 = $66;
        }
       }
       $126 = HEAP32[$$sroa$068$0$$sroa$068$0$$sroa$0$0$copyload$i41>>2]|0;
       $127 = ((($126)) + 12|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = ($128|0)==(32);
       if (!($129)) {
        $130 = $$sroa$081$2;
        $131 = ((($130)) + 8|0);
        $132 = HEAP32[$131>>2]|0;
        $133 = ((($$sroa$068$0$$sroa$068$0$$sroa$0$0$copyload$i41)) + 4|0);
        __THREW__ = 0;
        invoke_viii(654,($132|0),($126|0),($133|0));
        $134 = __THREW__; __THREW__ = 0;
        $135 = $134&1;
        if ($135) {
         label = 25;
         break L13;
        }
       }
       $136 = ((($$sroa$068$0$$sroa$068$0$$sroa$0$0$copyload$i41)) + 24|0);
       HEAP32[$$sroa$068>>2] = $136;
       $137 = HEAP32[$57>>2]|0;
       $138 = ($136|0)==($137|0);
       if ($138) {
        $$sroa$081$1$lcssa = $$sroa$081$2;
        break;
       } else {
        $$sroa$068$0$$sroa$068$0$$sroa$0$0$copyload$i41137 = $136;$$sroa$081$1112 = $$sroa$081$2;
       }
      }
     }
     $$sroa$081$3 = $$sroa$081$1$lcssa;
    } else {
     $$sroa$081$3 = $$sroa$081$0117;
    }
    $139 = (($$039118) + 1)|0;
    $140 = HEAP32[$32>>2]|0;
    $141 = HEAP32[$31>>2]|0;
    $142 = (($140) - ($141))|0;
    $143 = (($142|0) / 36)&-1;
    $144 = ($139>>>0)<($143>>>0);
    if ($144) {
     $$039118 = $139;$$sroa$081$0117 = $$sroa$081$3;$50 = $141;
    } else {
     break L11;
    }
   }
   if ((label|0) == 15) {
    $60 = ___cxa_find_matching_catch_2()|0;
    $61 = tempRet0;
    $$4 = $61;$$438 = $60;$$pre$phiZ2D = $30;
    $161 = HEAP32[$$pre$phiZ2D>>2]|0;
    __ZNSt3__26__treeIP17_TEXTRENDERPARAMSNS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($3,$161);
    ___resumeException($$438|0);
    // unreachable;
   }
   else if ((label|0) == 25) {
    $83 = ___cxa_find_matching_catch_2()|0;
    $84 = tempRet0;
    $$0 = $84;$$034 = $83;
   }
   else if ((label|0) == 26) {
    $85 = ___cxa_find_matching_catch_2()|0;
    $86 = tempRet0;
    __ZdlPv($70);
    $$0 = $86;$$034 = $85;
   }
   else if ((label|0) == 42) {
    $124 = ___cxa_find_matching_catch_2()|0;
    $125 = tempRet0;
    $$0 = $125;$$034 = $124;
   }
   $$4 = $$0;$$438 = $$034;$$pre$phiZ2D = $30;
   $161 = HEAP32[$$pre$phiZ2D>>2]|0;
   __ZNSt3__26__treeIP17_TEXTRENDERPARAMSNS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($3,$161);
   ___resumeException($$438|0);
   // unreachable;
  }
 } while(0);
 $46 = HEAP32[$11>>2]|0;
 $47 = $46;
 $48 = ($47|0)==($10|0);
 if ($48) {
  $145 = ((($0)) + 76|0);
  HEAP8[$145>>0] = 1;
  $146 = HEAP32[$30>>2]|0;
  __ZNSt3__26__treeIP17_TEXTRENDERPARAMSNS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($3,$146);
  STACKTOP = sp;return;
 }
 $$promoted = HEAP32[$$sroa$0$sroa$0>>2]|0;
 $$sroa$048$0$$sroa$048$0$$sroa$0$0$copyload$i95 = $47;$$sroa$048$0$$sroa$048$0$$sroa$0$0$copyload$i95110 = $$promoted;$$sroa$048$0$$sroa$048$0$49109 = $46;
 while(1) {
  $147 = HEAP32[$1>>2]|0;
  $148 = ((($147)) + 160|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = $$sroa$048$0$$sroa$048$0$49109;
  $151 = ((($150)) + 8|0);
  $152 = HEAP32[$151>>2]|0;
  __THREW__ = 0;
  invoke_vii($149|0,($1|0),($152|0));
  $153 = __THREW__; __THREW__ = 0;
  $154 = $153&1;
  if ($154) {
   label = 52;
   break;
  }
  $155 = ((($$sroa$048$0$$sroa$048$0$$sroa$0$0$copyload$i95)) + 4|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = $156;
  $158 = ($157|0)==($10|0);
  if ($158) {
   label = 48;
   break;
  } else {
   $$sroa$048$0$$sroa$048$0$$sroa$0$0$copyload$i95110$phi = $$sroa$048$0$$sroa$048$0$$sroa$0$0$copyload$i95;$$sroa$048$0$$sroa$048$0$$sroa$0$0$copyload$i95 = $157;$$sroa$048$0$$sroa$048$0$49109 = $156;$$sroa$048$0$$sroa$048$0$$sroa$0$0$copyload$i95110 = $$sroa$048$0$$sroa$048$0$$sroa$0$0$copyload$i95110$phi;
  }
 }
 if ((label|0) == 48) {
  HEAP32[$$sroa$0$sroa$0>>2] = $$sroa$048$0$$sroa$048$0$$sroa$0$0$copyload$i95;
  $145 = ((($0)) + 76|0);
  HEAP8[$145>>0] = 1;
  $146 = HEAP32[$30>>2]|0;
  __ZNSt3__26__treeIP17_TEXTRENDERPARAMSNS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($3,$146);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 52) {
  $159 = ___cxa_find_matching_catch_2()|0;
  $160 = tempRet0;
  HEAP32[$$sroa$0$sroa$0>>2] = $$sroa$048$0$$sroa$048$0$$sroa$0$0$copyload$i95110;
  $$4 = $160;$$438 = $159;$$pre$phiZ2D = $30;
  $161 = HEAP32[$$pre$phiZ2D>>2]|0;
  __ZNSt3__26__treeIP17_TEXTRENDERPARAMSNS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($3,$161);
  ___resumeException($$438|0);
  // unreachable;
 }
}
function __ZNSt3__26__treeIP17_TEXTRENDERPARAMSNS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 } else {
  $3 = HEAP32[$1>>2]|0;
  __ZNSt3__26__treeIP17_TEXTRENDERPARAMSNS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($0,$3);
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  __ZNSt3__26__treeIP17_TEXTRENDERPARAMSNS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($0,$5);
  __ZdlPv($1);
  return;
 }
}
function __ZN12TextRenderer14getGlyphOriginEiP6_POINTPfS2_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$ph = 0, $$01328$i = 0, $$phi$trans$insert = 0, $$phi$trans$insert45 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre47 = 0, $$sink3 = 0.0, $$sroa$017$0$$sroa$017$0$1832$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0;
 var $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $6 = ((($0)) + 41|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  ___assert_fail((17987|0),(17882|0),336,(18006|0));
  // unreachable;
 }
 $9 = ((($0)) + 80|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10|0)==($12|0);
 L4: do {
  if ($13) {
   label = 7;
  } else {
   $$01328$i = $1;$$sroa$017$0$$sroa$017$0$1832$i = $10;
   while(1) {
    $14 = ((($$sroa$017$0$$sroa$017$0$1832$i)) + 20|0);
    $15 = ((($$sroa$017$0$$sroa$017$0$1832$i)) + 24|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = HEAP32[$14>>2]|0;
    $18 = (($16) - ($17))|0;
    $19 = (($18|0) / 24)&-1;
    $20 = ($$01328$i>>>0)<($19>>>0);
    if ($20) {
     break;
    }
    $21 = (($$01328$i) - ($19))|0;
    $22 = ((($$sroa$017$0$$sroa$017$0$1832$i)) + 36|0);
    $23 = ($22|0)==($12|0);
    if ($23) {
     label = 7;
     break L4;
    } else {
     $$01328$i = $21;$$sroa$017$0$$sroa$017$0$1832$i = $22;
    }
   }
   $24 = ($$sroa$017$0$$sroa$017$0$1832$i|0)==(0|0);
   if ($24) {
    label = 7;
   } else {
    $$0$ph = $$sroa$017$0$$sroa$017$0$1832$i;$35 = $16;$36 = $17;
    label = 10;
   }
  }
 } while(0);
 do {
  if ((label|0) == 7) {
   $25 = ($12|0)==($10|0);
   if ($25) {
    $$pre$phiZ2D = $3;
    break;
   } else {
    $26 = ((($12)) + -36|0);
    $$phi$trans$insert = ((($12)) + -12|0);
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $$phi$trans$insert45 = ((($12)) + -16|0);
    $$pre47 = HEAP32[$$phi$trans$insert45>>2]|0;
    $$0$ph = $26;$35 = $$pre;$36 = $$pre47;
    label = 10;
    break;
   }
  }
 } while(0);
 if ((label|0) == 10) {
  $27 = ((($$0$ph)) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  HEAP32[$3>>2] = $28;
  $29 = ((($$0$ph)) + 12|0);
  $30 = +HEAPF32[$29>>2];
  $31 = +HEAPF32[$27>>2];
  $32 = $30 - $31;
  $33 = -$32;
  HEAPF32[$4>>2] = $33;
  $34 = (($35) - ($36))|0;
  $37 = (($34|0) / 24)&-1;
  $38 = ($37>>>0)>($1>>>0);
  if ($38) {
   $39 = ((($$0$ph)) + 20|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (((($40) + (($1*24)|0)|0)) + 4|0);
   $42 = $41;
   $43 = $42;
   $44 = HEAPU8[$43>>0]|(HEAPU8[$43+1>>0]<<8)|(HEAPU8[$43+2>>0]<<16)|(HEAPU8[$43+3>>0]<<24);
   $45 = (($42) + 4)|0;
   $46 = $45;
   $47 = HEAPU8[$46>>0]|(HEAPU8[$46+1>>0]<<8)|(HEAPU8[$46+2>>0]<<16)|(HEAPU8[$46+3>>0]<<24);
   $48 = $2;
   $49 = $48;
   HEAP8[$49>>0]=$44&255;HEAP8[$49+1>>0]=($44>>8)&255;HEAP8[$49+2>>0]=($44>>16)&255;HEAP8[$49+3>>0]=$44>>24;
   $50 = (($48) + 4)|0;
   $51 = $50;
   HEAP8[$51>>0]=$47&255;HEAP8[$51+1>>0]=($47>>8)&255;HEAP8[$51+2>>0]=($47>>16)&255;HEAP8[$51+3>>0]=$47>>24;
   STACKTOP = sp;return;
  }
  $52 = ($34|0)==(0);
  if ($52) {
   $$pre$phiZ2D = $3;
  } else {
   $53 = $35;
   $54 = ((($53)) + -20|0);
   $55 = (+__ZNK4RECT5rightEv($54));
   $56 = (+__ZNK4RECT6bottomEv($54));
   __Z10POINT_Makeff($5,$55,$56);
   $57 = $5;
   $58 = $57;
   $59 = HEAP32[$58>>2]|0;
   $60 = (($57) + 4)|0;
   $61 = $60;
   $62 = HEAP32[$61>>2]|0;
   $63 = $2;
   $64 = $63;
   HEAP8[$64>>0]=$59&255;HEAP8[$64+1>>0]=($59>>8)&255;HEAP8[$64+2>>0]=($59>>16)&255;HEAP8[$64+3>>0]=$59>>24;
   $65 = (($63) + 4)|0;
   $66 = $65;
   HEAP8[$66>>0]=$62&255;HEAP8[$66+1>>0]=($62>>8)&255;HEAP8[$66+2>>0]=($62>>16)&255;HEAP8[$66+3>>0]=$62>>24;
   STACKTOP = sp;return;
  }
 }
 $67 = ((($0)) + 32|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ((($68)) + 36|0);
 $70 = +HEAPF32[$69>>2];
 $71 = ((($68)) + 40|0);
 $72 = HEAP32[$71>>2]|0;
 HEAP32[$$pre$phiZ2D>>2] = $72;
 $73 = ((($68)) + 44|0);
 $74 = HEAP32[$73>>2]|0;
 HEAP32[$4>>2] = $74;
 $75 = ((($0)) + 96|0);
 $76 = (+__ZNK4RECT4leftEv($75));
 HEAPF32[tempDoublePtr>>2]=$76;HEAP8[$2>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$2+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$2+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$2+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $77 = (+__ZNK4RECT3topEv($75));
 $78 = $70 + $77;
 $79 = +HEAPF32[$4>>2];
 $80 = $78 + $79;
 $81 = ((($2)) + 4|0);
 HEAPF32[tempDoublePtr>>2]=$80;HEAP8[$81>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$81+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$81+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$81+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $82 = ((($0)) + 40|0);
 $83 = HEAP8[$82>>0]|0;
 $trunc = ($83&255) >>> 4;
 $trunc$clear = $trunc & 15;
 switch ($trunc$clear<<24>>24) {
 case 2:  {
  $84 = ((($0)) + 108|0);
  $85 = +HEAPF32[$84>>2];
  $86 = $85 - $70;
  $87 = $86 * 0.5;
  $$sink3 = $87;
  break;
 }
 case 1:  {
  $88 = ((($0)) + 108|0);
  $89 = +HEAPF32[$88>>2];
  $90 = $89 - $70;
  $$sink3 = $90;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $91 = $$sink3 + $80;
 HEAPF32[tempDoublePtr>>2]=$91;HEAP8[$81>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$81+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$81+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$81+3>>0]=HEAP8[tempDoublePtr+3>>0];
 STACKTOP = sp;return;
}
function __ZN9AtlasNodeD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN9AtlasNode10insertRectEP4RECT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$026 = 0, $$027 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0;
 var $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0;
 var $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0;
 var $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = sp + 48|0;
 $3 = sp + 32|0;
 $4 = sp + 16|0;
 $5 = sp;
 $6 = ((($0)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = (__ZN9AtlasNode10insertRectEP4RECT($7,$1)|0);
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   $$0 = $9;
   STACKTOP = sp;return ($$0|0);
  }
  $11 = ((($0)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (__ZN9AtlasNode10insertRectEP4RECT($12,$1)|0);
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = ((($0)) + 40|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)==(0);
 if (!($16)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = ((($0)) + 16|0);
 $18 = ((($0)) + 24|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$18>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$18+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$18+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$18+3>>0];$19 = +HEAPF32[tempDoublePtr>>2];
 $20 = ((($1)) + 8|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$20>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$20+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$20+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$20+3>>0];$21 = +HEAPF32[tempDoublePtr>>2];
 $22 = !($19 >= $21);
 if ($22) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = ((($0)) + 28|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$23>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$23+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$23+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$23+3>>0];$24 = +HEAPF32[tempDoublePtr>>2];
 $25 = ((($1)) + 12|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$25>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$25+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$25+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$25+3>>0];$26 = +HEAPF32[tempDoublePtr>>2];
 $27 = !($24 >= $26);
 if ($27) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $28 = $19 == $21;
 $29 = $24 == $26;
 $or$cond = $28 & $29;
 if ($or$cond) {
  HEAP8[$14>>0] = 1;
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $30 = (__ZN6ObjectnwEj(44)|0);
 $31 = ((($0)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 __THREW__ = 0;
 invoke_vi(555,($30|0));
 $33 = __THREW__; __THREW__ = 0;
 $34 = $33&1;
 if ($34) {
  $73 = ___cxa_find_matching_catch_2()|0;
  $74 = tempRet0;
  __ZdlPv($30);
  $$026 = $74;$$027 = $73;
  ___resumeException($$027|0);
  // unreachable;
 }
 HEAP32[$30>>2] = (4428);
 $35 = ((($30)) + 8|0);
 HEAP32[$35>>2] = $32;
 $36 = ((($30)) + 36|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($30)) + 32|0);
 HEAP32[$37>>2] = 0;
 $38 = ((($30)) + 40|0);
 HEAP8[$38>>0] = 0;
 HEAP32[$6>>2] = $30;
 $39 = (__ZN6ObjectnwEj(44)|0);
 $40 = HEAP32[$31>>2]|0;
 __THREW__ = 0;
 invoke_vi(555,($39|0));
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $75 = ___cxa_find_matching_catch_2()|0;
  $76 = tempRet0;
  __ZdlPv($39);
  $$026 = $76;$$027 = $75;
  ___resumeException($$027|0);
  // unreachable;
 }
 HEAP32[$39>>2] = (4428);
 $43 = ((($39)) + 8|0);
 HEAP32[$43>>2] = $40;
 $44 = ((($39)) + 36|0);
 HEAP32[$44>>2] = 0;
 $45 = ((($39)) + 32|0);
 HEAP32[$45>>2] = 0;
 $46 = ((($39)) + 40|0);
 HEAP8[$46>>0] = 0;
 $47 = ((($0)) + 36|0);
 HEAP32[$47>>2] = $39;
 $48 = +HEAPF32[$18>>2];
 HEAP8[tempDoublePtr>>0]=HEAP8[$20>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$20+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$20+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$20+3>>0];$49 = +HEAPF32[tempDoublePtr>>2];
 $50 = $48 - $49;
 $51 = (~~(($50)));
 $52 = +HEAPF32[$23>>2];
 HEAP8[tempDoublePtr>>0]=HEAP8[$25>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$25+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$25+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$25+3>>0];$53 = +HEAPF32[tempDoublePtr>>2];
 $54 = $52 - $53;
 $55 = (~~(($54)));
 $56 = ($51|0)>($55|0);
 if ($56) {
  $57 = (+__Z9RECT_leftRK4RECT($17));
  $58 = (+__Z8RECT_topRK4RECT($17));
  HEAP8[tempDoublePtr>>0]=HEAP8[$20>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$20+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$20+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$20+3>>0];$59 = +HEAPF32[tempDoublePtr>>2];
  $60 = +HEAPF32[$23>>2];
  __Z9RECT_Makeffff($2,$57,$58,$59,$60);
  $61 = HEAP32[$6>>2]|0;
  $62 = ((($61)) + 16|0);
  dest=$62; src=$2; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $63 = (+__Z9RECT_leftRK4RECT($17));
  HEAP8[tempDoublePtr>>0]=HEAP8[$20>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$20+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$20+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$20+3>>0];$64 = +HEAPF32[tempDoublePtr>>2];
  $65 = $63 + $64;
  $66 = (+__Z8RECT_topRK4RECT($17));
  $67 = +HEAPF32[$18>>2];
  HEAP8[tempDoublePtr>>0]=HEAP8[$20>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$20+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$20+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$20+3>>0];$68 = +HEAPF32[tempDoublePtr>>2];
  $69 = $67 - $68;
  $70 = +HEAPF32[$23>>2];
  __Z9RECT_Makeffff($3,$65,$66,$69,$70);
  $71 = HEAP32[$47>>2]|0;
  $72 = ((($71)) + 16|0);
  dest=$72; src=$3; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 } else {
  $77 = (+__Z9RECT_leftRK4RECT($17));
  $78 = (+__Z8RECT_topRK4RECT($17));
  $79 = +HEAPF32[$18>>2];
  HEAP8[tempDoublePtr>>0]=HEAP8[$25>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$25+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$25+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$25+3>>0];$80 = +HEAPF32[tempDoublePtr>>2];
  __Z9RECT_Makeffff($4,$77,$78,$79,$80);
  $81 = HEAP32[$6>>2]|0;
  $82 = ((($81)) + 16|0);
  dest=$82; src=$4; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $83 = (+__Z9RECT_leftRK4RECT($17));
  $84 = (+__Z8RECT_topRK4RECT($17));
  HEAP8[tempDoublePtr>>0]=HEAP8[$25>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$25+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$25+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$25+3>>0];$85 = +HEAPF32[tempDoublePtr>>2];
  $86 = $84 + $85;
  $87 = +HEAPF32[$18>>2];
  $88 = +HEAPF32[$23>>2];
  $89 = $88 - $85;
  __Z9RECT_Makeffff($5,$83,$86,$87,$89);
  $90 = HEAP32[$47>>2]|0;
  $91 = ((($90)) + 16|0);
  dest=$91; src=$5; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 }
 $92 = HEAP32[$6>>2]|0;
 $93 = (__ZN9AtlasNode10insertRectEP4RECT($92,$1)|0);
 $$0 = $93;
 STACKTOP = sp;return ($$0|0);
}
function __ZN9AtlasPageC2Eiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$07 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 __ZN6ObjectC2Ev($0);
 HEAP32[$0>>2] = (4444);
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = 0;
 __THREW__ = 0;
 $6 = (invoke_iiii(655,($1|0),($2|0),($3|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 do {
  if ($8) {
   label = 11;
  } else {
   $9 = HEAP32[$5>>2]|0;
   $10 = ($9|0)==($6|0);
   if ($10) {
    $17 = $6;
   } else {
    $11 = ($9|0)==(0|0);
    if (!($11)) {
     __THREW__ = 0;
     invoke_vi(525,($9|0));
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if ($13) {
      label = 11;
      break;
     }
    }
    HEAP32[$5>>2] = $6;
    __THREW__ = 0;
    invoke_vi(526,($6|0));
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     label = 11;
     break;
    }
    $$pre = HEAP32[$5>>2]|0;
    $17 = $$pre;
   }
   $16 = ((($17)) + 24|0);
   HEAP32[$16>>2] = 9728;
   __THREW__ = 0;
   $18 = (invoke_ii(523,44)|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    label = 11;
   } else {
    __THREW__ = 0;
    invoke_vi(555,($18|0));
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     $36 = ___cxa_find_matching_catch_2()|0;
     $37 = tempRet0;
     __ZdlPv($18);
     $$0 = $37;$$07 = $36;
     break;
    }
    HEAP32[$18>>2] = (4428);
    $23 = ((($18)) + 8|0);
    HEAP32[$23>>2] = $0;
    $24 = ((($18)) + 36|0);
    HEAP32[$24>>2] = 0;
    $25 = ((($18)) + 32|0);
    HEAP32[$25>>2] = 0;
    $26 = ((($18)) + 40|0);
    HEAP8[$26>>0] = 0;
    $27 = ((($0)) + 12|0);
    HEAP32[$27>>2] = $18;
    $28 = (+($1|0));
    $29 = (+($2|0));
    __THREW__ = 0;
    invoke_vidddd(614,($4|0),0.0,0.0,(+$28),(+$29));
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if ($31) {
     $38 = ___cxa_find_matching_catch_2()|0;
     $39 = tempRet0;
     $$0 = $39;$$07 = $38;
     break;
    } else {
     $32 = HEAP32[$27>>2]|0;
     $33 = ((($32)) + 16|0);
     dest=$33; src=$4; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $34 = ___cxa_find_matching_catch_2()|0;
  $35 = tempRet0;
  $$0 = $35;$$07 = $34;
 }
 $40 = HEAP32[$5>>2]|0;
 $41 = ($40|0)==(0|0);
 if ($41) {
  ___resumeException($$07|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(525,($40|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $44 = ___cxa_find_matching_catch_3(0|0)|0;
  $45 = tempRet0;
  ___clang_call_terminate($44);
  // unreachable;
 } else {
  ___resumeException($$07|0);
  // unreachable;
 }
}
function __ZN9AtlasPageD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4444);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($2|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  return;
 }
}
function __ZN9AtlasPageD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4444);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  __ZdlPv($0);
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($2|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZN5AtlasC2Eiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev($0);
 HEAP32[$0>>2] = (4460);
 $4 = ((($0)) + 8|0);
 $5 = ((($0)) + 32|0);
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;HEAP32[$4+16>>2]=0|0;HEAP32[$4+20>>2]=0|0;
 HEAP32[$5>>2] = $1;
 $6 = ((($0)) + 36|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($0)) + 40|0);
 HEAP32[$7>>2] = $3;
 return;
}
function __ZN5AtlasD2Ev($0) {
 $0 = $0|0;
 var $$pre$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4460);
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($0)) + 24|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==($2|0);
  do {
   if ($6) {
    $17 = $2;
   } else {
    $8 = $5;
    while(1) {
     $7 = ((($8)) + -4|0);
     HEAP32[$4>>2] = $7;
     $9 = HEAP32[$7>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      $12 = $7;
     } else {
      __THREW__ = 0;
      invoke_vi(525,($9|0));
      $13 = __THREW__; __THREW__ = 0;
      $14 = $13&1;
      if ($14) {
       label = 7;
       break;
      }
      $$pre$i$i$i = HEAP32[$4>>2]|0;
      $12 = $$pre$i$i$i;
     }
     $11 = ($12|0)==($2|0);
     if ($11) {
      label = 8;
      break;
     } else {
      $8 = $12;
     }
    }
    if ((label|0) == 7) {
     $15 = ___cxa_find_matching_catch_3(0|0)|0;
     $16 = tempRet0;
     ___clang_call_terminate($15);
     // unreachable;
    }
    else if ((label|0) == 8) {
     $$pre$i = HEAP32[$1>>2]|0;
     $17 = $$pre$i;
     break;
    }
   }
  } while(0);
  __ZdlPv($17);
 }
 $18 = ((($0)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  return;
 }
 $21 = ((($0)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==($19|0);
 do {
  if ($23) {
   $34 = $19;
  } else {
   $25 = $22;
   while(1) {
    $24 = ((($25)) + -4|0);
    HEAP32[$21>>2] = $24;
    $26 = HEAP32[$24>>2]|0;
    $27 = ($26|0)==(0|0);
    if ($27) {
     $29 = $24;
    } else {
     __THREW__ = 0;
     invoke_vi(525,($26|0));
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      label = 16;
      break;
     }
     $$pre$i$i$i2 = HEAP32[$21>>2]|0;
     $29 = $$pre$i$i$i2;
    }
    $28 = ($29|0)==($19|0);
    if ($28) {
     label = 17;
     break;
    } else {
     $25 = $29;
    }
   }
   if ((label|0) == 16) {
    $32 = ___cxa_find_matching_catch_3(0|0)|0;
    $33 = tempRet0;
    ___clang_call_terminate($32);
    // unreachable;
   }
   else if ((label|0) == 17) {
    $$pre$i4 = HEAP32[$18>>2]|0;
    $34 = $$pre$i4;
    break;
   }
  }
 } while(0);
 __ZdlPv($34);
 return;
}
function __ZN5AtlasD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5AtlasD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN5Atlas7reserveEiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$032 = 0, $$03347 = 0, $$146 = 0, $$48 = 0, $$pre$i = 0, $$pre$i39 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $factor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 24|0;
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = ($3|0)>(0);
 $factor = $3 << 1;
 $9 = $8 ? $factor : 0;
 $$ = (($9) + ($2))|0;
 $$48 = (($9) + ($1))|0;
 $10 = ((($0)) + 8|0);
 $11 = ((($0)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$10>>2]|0;
 $14 = (($12) - ($13))|0;
 $15 = $14 >> 2;
 $16 = ($15|0)==(0);
 if ($16) {
  label = 4;
 } else {
  $17 = $13;
  $18 = (($15) + -1)|0;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0|0);
  if ($21) {
   label = 4;
  } else {
   $22 = (+($$48|0));
   $23 = (+($$|0));
   __Z9RECT_Makeffff($5,0.0,0.0,$22,$23);
   $24 = ((($20)) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (__ZN9AtlasNode10insertRectEP4RECT($25,$5)|0);
   $27 = ($26|0)==(0|0);
   if ($27) {
    label = 4;
   } else {
    $$03347 = $20;$74 = $26;
   }
  }
 }
 do {
  if ((label|0) == 4) {
   $28 = (__ZN6ObjectnwEj(16)|0);
   $29 = ((($0)) + 32|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($0)) + 36|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($0)) + 40|0);
   $34 = HEAP32[$33>>2]|0;
   __THREW__ = 0;
   invoke_viiii(656,($28|0),($30|0),($32|0),($34|0));
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   if ($36) {
    $56 = ___cxa_find_matching_catch_2()|0;
    $57 = tempRet0;
    __ZdlPv($28);
    $$0 = $57;$$032 = $56;
    ___resumeException($$032|0);
    // unreachable;
   }
   HEAP32[$6>>2] = $28;
   $37 = ($28|0)==(0|0);
   if (!($37)) {
    __ZN6Object6retainEv($28);
   }
   $38 = HEAP32[$11>>2]|0;
   $39 = ((($0)) + 16|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($38>>>0)<($40>>>0);
   do {
    if ($41) {
     $42 = HEAP32[$6>>2]|0;
     HEAP32[$38>>2] = $42;
     $43 = ($42|0)==(0|0);
     if ($43) {
      $47 = $38;
     } else {
      __THREW__ = 0;
      invoke_vi(526,($42|0));
      $44 = __THREW__; __THREW__ = 0;
      $45 = $44&1;
      if ($45) {
       label = 17;
       break;
      }
      $$pre$i = HEAP32[$11>>2]|0;
      $47 = $$pre$i;
     }
     $46 = ((($47)) + 4|0);
     HEAP32[$11>>2] = $46;
     label = 13;
    } else {
     __THREW__ = 0;
     invoke_vii(657,($10|0),($6|0));
     $48 = __THREW__; __THREW__ = 0;
     $49 = $48&1;
     if ($49) {
      label = 17;
     } else {
      label = 13;
     }
    }
   } while(0);
   if ((label|0) == 13) {
    $50 = HEAP32[$6>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     __THREW__ = 0;
     invoke_vi(525,($50|0));
     $52 = __THREW__; __THREW__ = 0;
     $53 = $52&1;
     if ($53) {
      $54 = ___cxa_find_matching_catch_3(0|0)|0;
      $55 = tempRet0;
      ___clang_call_terminate($54);
      // unreachable;
     }
    }
    $66 = (+($$48|0));
    $67 = (+($$|0));
    __Z9RECT_Makeffff($4,0.0,0.0,$66,$67);
    $68 = ((($28)) + 12|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = (__ZN9AtlasNode10insertRectEP4RECT($69,$4)|0);
    $71 = ($70|0)==(0|0);
    if ($71) {
     $$146 = 0;
    } else {
     $$03347 = $28;$74 = $70;
     break;
    }
    STACKTOP = sp;return ($$146|0);
   }
   else if ((label|0) == 17) {
    $58 = ___cxa_find_matching_catch_2()|0;
    $59 = tempRet0;
    $60 = HEAP32[$6>>2]|0;
    $61 = ($60|0)==(0|0);
    if (!($61)) {
     __THREW__ = 0;
     invoke_vi(525,($60|0));
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      $64 = ___cxa_find_matching_catch_3(0|0)|0;
      $65 = tempRet0;
      ___clang_call_terminate($64);
      // unreachable;
     }
    }
    $$0 = $59;$$032 = $58;
    ___resumeException($$032|0);
    // unreachable;
   }
  }
 } while(0);
 $72 = (+($3|0));
 if ($8) {
  $73 = ((($74)) + 16|0);
  __Z10RECT_insetR4RECTff($73,$72,$72);
 }
 $75 = ((($74)) + 8|0);
 HEAP32[$75>>2] = $$03347;
 HEAP32[$7>>2] = $74;
 __ZN6Object6retainEv($74);
 $76 = ((($0)) + 24|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ((($0)) + 28|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($77>>>0)<($79>>>0);
 if ($80) {
  HEAP32[$77>>2] = $74;
  __THREW__ = 0;
  invoke_vi(526,($74|0));
  $81 = __THREW__; __THREW__ = 0;
  $82 = $81&1;
  if ($82) {
   label = 32;
  } else {
   $$pre$i39 = HEAP32[$76>>2]|0;
   $83 = ((($$pre$i39)) + 4|0);
   HEAP32[$76>>2] = $83;
   label = 28;
  }
 } else {
  $84 = ((($0)) + 20|0);
  __THREW__ = 0;
  invoke_vii(658,($84|0),($7|0));
  $85 = __THREW__; __THREW__ = 0;
  $86 = $85&1;
  if ($86) {
   label = 32;
  } else {
   label = 28;
  }
 }
 if ((label|0) == 28) {
  $87 = HEAP32[$7>>2]|0;
  $88 = ($87|0)==(0|0);
  if (!($88)) {
   __THREW__ = 0;
   invoke_vi(525,($87|0));
   $89 = __THREW__; __THREW__ = 0;
   $90 = $89&1;
   if ($90) {
    $91 = ___cxa_find_matching_catch_3(0|0)|0;
    $92 = tempRet0;
    ___clang_call_terminate($91);
    // unreachable;
   }
  }
  $$146 = $74;
  STACKTOP = sp;return ($$146|0);
 }
 else if ((label|0) == 32) {
  $93 = ___cxa_find_matching_catch_2()|0;
  $94 = tempRet0;
  $95 = HEAP32[$7>>2]|0;
  $96 = ($95|0)==(0|0);
  if (!($96)) {
   __THREW__ = 0;
   invoke_vi(525,($95|0));
   $97 = __THREW__; __THREW__ = 0;
   $98 = $97&1;
   if ($98) {
    $99 = ___cxa_find_matching_catch_3(0|0)|0;
    $100 = tempRet0;
    ___clang_call_terminate($99);
    // unreachable;
   }
  }
  $$0 = $94;$$032 = $93;
  ___resumeException($$032|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__26vectorI6ObjPtrI9AtlasPageENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$06$i$i = 0, $$pre = 0, $$pre$i = 0, $$pre41 = 0, $$pre42 = 0, $$sroa$16$0 = 0, $$sroa$7$0 = 0, $$sroa$7$1 = 0, $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>(1073741823);
 $9 = $4;
 $10 = $3;
 if ($8) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $11 = ((($0)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) - ($4))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)<(536870911);
 $16 = $13 >> 1;
 $17 = ($16>>>0)<($7>>>0);
 $$sroa$speculated$i = $17 ? $7 : $16;
 $$sroa$speculated$$i = $15 ? $$sroa$speculated$i : 1073741823;
 $18 = ($$sroa$speculated$$i|0)==(0);
 do {
  if ($18) {
   $28 = 0;$84 = 0;
  } else {
   $19 = ($$sroa$speculated$$i>>>0)>(1073741823);
   if (!($19)) {
    $25 = $$sroa$speculated$$i << 2;
    $26 = (__Znwj($25)|0);
    $28 = $26;$84 = $26;
    break;
   }
   $20 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(568,($20|0),(23604|0));
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    $23 = ___cxa_find_matching_catch_2()|0;
    $24 = tempRet0;
    ___cxa_free_exception(($20|0));
    ___resumeException($23|0);
    // unreachable;
   } else {
    HEAP32[$20>>2] = (9544);
    ___cxa_throw(($20|0),(1992|0),(506|0));
    // unreachable;
   }
  }
 } while(0);
 $27 = (($28) + ($6<<2)|0);
 $29 = $27;
 $30 = (($28) + ($$sroa$speculated$$i<<2)|0);
 $31 = $30;
 $32 = HEAP32[$1>>2]|0;
 HEAP32[$27>>2] = $32;
 $33 = ($32|0)==(0|0);
 if ($33) {
  $39 = $10;$40 = $9;
  label = 12;
 } else {
  __THREW__ = 0;
  invoke_vi(526,($32|0));
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if ($35) {
   $$sroa$16$0 = $29;$$sroa$7$1 = $29;
  } else {
   $$pre = HEAP32[$0>>2]|0;
   $$pre41 = HEAP32[$2>>2]|0;
   $39 = $$pre41;$40 = $$pre;
   label = 12;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $36 = ((($27)) + 4|0);
   $37 = $36;
   $38 = ($39|0)==($40|0);
   if ($38) {
    $41 = $39;
    $53 = $29;$55 = $41;$57 = $39;
   } else {
    $$06$i$i = $39;$$sroa$7$0 = $29;$44 = $27;
    while(1) {
     $42 = ((($$06$i$i)) + -4|0);
     $43 = ((($44)) + -4|0);
     $45 = HEAP32[$42>>2]|0;
     HEAP32[$43>>2] = $45;
     $46 = ($45|0)==(0|0);
     if (!($46)) {
      __THREW__ = 0;
      invoke_vi(526,($45|0));
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       $$sroa$16$0 = $37;$$sroa$7$1 = $$sroa$7$0;
       break L16;
      }
     }
     $49 = $$sroa$7$0;
     $50 = ((($49)) + -4|0);
     $51 = $50;
     $52 = ($42|0)==($40|0);
     if ($52) {
      break;
     } else {
      $$06$i$i = $42;$$sroa$7$0 = $51;$44 = $50;
     }
    }
    $$pre$i = HEAP32[$0>>2]|0;
    $$pre42 = HEAP32[$2>>2]|0;
    $53 = $51;$55 = $$pre$i;$57 = $$pre42;
   }
   HEAP32[$0>>2] = $53;
   HEAP32[$2>>2] = $37;
   HEAP32[$11>>2] = $31;
   $54 = $55;
   $56 = ($57|0)==($54|0);
   L27: do {
    if (!($56)) {
     $59 = $57;
     while(1) {
      $58 = ((($59)) + -4|0);
      $60 = HEAP32[$58>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       __THREW__ = 0;
       invoke_vi(525,($60|0));
       $63 = __THREW__; __THREW__ = 0;
       $64 = $63&1;
       if ($64) {
        break;
       }
      }
      $62 = ($58|0)==($54|0);
      if ($62) {
       break L27;
      } else {
       $59 = $58;
      }
     }
     $65 = ___cxa_find_matching_catch_3(0|0)|0;
     $66 = tempRet0;
     ___clang_call_terminate($65);
     // unreachable;
    }
   } while(0);
   $67 = ($55|0)==(0);
   if ($67) {
    return;
   }
   $68 = $55;
   __ZdlPv($68);
   return;
  }
 } while(0);
 $69 = ___cxa_find_matching_catch_2()|0;
 $70 = tempRet0;
 $71 = $$sroa$7$1;
 $72 = $$sroa$16$0;
 $73 = ($72|0)==($71|0);
 L40: do {
  if (!($73)) {
   $75 = $72;
   while(1) {
    $74 = ((($75)) + -4|0);
    $76 = HEAP32[$74>>2]|0;
    $77 = ($76|0)==(0|0);
    if (!($77)) {
     __THREW__ = 0;
     invoke_vi(525,($76|0));
     $79 = __THREW__; __THREW__ = 0;
     $80 = $79&1;
     if ($80) {
      break;
     }
    }
    $78 = ($74|0)==($71|0);
    if ($78) {
     break L40;
    } else {
     $75 = $74;
    }
   }
   $81 = ___cxa_find_matching_catch_3(0|0)|0;
   $82 = tempRet0;
   ___clang_call_terminate($81);
   // unreachable;
  }
 } while(0);
 $83 = ($28|0)==(0|0);
 if ($83) {
  ___resumeException($69|0);
  // unreachable;
 }
 __ZdlPv($84);
 ___resumeException($69|0);
 // unreachable;
}
function __ZNSt3__26vectorI6ObjPtrI9AtlasNodeENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$06$i$i = 0, $$pre = 0, $$pre$i = 0, $$pre41 = 0, $$pre42 = 0, $$sroa$16$0 = 0, $$sroa$7$0 = 0, $$sroa$7$1 = 0, $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>(1073741823);
 $9 = $4;
 $10 = $3;
 if ($8) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $11 = ((($0)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) - ($4))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)<(536870911);
 $16 = $13 >> 1;
 $17 = ($16>>>0)<($7>>>0);
 $$sroa$speculated$i = $17 ? $7 : $16;
 $$sroa$speculated$$i = $15 ? $$sroa$speculated$i : 1073741823;
 $18 = ($$sroa$speculated$$i|0)==(0);
 do {
  if ($18) {
   $28 = 0;$84 = 0;
  } else {
   $19 = ($$sroa$speculated$$i>>>0)>(1073741823);
   if (!($19)) {
    $25 = $$sroa$speculated$$i << 2;
    $26 = (__Znwj($25)|0);
    $28 = $26;$84 = $26;
    break;
   }
   $20 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(568,($20|0),(23604|0));
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    $23 = ___cxa_find_matching_catch_2()|0;
    $24 = tempRet0;
    ___cxa_free_exception(($20|0));
    ___resumeException($23|0);
    // unreachable;
   } else {
    HEAP32[$20>>2] = (9544);
    ___cxa_throw(($20|0),(1992|0),(506|0));
    // unreachable;
   }
  }
 } while(0);
 $27 = (($28) + ($6<<2)|0);
 $29 = $27;
 $30 = (($28) + ($$sroa$speculated$$i<<2)|0);
 $31 = $30;
 $32 = HEAP32[$1>>2]|0;
 HEAP32[$27>>2] = $32;
 $33 = ($32|0)==(0|0);
 if ($33) {
  $39 = $10;$40 = $9;
  label = 12;
 } else {
  __THREW__ = 0;
  invoke_vi(526,($32|0));
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if ($35) {
   $$sroa$16$0 = $29;$$sroa$7$1 = $29;
  } else {
   $$pre = HEAP32[$0>>2]|0;
   $$pre41 = HEAP32[$2>>2]|0;
   $39 = $$pre41;$40 = $$pre;
   label = 12;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $36 = ((($27)) + 4|0);
   $37 = $36;
   $38 = ($39|0)==($40|0);
   if ($38) {
    $41 = $39;
    $53 = $29;$55 = $41;$57 = $39;
   } else {
    $$06$i$i = $39;$$sroa$7$0 = $29;$44 = $27;
    while(1) {
     $42 = ((($$06$i$i)) + -4|0);
     $43 = ((($44)) + -4|0);
     $45 = HEAP32[$42>>2]|0;
     HEAP32[$43>>2] = $45;
     $46 = ($45|0)==(0|0);
     if (!($46)) {
      __THREW__ = 0;
      invoke_vi(526,($45|0));
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       $$sroa$16$0 = $37;$$sroa$7$1 = $$sroa$7$0;
       break L16;
      }
     }
     $49 = $$sroa$7$0;
     $50 = ((($49)) + -4|0);
     $51 = $50;
     $52 = ($42|0)==($40|0);
     if ($52) {
      break;
     } else {
      $$06$i$i = $42;$$sroa$7$0 = $51;$44 = $50;
     }
    }
    $$pre$i = HEAP32[$0>>2]|0;
    $$pre42 = HEAP32[$2>>2]|0;
    $53 = $51;$55 = $$pre$i;$57 = $$pre42;
   }
   HEAP32[$0>>2] = $53;
   HEAP32[$2>>2] = $37;
   HEAP32[$11>>2] = $31;
   $54 = $55;
   $56 = ($57|0)==($54|0);
   L27: do {
    if (!($56)) {
     $59 = $57;
     while(1) {
      $58 = ((($59)) + -4|0);
      $60 = HEAP32[$58>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       __THREW__ = 0;
       invoke_vi(525,($60|0));
       $63 = __THREW__; __THREW__ = 0;
       $64 = $63&1;
       if ($64) {
        break;
       }
      }
      $62 = ($58|0)==($54|0);
      if ($62) {
       break L27;
      } else {
       $59 = $58;
      }
     }
     $65 = ___cxa_find_matching_catch_3(0|0)|0;
     $66 = tempRet0;
     ___clang_call_terminate($65);
     // unreachable;
    }
   } while(0);
   $67 = ($55|0)==(0);
   if ($67) {
    return;
   }
   $68 = $55;
   __ZdlPv($68);
   return;
  }
 } while(0);
 $69 = ___cxa_find_matching_catch_2()|0;
 $70 = tempRet0;
 $71 = $$sroa$7$1;
 $72 = $$sroa$16$0;
 $73 = ($72|0)==($71|0);
 L40: do {
  if (!($73)) {
   $75 = $72;
   while(1) {
    $74 = ((($75)) + -4|0);
    $76 = HEAP32[$74>>2]|0;
    $77 = ($76|0)==(0|0);
    if (!($77)) {
     __THREW__ = 0;
     invoke_vi(525,($76|0));
     $79 = __THREW__; __THREW__ = 0;
     $80 = $79&1;
     if ($80) {
      break;
     }
    }
    $78 = ($74|0)==($71|0);
    if ($78) {
     break L40;
    } else {
     $75 = $74;
    }
   }
   $81 = ___cxa_find_matching_catch_3(0|0)|0;
   $82 = tempRet0;
   ___clang_call_terminate($81);
   // unreachable;
  }
 } while(0);
 $83 = ($28|0)==(0|0);
 if ($83) {
  ___resumeException($69|0);
  // unreachable;
 }
 __ZdlPv($84);
 ___resumeException($69|0);
 // unreachable;
}
function __ZN6WindowD2Ev($0) {
 $0 = $0|0;
 var $$023$i$i = 0, $$pre$i = 0, $$pre$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4476);
 $1 = ((($0)) + 64|0);
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 L1: do {
  if (!($4)) {
   $5 = ((($0)) + 68|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = HEAP32[$1>>2]|0;
   $8 = ((($7)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = HEAP32[$6>>2]|0;
   $11 = ((($10)) + 4|0);
   HEAP32[$11>>2] = $9;
   $12 = HEAP32[$8>>2]|0;
   HEAP32[$12>>2] = $10;
   HEAP32[$2>>2] = 0;
   $13 = ($6|0)==($1|0);
   if (!($13)) {
    $$023$i$i = $6;
    while(1) {
     $14 = ((($$023$i$i)) + 4|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ((($$023$i$i)) + 8|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($17|0)==(0|0);
     if (!($18)) {
      __THREW__ = 0;
      invoke_vi(525,($17|0));
      $19 = __THREW__; __THREW__ = 0;
      $20 = $19&1;
      if ($20) {
       break;
      }
     }
     __ZdlPv($$023$i$i);
     $23 = ($15|0)==($1|0);
     if ($23) {
      break L1;
     } else {
      $$023$i$i = $15;
     }
    }
    $21 = ___cxa_find_matching_catch_3(0|0)|0;
    $22 = tempRet0;
    ___clang_call_terminate($21);
    // unreachable;
   }
  }
 } while(0);
 $24 = ((($0)) + 52|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if (!($26)) {
  $27 = ((($0)) + 56|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==($25|0);
  if (!($29)) {
   $scevgep$i$i$i = ((($28)) + -4|0);
   $30 = $scevgep$i$i$i;
   $31 = $25;
   $32 = (($30) - ($31))|0;
   $33 = $32 >>> 2;
   $34 = $33 ^ -1;
   $scevgep4$i$i$i = (($28) + ($34<<2)|0);
   HEAP32[$27>>2] = $scevgep4$i$i$i;
  }
  __ZdlPv($25);
 }
 $35 = ((($0)) + 24|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 if (!($37)) {
  __THREW__ = 0;
  invoke_vi(525,($36|0));
  $38 = __THREW__; __THREW__ = 0;
  $39 = $38&1;
  if ($39) {
   $40 = ___cxa_find_matching_catch_3(0|0)|0;
   $41 = tempRet0;
   ___clang_call_terminate($40);
   // unreachable;
  }
 }
 $42 = ((($0)) + 12|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(0|0);
 if (!($44)) {
  $45 = ((($0)) + 16|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)==($43|0);
  do {
   if ($47) {
    $58 = $43;
   } else {
    $49 = $46;
    while(1) {
     $48 = ((($49)) + -4|0);
     HEAP32[$45>>2] = $48;
     $50 = HEAP32[$48>>2]|0;
     $51 = ($50|0)==(0|0);
     if ($51) {
      $53 = $48;
     } else {
      __THREW__ = 0;
      invoke_vi(525,($50|0));
      $54 = __THREW__; __THREW__ = 0;
      $55 = $54&1;
      if ($55) {
       label = 20;
       break;
      }
      $$pre$i$i$i = HEAP32[$45>>2]|0;
      $53 = $$pre$i$i$i;
     }
     $52 = ($53|0)==($43|0);
     if ($52) {
      label = 21;
      break;
     } else {
      $49 = $53;
     }
    }
    if ((label|0) == 20) {
     $56 = ___cxa_find_matching_catch_3(0|0)|0;
     $57 = tempRet0;
     ___clang_call_terminate($56);
     // unreachable;
    }
    else if ((label|0) == 21) {
     $$pre$i = HEAP32[$42>>2]|0;
     $58 = $$pre$i;
     break;
    }
   }
  } while(0);
  __ZdlPv($58);
 }
 $59 = ((($0)) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)==(0|0);
 if ($61) {
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($60|0));
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if ($63) {
  $64 = ___cxa_find_matching_catch_3(0|0)|0;
  $65 = tempRet0;
  ___clang_call_terminate($64);
  // unreachable;
 } else {
  return;
 }
}
function __ZN6WindowD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6WindowD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN6Window21setRootViewControllerEP14ViewController($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $$pre8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if ($4) {
  return;
 }
 $5 = ($3|0)==(0|0);
 if ($5) {
  $17 = 0;
 } else {
  $6 = HEAP32[$1>>2]|0;
  $7 = ((($6)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  FUNCTION_TABLE_vi[$8 & 1023]($1);
  $9 = HEAP32[$3>>2]|0;
  $10 = ((($9)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_vi[$11 & 1023]($3);
  $12 = HEAP32[$1>>2]|0;
  $13 = ((($12)) + 36|0);
  $14 = HEAP32[$13>>2]|0;
  FUNCTION_TABLE_vi[$14 & 1023]($1);
  $$pre = HEAP32[$2>>2]|0;
  $17 = $$pre;
 }
 $15 = ((($0)) + 92|0);
 HEAP8[$15>>0] = 0;
 $16 = ($17|0)==($1|0);
 do {
  if ($16) {
   $21 = $1;
  } else {
   $18 = ($17|0)==(0|0);
   if (!($18)) {
    __ZN6Object7releaseEv($17);
   }
   HEAP32[$2>>2] = $1;
   $19 = ($1|0)==(0|0);
   if ($19) {
    return;
   } else {
    __ZN6Object6retainEv($1);
    $$pre8 = HEAP32[$2>>2]|0;
    $21 = $$pre8;
    break;
   }
  }
 } while(0);
 $20 = ($21|0)==(0|0);
 if ($20) {
  return;
 }
 $22 = ((($0)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if ($24) {
  return;
 }
 $25 = HEAP8[$15>>0]|0;
 $26 = ($25<<24>>24)==(0);
 if (!($26)) {
  return;
 }
 $27 = HEAP32[$21>>2]|0;
 $28 = ((($27)) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 FUNCTION_TABLE_vi[$29 & 1023]($21);
 __ZN6Window13prepareToDrawEv($0);
 $30 = HEAP32[$2>>2]|0;
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 FUNCTION_TABLE_vii[$33 & 1023]($30,$0);
 $34 = HEAP32[$2>>2]|0;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 28|0);
 $37 = HEAP32[$36>>2]|0;
 FUNCTION_TABLE_vi[$37 & 1023]($34);
 HEAP8[$15>>0] = 1;
 return;
}
function __ZN6Window14setNeedsLayoutEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 48|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  return;
 }
 $4 = ((($0)) + 76|0);
 HEAP8[$4>>0] = 0;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 1023]($0);
 return;
}
function __ZN6Window13resizeSurfaceEiif($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $$0 = 0, $$09 = 0, $$byval_copy = 0, $$pre = 0, $$pre$phiZ2D = 0.0, $$pre10 = 0, $$pre11 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 $6 = ((($0)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 do {
  if ($8) {
   $9 = (__ZN6ObjectnwEj(204)|0);
   __THREW__ = 0;
   invoke_vi(659,($9|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $20 = ___cxa_find_matching_catch_2()|0;
    $21 = tempRet0;
    __ZdlPv($9);
    $$0 = $21;$$09 = $20;
    ___resumeException($$09|0);
    // unreachable;
   }
   $12 = HEAP32[$6>>2]|0;
   $13 = ($12|0)==($9|0);
   if (!($13)) {
    $14 = ($12|0)==(0|0);
    if (!($14)) {
     __ZN6Object7releaseEv($12);
    }
    HEAP32[$6>>2] = $9;
    $15 = ($9|0)==(0|0);
    if (!($15)) {
     __ZN6Object6retainEv($9);
    }
   }
   $16 = (__ZN6ObjectnwEj(52)|0);
   __THREW__ = 0;
   invoke_vi(660,($16|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if (!($18)) {
    $19 = ((($0)) + 96|0);
    HEAP32[$19>>2] = $16;
    $$pre = HEAP32[$6>>2]|0;
    $25 = $$pre;
    break;
   }
   $22 = ___cxa_find_matching_catch_2()|0;
   $23 = tempRet0;
   __ZdlPv($16);
   $$0 = $23;$$09 = $22;
   ___resumeException($$09|0);
   // unreachable;
  } else {
   $25 = $7;
  }
 } while(0);
 $24 = ((($25)) + 8|0);
 $26 = +HEAPF32[$24>>2];
 $27 = (+($1|0));
 $28 = $26 == $27;
 if ($28) {
  $29 = ((($25)) + 12|0);
  $30 = +HEAPF32[$29>>2];
  $31 = (+($2|0));
  $32 = $30 == $31;
  if ($32) {
   STACKTOP = sp;return;
  } else {
   $$pre$phiZ2D = $31;
  }
 } else {
  $$pre11 = (+($2|0));
  $$pre$phiZ2D = $$pre11;
 }
 __Z9RECT_Makeffff($4,0.0,0.0,$27,$$pre$phiZ2D);
 $33 = ((($0)) + 28|0);
 dest=$33; src=$4; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $34 = ((($0)) + 44|0);
 HEAPF32[$34>>2] = $3;
 $35 = HEAP32[$6>>2]|0;
 __Z9SIZE_Makeff($5,$27,$$pre$phiZ2D);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$5+4>>2]|0;
 __ZN7Surface7setSizeE5_SIZE($35,$$byval_copy);
 $36 = ((($0)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  STACKTOP = sp;return;
 }
 $39 = ((($0)) + 92|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = ($40<<24>>24)==(0);
 if ($41) {
  $42 = HEAP32[$6>>2]|0;
  $43 = ($42|0)==(0|0);
  if ($43) {
   $56 = $37;
  } else {
   $44 = HEAP32[$37>>2]|0;
   $45 = ((($44)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   FUNCTION_TABLE_vi[$46 & 1023]($37);
   __ZN6Window13prepareToDrawEv($0);
   $47 = HEAP32[$36>>2]|0;
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($48)) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   FUNCTION_TABLE_vii[$50 & 1023]($47,$0);
   $51 = HEAP32[$36>>2]|0;
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($52)) + 28|0);
   $54 = HEAP32[$53>>2]|0;
   FUNCTION_TABLE_vi[$54 & 1023]($51);
   HEAP8[$39>>0] = 1;
   $$pre10 = HEAP32[$36>>2]|0;
   $56 = $$pre10;
  }
 } else {
  $56 = $37;
 }
 $55 = ((($56)) + 8|0);
 $57 = HEAP32[$55>>2]|0;
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($58)) + 68|0);
 $60 = HEAP32[$59>>2]|0;
 FUNCTION_TABLE_vi[$60 & 1023]($57);
 STACKTOP = sp;return;
}
function __ZN6Window4drawEv($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink$i = 0, $$sroa$022$0$be = 0, $$sroa$022$027 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 77|0);
 HEAP8[$1>>0] = 0;
 __ZN6Window13prepareToDrawEv($0);
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = ((($3)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($0)) + 76|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)==(0);
  if ($9) {
   $10 = ((($0)) + 48|0);
   HEAP8[$10>>0] = 1;
   $11 = HEAP32[$6>>2]|0;
   $12 = ((($11)) + 72|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($0)) + 36|0);
   $15 = +HEAPF32[$14>>2];
   $16 = ((($0)) + 40|0);
   $17 = +HEAPF32[$16>>2];
   FUNCTION_TABLE_vidd[$13 & 1023]($6,$15,$17);
   $18 = HEAP32[$6>>2]|0;
   $19 = ((($18)) + 76|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_vi[$20 & 1023]($6);
   HEAP8[$7>>0] = 1;
   HEAP8[$10>>0] = 0;
  }
  $21 = ((($0)) + 24|0);
  $22 = HEAP32[$21>>2]|0;
  __ZN7Surface6renderEP4ViewP6Window($22,$6,$0);
 }
 $23 = (_time((0|0))|0);
 $24 = HEAP32[7765]|0;
 $25 = ($23|0)==($24|0);
 $26 = HEAP32[7766]|0;
 if ($25) {
  $27 = (($26) + 1)|0;
  $$sink$i = $27;
 } else {
  $28 = _emscripten_asm_const_ii(0, ($26|0))|0;
  $29 = HEAP32[7766]|0;
  HEAP32[$vararg_buffer>>2] = $29;
  (_printf(18275,$vararg_buffer)|0);
  HEAP32[7765] = $23;
  $$sink$i = 1;
 }
 HEAP32[7766] = $$sink$i;
 $30 = (__ZN3App13currentMillisEv(28952)|0);
 $31 = ((($0)) + 68|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($0)) + 64|0);
 $34 = $32;
 $35 = ($34|0)==($33|0);
 $$pre = ((($0)) + 72|0);
 L11: do {
  if (!($35)) {
   $$sroa$022$027 = $32;$43 = $34;
   while(1) {
    $36 = $$sroa$022$027;
    $37 = ((($36)) + 8|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ((($38)) + 60|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)==(0);
    if ($41) {
     $42 = ((($43)) + 4|0);
     $44 = HEAP32[$42>>2]|0;
     $45 = HEAP32[$43>>2]|0;
     $46 = ((($45)) + 4|0);
     HEAP32[$46>>2] = $44;
     $47 = HEAP32[$42>>2]|0;
     HEAP32[$47>>2] = $45;
     $48 = HEAP32[$$pre>>2]|0;
     $49 = (($48) + -1)|0;
     HEAP32[$$pre>>2] = $49;
     $50 = ((($43)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==(0|0);
     if (!($52)) {
      __THREW__ = 0;
      invoke_vi(525,($51|0));
      $53 = __THREW__; __THREW__ = 0;
      $54 = $53&1;
      if ($54) {
       break;
      }
     }
     $57 = $$sroa$022$027;
     __ZdlPv($57);
     $$sroa$022$0$be = $44;
    } else {
     $58 = HEAP32[$38>>2]|0;
     $59 = ((($58)) + 28|0);
     $60 = HEAP32[$59>>2]|0;
     FUNCTION_TABLE_vii[$60 & 1023]($38,$30);
     $61 = ((($43)) + 4|0);
     $62 = HEAP32[$61>>2]|0;
     $$sroa$022$0$be = $62;
    }
    $63 = $$sroa$022$0$be;
    $64 = ($63|0)==($33|0);
    if ($64) {
     break L11;
    } else {
     $$sroa$022$027 = $$sroa$022$0$be;$43 = $63;
    }
   }
   $55 = ___cxa_find_matching_catch_3(0|0)|0;
   $56 = tempRet0;
   ___clang_call_terminate($55);
   // unreachable;
  }
 } while(0);
 __ZN6Object19flushAutodeletePoolEv();
 $65 = HEAP32[$$pre>>2]|0;
 $66 = ($65|0)==(0);
 if ($66) {
  STACKTOP = sp;return;
 }
 $67 = HEAP32[$0>>2]|0;
 $68 = ((($67)) + 24|0);
 $69 = HEAP32[$68>>2]|0;
 FUNCTION_TABLE_vi[$69 & 1023]($0);
 STACKTOP = sp;return;
}
function __ZN6Window13requestRedrawEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 77|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  return;
 }
 HEAP8[$1>>0] = 1;
 __ZN3App13requestRedrawEv(28952);
 return;
}
function __ZN6Window18dispatchInputEventEiilii($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$off = 0, $$sroa$016$0$$sroa$016$0$27 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0.0, $phitmp = 0, $switch = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmpcast$byval_copy = sp + 24|0;
 $6 = sp + 8|0;
 $7 = sp + 16|0;
 $8 = sp;
 $9 = (+($4|0));
 $10 = (+($5|0));
 __Z10POINT_Makeff($6,$9,$10);
 $11 = $2 >> 8;
 $$off = (($11) + -1)|0;
 $switch = ($$off>>>0)<(2);
 if (!($switch)) {
  STACKTOP = sp;return;
 }
 HEAP32[$7>>2] = 0;
 $12 = ((($0)) + 52|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 56|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($13|0)==($15|0);
 L4: do {
  if ($16) {
   label = 6;
  } else {
   $$sroa$016$0$$sroa$016$0$27 = $13;
   while(1) {
    $17 = HEAP32[$$sroa$016$0$$sroa$016$0$27>>2]|0;
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==($2|0);
    if ($19) {
     break;
    }
    $20 = ((($$sroa$016$0$$sroa$016$0$27)) + 4|0);
    $21 = ($20|0)==($15|0);
    if ($21) {
     label = 6;
     break L4;
    } else {
     $$sroa$016$0$$sroa$016$0$27 = $20;
    }
   }
   $22 = HEAP32[$$sroa$016$0$$sroa$016$0$27>>2]|0;
   HEAP32[$7>>2] = $22;
   $phitmp = ($22|0)==(0);
   if ($phitmp) {
    label = 6;
   }
  }
 } while(0);
 do {
  if ((label|0) == 6) {
   $23 = (__Znwj(164)|0);
   $24 = ((($23)) + 4|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($23)) + 160|0);
   HEAP32[$25>>2] = 0;
   HEAP32[$23>>2] = $2;
   $26 = ((($23)) + 24|0);
   HEAP8[$26>>0] = 0;
   $27 = ((($23)) + 8|0);
   HEAP32[$27>>2] = 0;
   $28 = ((($23)) + 156|0);
   HEAP32[$28>>2] = 0;
   $29 = ((($23)) + 152|0);
   HEAP32[$29>>2] = 0;
   HEAP32[$7>>2] = $23;
   $30 = ((($0)) + 60|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($15|0)==($31|0);
   if ($32) {
    __ZNSt3__26vectorIPN6Window13MotionTrackerENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_($12,$7);
    break;
   } else {
    $33 = $23;
    HEAP32[$15>>2] = $33;
    $34 = HEAP32[$14>>2]|0;
    $35 = ((($34)) + 4|0);
    HEAP32[$14>>2] = $35;
    break;
   }
  }
 } while(0);
 $36 = HEAP32[$7>>2]|0;
 $37 = $6;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = (($37) + 4)|0;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = $8;
 $44 = $43;
 HEAP32[$44>>2] = $39;
 $45 = (($43) + 4)|0;
 $46 = $45;
 HEAP32[$46>>2] = $42;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$8>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$8+4>>2]|0;
 __ZN6Window13MotionTracker18dispatchInputEventEil6_POINTPS_($36,$1,$3,$tmpcast$byval_copy,$0);
 STACKTOP = sp;return;
}
function __ZN6Window12offsetToViewEP4View($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$08 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = ($2|0)==(0|0);
 if ($7) {
  return;
 }
 $8 = ((($1)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 4|0);
 $$08 = $2;$17 = 0.0;$21 = 0.0;
 while(1) {
  $13 = ($$08|0)==($11|0);
  if ($13) {
   label = 5;
   break;
  }
  $14 = ((($$08)) + 107|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$14>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$14+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$14+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$14+3>>0];$15 = +HEAPF32[tempDoublePtr>>2];
  $16 = $15 + $17;
  HEAPF32[$0>>2] = $16;
  $18 = ((($$08)) + 111|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$18>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$18+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$18+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$18+3>>0];$19 = +HEAPF32[tempDoublePtr>>2];
  $20 = $19 + $21;
  HEAPF32[$12>>2] = $20;
  $22 = ((($$08)) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  if ($24) {
   label = 5;
   break;
  } else {
   $$08 = $23;$17 = $16;$21 = $20;
  }
 }
 if ((label|0) == 5) {
  return;
 }
}
function __ZN6Window17setFirstResponderEP4View($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 80|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$2>>2] = $1;
 $5 = ($1|0)==(0|0);
 if ($5) {
  $$0 = 1;
  return ($$0|0);
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 220|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_ii[$8 & 1023]($1)|0);
 $10 = ((($0)) + 84|0);
 HEAP32[$10>>2] = $9;
 $11 = ($9|0)==(0|0);
 if ($11) {
  $$0 = 1;
  return ($$0|0);
 }
 $$0 = 1;
 return ($$0|0);
}
function __ZNSt3__26vectorIPN6Window13MotionTrackerENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>(1073741823);
 if ($8) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($4))|0;
 $12 = $11 >> 2;
 $13 = ($12>>>0)<(536870911);
 $14 = $11 >> 1;
 $15 = ($14>>>0)<($7>>>0);
 $$sroa$speculated$i = $15 ? $7 : $14;
 $$sroa$speculated$$i = $13 ? $$sroa$speculated$i : 1073741823;
 $16 = ($$sroa$speculated$$i|0)==(0);
 do {
  if ($16) {
   $26 = 0;
  } else {
   $17 = ($$sroa$speculated$$i>>>0)>(1073741823);
   if (!($17)) {
    $23 = $$sroa$speculated$$i << 2;
    $24 = (__Znwj($23)|0);
    $26 = $24;
    break;
   }
   $18 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(568,($18|0),(23604|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $21 = ___cxa_find_matching_catch_2()|0;
    $22 = tempRet0;
    ___cxa_free_exception(($18|0));
    ___resumeException($21|0);
    // unreachable;
   } else {
    HEAP32[$18>>2] = (9544);
    ___cxa_throw(($18|0),(1992|0),(506|0));
    // unreachable;
   }
  }
 } while(0);
 $25 = (($26) + ($6<<2)|0);
 $27 = (($26) + ($$sroa$speculated$$i<<2)|0);
 $28 = $27;
 $29 = HEAP32[$1>>2]|0;
 HEAP32[$25>>2] = $29;
 $30 = ((($25)) + 4|0);
 $31 = $30;
 $32 = (0 - ($6))|0;
 $33 = (($25) + ($32<<2)|0);
 $34 = $33;
 $35 = ($5|0)>(0);
 if ($35) {
  $36 = $4;
  _memcpy(($33|0),($36|0),($5|0))|0;
 }
 HEAP32[$0>>2] = $34;
 HEAP32[$2>>2] = $31;
 HEAP32[$9>>2] = $28;
 $37 = ($4|0)==(0);
 if ($37) {
  return;
 }
 $38 = $4;
 __ZdlPv($38);
 return;
}
function __ZN6Window13MotionTracker18dispatchInputEventEil6_POINTPS_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$v = 0, $$078 = 0, $$079 = 0, $$85 = 0, $$byval_copy = 0, $$off = 0, $$pr = 0, $$sroa$0$0$$sroa_idx$i = 0, $$sroa$028$0$$sroa_idx = 0, $$sroa$028$0$copyload = 0.0, $$sroa$2$0$$sroa_idx4$i = 0, $$sroa$3$0$$sroa_idx5$i = 0, $$sroa$4$0$$sroa_idx30 = 0, $$sroa$4$0$copyload = 0.0, $$sroa$7$0$$sroa_idx5 = 0, $$sroa$speculated = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0;
 var $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $tmpcast$byval_copy = 0;
 var $tmpcast80$byval_copy = 0, $tmpcast81$byval_copy = 0, $tmpcast82$byval_copy = 0, $tmpcast83$byval_copy = 0, $tmpcast84$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $$byval_copy = sp + 144|0;
 $tmpcast$byval_copy = sp + 136|0;
 $tmpcast80$byval_copy = sp + 128|0;
 $tmpcast81$byval_copy = sp + 120|0;
 $tmpcast83$byval_copy = sp + 112|0;
 $tmpcast82$byval_copy = sp + 104|0;
 $tmpcast84$byval_copy = sp + 96|0;
 $vararg_buffer = sp + 72|0;
 $5 = sp + 88|0;
 $6 = sp + 64|0;
 $7 = sp + 56|0;
 $8 = sp + 48|0;
 $9 = sp + 40|0;
 $10 = sp + 32|0;
 $11 = sp + 24|0;
 $12 = sp;
 $13 = sp + 80|0;
 HEAP32[$5>>2] = $2;
 $14 = ((($0)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $17 = ((($15)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if ($19) {
   __ZN6Object7releaseEv($15);
   HEAP32[$14>>2] = 0;
  }
 }
 $20 = ($1|0)==(0);
 if ($20) {
  $21 = ((($0)) + 24|0);
  HEAP8[$21>>0] = 0;
  $22 = ((($0)) + 160|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  if (!($24)) {
   $25 = HEAP32[$23>>2]|0;
   $26 = ((($25)) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   FUNCTION_TABLE_vi[$27 & 1023]($23);
   $28 = HEAP32[$22>>2]|0;
   $29 = ($28|0)==(0|0);
   if (!($29)) {
    __ZN6Object7releaseEv($28);
    HEAP32[$22>>2] = 0;
   }
   $30 = ((($0)) + 20|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + 1)|0;
   HEAP32[$30>>2] = $32;
  }
  $33 = ((($0)) + 156|0);
  HEAP32[$33>>2] = 0;
  $34 = ((($0)) + 152|0);
  HEAP32[$34>>2] = 0;
  $35 = ((($0)) + 12|0);
  $36 = $3;
  $37 = $36;
  $38 = HEAPU8[$37>>0]|(HEAPU8[$37+1>>0]<<8)|(HEAPU8[$37+2>>0]<<16)|(HEAPU8[$37+3>>0]<<24);
  $39 = (($36) + 4)|0;
  $40 = $39;
  $41 = HEAPU8[$40>>0]|(HEAPU8[$40+1>>0]<<8)|(HEAPU8[$40+2>>0]<<16)|(HEAPU8[$40+3>>0]<<24);
  $42 = $35;
  $43 = $42;
  HEAP8[$43>>0]=$38&255;HEAP8[$43+1>>0]=($38>>8)&255;HEAP8[$43+2>>0]=($38>>16)&255;HEAP8[$43+3>>0]=$38>>24;
  $44 = (($42) + 4)|0;
  $45 = $44;
  HEAP8[$45>>0]=$41&255;HEAP8[$45+1>>0]=($41>>8)&255;HEAP8[$45+2>>0]=($41>>16)&255;HEAP8[$45+3>>0]=$41>>24;
  $46 = ((($0)) + 8|0);
  HEAP32[$46>>2] = $2;
  $47 = ((($4)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($48)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($51)) + 212|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = HEAP32[$0>>2]|0;
  $55 = $3;
  $56 = $55;
  $57 = HEAPU8[$56>>0]|(HEAPU8[$56+1>>0]<<8)|(HEAPU8[$56+2>>0]<<16)|(HEAPU8[$56+3>>0]<<24);
  $58 = (($55) + 4)|0;
  $59 = $58;
  $60 = HEAPU8[$59>>0]|(HEAPU8[$59+1>>0]<<8)|(HEAPU8[$59+2>>0]<<16)|(HEAPU8[$59+3>>0]<<24);
  $61 = $6;
  $62 = $61;
  HEAP32[$62>>2] = $57;
  $63 = (($61) + 4)|0;
  $64 = $63;
  HEAP32[$64>>2] = $60;
  ;HEAP32[$tmpcast84$byval_copy>>2]=HEAP32[$6>>2]|0;HEAP32[$tmpcast84$byval_copy+4>>2]=HEAP32[$6+4>>2]|0;
  $65 = (FUNCTION_TABLE_iiiiii[$53 & 1023]($50,0,$54,$2,$tmpcast84$byval_copy)|0);
  $66 = HEAP32[$14>>2]|0;
  $67 = ($66|0)==($65|0);
  if (!($67)) {
   $68 = ($66|0)==(0|0);
   if (!($68)) {
    __ZN6Object7releaseEv($66);
   }
   HEAP32[$14>>2] = $65;
   $69 = ($65|0)==(0|0);
   if (!($69)) {
    __ZN6Object6retainEv($65);
   }
  }
 }
 $70 = ($1|0)==(1);
 $71 = $1 | 1;
 $72 = ($71|0)==(1);
 if ($72) {
  $73 = ((($0)) + 152|0);
  if ($70) {
   $74 = HEAP32[$73>>2]|0;
   $75 = ($74|0)<(1);
   $$$v = $75 ? 9 : -1;
   $$ = (($$$v) + ($74))|0;
   $76 = (((($0)) + 32|0) + ($$<<3)|0);
   $77 = (__ZN6_POINT6equalsERS_($76,$3)|0);
   if ($77) {
    $78 = HEAP32[$5>>2]|0;
    $79 = (((($0)) + 112|0) + ($$<<2)|0);
    HEAP32[$79>>2] = $78;
    STACKTOP = sp;return;
   }
  }
  $80 = HEAP32[$5>>2]|0;
  $81 = HEAP32[$73>>2]|0;
  $82 = (((($0)) + 112|0) + ($81<<2)|0);
  HEAP32[$82>>2] = $80;
  $83 = HEAP32[$73>>2]|0;
  $84 = (((($0)) + 32|0) + ($83<<3)|0);
  $85 = $3;
  $86 = $85;
  $87 = HEAPU8[$86>>0]|(HEAPU8[$86+1>>0]<<8)|(HEAPU8[$86+2>>0]<<16)|(HEAPU8[$86+3>>0]<<24);
  $88 = (($85) + 4)|0;
  $89 = $88;
  $90 = HEAPU8[$89>>0]|(HEAPU8[$89+1>>0]<<8)|(HEAPU8[$89+2>>0]<<16)|(HEAPU8[$89+3>>0]<<24);
  $91 = $84;
  $92 = $91;
  HEAP8[$92>>0]=$87&255;HEAP8[$92+1>>0]=($87>>8)&255;HEAP8[$92+2>>0]=($87>>16)&255;HEAP8[$92+3>>0]=$87>>24;
  $93 = (($91) + 4)|0;
  $94 = $93;
  HEAP8[$94>>0]=$90&255;HEAP8[$94+1>>0]=($90>>8)&255;HEAP8[$94+2>>0]=($90>>16)&255;HEAP8[$94+3>>0]=$90>>24;
  $95 = HEAP32[$73>>2]|0;
  $96 = (($95) + 1)|0;
  $97 = (($96|0) % 10)&-1;
  HEAP32[$73>>2] = $97;
  $98 = ((($0)) + 156|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($99) + 1)|0;
  HEAP32[$98>>2] = $100;
 }
 if ($70) {
  $101 = ((($0)) + 8|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($102|0)==(0);
  if (!($103)) {
   $104 = ((($0)) + 24|0);
   $105 = HEAP8[$104>>0]|0;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    HEAP8[tempDoublePtr>>0]=HEAP8[$3>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$3+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$3+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$3+3>>0];$107 = +HEAPF32[tempDoublePtr>>2];
    $108 = ((($0)) + 12|0);
    $109 = +HEAPF32[$108>>2];
    $110 = $107 - $109;
    $111 = ((($3)) + 4|0);
    HEAP8[tempDoublePtr>>0]=HEAP8[$111>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$111+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$111+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$111+3>>0];$112 = +HEAPF32[tempDoublePtr>>2];
    $113 = ((($0)) + 16|0);
    $114 = +HEAPF32[$113>>2];
    $115 = $112 - $114;
    $116 = $110 * $110;
    $117 = $115 * $115;
    $118 = $116 + $117;
    $119 = (+Math_sqrt((+$118)));
    $120 = (+__ZN3App3idpEf(28952,$119));
    $121 = !($120 >= 10.0);
    if (!($121)) {
     HEAP8[$104>>0] = 1;
     $122 = ((($4)) + 8|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = ((($123)) + 8|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = HEAP32[$125>>2]|0;
     $127 = ((($126)) + 212|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = HEAP32[$0>>2]|0;
     $130 = HEAP32[$5>>2]|0;
     $131 = $3;
     $132 = $131;
     $133 = HEAPU8[$132>>0]|(HEAPU8[$132+1>>0]<<8)|(HEAPU8[$132+2>>0]<<16)|(HEAPU8[$132+3>>0]<<24);
     $134 = (($131) + 4)|0;
     $135 = $134;
     $136 = HEAPU8[$135>>0]|(HEAPU8[$135+1>>0]<<8)|(HEAPU8[$135+2>>0]<<16)|(HEAPU8[$135+3>>0]<<24);
     $137 = $7;
     $138 = $137;
     HEAP32[$138>>2] = $133;
     $139 = (($137) + 4)|0;
     $140 = $139;
     HEAP32[$140>>2] = $136;
     ;HEAP32[$tmpcast82$byval_copy>>2]=HEAP32[$7>>2]|0;HEAP32[$tmpcast82$byval_copy+4>>2]=HEAP32[$7+4>>2]|0;
     $141 = (FUNCTION_TABLE_iiiiii[$128 & 1023]($125,4,$129,$130,$tmpcast82$byval_copy)|0);
     $142 = ($141|0)==(0|0);
     if (!($142)) {
      $143 = HEAP32[$14>>2]|0;
      $144 = ($143|0)==(0|0);
      if ($144) {
       $161 = 0;
      } else {
       $145 = HEAP32[$143>>2]|0;
       $146 = ((($145)) + 212|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = HEAP32[$0>>2]|0;
       $149 = HEAP32[$5>>2]|0;
       $150 = $3;
       $151 = $150;
       $152 = HEAPU8[$151>>0]|(HEAPU8[$151+1>>0]<<8)|(HEAPU8[$151+2>>0]<<16)|(HEAPU8[$151+3>>0]<<24);
       $153 = (($150) + 4)|0;
       $154 = $153;
       $155 = HEAPU8[$154>>0]|(HEAPU8[$154+1>>0]<<8)|(HEAPU8[$154+2>>0]<<16)|(HEAPU8[$154+3>>0]<<24);
       $156 = $8;
       $157 = $156;
       HEAP32[$157>>2] = $152;
       $158 = (($156) + 4)|0;
       $159 = $158;
       HEAP32[$159>>2] = $155;
       ;HEAP32[$tmpcast83$byval_copy>>2]=HEAP32[$8>>2]|0;HEAP32[$tmpcast83$byval_copy+4>>2]=HEAP32[$8+4>>2]|0;
       (FUNCTION_TABLE_iiiiii[$147 & 1023]($143,3,$148,$149,$tmpcast83$byval_copy)|0);
       $$pr = HEAP32[$14>>2]|0;
       $161 = $$pr;
      }
      $160 = ($161|0)==($141|0);
      if (!($160)) {
       $162 = ($161|0)==(0|0);
       if (!($162)) {
        __ZN6Object7releaseEv($161);
       }
       HEAP32[$14>>2] = $141;
       __ZN6Object6retainEv($141);
      }
     }
    }
   }
  }
  $163 = HEAP32[$14>>2]|0;
  $164 = ($163|0)==(0|0);
  if ($164) {
   STACKTOP = sp;return;
  }
  $165 = HEAP32[$163>>2]|0;
  $166 = ((($165)) + 212|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = HEAP32[$0>>2]|0;
  $169 = HEAP32[$5>>2]|0;
  $170 = $3;
  $171 = $170;
  $172 = HEAPU8[$171>>0]|(HEAPU8[$171+1>>0]<<8)|(HEAPU8[$171+2>>0]<<16)|(HEAPU8[$171+3>>0]<<24);
  $173 = (($170) + 4)|0;
  $174 = $173;
  $175 = HEAPU8[$174>>0]|(HEAPU8[$174+1>>0]<<8)|(HEAPU8[$174+2>>0]<<16)|(HEAPU8[$174+3>>0]<<24);
  $176 = $9;
  $177 = $176;
  HEAP32[$177>>2] = $172;
  $178 = (($176) + 4)|0;
  $179 = $178;
  HEAP32[$179>>2] = $175;
  ;HEAP32[$tmpcast81$byval_copy>>2]=HEAP32[$9>>2]|0;HEAP32[$tmpcast81$byval_copy+4>>2]=HEAP32[$9+4>>2]|0;
  (FUNCTION_TABLE_iiiiii[$167 & 1023]($163,1,$168,$169,$tmpcast81$byval_copy)|0);
  STACKTOP = sp;return;
 }
 $180 = ($1|0)==(2);
 if (!($180)) {
  STACKTOP = sp;return;
 }
 $181 = HEAP32[$14>>2]|0;
 $182 = ($181|0)==(0|0);
 if (!($182)) {
  $183 = HEAP32[$181>>2]|0;
  $184 = ((($183)) + 212|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = HEAP32[$0>>2]|0;
  $187 = HEAP32[$5>>2]|0;
  $188 = $3;
  $189 = $188;
  $190 = HEAPU8[$189>>0]|(HEAPU8[$189+1>>0]<<8)|(HEAPU8[$189+2>>0]<<16)|(HEAPU8[$189+3>>0]<<24);
  $191 = (($188) + 4)|0;
  $192 = $191;
  $193 = HEAPU8[$192>>0]|(HEAPU8[$192+1>>0]<<8)|(HEAPU8[$192+2>>0]<<16)|(HEAPU8[$192+3>>0]<<24);
  $194 = $10;
  $195 = $194;
  HEAP32[$195>>2] = $190;
  $196 = (($194) + 4)|0;
  $197 = $196;
  HEAP32[$197>>2] = $193;
  ;HEAP32[$tmpcast80$byval_copy>>2]=HEAP32[$10>>2]|0;HEAP32[$tmpcast80$byval_copy+4>>2]=HEAP32[$10+4>>2]|0;
  (FUNCTION_TABLE_iiiiii[$185 & 1023]($181,2,$186,$187,$tmpcast80$byval_copy)|0);
 }
 $198 = ((($0)) + 24|0);
 $199 = HEAP8[$198>>0]|0;
 $200 = ($199<<24>>24)==(0);
 L53: do {
  if ($200) {
   $201 = HEAP32[$14>>2]|0;
   $202 = ($201|0)==(0|0);
   if (!($202)) {
    $203 = HEAP32[$201>>2]|0;
    $204 = ((($203)) + 212|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = HEAP32[$0>>2]|0;
    $207 = HEAP32[$5>>2]|0;
    $208 = $3;
    $209 = $208;
    $210 = HEAPU8[$209>>0]|(HEAPU8[$209+1>>0]<<8)|(HEAPU8[$209+2>>0]<<16)|(HEAPU8[$209+3>>0]<<24);
    $211 = (($208) + 4)|0;
    $212 = $211;
    $213 = HEAPU8[$212>>0]|(HEAPU8[$212+1>>0]<<8)|(HEAPU8[$212+2>>0]<<16)|(HEAPU8[$212+3>>0]<<24);
    $214 = $11;
    $215 = $214;
    HEAP32[$215>>2] = $210;
    $216 = (($214) + 4)|0;
    $217 = $216;
    HEAP32[$217>>2] = $213;
    ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$11>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$11+4>>2]|0;
    (FUNCTION_TABLE_iiiiii[$205 & 1023]($201,6,$206,$207,$tmpcast$byval_copy)|0);
    $218 = ((($0)) + 20|0);
    $219 = HEAP32[$218>>2]|0;
    HEAP32[$vararg_buffer>>2] = $219;
    __ZN3App3logEPKcz(28952,18050,$vararg_buffer);
   }
   $220 = ((($12)) + 16|0);
   HEAP32[$12>>2] = (4524);
   $$sroa$0$0$$sroa_idx$i = ((($12)) + 4|0);
   HEAP32[$$sroa$0$0$$sroa_idx$i>>2] = $0;
   $$sroa$2$0$$sroa_idx4$i = ((($12)) + 8|0);
   HEAP32[$$sroa$2$0$$sroa_idx4$i>>2] = $5;
   $$sroa$3$0$$sroa_idx5$i = ((($12)) + 12|0);
   HEAP32[$$sroa$3$0$$sroa_idx5$i>>2] = $3;
   HEAP32[$220>>2] = $12;
   __THREW__ = 0;
   $221 = (invoke_iiii(532,($12|0),400,0)|0);
   $222 = __THREW__; __THREW__ = 0;
   $223 = $222&1;
   do {
    if (!($223)) {
     $224 = ((($0)) + 160|0);
     $225 = HEAP32[$224>>2]|0;
     $226 = ($225|0)==($221|0);
     if (!($226)) {
      $227 = ($225|0)==(0|0);
      if (!($227)) {
       __THREW__ = 0;
       invoke_vi(525,($225|0));
       $228 = __THREW__; __THREW__ = 0;
       $229 = $228&1;
       if ($229) {
        break;
       }
      }
      HEAP32[$224>>2] = $221;
      $230 = ($221|0)==(0|0);
      if (!($230)) {
       __THREW__ = 0;
       invoke_vi(526,($221|0));
       $231 = __THREW__; __THREW__ = 0;
       $232 = $231&1;
       if ($232) {
        break;
       }
      }
     }
     $233 = HEAP32[$220>>2]|0;
     $234 = ($233|0)==($12|0);
     if ($234) {
      $235 = HEAP32[$233>>2]|0;
      $236 = ((($235)) + 16|0);
      $237 = HEAP32[$236>>2]|0;
      FUNCTION_TABLE_vi[$237 & 1023]($233);
     } else {
      $238 = ($233|0)==(0|0);
      if (!($238)) {
       $239 = HEAP32[$233>>2]|0;
       $240 = ((($239)) + 20|0);
       $241 = HEAP32[$240>>2]|0;
       FUNCTION_TABLE_vi[$241 & 1023]($233);
      }
     }
     break L53;
    }
   } while(0);
   $242 = ___cxa_find_matching_catch_2()|0;
   $243 = tempRet0;
   $244 = HEAP32[$220>>2]|0;
   $245 = ($244|0)==($12|0);
   if ($245) {
    $246 = HEAP32[$244>>2]|0;
    $247 = ((($246)) + 16|0);
    $248 = HEAP32[$247>>2]|0;
    FUNCTION_TABLE_vi[$248 & 1023]($244);
    ___resumeException($242|0);
    // unreachable;
   }
   $249 = ($244|0)==(0|0);
   if ($249) {
    ___resumeException($242|0);
    // unreachable;
   }
   $250 = HEAP32[$244>>2]|0;
   $251 = ((($250)) + 20|0);
   $252 = HEAP32[$251>>2]|0;
   FUNCTION_TABLE_vi[$252 & 1023]($244);
   ___resumeException($242|0);
   // unreachable;
  } else {
   $253 = ((($0)) + 156|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = ($254|0)<(10);
   $$sroa$speculated = $255 ? $254 : 10;
   $256 = ((($0)) + 152|0);
   $257 = HEAP32[$256>>2]|0;
   $258 = (($257) - ($$sroa$speculated))|0;
   $259 = ($258|0)<(0);
   $260 = (($258) + 10)|0;
   $$85 = $259 ? $260 : $258;
   $261 = HEAP32[$5>>2]|0;
   $$078 = $$sroa$speculated;$$079 = $$85;
   while(1) {
    $262 = ($$078|0)>(1);
    if (!($262)) {
     break L53;
    }
    $263 = (($$078) + -1)|0;
    $264 = (((($0)) + 112|0) + ($$079<<2)|0);
    $265 = HEAP32[$264>>2]|0;
    $266 = (($$079) + 1)|0;
    $267 = (($266|0) % 10)&-1;
    $268 = (($261) - ($265))|0;
    $$off = (($268) + -1)|0;
    $269 = ($$off>>>0)>(331);
    if ($269) {
     $$078 = $263;$$079 = $267;
    } else {
     break;
    }
   }
   $270 = (+($268|0));
   $271 = HEAP32[$14>>2]|0;
   $272 = ($271|0)==(0|0);
   if (!($272)) {
    $273 = ((($3)) + 4|0);
    HEAP8[tempDoublePtr>>0]=HEAP8[$273>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$273+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$273+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$273+3>>0];$274 = +HEAPF32[tempDoublePtr>>2];
    $$sroa$4$0$$sroa_idx30 = (((((($0)) + 32|0) + ($$079<<3)|0)) + 4|0);
    HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$4$0$$sroa_idx30>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$4$0$$sroa_idx30+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$4$0$$sroa_idx30+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$4$0$$sroa_idx30+3>>0];$$sroa$4$0$copyload = +HEAPF32[tempDoublePtr>>2];
    $275 = $274 - $$sroa$4$0$copyload;
    $276 = $275 * 1000.0;
    $277 = $276 / $270;
    HEAP8[tempDoublePtr>>0]=HEAP8[$3>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$3+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$3+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$3+3>>0];$278 = +HEAPF32[tempDoublePtr>>2];
    $$sroa$028$0$$sroa_idx = (((($0)) + 32|0) + ($$079<<3)|0);
    HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$028$0$$sroa_idx>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$028$0$$sroa_idx+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$028$0$$sroa_idx+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$028$0$$sroa_idx+3>>0];$$sroa$028$0$copyload = +HEAPF32[tempDoublePtr>>2];
    $279 = $278 - $$sroa$028$0$copyload;
    $280 = $279 * 1000.0;
    $281 = $280 / $270;
    $282 = HEAP32[$271>>2]|0;
    $283 = ((($282)) + 212|0);
    $284 = HEAP32[$283>>2]|0;
    $285 = HEAP32[$0>>2]|0;
    HEAPF32[$13>>2] = $281;
    $$sroa$7$0$$sroa_idx5 = ((($13)) + 4|0);
    HEAPF32[$$sroa$7$0$$sroa_idx5>>2] = $277;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$13+4>>2]|0;
    (FUNCTION_TABLE_iiiiii[$284 & 1023]($271,8,$285,$261,$$byval_copy)|0);
   }
  }
 } while(0);
 $286 = ((($0)) + 8|0);
 HEAP32[$286>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN6Window13MotionTracker18dispatchInputEventEil6_POINTPS2_E3__0NS_9allocatorIS6_EEFvvEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210__function6__funcIZN6Window13MotionTracker18dispatchInputEventEil6_POINTPS2_E3__0NS_9allocatorIS6_EEFvvEE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(16)|0);
 $2 = ((($0)) + 4|0);
 HEAP32[$1>>2] = (4524);
 $3 = ((($1)) + 4|0);
 ;HEAP32[$3>>2]=HEAP32[$2>>2]|0;HEAP32[$3+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$2+8>>2]|0;
 return ($1|0);
}
function __ZNKSt3__210__function6__funcIZN6Window13MotionTracker18dispatchInputEventEil6_POINTPS2_E3__0NS_9allocatorIS6_EEFvvEE7__cloneEPNS0_6__baseIS9_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 HEAP32[$1>>2] = (4524);
 $3 = ((($1)) + 4|0);
 ;HEAP32[$3>>2]=HEAP32[$2>>2]|0;HEAP32[$3+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$2+8>>2]|0;
 return;
}
function __ZNSt3__210__function6__funcIZN6Window13MotionTracker18dispatchInputEventEil6_POINTPS2_E3__0NS_9allocatorIS6_EEFvvEE7destroyEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__210__function6__funcIZN6Window13MotionTracker18dispatchInputEventEil6_POINTPS2_E3__0NS_9allocatorIS6_EEFvvEE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__210__function6__funcIZN6Window13MotionTracker18dispatchInputEventEil6_POINTPS2_E3__0NS_9allocatorIS6_EEFvvEEclEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$i$i$i$byval_copy = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmpcast$i$i$i$byval_copy = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $1 = sp;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = ((($5)) + 20|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $10 = HEAP32[$5>>2]|0;
   $11 = ((($10)) + 212|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$3>>2]|0;
   $14 = ((($0)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($0)) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18;
   $20 = $19;
   $21 = HEAPU8[$20>>0]|(HEAPU8[$20+1>>0]<<8)|(HEAPU8[$20+2>>0]<<16)|(HEAPU8[$20+3>>0]<<24);
   $22 = (($19) + 4)|0;
   $23 = $22;
   $24 = HEAPU8[$23>>0]|(HEAPU8[$23+1>>0]<<8)|(HEAPU8[$23+2>>0]<<16)|(HEAPU8[$23+3>>0]<<24);
   $25 = $1;
   $26 = $25;
   HEAP32[$26>>2] = $21;
   $27 = (($25) + 4)|0;
   $28 = $27;
   HEAP32[$28>>2] = $24;
   ;HEAP32[$tmpcast$i$i$i$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$tmpcast$i$i$i$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
   (FUNCTION_TABLE_iiiiii[$12 & 1023]($5,7,$13,$16,$tmpcast$i$i$i$byval_copy)|0);
  }
 }
 $29 = ((($3)) + 160|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if (!($31)) {
  __ZN6Object7releaseEv($30);
  HEAP32[$29>>2] = 0;
 }
 $32 = ((($3)) + 20|0);
 $33 = HEAP32[$32>>2]|0;
 HEAP32[$vararg_buffer>>2] = $33;
 __ZN3App3logEPKcz(28952,18120,$vararg_buffer);
 HEAP32[$32>>2] = 0;
 $34 = HEAP32[$4>>2]|0;
 $35 = ($34|0)==(0|0);
 if ($35) {
  STACKTOP = sp;return;
 }
 __ZN6Object7releaseEv($34);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__210__function6__funcIZN6Window13MotionTracker18dispatchInputEventEil6_POINTPS2_E3__0NS_9allocatorIS6_EEFvvEE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(18057|0);
 $5 = ((($0)) + 4|0);
 $$0 = $4 ? $5 : 0;
 return ($$0|0);
}
function __ZNKSt3__210__function6__funcIZN6Window13MotionTracker18dispatchInputEventEil6_POINTPS2_E3__0NS_9allocatorIS6_EEFvvEE11target_typeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1232|0);
}
function __ZN6Window13prepareToDrawEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 88|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP32[$1>>2] = 1;
  _glDepthMask(1);
  _glClear(256);
  _glDepthMask(0);
  _glClearColor(1.0,0.0,0.0,1.0);
  _glClear(16384);
  _glDisable(2929);
  _glActiveTexture(33984);
  $4 = ((($0)) + 124|0);
  HEAP32[$4>>2] = 0;
  _glDisable(3042);
  $5 = ((($0)) + 100|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 & -2;
  HEAP8[$5>>0] = $7;
  _glDisable(3089);
  $8 = ((($0)) + 96|0);
  $9 = HEAP32[$8>>2]|0;
  __ZN10QuadBuffer4bindEv($9);
  $10 = ((($0)) + 120|0);
  HEAP32[$10>>2] = 0;
 }
 $11 = ((($0)) + 116|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[$11>>2] = $13;
 $14 = ((($0)) + 108|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($0)) + 104|0);
 HEAP32[$15>>2] = 0;
 return;
}
function __ZN6WindowC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev($0);
 HEAP32[$0>>2] = (4476);
 $1 = ((($0)) + 8|0);
 $2 = ((($0)) + 44|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;
 HEAPF32[$2>>2] = 1.0;
 $3 = ((($0)) + 52|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 56|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 60|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 64|0);
 HEAP32[$6>>2] = $6;
 $7 = ((($0)) + 68|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($0)) + 72|0);
 HEAP32[$8>>2] = 0;
 return;
}
function __ZN6Window12setBlendModeEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 124|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if ($4) {
  return;
 }
 switch ($1|0) {
 case 0:  {
  _glDisable(3042);
  break;
 }
 case 1:  {
  _glBlendFunc(770,771);
  label = 6;
  break;
 }
 default: {
  _glBlendFunc(1,771);
  label = 6;
 }
 }
 if ((label|0) == 6) {
  $5 = HEAP32[$2>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   _glEnable(3042);
  }
 }
 HEAP32[$2>>2] = $1;
 return;
}
function __ZN6Window19glEnableScissorTestEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$mask2 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 100|0);
 $3 = HEAP8[$2>>0]|0;
 $$mask2 = $3 & 1;
 $4 = ($$mask2<<24>>24)==(0);
 if ($1) {
  if (!($4)) {
   return;
  }
  $5 = $3 | 1;
  HEAP8[$2>>0] = $5;
  _glEnable(3089);
  return;
 } else {
  if ($4) {
   return;
  }
  $6 = $3 & -2;
  HEAP8[$2>>0] = $6;
  _glDisable(3089);
  return;
 }
}
function __ZN6Window17setCurrentSurfaceEP7Surface($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 108|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if ($4) {
  return;
 }
 HEAP32[$2>>2] = $1;
 __ZN7Surface3useEv($1);
 return;
}
function __ZN6Window15setVertexConfigEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 120|0);
 HEAP32[$2>>2] = $1;
 _glVertexAttribPointer(0,2,5126,0,32,(0|0));
 _glVertexAttribPointer(1,2,5126,0,32,((8)|0));
 _glVertexAttribPointer(2,4,5121,1,32,((16)|0));
 _glEnableVertexAttribArray(0);
 _glEnableVertexAttribArray(1);
 _glEnableVertexAttribArray(2);
 return;
}
function __ZN6Window11bindTextureEP6Bitmap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if ($5) {
  return;
 }
 HEAP32[$3>>2] = $1;
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vi[$8 & 1023]($1);
 return;
}
function __ZN8OSBitmapD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4568);
 $1 = ((($0)) + 8|0);
 HEAP32[$1>>2] = (4604);
 $2 = ((($0)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  _free($3);
 }
 $5 = ((($0)) + 80|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 64|0);
 $8 = ($6|0)==($7|0);
 if ($8) {
  $9 = HEAP32[$6>>2]|0;
  $10 = ((($9)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_vi[$11 & 1023]($6);
 } else {
  $12 = ($6|0)==(0|0);
  if (!($12)) {
   $13 = HEAP32[$6>>2]|0;
   $14 = ((($13)) + 20|0);
   $15 = HEAP32[$14>>2]|0;
   FUNCTION_TABLE_vi[$15 & 1023]($6);
  }
 }
 $16 = ((($0)) + 44|0);
 $17 = HEAP32[$16>>2]|0;
 __THREW__ = 0;
 invoke_vi(661,($17|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch_3(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 }
 $22 = ((($0)) + 40|0);
 $23 = HEAP32[$22>>2]|0;
 __THREW__ = 0;
 invoke_vi(661,($23|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $26 = ___cxa_find_matching_catch_3(0|0)|0;
  $27 = tempRet0;
  ___clang_call_terminate($26);
  // unreachable;
 } else {
  __ZN6BitmapD2Ev($0);
  return;
 }
}
function __ZN8OSBitmapD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8OSBitmapD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN8OSBitmap4lockEP9PIXELDATAb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$05 = 0, $$10 = 0, $$1019 = 0, $$11 = 0, $$1120 = 0, $$15 = 0, $$1524 = 0, $$16 = 0, $$1625 = 0, $$17 = 0, $$1726 = 0, $$18 = 0, $$1827 = 0, $$19 = 0, $$1928 = 0, $$3 = 0, $$312 = 0, $$4 = 0, $$413 = 0;
 var $$5 = 0, $$514 = 0, $$6 = 0, $$615 = 0, $$7 = 0, $$716 = 0, $$8 = 0, $$817 = 0, $$9 = 0, $$918 = 0, $$pre = 0, $$pre$phi165Z2D = 0, $$pre$phi167Z2D = 0, $$pre$phi169Z2D = 0, $$pre$phiZ2D = 0, $$pre$pre$phiZZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0.0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0;
 var $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$index2Z2D = 0;
 var $eh$lpad$body$indexZ2D = 0, $eh$lpad$body37$index7Z2D = 0, $eh$lpad$body37$indexZ2D = 0, $eh$lpad$body84$index12Z2D = 0, $eh$lpad$body84$indexZ2D = 0, $eh$lpad$body88$index17Z2D = 0, $eh$lpad$body88$indexZ2D = 0, $eh$lpad$body96$index22Z2D = 0, $eh$lpad$body96$indexZ2D = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer = sp + 96|0;
 $3 = sp + 88|0;
 $4 = sp + 80|0;
 $5 = sp + 152|0;
 $6 = sp + 72|0;
 $7 = sp + 64|0;
 $8 = sp + 56|0;
 $9 = sp + 48|0;
 $10 = sp + 40|0;
 $11 = sp + 32|0;
 $12 = sp + 24|0;
 $13 = sp + 16|0;
 $14 = sp + 8|0;
 $15 = sp;
 $16 = sp + 148|0;
 $17 = sp + 144|0;
 $18 = sp + 140|0;
 $19 = sp + 136|0;
 $20 = sp + 132|0;
 $21 = sp + 128|0;
 $22 = sp + 124|0;
 $23 = sp + 120|0;
 $24 = sp + 116|0;
 $25 = sp + 112|0;
 $26 = sp + 108|0;
 $27 = sp + 104|0;
 $28 = sp + 100|0;
 $29 = ((($0)) + 40|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==((2)|0);
 L1: do {
  if ($31) {
   $$pre = ((($0)) + 48|0);
   $$pre$phi169Z2D = $$pre;
  } else {
   $32 = (__emval_get_global((18955|0))|0);
   __THREW__ = 0;
   $33 = (invoke_ii(662,(18964|0))|0);
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   do {
    if ($35) {
     $186 = ___cxa_find_matching_catch_2()|0;
     $187 = tempRet0;
     $$0 = $187;$$05 = $186;
    } else {
     HEAP32[$17>>2] = $33;
     __THREW__ = 0;
     invoke_viiii(663,($16|0),($32|0),(18971|0),($17|0));
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if ($37) {
      $188 = ___cxa_find_matching_catch_2()|0;
      $189 = tempRet0;
      $190 = HEAP32[$17>>2]|0;
      __THREW__ = 0;
      invoke_vi(661,($190|0));
      $191 = __THREW__; __THREW__ = 0;
      $192 = $191&1;
      if (!($192)) {
       $$0 = $189;$$05 = $188;
       break;
      }
      $193 = ___cxa_find_matching_catch_3(0|0)|0;
      $194 = tempRet0;
      ___clang_call_terminate($193);
      // unreachable;
     }
     $38 = HEAP32[$17>>2]|0;
     __THREW__ = 0;
     invoke_vi(661,($38|0));
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if ($40) {
      $41 = ___cxa_find_matching_catch_3(0|0)|0;
      $42 = tempRet0;
      ___clang_call_terminate($41);
      // unreachable;
     }
     __THREW__ = 0;
     invoke_vi(661,($32|0));
     $43 = __THREW__; __THREW__ = 0;
     $44 = $43&1;
     if ($44) {
      $45 = ___cxa_find_matching_catch_3(0|0)|0;
      $46 = tempRet0;
      ___clang_call_terminate($45);
      // unreachable;
     }
     $47 = ((($0)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     HEAP32[$15>>2] = $48;
     __THREW__ = 0;
     $49 = (invoke_iii(664,(2144|0),($15|0))|0);
     $50 = __THREW__; __THREW__ = 0;
     $51 = $50&1;
     L17: do {
      if ($51) {
       $199 = ___cxa_find_matching_catch_2()|0;
       $200 = tempRet0;
       $$18 = $200;$$1827 = $199;$$pre$phi167Z2D = $16;
      } else {
       $52 = HEAP32[$16>>2]|0;
       __THREW__ = 0;
       $53 = (invoke_ii(662,(23221|0))|0);
       $54 = __THREW__; __THREW__ = 0;
       $55 = $54&1;
       do {
        if ($55) {
         $201 = ___cxa_find_matching_catch_2()|0;
         $202 = tempRet0;
         $eh$lpad$body$index2Z2D = $202;$eh$lpad$body$indexZ2D = $201;
        } else {
         __THREW__ = 0;
         invoke_viii(665,($52|0),($53|0),($49|0));
         $56 = __THREW__; __THREW__ = 0;
         $57 = $56&1;
         if ($57) {
          $62 = ___cxa_find_matching_catch_2()|0;
          $63 = tempRet0;
          __THREW__ = 0;
          invoke_vi(661,($53|0));
          $64 = __THREW__; __THREW__ = 0;
          $65 = $64&1;
          if (!($65)) {
           $eh$lpad$body$index2Z2D = $63;$eh$lpad$body$indexZ2D = $62;
           break;
          }
          $66 = ___cxa_find_matching_catch_3(0|0)|0;
          $67 = tempRet0;
          ___clang_call_terminate($66);
          // unreachable;
         }
         __THREW__ = 0;
         invoke_vi(661,($53|0));
         $58 = __THREW__; __THREW__ = 0;
         $59 = $58&1;
         if ($59) {
          $60 = ___cxa_find_matching_catch_3(0|0)|0;
          $61 = tempRet0;
          ___clang_call_terminate($60);
          // unreachable;
         }
         __THREW__ = 0;
         invoke_vi(661,($49|0));
         $68 = __THREW__; __THREW__ = 0;
         $69 = $68&1;
         if ($69) {
          $70 = ___cxa_find_matching_catch_3(0|0)|0;
          $71 = tempRet0;
          ___clang_call_terminate($70);
          // unreachable;
         }
         $72 = ((($0)) + 16|0);
         $73 = HEAP32[$72>>2]|0;
         HEAP32[$14>>2] = $73;
         __THREW__ = 0;
         $74 = (invoke_iii(664,(2144|0),($14|0))|0);
         $75 = __THREW__; __THREW__ = 0;
         $76 = $75&1;
         if ($76) {
          $207 = ___cxa_find_matching_catch_2()|0;
          $208 = tempRet0;
          $$18 = $208;$$1827 = $207;$$pre$phi167Z2D = $16;
          break L17;
         }
         $77 = HEAP32[$16>>2]|0;
         __THREW__ = 0;
         $78 = (invoke_ii(662,(23214|0))|0);
         $79 = __THREW__; __THREW__ = 0;
         $80 = $79&1;
         do {
          if ($80) {
           $209 = ___cxa_find_matching_catch_2()|0;
           $210 = tempRet0;
           $eh$lpad$body37$index7Z2D = $210;$eh$lpad$body37$indexZ2D = $209;
          } else {
           __THREW__ = 0;
           invoke_viii(665,($77|0),($78|0),($74|0));
           $81 = __THREW__; __THREW__ = 0;
           $82 = $81&1;
           if ($82) {
            $87 = ___cxa_find_matching_catch_2()|0;
            $88 = tempRet0;
            __THREW__ = 0;
            invoke_vi(661,($78|0));
            $89 = __THREW__; __THREW__ = 0;
            $90 = $89&1;
            if (!($90)) {
             $eh$lpad$body37$index7Z2D = $88;$eh$lpad$body37$indexZ2D = $87;
             break;
            }
            $91 = ___cxa_find_matching_catch_3(0|0)|0;
            $92 = tempRet0;
            ___clang_call_terminate($91);
            // unreachable;
           }
           __THREW__ = 0;
           invoke_vi(661,($78|0));
           $83 = __THREW__; __THREW__ = 0;
           $84 = $83&1;
           if ($84) {
            $85 = ___cxa_find_matching_catch_3(0|0)|0;
            $86 = tempRet0;
            ___clang_call_terminate($85);
            // unreachable;
           }
           __THREW__ = 0;
           invoke_vi(661,($74|0));
           $93 = __THREW__; __THREW__ = 0;
           $94 = $93&1;
           if ($94) {
            $95 = ___cxa_find_matching_catch_3(0|0)|0;
            $96 = tempRet0;
            ___clang_call_terminate($95);
            // unreachable;
           }
           __THREW__ = 0;
           $97 = (invoke_ii(662,(19251|0))|0);
           $98 = __THREW__; __THREW__ = 0;
           $99 = $98&1;
           do {
            if ($99) {
             $215 = ___cxa_find_matching_catch_2()|0;
             $216 = tempRet0;
             $$3 = $216;$$312 = $215;
            } else {
             HEAP32[$19>>2] = $97;
             $100 = HEAP32[$16>>2]|0;
             __THREW__ = 0;
             invoke_viiii(663,($18|0),($100|0),(19254|0),($19|0));
             $101 = __THREW__; __THREW__ = 0;
             $102 = $101&1;
             if ($102) {
              $217 = ___cxa_find_matching_catch_2()|0;
              $218 = tempRet0;
              $219 = HEAP32[$19>>2]|0;
              __THREW__ = 0;
              invoke_vi(661,($219|0));
              $220 = __THREW__; __THREW__ = 0;
              $221 = $220&1;
              if (!($221)) {
               $$3 = $218;$$312 = $217;
               break;
              }
              $222 = ___cxa_find_matching_catch_3(0|0)|0;
              $223 = tempRet0;
              ___clang_call_terminate($222);
              // unreachable;
             }
             $103 = HEAP32[$19>>2]|0;
             __THREW__ = 0;
             invoke_vi(661,($103|0));
             $104 = __THREW__; __THREW__ = 0;
             $105 = $104&1;
             if ($105) {
              $106 = ___cxa_find_matching_catch_3(0|0)|0;
              $107 = tempRet0;
              ___clang_call_terminate($106);
              // unreachable;
             }
             HEAP32[$13>>2] = 0;
             __THREW__ = 0;
             $108 = (invoke_iii(664,(2144|0),($13|0))|0);
             $109 = __THREW__; __THREW__ = 0;
             $110 = $109&1;
             L59: do {
              if ($110) {
               $224 = ___cxa_find_matching_catch_2()|0;
               $225 = tempRet0;
               $$7 = $225;$$716 = $224;
               label = 88;
              } else {
               HEAP32[$20>>2] = $108;
               HEAP32[$12>>2] = 0;
               __THREW__ = 0;
               $111 = (invoke_iii(664,(2144|0),($12|0))|0);
               $112 = __THREW__; __THREW__ = 0;
               $113 = $112&1;
               do {
                if ($113) {
                 $226 = ___cxa_find_matching_catch_2()|0;
                 $227 = tempRet0;
                 $$6 = $227;$$615 = $226;
                } else {
                 HEAP32[$21>>2] = $111;
                 $114 = HEAP32[$47>>2]|0;
                 HEAP32[$11>>2] = $114;
                 __THREW__ = 0;
                 $115 = (invoke_iii(664,(2144|0),($11|0))|0);
                 $116 = __THREW__; __THREW__ = 0;
                 $117 = $116&1;
                 do {
                  if ($117) {
                   $228 = ___cxa_find_matching_catch_2()|0;
                   $229 = tempRet0;
                   $$5 = $229;$$514 = $228;
                  } else {
                   HEAP32[$22>>2] = $115;
                   $118 = HEAP32[$72>>2]|0;
                   HEAP32[$10>>2] = $118;
                   __THREW__ = 0;
                   $119 = (invoke_iii(664,(2144|0),($10|0))|0);
                   $120 = __THREW__; __THREW__ = 0;
                   $121 = $120&1;
                   do {
                    if ($121) {
                     $230 = ___cxa_find_matching_catch_2()|0;
                     $231 = tempRet0;
                     $$4 = $231;$$413 = $230;
                    } else {
                     HEAP32[$23>>2] = $119;
                     $122 = HEAP32[$18>>2]|0;
                     __THREW__ = 0;
                     invoke_viiiiiii(666,($122|0),(18441|0),($29|0),($20|0),($21|0),($22|0),($23|0));
                     $123 = __THREW__; __THREW__ = 0;
                     $124 = $123&1;
                     if ($124) {
                      $232 = ___cxa_find_matching_catch_2()|0;
                      $233 = tempRet0;
                      $234 = HEAP32[$23>>2]|0;
                      __THREW__ = 0;
                      invoke_vi(661,($234|0));
                      $235 = __THREW__; __THREW__ = 0;
                      $236 = $235&1;
                      if (!($236)) {
                       $$4 = $233;$$413 = $232;
                       break;
                      }
                      $237 = ___cxa_find_matching_catch_3(0|0)|0;
                      $238 = tempRet0;
                      ___clang_call_terminate($237);
                      // unreachable;
                     }
                     $125 = HEAP32[$23>>2]|0;
                     __THREW__ = 0;
                     invoke_vi(661,($125|0));
                     $126 = __THREW__; __THREW__ = 0;
                     $127 = $126&1;
                     if ($127) {
                      $128 = ___cxa_find_matching_catch_3(0|0)|0;
                      $129 = tempRet0;
                      ___clang_call_terminate($128);
                      // unreachable;
                     }
                     $130 = HEAP32[$22>>2]|0;
                     __THREW__ = 0;
                     invoke_vi(661,($130|0));
                     $131 = __THREW__; __THREW__ = 0;
                     $132 = $131&1;
                     if ($132) {
                      $133 = ___cxa_find_matching_catch_3(0|0)|0;
                      $134 = tempRet0;
                      ___clang_call_terminate($133);
                      // unreachable;
                     }
                     $135 = HEAP32[$21>>2]|0;
                     __THREW__ = 0;
                     invoke_vi(661,($135|0));
                     $136 = __THREW__; __THREW__ = 0;
                     $137 = $136&1;
                     if ($137) {
                      $138 = ___cxa_find_matching_catch_3(0|0)|0;
                      $139 = tempRet0;
                      ___clang_call_terminate($138);
                      // unreachable;
                     }
                     $140 = HEAP32[$20>>2]|0;
                     __THREW__ = 0;
                     invoke_vi(661,($140|0));
                     $141 = __THREW__; __THREW__ = 0;
                     $142 = $141&1;
                     if ($142) {
                      $143 = ___cxa_find_matching_catch_3(0|0)|0;
                      $144 = tempRet0;
                      ___clang_call_terminate($143);
                      // unreachable;
                     }
                     HEAP32[$9>>2] = 0;
                     __THREW__ = 0;
                     $145 = (invoke_iii(664,(2144|0),($9|0))|0);
                     $146 = __THREW__; __THREW__ = 0;
                     $147 = $146&1;
                     do {
                      if ($147) {
                       $254 = ___cxa_find_matching_catch_2()|0;
                       $255 = tempRet0;
                       $$11 = $255;$$1120 = $254;
                      } else {
                       HEAP32[$25>>2] = $145;
                       HEAP32[$8>>2] = 0;
                       __THREW__ = 0;
                       $148 = (invoke_iii(664,(2144|0),($8|0))|0);
                       $149 = __THREW__; __THREW__ = 0;
                       $150 = $149&1;
                       do {
                        if ($150) {
                         $256 = ___cxa_find_matching_catch_2()|0;
                         $257 = tempRet0;
                         $$10 = $257;$$1019 = $256;
                        } else {
                         HEAP32[$26>>2] = $148;
                         $151 = HEAP32[$47>>2]|0;
                         HEAP32[$7>>2] = $151;
                         __THREW__ = 0;
                         $152 = (invoke_iii(664,(2144|0),($7|0))|0);
                         $153 = __THREW__; __THREW__ = 0;
                         $154 = $153&1;
                         do {
                          if ($154) {
                           $258 = ___cxa_find_matching_catch_2()|0;
                           $259 = tempRet0;
                           $$9 = $259;$$918 = $258;
                          } else {
                           HEAP32[$27>>2] = $152;
                           $155 = HEAP32[$72>>2]|0;
                           HEAP32[$6>>2] = $155;
                           __THREW__ = 0;
                           $156 = (invoke_iii(664,(2144|0),($6|0))|0);
                           $157 = __THREW__; __THREW__ = 0;
                           $158 = $157&1;
                           do {
                            if ($158) {
                             $260 = ___cxa_find_matching_catch_2()|0;
                             $261 = tempRet0;
                             $$8 = $261;$$817 = $260;
                            } else {
                             HEAP32[$28>>2] = $156;
                             $159 = HEAP32[$18>>2]|0;
                             __THREW__ = 0;
                             invoke_viiiiiii(667,($24|0),($159|0),(18451|0),($25|0),($26|0),($27|0),($28|0));
                             $160 = __THREW__; __THREW__ = 0;
                             $161 = $160&1;
                             if ($161) {
                              $262 = ___cxa_find_matching_catch_2()|0;
                              $263 = tempRet0;
                              $264 = HEAP32[$28>>2]|0;
                              __THREW__ = 0;
                              invoke_vi(661,($264|0));
                              $265 = __THREW__; __THREW__ = 0;
                              $266 = $265&1;
                              if (!($266)) {
                               $$8 = $263;$$817 = $262;
                               break;
                              }
                              $267 = ___cxa_find_matching_catch_3(0|0)|0;
                              $268 = tempRet0;
                              ___clang_call_terminate($267);
                              // unreachable;
                             }
                             $162 = HEAP32[$28>>2]|0;
                             __THREW__ = 0;
                             invoke_vi(661,($162|0));
                             $163 = __THREW__; __THREW__ = 0;
                             $164 = $163&1;
                             if ($164) {
                              $165 = ___cxa_find_matching_catch_3(0|0)|0;
                              $166 = tempRet0;
                              ___clang_call_terminate($165);
                              // unreachable;
                             }
                             $167 = HEAP32[$27>>2]|0;
                             __THREW__ = 0;
                             invoke_vi(661,($167|0));
                             $168 = __THREW__; __THREW__ = 0;
                             $169 = $168&1;
                             if ($169) {
                              $170 = ___cxa_find_matching_catch_3(0|0)|0;
                              $171 = tempRet0;
                              ___clang_call_terminate($170);
                              // unreachable;
                             }
                             $172 = HEAP32[$26>>2]|0;
                             __THREW__ = 0;
                             invoke_vi(661,($172|0));
                             $173 = __THREW__; __THREW__ = 0;
                             $174 = $173&1;
                             if ($174) {
                              $175 = ___cxa_find_matching_catch_3(0|0)|0;
                              $176 = tempRet0;
                              ___clang_call_terminate($175);
                              // unreachable;
                             }
                             $177 = HEAP32[$25>>2]|0;
                             __THREW__ = 0;
                             invoke_vi(661,($177|0));
                             $178 = __THREW__; __THREW__ = 0;
                             $179 = $178&1;
                             if ($179) {
                              $180 = ___cxa_find_matching_catch_3(0|0)|0;
                              $181 = tempRet0;
                              ___clang_call_terminate($180);
                              // unreachable;
                             }
                             $182 = ((($0)) + 20|0);
                             $183 = HEAP32[$182>>2]|0;
                             $184 = ($183|0)==(1);
                             do {
                              if ($184) {
                               $286 = HEAP32[$24>>2]|0;
                               __THREW__ = 0;
                               $287 = (invoke_ii(662,(18500|0))|0);
                               $288 = __THREW__; __THREW__ = 0;
                               $289 = $288&1;
                               if ($289) {
                                label = 102;
                                break;
                               }
                               __THREW__ = 0;
                               $290 = (invoke_iii(668,($286|0),($287|0))|0);
                               $291 = __THREW__; __THREW__ = 0;
                               $292 = $291&1;
                               if ($292) {
                                $298 = ___cxa_find_matching_catch_2()|0;
                                $299 = tempRet0;
                                __THREW__ = 0;
                                invoke_vi(661,($287|0));
                                $300 = __THREW__; __THREW__ = 0;
                                $301 = $300&1;
                                if (!($301)) {
                                 $$pre$pre$phiZZ2D = $24;$eh$lpad$body84$index12Z2D = $299;$eh$lpad$body84$indexZ2D = $298;
                                 label = 103;
                                 break;
                                }
                                $302 = ___cxa_find_matching_catch_3(0|0)|0;
                                $303 = tempRet0;
                                ___clang_call_terminate($302);
                                // unreachable;
                               }
                               $293 = $290;
                               __THREW__ = 0;
                               invoke_vi(661,($287|0));
                               $294 = __THREW__; __THREW__ = 0;
                               $295 = $294&1;
                               if ($295) {
                                $296 = ___cxa_find_matching_catch_3(0|0)|0;
                                $297 = tempRet0;
                                ___clang_call_terminate($296);
                                // unreachable;
                               }
                               __THREW__ = 0;
                               $304 = (invoke_ii(662,(18505|0))|0);
                               $305 = __THREW__; __THREW__ = 0;
                               $306 = $305&1;
                               L125: do {
                                if ($306) {
                                 $395 = ___cxa_find_matching_catch_2()|0;
                                 $396 = tempRet0;
                                 $eh$lpad$body88$index17Z2D = $396;$eh$lpad$body88$indexZ2D = $395;
                                 label = 145;
                                } else {
                                 __THREW__ = 0;
                                 $307 = (invoke_iii(668,($290|0),($304|0))|0);
                                 $308 = __THREW__; __THREW__ = 0;
                                 $309 = $308&1;
                                 if ($309) {
                                  $314 = ___cxa_find_matching_catch_2()|0;
                                  $315 = tempRet0;
                                  __THREW__ = 0;
                                  invoke_vi(661,($304|0));
                                  $316 = __THREW__; __THREW__ = 0;
                                  $317 = $316&1;
                                  if (!($317)) {
                                   $eh$lpad$body88$index17Z2D = $315;$eh$lpad$body88$indexZ2D = $314;
                                   label = 145;
                                   break;
                                  }
                                  $318 = ___cxa_find_matching_catch_3(0|0)|0;
                                  $319 = tempRet0;
                                  ___clang_call_terminate($318);
                                  // unreachable;
                                 }
                                 __THREW__ = 0;
                                 invoke_vi(661,($304|0));
                                 $310 = __THREW__; __THREW__ = 0;
                                 $311 = $310&1;
                                 if ($311) {
                                  $312 = ___cxa_find_matching_catch_3(0|0)|0;
                                  $313 = tempRet0;
                                  ___clang_call_terminate($312);
                                  // unreachable;
                                 }
                                 __THREW__ = 0;
                                 $320 = (+invoke_diii(669,($307|0),(2144|0),($5|0)));
                                 $321 = __THREW__; __THREW__ = 0;
                                 $322 = $321&1;
                                 if ($322) {
                                  $397 = ___cxa_find_matching_catch_2()|0;
                                  $398 = tempRet0;
                                  __THREW__ = 0;
                                  invoke_vi(661,($307|0));
                                  $399 = __THREW__; __THREW__ = 0;
                                  $400 = $399&1;
                                  if (!($400)) {
                                   $$15 = $398;$$1524 = $397;
                                   break;
                                  }
                                  $401 = ___cxa_find_matching_catch_3(0|0)|0;
                                  $402 = tempRet0;
                                  ___clang_call_terminate($401);
                                  // unreachable;
                                 }
                                 $323 = HEAP32[$5>>2]|0;
                                 __THREW__ = 0;
                                 invoke_vi(670,($323|0));
                                 $324 = __THREW__; __THREW__ = 0;
                                 $325 = $324&1;
                                 if ($325) {
                                  $326 = ___cxa_find_matching_catch_3(0|0)|0;
                                  $327 = tempRet0;
                                  ___clang_call_terminate($326);
                                  // unreachable;
                                 }
                                 $328 = (~~(($320)));
                                 $329 = ((($0)) + 52|0);
                                 HEAP32[$329>>2] = $328;
                                 __THREW__ = 0;
                                 invoke_vi(661,($307|0));
                                 $330 = __THREW__; __THREW__ = 0;
                                 $331 = $330&1;
                                 if ($331) {
                                  $332 = ___cxa_find_matching_catch_3(0|0)|0;
                                  $333 = tempRet0;
                                  ___clang_call_terminate($332);
                                  // unreachable;
                                 }
                                 $334 = HEAP32[$329>>2]|0;
                                 $335 = HEAP32[$72>>2]|0;
                                 $336 = (($334|0) / ($335|0))&-1;
                                 $337 = ((($0)) + 56|0);
                                 HEAP32[$337>>2] = $336;
                                 $338 = (_malloc($334)|0);
                                 $339 = ((($0)) + 48|0);
                                 HEAP32[$339>>2] = $338;
                                 $340 = $338;
                                 HEAP32[$4>>2] = $334;
                                 $341 = ((($4)) + 4|0);
                                 HEAP32[$341>>2] = $340;
                                 __THREW__ = 0;
                                 $342 = (invoke_iii(664,(1264|0),($4|0))|0);
                                 $343 = __THREW__; __THREW__ = 0;
                                 $344 = $343&1;
                                 if ($344) {
                                  $405 = ___cxa_find_matching_catch_2()|0;
                                  $406 = tempRet0;
                                  $$15 = $406;$$1524 = $405;
                                  break;
                                 }
                                 $345 = ((($0)) + 44|0);
                                 $346 = HEAP32[$345>>2]|0;
                                 __THREW__ = 0;
                                 invoke_vi(661,($346|0));
                                 $347 = __THREW__; __THREW__ = 0;
                                 $348 = $347&1;
                                 if ($348) {
                                  $407 = ___cxa_find_matching_catch_2()|0;
                                  $408 = tempRet0;
                                  __THREW__ = 0;
                                  invoke_vi(661,($342|0));
                                  $409 = __THREW__; __THREW__ = 0;
                                  $410 = $409&1;
                                  if (!($410)) {
                                   $$15 = $408;$$1524 = $407;
                                   break;
                                  }
                                  $411 = ___cxa_find_matching_catch_3(0|0)|0;
                                  $412 = tempRet0;
                                  ___clang_call_terminate($411);
                                  // unreachable;
                                 }
                                 $349 = $342;
                                 HEAP32[$345>>2] = $349;
                                 __THREW__ = 0;
                                 invoke_vi(661,(0|0));
                                 $350 = __THREW__; __THREW__ = 0;
                                 $351 = $350&1;
                                 if ($351) {
                                  $352 = ___cxa_find_matching_catch_3(0|0)|0;
                                  $353 = tempRet0;
                                  ___clang_call_terminate($352);
                                  // unreachable;
                                 }
                                 $354 = HEAP32[$345>>2]|0;
                                 $355 = HEAP8[28896]|0;
                                 $356 = ($355<<24>>24)==(0);
                                 do {
                                  if ($356) {
                                   $357 = (___cxa_guard_acquire(28896)|0);
                                   $358 = ($357|0)==(0);
                                   if ($358) {
                                    label = 130;
                                    break;
                                   }
                                   __THREW__ = 0;
                                   $359 = (invoke_iii(671,2,(4680|0))|0);
                                   $360 = __THREW__; __THREW__ = 0;
                                   $361 = $360&1;
                                   if ($361) {
                                    $362 = ___cxa_find_matching_catch_2()|0;
                                    $363 = tempRet0;
                                    $eh$lpad$body96$index22Z2D = $363;$eh$lpad$body96$indexZ2D = $362;
                                    break;
                                   } else {
                                    HEAP32[7769] = $359;
                                    label = 130;
                                    break;
                                   }
                                  } else {
                                   label = 130;
                                  }
                                 } while(0);
                                 if ((label|0) == 130) {
                                  $364 = HEAP32[7769]|0;
                                  __THREW__ = 0;
                                  invoke_vi(672,($290|0));
                                  $365 = __THREW__; __THREW__ = 0;
                                  $366 = $365&1;
                                  do {
                                   if (!($366)) {
                                    HEAP32[$3>>2] = $293;
                                    __THREW__ = 0;
                                    invoke_viiii(673,($364|0),($354|0),(18512|0),($3|0));
                                    $367 = __THREW__; __THREW__ = 0;
                                    $368 = $367&1;
                                    if ($368) {
                                     break;
                                    }
                                    $369 = HEAP32[$29>>2]|0;
                                    __THREW__ = 0;
                                    invoke_vi(661,($369|0));
                                    $370 = __THREW__; __THREW__ = 0;
                                    $371 = $370&1;
                                    if ($371) {
                                     $413 = ___cxa_find_matching_catch_2()|0;
                                     $414 = tempRet0;
                                     __THREW__ = 0;
                                     invoke_vi(661,((2)|0));
                                     $415 = __THREW__; __THREW__ = 0;
                                     $416 = $415&1;
                                     if (!($416)) {
                                      $$15 = $414;$$1524 = $413;
                                      break L125;
                                     }
                                     $417 = ___cxa_find_matching_catch_3(0|0)|0;
                                     $418 = tempRet0;
                                     ___clang_call_terminate($417);
                                     // unreachable;
                                    }
                                    HEAP32[$29>>2] = 2;
                                    __THREW__ = 0;
                                    invoke_vi(661,(0|0));
                                    $372 = __THREW__; __THREW__ = 0;
                                    $373 = $372&1;
                                    if ($373) {
                                     $374 = ___cxa_find_matching_catch_3(0|0)|0;
                                     $375 = tempRet0;
                                     ___clang_call_terminate($374);
                                     // unreachable;
                                    }
                                    __THREW__ = 0;
                                    invoke_vi(661,($290|0));
                                    $376 = __THREW__; __THREW__ = 0;
                                    $377 = $376&1;
                                    if ($377) {
                                     $378 = ___cxa_find_matching_catch_3(0|0)|0;
                                     $379 = tempRet0;
                                     ___clang_call_terminate($378);
                                     // unreachable;
                                    }
                                    $380 = HEAP32[$24>>2]|0;
                                    __THREW__ = 0;
                                    invoke_vi(661,($380|0));
                                    $381 = __THREW__; __THREW__ = 0;
                                    $382 = $381&1;
                                    if ($382) {
                                     $383 = ___cxa_find_matching_catch_3(0|0)|0;
                                     $384 = tempRet0;
                                     ___clang_call_terminate($383);
                                     // unreachable;
                                    }
                                    $385 = HEAP32[$18>>2]|0;
                                    __THREW__ = 0;
                                    invoke_vi(661,($385|0));
                                    $386 = __THREW__; __THREW__ = 0;
                                    $387 = $386&1;
                                    if ($387) {
                                     $388 = ___cxa_find_matching_catch_3(0|0)|0;
                                     $389 = tempRet0;
                                     ___clang_call_terminate($388);
                                     // unreachable;
                                    }
                                    $390 = HEAP32[$16>>2]|0;
                                    __THREW__ = 0;
                                    invoke_vi(661,($390|0));
                                    $391 = __THREW__; __THREW__ = 0;
                                    $392 = $391&1;
                                    if ($392) {
                                     $393 = ___cxa_find_matching_catch_3(0|0)|0;
                                     $394 = tempRet0;
                                     ___clang_call_terminate($393);
                                     // unreachable;
                                    } else {
                                     $$pre$phi169Z2D = $339;
                                     break L1;
                                    }
                                   }
                                  } while(0);
                                  $403 = ___cxa_find_matching_catch_2()|0;
                                  $404 = tempRet0;
                                  $eh$lpad$body96$index22Z2D = $404;$eh$lpad$body96$indexZ2D = $403;
                                 }
                                 $$15 = $eh$lpad$body96$index22Z2D;$$1524 = $eh$lpad$body96$indexZ2D;
                                }
                               } while(0);
                               if ((label|0) == 145) {
                                $$15 = $eh$lpad$body88$index17Z2D;$$1524 = $eh$lpad$body88$indexZ2D;
                               }
                               __THREW__ = 0;
                               invoke_vi(661,($290|0));
                               $419 = __THREW__; __THREW__ = 0;
                               $420 = $419&1;
                               if (!($420)) {
                                $$16 = $$15;$$1625 = $$1524;$$pre$phiZ2D = $24;
                                break;
                               }
                               $421 = ___cxa_find_matching_catch_3(0|0)|0;
                               $422 = tempRet0;
                               ___clang_call_terminate($421);
                               // unreachable;
                              } else {
                               __THREW__ = 0;
                               invoke_viiii(561,(18464|0),(18294|0),80,(18495|0));
                               $185 = __THREW__; __THREW__ = 0;
                               label = 102;
                              }
                             } while(0);
                             if ((label|0) == 102) {
                              $284 = ___cxa_find_matching_catch_2()|0;
                              $285 = tempRet0;
                              $$pre$pre$phiZZ2D = $24;$eh$lpad$body84$index12Z2D = $285;$eh$lpad$body84$indexZ2D = $284;
                              label = 103;
                             }
                             if ((label|0) == 103) {
                              $$16 = $eh$lpad$body84$index12Z2D;$$1625 = $eh$lpad$body84$indexZ2D;$$pre$phiZ2D = $$pre$pre$phiZZ2D;
                             }
                             $423 = HEAP32[$$pre$phiZ2D>>2]|0;
                             __THREW__ = 0;
                             invoke_vi(661,($423|0));
                             $424 = __THREW__; __THREW__ = 0;
                             $425 = $424&1;
                             if ($425) {
                              $426 = ___cxa_find_matching_catch_3(0|0)|0;
                              $427 = tempRet0;
                              ___clang_call_terminate($426);
                              // unreachable;
                             } else {
                              $$17 = $$16;$$1726 = $$1625;$$pre$phi165Z2D = $18;
                              break L59;
                             }
                            }
                           } while(0);
                           $269 = HEAP32[$27>>2]|0;
                           __THREW__ = 0;
                           invoke_vi(661,($269|0));
                           $270 = __THREW__; __THREW__ = 0;
                           $271 = $270&1;
                           if (!($271)) {
                            $$9 = $$8;$$918 = $$817;
                            break;
                           }
                           $272 = ___cxa_find_matching_catch_3(0|0)|0;
                           $273 = tempRet0;
                           ___clang_call_terminate($272);
                           // unreachable;
                          }
                         } while(0);
                         $274 = HEAP32[$26>>2]|0;
                         __THREW__ = 0;
                         invoke_vi(661,($274|0));
                         $275 = __THREW__; __THREW__ = 0;
                         $276 = $275&1;
                         if (!($276)) {
                          $$10 = $$9;$$1019 = $$918;
                          break;
                         }
                         $277 = ___cxa_find_matching_catch_3(0|0)|0;
                         $278 = tempRet0;
                         ___clang_call_terminate($277);
                         // unreachable;
                        }
                       } while(0);
                       $279 = HEAP32[$25>>2]|0;
                       __THREW__ = 0;
                       invoke_vi(661,($279|0));
                       $280 = __THREW__; __THREW__ = 0;
                       $281 = $280&1;
                       if (!($281)) {
                        $$11 = $$10;$$1120 = $$1019;
                        break;
                       }
                       $282 = ___cxa_find_matching_catch_3(0|0)|0;
                       $283 = tempRet0;
                       ___clang_call_terminate($282);
                       // unreachable;
                      }
                     } while(0);
                     $$17 = $$11;$$1726 = $$1120;$$pre$phi165Z2D = $18;
                     break L59;
                    }
                   } while(0);
                   $239 = HEAP32[$22>>2]|0;
                   __THREW__ = 0;
                   invoke_vi(661,($239|0));
                   $240 = __THREW__; __THREW__ = 0;
                   $241 = $240&1;
                   if (!($241)) {
                    $$5 = $$4;$$514 = $$413;
                    break;
                   }
                   $242 = ___cxa_find_matching_catch_3(0|0)|0;
                   $243 = tempRet0;
                   ___clang_call_terminate($242);
                   // unreachable;
                  }
                 } while(0);
                 $244 = HEAP32[$21>>2]|0;
                 __THREW__ = 0;
                 invoke_vi(661,($244|0));
                 $245 = __THREW__; __THREW__ = 0;
                 $246 = $245&1;
                 if (!($246)) {
                  $$6 = $$5;$$615 = $$514;
                  break;
                 }
                 $247 = ___cxa_find_matching_catch_3(0|0)|0;
                 $248 = tempRet0;
                 ___clang_call_terminate($247);
                 // unreachable;
                }
               } while(0);
               $249 = HEAP32[$20>>2]|0;
               __THREW__ = 0;
               invoke_vi(661,($249|0));
               $250 = __THREW__; __THREW__ = 0;
               $251 = $250&1;
               if (!($251)) {
                $$7 = $$6;$$716 = $$615;
                label = 88;
                break;
               }
               $252 = ___cxa_find_matching_catch_3(0|0)|0;
               $253 = tempRet0;
               ___clang_call_terminate($252);
               // unreachable;
              }
             } while(0);
             if ((label|0) == 88) {
              $$17 = $$7;$$1726 = $$716;$$pre$phi165Z2D = $18;
             }
             $428 = HEAP32[$$pre$phi165Z2D>>2]|0;
             __THREW__ = 0;
             invoke_vi(661,($428|0));
             $429 = __THREW__; __THREW__ = 0;
             $430 = $429&1;
             if ($430) {
              $431 = ___cxa_find_matching_catch_3(0|0)|0;
              $432 = tempRet0;
              ___clang_call_terminate($431);
              // unreachable;
             } else {
              $$18 = $$17;$$1827 = $$1726;$$pre$phi167Z2D = $16;
              break L17;
             }
            }
           } while(0);
           $$18 = $$3;$$1827 = $$312;$$pre$phi167Z2D = $16;
           break L17;
          }
         } while(0);
         __THREW__ = 0;
         invoke_vi(661,($74|0));
         $211 = __THREW__; __THREW__ = 0;
         $212 = $211&1;
         if (!($212)) {
          $$18 = $eh$lpad$body37$index7Z2D;$$1827 = $eh$lpad$body37$indexZ2D;$$pre$phi167Z2D = $16;
          break L17;
         }
         $213 = ___cxa_find_matching_catch_3(0|0)|0;
         $214 = tempRet0;
         ___clang_call_terminate($213);
         // unreachable;
        }
       } while(0);
       __THREW__ = 0;
       invoke_vi(661,($49|0));
       $203 = __THREW__; __THREW__ = 0;
       $204 = $203&1;
       if ($204) {
        $205 = ___cxa_find_matching_catch_3(0|0)|0;
        $206 = tempRet0;
        ___clang_call_terminate($205);
        // unreachable;
       } else {
        $$18 = $eh$lpad$body$index2Z2D;$$1827 = $eh$lpad$body$indexZ2D;$$pre$phi167Z2D = $16;
       }
      }
     } while(0);
     $433 = HEAP32[$$pre$phi167Z2D>>2]|0;
     __THREW__ = 0;
     invoke_vi(661,($433|0));
     $434 = __THREW__; __THREW__ = 0;
     $435 = $434&1;
     if ($435) {
      $436 = ___cxa_find_matching_catch_3(0|0)|0;
      $437 = tempRet0;
      ___clang_call_terminate($436);
      // unreachable;
     }
     $$19 = $$18;$$1928 = $$1827;
     ___resumeException($$1928|0);
     // unreachable;
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(661,($32|0));
   $195 = __THREW__; __THREW__ = 0;
   $196 = $195&1;
   if ($196) {
    $197 = ___cxa_find_matching_catch_3(0|0)|0;
    $198 = tempRet0;
    ___clang_call_terminate($197);
    // unreachable;
   } else {
    $$19 = $$0;$$1928 = $$05;
    ___resumeException($$1928|0);
    // unreachable;
   }
  }
 } while(0);
 $438 = HEAP32[$$pre$phi169Z2D>>2]|0;
 $439 = ($438|0)==(0|0);
 if ($439) {
  __ZN3App3logEPKcz(28952,18516,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  HEAP32[$1>>2] = $438;
  $440 = ((($0)) + 56|0);
  $441 = HEAP32[$440>>2]|0;
  $442 = ((($1)) + 8|0);
  HEAP32[$442>>2] = $441;
  $443 = ((($0)) + 52|0);
  $444 = HEAP32[$443>>2]|0;
  $445 = ((($1)) + 4|0);
  HEAP32[$445>>2] = $444;
  STACKTOP = sp;return;
 }
}
function __ZN8OSBitmap6unlockEP9PIXELDATAb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN8OSBitmap4bindEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i4 = 0, $$02 = 0, $$1 = 0, $$13 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 20|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 __ZN6Bitmap4bindEv($0);
 $8 = (__emval_get_global((18291|0))|0);
 $9 = ((($0)) + 60|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)!=(0);
 $12 = $11 ? 6408 : 6407;
 HEAP32[$1>>2] = $12;
 $13 = ((($0)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 L1: do {
  switch ($14|0) {
  case 3: case 1:  {
   HEAP32[$1>>2] = 6408;
   switch ($14|0) {
   case 3: case 1:  {
    $$0$i4 = 5121;$48 = $2;
    label = 8;
    break L1;
    break;
   }
   case 2:  {
    $47 = $2;
    label = 6;
    break L1;
    break;
   }
   default: {
   }
   }
   __THREW__ = 0;
   invoke_viiii(561,(22544|0),(18294|0),40,(18361|0));
   $16 = __THREW__; __THREW__ = 0;
   label = 11;
   break;
  }
  case 2:  {
   HEAP32[$1>>2] = 6407;
   $47 = $2;
   label = 6;
   break;
  }
  case 4:  {
   HEAP32[$1>>2] = 6406;
   $$0$i4 = 5121;$48 = $2;
   label = 8;
   break;
  }
  default: {
   __THREW__ = 0;
   invoke_viiii(561,(22544|0),(18294|0),29,(18343|0));
   $15 = __THREW__; __THREW__ = 0;
   label = 11;
  }
  }
 } while(0);
 if ((label|0) == 6) {
  $$0$i4 = 5123;$48 = $47;
  label = 8;
 }
 else if ((label|0) == 11) {
  $22 = ___cxa_find_matching_catch_2()|0;
  $23 = tempRet0;
  $$1 = $23;$$13 = $22;
 }
 do {
  if ((label|0) == 8) {
   HEAP32[$2>>2] = $$0$i4;
   $17 = ((($0)) + 40|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==((2)|0);
   do {
    if ($19) {
     $28 = ((($0)) + 44|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($29|0)==((2)|0);
     if ($30) {
      __THREW__ = 0;
      invoke_viii(545,(28952|0),(18388|0),($vararg_buffer|0));
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if (!($38)) {
       break;
      }
      $24 = ___cxa_find_matching_catch_2()|0;
      $25 = tempRet0;
      $$0 = $25;$$02 = $24;
      label = 22;
      break;
     }
     HEAP32[$5>>2] = 3553;
     HEAP32[$6>>2] = 0;
     $31 = ((($0)) + 12|0);
     $32 = ((($0)) + 16|0);
     HEAP32[$7>>2] = 0;
     __THREW__ = 0;
     invoke_viiiiiiiiiii(675,($8|0),(18377|0),($5|0),($6|0),($1|0),($31|0),($32|0),($7|0),($1|0),($2|0),($28|0));
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if ($34) {
      $35 = ___cxa_find_matching_catch_2()|0;
      $36 = tempRet0;
      $$0 = $36;$$02 = $35;
      label = 22;
      break;
     } else {
      break;
     }
    } else {
     HEAP32[$3>>2] = 3553;
     HEAP32[$4>>2] = 0;
     __THREW__ = 0;
     invoke_viiiiiiii(674,($8|0),(18377|0),($3|0),($4|0),($1|0),($1|0),($2|0),($17|0));
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if ($21) {
      $26 = ___cxa_find_matching_catch_2()|0;
      $27 = tempRet0;
      $$0 = $27;$$02 = $26;
      label = 22;
      break;
     } else {
      break;
     }
    }
   } while(0);
   if ((label|0) == 22) {
    $$1 = $$0;$$13 = $$02;
    break;
   }
   __THREW__ = 0;
   invoke_vi(661,($8|0));
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    $41 = ___cxa_find_matching_catch_3(0|0)|0;
    $42 = tempRet0;
    ___clang_call_terminate($41);
    // unreachable;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(661,($8|0));
 $43 = __THREW__; __THREW__ = 0;
 $44 = $43&1;
 if ($44) {
  $45 = ___cxa_find_matching_catch_3(0|0)|0;
  $46 = tempRet0;
  ___clang_call_terminate($45);
  // unreachable;
 } else {
  ___resumeException($$13|0);
  // unreachable;
 }
}
function __ZN10emscripten8internal12MethodCallerIvJiiRiS2_S2_RNS_3valEEE4callEPNS0_7_EM_VALEPKcOiSA_S2_S2_S2_S4_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = sp;
 $9 = HEAP8[28888]|0;
 $10 = ($9<<24>>24)==(0);
 do {
  if ($10) {
   $11 = (___cxa_guard_acquire(28888)|0);
   $12 = ($11|0)==(0);
   if (!($12)) {
    __THREW__ = 0;
    $13 = (invoke_iii(671,7,(4652|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     $16 = ___cxa_find_matching_catch_2()|0;
     $17 = tempRet0;
     ___resumeException($16|0);
     // unreachable;
    } else {
     HEAP32[7768] = $13;
     break;
    }
   }
  }
 } while(0);
 $18 = HEAP32[7768]|0;
 $19 = HEAP32[$2>>2]|0;
 HEAP32[$8>>2] = $19;
 $20 = ((($8)) + 8|0);
 $21 = HEAP32[$3>>2]|0;
 HEAP32[$20>>2] = $21;
 $22 = ((($8)) + 16|0);
 $23 = HEAP32[$4>>2]|0;
 HEAP32[$22>>2] = $23;
 $24 = ((($8)) + 24|0);
 $25 = HEAP32[$5>>2]|0;
 HEAP32[$24>>2] = $25;
 $26 = ((($8)) + 32|0);
 $27 = HEAP32[$6>>2]|0;
 HEAP32[$26>>2] = $27;
 $28 = ((($8)) + 40|0);
 $29 = HEAP32[$7>>2]|0;
 __emval_incref(($29|0));
 $30 = HEAP32[$7>>2]|0;
 HEAP32[$28>>2] = $30;
 __emval_call_void_method(($18|0),($0|0),($1|0),($8|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12MethodCallerIvJiiRiS2_S2_iS2_S2_RNS_3valEEE4callEPNS0_7_EM_VALEPKcOiSA_S2_S2_S2_SA_S2_S2_S4_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $11 = sp;
 $12 = HEAP8[28880]|0;
 $13 = ($12<<24>>24)==(0);
 do {
  if ($13) {
   $14 = (___cxa_guard_acquire(28880)|0);
   $15 = ($14|0)==(0);
   if (!($15)) {
    __THREW__ = 0;
    $16 = (invoke_iii(671,10,(4612|0))|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     $19 = ___cxa_find_matching_catch_2()|0;
     $20 = tempRet0;
     ___resumeException($19|0);
     // unreachable;
    } else {
     HEAP32[7767] = $16;
     break;
    }
   }
  }
 } while(0);
 $21 = HEAP32[7767]|0;
 $22 = HEAP32[$2>>2]|0;
 HEAP32[$11>>2] = $22;
 $23 = ((($11)) + 8|0);
 $24 = HEAP32[$3>>2]|0;
 HEAP32[$23>>2] = $24;
 $25 = ((($11)) + 16|0);
 $26 = HEAP32[$4>>2]|0;
 HEAP32[$25>>2] = $26;
 $27 = ((($11)) + 24|0);
 $28 = HEAP32[$5>>2]|0;
 HEAP32[$27>>2] = $28;
 $29 = ((($11)) + 32|0);
 $30 = HEAP32[$6>>2]|0;
 HEAP32[$29>>2] = $30;
 $31 = ((($11)) + 40|0);
 $32 = HEAP32[$7>>2]|0;
 HEAP32[$31>>2] = $32;
 $33 = ((($11)) + 48|0);
 $34 = HEAP32[$8>>2]|0;
 HEAP32[$33>>2] = $34;
 $35 = ((($11)) + 56|0);
 $36 = HEAP32[$9>>2]|0;
 HEAP32[$35>>2] = $36;
 $37 = ((($11)) + 64|0);
 $38 = HEAP32[$10>>2]|0;
 __emval_incref(($38|0));
 $39 = HEAP32[$10>>2]|0;
 HEAP32[$37>>2] = $39;
 __emval_call_void_method(($21|0),($0|0),($1|0),($11|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12MethodCallerINS_3valEJS2_EE4callEPNS0_7_EM_VALEPKcOS2_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = sp + 8|0;
 $6 = HEAP8[28920]|0;
 $7 = ($6<<24>>24)==(0);
 do {
  if ($7) {
   $8 = (___cxa_guard_acquire(28920)|0);
   $9 = ($8|0)==(0);
   if (!($9)) {
    __THREW__ = 0;
    $10 = (invoke_iii(671,2,(4732|0))|0);
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if ($12) {
     $13 = ___cxa_find_matching_catch_2()|0;
     $14 = tempRet0;
     ___resumeException($13|0);
     // unreachable;
    } else {
     HEAP32[7772] = $10;
     break;
    }
   }
  }
 } while(0);
 $15 = HEAP32[7772]|0;
 $16 = HEAP32[$3>>2]|0;
 __emval_incref(($16|0));
 $17 = HEAP32[$3>>2]|0;
 HEAP32[$4>>2] = $17;
 $18 = (+__emval_call_method(($15|0),($1|0),($2|0),($5|0),($4|0)));
 $19 = HEAP32[$5>>2]|0;
 $20 = (~~(($18))>>>0);
 $21 = $20;
 HEAP32[$0>>2] = $21;
 __THREW__ = 0;
 invoke_vi(670,($19|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $24 = ___cxa_find_matching_catch_3(0|0)|0;
  $25 = tempRet0;
  ___clang_call_terminate($24);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten8internal12MethodCallerIvJRNS_3valES2_S2_S2_S2_EE4callEPNS0_7_EM_VALEPKcS3_OS2_S9_S9_S9_($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp;
 $8 = HEAP8[28912]|0;
 $9 = ($8<<24>>24)==(0);
 do {
  if ($9) {
   $10 = (___cxa_guard_acquire(28912)|0);
   $11 = ($10|0)==(0);
   if (!($11)) {
    __THREW__ = 0;
    $12 = (invoke_iii(671,6,(4708|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if ($14) {
     $15 = ___cxa_find_matching_catch_2()|0;
     $16 = tempRet0;
     ___resumeException($15|0);
     // unreachable;
    } else {
     HEAP32[7771] = $12;
     break;
    }
   }
  }
 } while(0);
 $17 = HEAP32[7771]|0;
 $18 = HEAP32[$2>>2]|0;
 __emval_incref(($18|0));
 $19 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $19;
 $20 = ((($7)) + 8|0);
 $21 = HEAP32[$3>>2]|0;
 __emval_incref(($21|0));
 $22 = HEAP32[$3>>2]|0;
 HEAP32[$20>>2] = $22;
 $23 = ((($7)) + 16|0);
 $24 = HEAP32[$4>>2]|0;
 __emval_incref(($24|0));
 $25 = HEAP32[$4>>2]|0;
 HEAP32[$23>>2] = $25;
 $26 = ((($7)) + 24|0);
 $27 = HEAP32[$5>>2]|0;
 __emval_incref(($27|0));
 $28 = HEAP32[$5>>2]|0;
 HEAP32[$26>>2] = $28;
 $29 = ((($7)) + 32|0);
 $30 = HEAP32[$6>>2]|0;
 __emval_incref(($30|0));
 $31 = HEAP32[$6>>2]|0;
 HEAP32[$29>>2] = $31;
 __emval_call_void_method(($17|0),($0|0),($1|0),($7|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12MethodCallerINS_3valEJS2_S2_S2_S2_EE4callEPNS0_7_EM_VALEPKcOS2_S8_S8_S8_($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp;
 $8 = sp + 32|0;
 $9 = HEAP8[28904]|0;
 $10 = ($9<<24>>24)==(0);
 do {
  if ($10) {
   $11 = (___cxa_guard_acquire(28904)|0);
   $12 = ($11|0)==(0);
   if (!($12)) {
    __THREW__ = 0;
    $13 = (invoke_iii(671,5,(4688|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     $16 = ___cxa_find_matching_catch_2()|0;
     $17 = tempRet0;
     ___resumeException($16|0);
     // unreachable;
    } else {
     HEAP32[7770] = $13;
     break;
    }
   }
  }
 } while(0);
 $18 = HEAP32[7770]|0;
 $19 = HEAP32[$3>>2]|0;
 __emval_incref(($19|0));
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$7>>2] = $20;
 $21 = ((($7)) + 8|0);
 $22 = HEAP32[$4>>2]|0;
 __emval_incref(($22|0));
 $23 = HEAP32[$4>>2]|0;
 HEAP32[$21>>2] = $23;
 $24 = ((($7)) + 16|0);
 $25 = HEAP32[$5>>2]|0;
 __emval_incref(($25|0));
 $26 = HEAP32[$5>>2]|0;
 HEAP32[$24>>2] = $26;
 $27 = ((($7)) + 24|0);
 $28 = HEAP32[$6>>2]|0;
 __emval_incref(($28|0));
 $29 = HEAP32[$6>>2]|0;
 HEAP32[$27>>2] = $29;
 $30 = (+__emval_call_method(($18|0),($1|0),($2|0),($8|0),($7|0)));
 $31 = HEAP32[$8>>2]|0;
 $32 = (~~(($30))>>>0);
 $33 = $32;
 HEAP32[$0>>2] = $33;
 __THREW__ = 0;
 invoke_vi(670,($31|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch_3(0|0)|0;
  $37 = tempRet0;
  ___clang_call_terminate($36);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN8OSBitmapC2Eiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$i = 0, $$1 = 0, $$19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 __ZN6BitmapC2Eiii($0,$1,$2,$3);
 HEAP32[$0>>2] = (4568);
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = (4604);
 $6 = ((($0)) + 40|0);
 HEAP32[$6>>2] = (2);
 $7 = ((($0)) + 44|0);
 HEAP32[$7>>2] = (2);
 $8 = ((($0)) + 80|0);
 HEAP32[$8>>2] = 0;
 switch ($3|0) {
 case 3: case 1:  {
  $$0$i = 4;
  label = 5;
  break;
 }
 case 2:  {
  $$0$i = 2;
  label = 5;
  break;
 }
 case 4:  {
  $$0$i = 1;
  label = 5;
  break;
 }
 default: {
  __THREW__ = 0;
  invoke_viiii(561,(22544|0),(18294|0),18,(18610|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = ___cxa_find_matching_catch_2()|0;
  $11 = tempRet0;
  $$1 = $11;$$19 = $10;
 }
 }
 do {
  if ((label|0) == 5) {
   $12 = Math_imul($$0$i, $1)|0;
   $13 = ((($0)) + 56|0);
   HEAP32[$13>>2] = $12;
   $14 = Math_imul($12, $2)|0;
   $15 = ((($0)) + 52|0);
   HEAP32[$15>>2] = $14;
   $16 = (_malloc($14)|0);
   $17 = ((($0)) + 48|0);
   HEAP32[$17>>2] = $16;
   $18 = $16;
   HEAP32[$4>>2] = $14;
   $19 = ((($4)) + 4|0);
   HEAP32[$19>>2] = $18;
   __THREW__ = 0;
   $20 = (invoke_iii(664,(1264|0),($4|0))|0);
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    $31 = ___cxa_find_matching_catch_2()|0;
    $32 = tempRet0;
    $$1 = $32;$$19 = $31;
    break;
   }
   $23 = HEAP32[$7>>2]|0;
   __THREW__ = 0;
   invoke_vi(661,($23|0));
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $33 = ___cxa_find_matching_catch_2()|0;
    $34 = tempRet0;
    __THREW__ = 0;
    invoke_vi(661,($20|0));
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if (!($36)) {
     $$1 = $34;$$19 = $33;
     break;
    }
    $37 = ___cxa_find_matching_catch_3(0|0)|0;
    $38 = tempRet0;
    ___clang_call_terminate($37);
    // unreachable;
   }
   $26 = $20;
   HEAP32[$7>>2] = $26;
   __THREW__ = 0;
   invoke_vi(661,(0|0));
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    $29 = ___cxa_find_matching_catch_3(0|0)|0;
    $30 = tempRet0;
    ___clang_call_terminate($29);
    // unreachable;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $39 = HEAP32[$8>>2]|0;
 $40 = ((($0)) + 64|0);
 $41 = ($39|0)==($40|0);
 if ($41) {
  $42 = HEAP32[$39>>2]|0;
  $43 = ((($42)) + 16|0);
  $44 = HEAP32[$43>>2]|0;
  FUNCTION_TABLE_vi[$44 & 1023]($39);
 } else {
  $45 = ($39|0)==(0|0);
  if (!($45)) {
   $46 = HEAP32[$39>>2]|0;
   $47 = ((($46)) + 20|0);
   $48 = HEAP32[$47>>2]|0;
   FUNCTION_TABLE_vi[$48 & 1023]($39);
  }
 }
 $49 = HEAP32[$7>>2]|0;
 __THREW__ = 0;
 invoke_vi(661,($49|0));
 $50 = __THREW__; __THREW__ = 0;
 $51 = $50&1;
 if ($51) {
  $52 = ___cxa_find_matching_catch_3(0|0)|0;
  $53 = tempRet0;
  ___clang_call_terminate($52);
  // unreachable;
 }
 $54 = HEAP32[$6>>2]|0;
 __THREW__ = 0;
 invoke_vi(661,($54|0));
 $55 = __THREW__; __THREW__ = 0;
 $56 = $55&1;
 if ($56) {
  $57 = ___cxa_find_matching_catch_3(0|0)|0;
  $58 = tempRet0;
  ___clang_call_terminate($57);
  // unreachable;
 } else {
  __ZN6BitmapD2Ev($0);
  ___resumeException($$19|0);
  // unreachable;
 }
}
function __ZN8OSBitmapC2EN10emscripten3valEb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$2 = 0, $$25 = 0, $$4 = 0, $$47 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body15$index7Z2D = 0, $eh$lpad$body15$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = $2&1;
 __ZN6BitmapC2Ev($0);
 HEAP32[$0>>2] = (4568);
 $7 = ((($0)) + 8|0);
 HEAP32[$7>>2] = (4604);
 $8 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi(672,($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  $11 = HEAP32[$1>>2]|0;
  HEAP32[$5>>2] = $11;
  __THREW__ = 0;
  $12 = (invoke_iii(664,(1256|0),($5|0))|0);
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   $15 = ((($0)) + 40|0);
   HEAP32[$15>>2] = $12;
   $16 = ((($0)) + 44|0);
   HEAP32[$16>>2] = (2);
   $17 = ((($0)) + 60|0);
   HEAP8[$17>>0] = $6;
   $18 = ((($0)) + 80|0);
   HEAP32[$18>>2] = 0;
   $19 = HEAP32[$1>>2]|0;
   __THREW__ = 0;
   $20 = (invoke_ii(662,(23221|0))|0);
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   L4: do {
    if ($22) {
     $84 = ___cxa_find_matching_catch_2()|0;
     $85 = tempRet0;
     $eh$lpad$body$index2Z2D = $85;$eh$lpad$body$indexZ2D = $84;
     label = 28;
    } else {
     __THREW__ = 0;
     $23 = (invoke_iii(668,($19|0),($20|0))|0);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      $30 = ___cxa_find_matching_catch_2()|0;
      $31 = tempRet0;
      __THREW__ = 0;
      invoke_vi(661,($20|0));
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if (!($33)) {
       $eh$lpad$body$index2Z2D = $31;$eh$lpad$body$indexZ2D = $30;
       label = 28;
       break;
      }
      $34 = ___cxa_find_matching_catch_3(0|0)|0;
      $35 = tempRet0;
      ___clang_call_terminate($34);
      // unreachable;
     }
     __THREW__ = 0;
     invoke_vi(661,($20|0));
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if ($27) {
      $28 = ___cxa_find_matching_catch_3(0|0)|0;
      $29 = tempRet0;
      ___clang_call_terminate($28);
      // unreachable;
     }
     __THREW__ = 0;
     $36 = (+invoke_diii(669,($23|0),(2144|0),($4|0)));
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      $86 = ___cxa_find_matching_catch_2()|0;
      $87 = tempRet0;
      __THREW__ = 0;
      invoke_vi(661,($23|0));
      $88 = __THREW__; __THREW__ = 0;
      $89 = $88&1;
      if (!($89)) {
       $$2 = $87;$$25 = $86;
       break;
      }
      $90 = ___cxa_find_matching_catch_3(0|0)|0;
      $91 = tempRet0;
      ___clang_call_terminate($90);
      // unreachable;
     }
     $39 = HEAP32[$4>>2]|0;
     __THREW__ = 0;
     invoke_vi(670,($39|0));
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if ($41) {
      $42 = ___cxa_find_matching_catch_3(0|0)|0;
      $43 = tempRet0;
      ___clang_call_terminate($42);
      // unreachable;
     }
     $44 = (~~(($36)));
     $45 = ((($0)) + 12|0);
     HEAP32[$45>>2] = $44;
     __THREW__ = 0;
     invoke_vi(661,($23|0));
     $46 = __THREW__; __THREW__ = 0;
     $47 = $46&1;
     if ($47) {
      $48 = ___cxa_find_matching_catch_3(0|0)|0;
      $49 = tempRet0;
      ___clang_call_terminate($48);
      // unreachable;
     }
     $50 = HEAP32[$1>>2]|0;
     __THREW__ = 0;
     $51 = (invoke_ii(662,(23214|0))|0);
     $52 = __THREW__; __THREW__ = 0;
     $53 = $52&1;
     do {
      if ($53) {
       $92 = ___cxa_find_matching_catch_2()|0;
       $93 = tempRet0;
       $eh$lpad$body15$index7Z2D = $93;$eh$lpad$body15$indexZ2D = $92;
      } else {
       __THREW__ = 0;
       $54 = (invoke_iii(668,($50|0),($51|0))|0);
       $55 = __THREW__; __THREW__ = 0;
       $56 = $55&1;
       if ($56) {
        $61 = ___cxa_find_matching_catch_2()|0;
        $62 = tempRet0;
        __THREW__ = 0;
        invoke_vi(661,($51|0));
        $63 = __THREW__; __THREW__ = 0;
        $64 = $63&1;
        if (!($64)) {
         $eh$lpad$body15$index7Z2D = $62;$eh$lpad$body15$indexZ2D = $61;
         break;
        }
        $65 = ___cxa_find_matching_catch_3(0|0)|0;
        $66 = tempRet0;
        ___clang_call_terminate($65);
        // unreachable;
       }
       __THREW__ = 0;
       invoke_vi(661,($51|0));
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        $59 = ___cxa_find_matching_catch_3(0|0)|0;
        $60 = tempRet0;
        ___clang_call_terminate($59);
        // unreachable;
       }
       __THREW__ = 0;
       $67 = (+invoke_diii(669,($54|0),(2144|0),($3|0)));
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        $94 = ___cxa_find_matching_catch_2()|0;
        $95 = tempRet0;
        __THREW__ = 0;
        invoke_vi(661,($54|0));
        $96 = __THREW__; __THREW__ = 0;
        $97 = $96&1;
        if (!($97)) {
         $$2 = $95;$$25 = $94;
         break L4;
        }
        $98 = ___cxa_find_matching_catch_3(0|0)|0;
        $99 = tempRet0;
        ___clang_call_terminate($98);
        // unreachable;
       }
       $70 = HEAP32[$3>>2]|0;
       __THREW__ = 0;
       invoke_vi(670,($70|0));
       $71 = __THREW__; __THREW__ = 0;
       $72 = $71&1;
       if ($72) {
        $73 = ___cxa_find_matching_catch_3(0|0)|0;
        $74 = tempRet0;
        ___clang_call_terminate($73);
        // unreachable;
       }
       $75 = (~~(($67)));
       $76 = ((($0)) + 16|0);
       HEAP32[$76>>2] = $75;
       __THREW__ = 0;
       invoke_vi(661,($54|0));
       $77 = __THREW__; __THREW__ = 0;
       $78 = $77&1;
       if ($78) {
        $79 = ___cxa_find_matching_catch_3(0|0)|0;
        $80 = tempRet0;
        ___clang_call_terminate($79);
        // unreachable;
       } else {
        $81 = ((($0)) + 20|0);
        HEAP32[$81>>2] = 1;
        STACKTOP = sp;return;
       }
      }
     } while(0);
     $$2 = $eh$lpad$body15$index7Z2D;$$25 = $eh$lpad$body15$indexZ2D;
    }
   } while(0);
   if ((label|0) == 28) {
    $$2 = $eh$lpad$body$index2Z2D;$$25 = $eh$lpad$body$indexZ2D;
   }
   $100 = HEAP32[$18>>2]|0;
   $101 = ((($0)) + 64|0);
   $102 = ($100|0)==($101|0);
   if ($102) {
    $103 = HEAP32[$100>>2]|0;
    $104 = ((($103)) + 16|0);
    $105 = HEAP32[$104>>2]|0;
    FUNCTION_TABLE_vi[$105 & 1023]($100);
   } else {
    $106 = ($100|0)==(0|0);
    if (!($106)) {
     $107 = HEAP32[$100>>2]|0;
     $108 = ((($107)) + 20|0);
     $109 = HEAP32[$108>>2]|0;
     FUNCTION_TABLE_vi[$109 & 1023]($100);
    }
   }
   $110 = HEAP32[$16>>2]|0;
   __THREW__ = 0;
   invoke_vi(661,($110|0));
   $111 = __THREW__; __THREW__ = 0;
   $112 = $111&1;
   if ($112) {
    $113 = ___cxa_find_matching_catch_3(0|0)|0;
    $114 = tempRet0;
    ___clang_call_terminate($113);
    // unreachable;
   }
   $115 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   invoke_vi(661,($115|0));
   $116 = __THREW__; __THREW__ = 0;
   $117 = $116&1;
   if ($117) {
    $118 = ___cxa_find_matching_catch_3(0|0)|0;
    $119 = tempRet0;
    ___clang_call_terminate($118);
    // unreachable;
   } else {
    $$4 = $$2;$$47 = $$25;
    __ZN6BitmapD2Ev($0);
    ___resumeException($$47|0);
    // unreachable;
   }
  }
 }
 $82 = ___cxa_find_matching_catch_2()|0;
 $83 = tempRet0;
 $$4 = $83;$$47 = $82;
 __ZN6BitmapD2Ev($0);
 ___resumeException($$47|0);
 // unreachable;
}
function __Z13base64_encodePKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$016$i$i = 0, $$017$i$i = 0, $$048$lcssa = 0, $$04849 = 0, $$050 = 0, $$1 = 0, $$2 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (($2) + 2)|0;
 $4 = (($3>>>0) / 3)&-1;
 $5 = $4 << 2;
 $6 = $5 | 1;
 $7 = (($6) + 1)|0;
 $8 = (_malloc($7)|0);
 $9 = (($2) + -2)|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0$lcssa = $8;$$048$lcssa = 0;
 } else {
  $$04849 = 0;$$050 = $8;
  while(1) {
   $11 = (($1) + ($$04849)|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $14 = $13 >>> 2;
   $15 = (18633 + ($14)|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ((($$050)) + 1|0);
   HEAP8[$$050>>0] = $16;
   $18 = HEAP8[$11>>0]|0;
   $19 = ($18 << 4)&255;
   $20 = $19 & 48;
   $21 = $20&255;
   $22 = (($$04849) + 1)|0;
   $23 = (($1) + ($22)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = $25 >>> 4;
   $27 = $21 | $26;
   $28 = (18633 + ($27)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = ((($$050)) + 2|0);
   HEAP8[$17>>0] = $29;
   $31 = HEAP8[$23>>0]|0;
   $32 = ($31 << 2)&255;
   $33 = $32 & 60;
   $34 = $33&255;
   $35 = (($$04849) + 2)|0;
   $36 = (($1) + ($35)|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = $38 >>> 6;
   $40 = $34 | $39;
   $41 = (18633 + ($40)|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = ((($$050)) + 3|0);
   HEAP8[$30>>0] = $42;
   $44 = HEAP8[$36>>0]|0;
   $45 = $44 & 63;
   $46 = $45&255;
   $47 = (18633 + ($46)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ((($$050)) + 4|0);
   HEAP8[$43>>0] = $48;
   $50 = (($$04849) + 3)|0;
   $51 = ($50>>>0)<($9>>>0);
   if ($51) {
    $$04849 = $50;$$050 = $49;
   } else {
    $$0$lcssa = $49;$$048$lcssa = $50;
    break;
   }
  }
 }
 $52 = ($$048$lcssa>>>0)<($2>>>0);
 if ($52) {
  $53 = (($1) + ($$048$lcssa)|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = $55 >>> 2;
  $57 = (18633 + ($56)|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = ((($$0$lcssa)) + 1|0);
  HEAP8[$$0$lcssa>>0] = $58;
  $60 = (($2) + -1)|0;
  $61 = ($$048$lcssa|0)==($60|0);
  $62 = HEAP8[$53>>0]|0;
  $63 = ($62 << 4)&255;
  $64 = $63 & 48;
  $65 = $64&255;
  if ($61) {
   $66 = (18633 + ($65)|0);
   $67 = HEAP8[$66>>0]|0;
   HEAP8[$59>>0] = $67;
   $$sink = 61;
  } else {
   $68 = (($$048$lcssa) + 1)|0;
   $69 = (($1) + ($68)|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = $70&255;
   $72 = $71 >>> 4;
   $73 = $72 | $65;
   $74 = (18633 + ($73)|0);
   $75 = HEAP8[$74>>0]|0;
   HEAP8[$59>>0] = $75;
   $76 = HEAP8[$69>>0]|0;
   $77 = ($76 << 2)&255;
   $78 = $77 & 60;
   $79 = $78&255;
   $80 = (18633 + ($79)|0);
   $81 = HEAP8[$80>>0]|0;
   $$sink = $81;
  }
  $82 = ((($$0$lcssa)) + 2|0);
  HEAP8[$82>>0] = $$sink;
  $$1 = ((($$0$lcssa)) + 3|0);
  $83 = ((($$0$lcssa)) + 4|0);
  HEAP8[$$1>>0] = 61;
  $$2 = $83;
 } else {
  $$2 = $$0$lcssa;
 }
 HEAP8[$$2>>0] = 0;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $84 = (_strlen($8)|0);
 $85 = ($84>>>0)>(4294967279);
 if ($85) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $86 = ($84>>>0)<(11);
 if ($86) {
  $93 = $84&255;
  $94 = ((($0)) + 11|0);
  HEAP8[$94>>0] = $93;
  $95 = ($84|0)==(0);
  if ($95) {
   $$017$i$i = $0;
   $96 = (($$017$i$i) + ($84)|0);
   HEAP8[$96>>0] = 0;
   return;
  } else {
   $$016$i$i = $0;
  }
 } else {
  $87 = (($84) + 16)|0;
  $88 = $87 & -16;
  $89 = (__Znwj($88)|0);
  HEAP32[$0>>2] = $89;
  $90 = $88 | -2147483648;
  $91 = ((($0)) + 8|0);
  HEAP32[$91>>2] = $90;
  $92 = ((($0)) + 4|0);
  HEAP32[$92>>2] = $84;
  $$016$i$i = $89;
 }
 _memcpy(($$016$i$i|0),($8|0),($84|0))|0;
 $$017$i$i = $$016$i$i;
 $96 = (($$017$i$i) + ($84)|0);
 HEAP8[$96>>0] = 0;
 return;
}
function __Z15oakBitmapCreateiii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN6ObjectnwEj(88)|0);
 __THREW__ = 0;
 invoke_viiii(676,($3|0),($0|0),($1|0),($2|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  __ZdlPv($3);
  ___resumeException($6|0);
  // unreachable;
 } else {
  return ($3|0);
 }
 return (0)|0;
}
function __Z23oakBitmapCreateFromDataPKviNSt3__28functionIFvP6BitmapEEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$09 = 0, $$4 = 0, $$413 = 0, $$5 = 0, $$514 = 0, $$pre$phi$iZ2D = 0, $$pre$phi51Z2D = 0, $$pre50 = 0, $$sink49$index = 0, $$sink49$index2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 32|0;
 $4 = sp + 24|0;
 $5 = sp;
 $6 = sp + 52|0;
 $7 = sp + 40|0;
 __Z13base64_encodePKcj($6,$0,$1);
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
 __THREW__ = 0;
 $8 = (invoke_ii(527,32)|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $115 = ___cxa_find_matching_catch_2()|0;
  $116 = tempRet0;
  $$pre50 = ((($6)) + 11|0);
  $$5 = $115;$$514 = $116;$$pre$phi51Z2D = $$pre50;
 } else {
  HEAP32[$7>>2] = $8;
  $11 = ((($7)) + 8|0);
  HEAP32[$11>>2] = -2147483616;
  $12 = ((($7)) + 4|0);
  HEAP32[$12>>2] = 22;
  dest=$8; src=18698; stop=dest+22|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $13 = ((($8)) + 22|0);
  HEAP8[$13>>0] = 0;
  $14 = ((($6)) + 11|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)<(0);
  $17 = HEAP32[$6>>2]|0;
  $18 = $16 ? $17 : $6;
  $19 = ((($6)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $15&255;
  $22 = $16 ? $20 : $21;
  __THREW__ = 0;
  (invoke_iiii(578,($7|0),($18|0),($22|0))|0);
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  L4: do {
   if ($24) {
    label = 37;
   } else {
    __THREW__ = 0;
    $25 = (invoke_ii(523,88)|0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     label = 37;
    } else {
     __THREW__ = 0;
     invoke_vi(677,($25|0));
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if ($29) {
      $119 = ___cxa_find_matching_catch_2()|0;
      $120 = tempRet0;
      __ZdlPv($25);
      $$4 = $119;$$413 = $120;
      break;
     }
     HEAP32[$25>>2] = (4568);
     $30 = ((($25)) + 8|0);
     HEAP32[$30>>2] = (4604);
     $31 = ((($25)) + 40|0);
     HEAP32[$31>>2] = (2);
     $32 = ((($25)) + 44|0);
     HEAP32[$32>>2] = (2);
     $33 = ((($25)) + 80|0);
     HEAP32[$33>>2] = 0;
     $34 = ((($25)) + 64|0);
     $35 = ((($2)) + 16|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==(0|0);
     do {
      if ($37) {
       $38 = ((($5)) + 16|0);
       HEAP32[$38>>2] = 0;
       $$pre$phi$iZ2D = $38;
       label = 11;
      } else {
       $39 = ($36|0)==($2|0);
       if ($39) {
        $40 = ((($5)) + 16|0);
        HEAP32[$40>>2] = $5;
        $41 = HEAP32[$36>>2]|0;
        $42 = ((($41)) + 12|0);
        $43 = HEAP32[$42>>2]|0;
        __THREW__ = 0;
        invoke_vii($43|0,($36|0),($5|0));
        $44 = __THREW__; __THREW__ = 0;
        $45 = $44&1;
        if ($45) {
         break;
        } else {
         $$pre$phi$iZ2D = $40;
         label = 11;
         break;
        }
       }
       $46 = HEAP32[$36>>2]|0;
       $47 = ((($46)) + 8|0);
       $48 = HEAP32[$47>>2]|0;
       __THREW__ = 0;
       $49 = (invoke_ii($48|0,($36|0))|0);
       $50 = __THREW__; __THREW__ = 0;
       $51 = $50&1;
       if (!($51)) {
        $52 = ((($5)) + 16|0);
        HEAP32[$52>>2] = $49;
        $$pre$phi$iZ2D = $52;
        label = 11;
       }
      }
     } while(0);
     L17: do {
      if ((label|0) == 11) {
       __ZNSt3__28functionIFvP6BitmapEE4swapERS4_($5,$34);
       $53 = HEAP32[$$pre$phi$iZ2D>>2]|0;
       $54 = ($53|0)==($5|0);
       if ($54) {
        $55 = HEAP32[$53>>2]|0;
        $56 = ((($55)) + 16|0);
        $57 = HEAP32[$56>>2]|0;
        FUNCTION_TABLE_vi[$57 & 1023]($53);
       } else {
        $58 = ($53|0)==(0|0);
        if (!($58)) {
         $59 = HEAP32[$53>>2]|0;
         $60 = ((($59)) + 20|0);
         $61 = HEAP32[$60>>2]|0;
         FUNCTION_TABLE_vi[$61 & 1023]($53);
        }
       }
       __THREW__ = 0;
       $62 = (invoke_ii(678,(19921|0))|0);
       $63 = __THREW__; __THREW__ = 0;
       $64 = $63&1;
       if ($64) {
        $123 = ___cxa_find_matching_catch_2()|0;
        $124 = tempRet0;
        $$4 = $123;$$413 = $124;
        break L4;
       }
       __THREW__ = 0;
       $65 = (invoke_iiiii(679,($62|0),0,(31092|0),($4|0))|0);
       $66 = __THREW__; __THREW__ = 0;
       $67 = $66&1;
       do {
        if ($67) {
         $125 = ___cxa_find_matching_catch_2()|0;
         $126 = tempRet0;
         $$0 = $125;$$09 = $126;
        } else {
         $68 = HEAP32[$31>>2]|0;
         __THREW__ = 0;
         invoke_vi(661,($68|0));
         $69 = __THREW__; __THREW__ = 0;
         $70 = $69&1;
         if ($70) {
          $127 = ___cxa_find_matching_catch_2()|0;
          $128 = tempRet0;
          __THREW__ = 0;
          invoke_vi(661,($65|0));
          $129 = __THREW__; __THREW__ = 0;
          $130 = $129&1;
          if (!($130)) {
           $$0 = $127;$$09 = $128;
           break;
          }
          $131 = ___cxa_find_matching_catch_3(0|0)|0;
          $132 = tempRet0;
          ___clang_call_terminate($131);
          // unreachable;
         }
         $71 = $65;
         HEAP32[$31>>2] = $71;
         __THREW__ = 0;
         invoke_vi(661,(0|0));
         $72 = __THREW__; __THREW__ = 0;
         $73 = $72&1;
         if ($73) {
          $74 = ___cxa_find_matching_catch_3(0|0)|0;
          $75 = tempRet0;
          ___clang_call_terminate($74);
          // unreachable;
         }
         __THREW__ = 0;
         invoke_vi(661,($62|0));
         $76 = __THREW__; __THREW__ = 0;
         $77 = $76&1;
         if ($77) {
          $78 = ___cxa_find_matching_catch_3(0|0)|0;
          $79 = tempRet0;
          ___clang_call_terminate($78);
          // unreachable;
         }
         __THREW__ = 0;
         $80 = (invoke_ii(678,(19927|0))|0);
         $81 = __THREW__; __THREW__ = 0;
         $82 = $81&1;
         if ($82) {
          break L17;
         }
         HEAP32[$3>>2] = 4;
         __THREW__ = 0;
         $83 = (invoke_iii(664,(2144|0),($3|0))|0);
         $84 = __THREW__; __THREW__ = 0;
         $85 = $84&1;
         do {
          if ($85) {
           $137 = ___cxa_find_matching_catch_2()|0;
           $138 = tempRet0;
           $$sink49$index = $137;$$sink49$index2 = $138;
          } else {
           $86 = HEAP32[$31>>2]|0;
           __THREW__ = 0;
           invoke_viii(665,($80|0),($83|0),($86|0));
           $87 = __THREW__; __THREW__ = 0;
           $88 = $87&1;
           if ($88) {
            $93 = ___cxa_find_matching_catch_2()|0;
            $94 = tempRet0;
            __THREW__ = 0;
            invoke_vi(661,($83|0));
            $95 = __THREW__; __THREW__ = 0;
            $96 = $95&1;
            if (!($96)) {
             $$sink49$index = $93;$$sink49$index2 = $94;
             break;
            }
            $97 = ___cxa_find_matching_catch_3(0|0)|0;
            $98 = tempRet0;
            ___clang_call_terminate($97);
            // unreachable;
           }
           __THREW__ = 0;
           invoke_vi(661,($83|0));
           $89 = __THREW__; __THREW__ = 0;
           $90 = $89&1;
           if ($90) {
            $91 = ___cxa_find_matching_catch_3(0|0)|0;
            $92 = tempRet0;
            ___clang_call_terminate($91);
            // unreachable;
           }
           $99 = ((($7)) + 11|0);
           $100 = HEAP8[$99>>0]|0;
           $101 = ($100<<24>>24)<(0);
           $102 = HEAP32[$7>>2]|0;
           $103 = $101 ? $102 : $7;
           $104 = _emscripten_asm_const_iiii(1, ($25|0), ($103|0), (680|0))|0;
           __THREW__ = 0;
           invoke_vi(661,($80|0));
           $105 = __THREW__; __THREW__ = 0;
           $106 = $105&1;
           if ($106) {
            $107 = ___cxa_find_matching_catch_3(0|0)|0;
            $108 = tempRet0;
            ___clang_call_terminate($107);
            // unreachable;
           }
           $109 = HEAP8[$99>>0]|0;
           $110 = ($109<<24>>24)<(0);
           if ($110) {
            $111 = HEAP32[$7>>2]|0;
            __ZdlPv($111);
           }
           $112 = HEAP8[$14>>0]|0;
           $113 = ($112<<24>>24)<(0);
           if (!($113)) {
            STACKTOP = sp;return;
           }
           $114 = HEAP32[$6>>2]|0;
           __ZdlPv($114);
           STACKTOP = sp;return;
          }
         } while(0);
         __THREW__ = 0;
         invoke_vi(661,($80|0));
         $139 = __THREW__; __THREW__ = 0;
         $140 = $139&1;
         if (!($140)) {
          $$4 = $$sink49$index;$$413 = $$sink49$index2;
          break L4;
         }
         $141 = ___cxa_find_matching_catch_3(0|0)|0;
         $142 = tempRet0;
         ___clang_call_terminate($141);
         // unreachable;
        }
       } while(0);
       __THREW__ = 0;
       invoke_vi(661,($62|0));
       $133 = __THREW__; __THREW__ = 0;
       $134 = $133&1;
       if (!($134)) {
        $$4 = $$0;$$413 = $$09;
        break L4;
       }
       $135 = ___cxa_find_matching_catch_3(0|0)|0;
       $136 = tempRet0;
       ___clang_call_terminate($135);
       // unreachable;
      }
     } while(0);
     $121 = ___cxa_find_matching_catch_2()|0;
     $122 = tempRet0;
     $$4 = $121;$$413 = $122;
    }
   }
  } while(0);
  if ((label|0) == 37) {
   $117 = ___cxa_find_matching_catch_2()|0;
   $118 = tempRet0;
   $$4 = $117;$$413 = $118;
  }
  $143 = ((($7)) + 11|0);
  $144 = HEAP8[$143>>0]|0;
  $145 = ($144<<24>>24)<(0);
  if ($145) {
   $146 = HEAP32[$7>>2]|0;
   __ZdlPv($146);
  }
  $$5 = $$4;$$514 = $$413;$$pre$phi51Z2D = $14;
 }
 $147 = HEAP8[$$pre$phi51Z2D>>0]|0;
 $148 = ($147<<24>>24)<(0);
 if (!($148)) {
  ___resumeException($$5|0);
  // unreachable;
 }
 $149 = HEAP32[$6>>2]|0;
 __ZdlPv($149);
 ___resumeException($$5|0);
 // unreachable;
}
function __ZNSt3__28functionIFvP6BitmapEE4swapERS4_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ($1|0)==($0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($0|0);
 $7 = $5;
 if ($6) {
  $8 = ((($1)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==($1|0);
  if ($10) {
   $11 = HEAP32[$5>>2]|0;
   $12 = ((($11)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   __THREW__ = 0;
   invoke_vii($13|0,($5|0),($2|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $38 = ___cxa_find_matching_catch_3(0|0)|0;
    $39 = tempRet0;
    ___clang_call_terminate($38);
    // unreachable;
   }
   $16 = HEAP32[$4>>2]|0;
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($17)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_vi[$19 & 1023]($16);
   HEAP32[$4>>2] = 0;
   $20 = HEAP32[$8>>2]|0;
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($21)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   __THREW__ = 0;
   invoke_vii($23|0,($20|0),($0|0));
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $38 = ___cxa_find_matching_catch_3(0|0)|0;
    $39 = tempRet0;
    ___clang_call_terminate($38);
    // unreachable;
   }
   $26 = HEAP32[$8>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 16|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_vi[$29 & 1023]($26);
   HEAP32[$8>>2] = 0;
   HEAP32[$4>>2] = $0;
   $30 = HEAP32[$2>>2]|0;
   $31 = ((($30)) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   __THREW__ = 0;
   invoke_vii($32|0,($2|0),($1|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    $38 = ___cxa_find_matching_catch_3(0|0)|0;
    $39 = tempRet0;
    ___clang_call_terminate($38);
    // unreachable;
   }
   $35 = HEAP32[$2>>2]|0;
   $36 = ((($35)) + 16|0);
   $37 = HEAP32[$36>>2]|0;
   FUNCTION_TABLE_vi[$37 & 1023]($2);
   HEAP32[$8>>2] = $1;
   STACKTOP = sp;return;
  }
 }
 $40 = ($5|0)==($0|0);
 if ($40) {
  $41 = HEAP32[$5>>2]|0;
  $42 = ((($41)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  __THREW__ = 0;
  invoke_vii($43|0,($5|0),($1|0));
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if ($45) {
   $66 = ___cxa_find_matching_catch_3(0|0)|0;
   $67 = tempRet0;
   ___clang_call_terminate($66);
   // unreachable;
  }
  $46 = HEAP32[$4>>2]|0;
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($47)) + 16|0);
  $49 = HEAP32[$48>>2]|0;
  FUNCTION_TABLE_vi[$49 & 1023]($46);
  $50 = ((($1)) + 16|0);
  $51 = HEAP32[$50>>2]|0;
  HEAP32[$4>>2] = $51;
  HEAP32[$50>>2] = $1;
  STACKTOP = sp;return;
 }
 $52 = ((($1)) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)==($1|0);
 if (!($54)) {
  $65 = $53;
  HEAP32[$4>>2] = $65;
  HEAP32[$52>>2] = $7;
  STACKTOP = sp;return;
 }
 $55 = HEAP32[$53>>2]|0;
 $56 = ((($55)) + 12|0);
 $57 = HEAP32[$56>>2]|0;
 __THREW__ = 0;
 invoke_vii($57|0,($53|0),($0|0));
 $58 = __THREW__; __THREW__ = 0;
 $59 = $58&1;
 if ($59) {
  $66 = ___cxa_find_matching_catch_3(0|0)|0;
  $67 = tempRet0;
  ___clang_call_terminate($66);
  // unreachable;
 }
 $60 = HEAP32[$52>>2]|0;
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($61)) + 16|0);
 $63 = HEAP32[$62>>2]|0;
 FUNCTION_TABLE_vi[$63 & 1023]($60);
 $64 = HEAP32[$4>>2]|0;
 HEAP32[$52>>2] = $64;
 HEAP32[$4>>2] = $0;
 STACKTOP = sp;return;
}
function __ZL21onImageLoadedFromDataP8OSBitmap($0) {
 $0 = $0|0;
 var $$0 = 0, $$010 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = ((($0)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__emval_new_cstring((23221|0))|0);
 __THREW__ = 0;
 $7 = (invoke_iii(668,($5|0),($6|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $15 = tempRet0;
  __THREW__ = 0;
  invoke_vi(661,($6|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $18 = ___cxa_find_matching_catch_3(0|0)|0;
   $19 = tempRet0;
   ___clang_call_terminate($18);
   // unreachable;
  } else {
   ___resumeException($14|0);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(661,($6|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch_3(0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 }
 __THREW__ = 0;
 $20 = (+invoke_diii(669,($7|0),(2144|0),($3|0)));
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if ($22) {
  $73 = ___cxa_find_matching_catch_2()|0;
  $74 = tempRet0;
  __THREW__ = 0;
  invoke_vi(661,($7|0));
  $75 = __THREW__; __THREW__ = 0;
  $76 = $75&1;
  if ($76) {
   $77 = ___cxa_find_matching_catch_3(0|0)|0;
   $78 = tempRet0;
   ___clang_call_terminate($77);
   // unreachable;
  } else {
   $$0 = $74;$$010 = $73;
   ___resumeException($$010|0);
   // unreachable;
  }
 }
 $23 = HEAP32[$3>>2]|0;
 __THREW__ = 0;
 invoke_vi(670,($23|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $26 = ___cxa_find_matching_catch_3(0|0)|0;
  $27 = tempRet0;
  ___clang_call_terminate($26);
  // unreachable;
 }
 $28 = (~~(($20)));
 $29 = ((($0)) + 12|0);
 HEAP32[$29>>2] = $28;
 __THREW__ = 0;
 invoke_vi(661,($7|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $32 = ___cxa_find_matching_catch_3(0|0)|0;
  $33 = tempRet0;
  ___clang_call_terminate($32);
  // unreachable;
 }
 $34 = HEAP32[$4>>2]|0;
 $35 = (__emval_new_cstring((23214|0))|0);
 __THREW__ = 0;
 $36 = (invoke_iii(668,($34|0),($35|0))|0);
 $37 = __THREW__; __THREW__ = 0;
 $38 = $37&1;
 if ($38) {
  $43 = ___cxa_find_matching_catch_2()|0;
  $44 = tempRet0;
  __THREW__ = 0;
  invoke_vi(661,($35|0));
  $45 = __THREW__; __THREW__ = 0;
  $46 = $45&1;
  if ($46) {
   $47 = ___cxa_find_matching_catch_3(0|0)|0;
   $48 = tempRet0;
   ___clang_call_terminate($47);
   // unreachable;
  } else {
   ___resumeException($43|0);
   // unreachable;
  }
 }
 __THREW__ = 0;
 invoke_vi(661,($35|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if ($40) {
  $41 = ___cxa_find_matching_catch_3(0|0)|0;
  $42 = tempRet0;
  ___clang_call_terminate($41);
  // unreachable;
 }
 __THREW__ = 0;
 $49 = (+invoke_diii(669,($36|0),(2144|0),($2|0)));
 $50 = __THREW__; __THREW__ = 0;
 $51 = $50&1;
 if ($51) {
  $79 = ___cxa_find_matching_catch_2()|0;
  $80 = tempRet0;
  __THREW__ = 0;
  invoke_vi(661,($36|0));
  $81 = __THREW__; __THREW__ = 0;
  $82 = $81&1;
  if ($82) {
   $83 = ___cxa_find_matching_catch_3(0|0)|0;
   $84 = tempRet0;
   ___clang_call_terminate($83);
   // unreachable;
  } else {
   $$0 = $80;$$010 = $79;
   ___resumeException($$010|0);
   // unreachable;
  }
 }
 $52 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vi(670,($52|0));
 $53 = __THREW__; __THREW__ = 0;
 $54 = $53&1;
 if ($54) {
  $55 = ___cxa_find_matching_catch_3(0|0)|0;
  $56 = tempRet0;
  ___clang_call_terminate($55);
  // unreachable;
 }
 $57 = (~~(($49)));
 $58 = ((($0)) + 16|0);
 HEAP32[$58>>2] = $57;
 __THREW__ = 0;
 invoke_vi(661,($36|0));
 $59 = __THREW__; __THREW__ = 0;
 $60 = $59&1;
 if ($60) {
  $61 = ___cxa_find_matching_catch_3(0|0)|0;
  $62 = tempRet0;
  ___clang_call_terminate($61);
  // unreachable;
 }
 $63 = ((($0)) + 20|0);
 HEAP32[$63>>2] = 1;
 $64 = HEAP32[$29>>2]|0;
 $65 = ($64|0)<(1);
 do {
  if ($65) {
   __ZN3App3logEPKcz(28952,18922,$vararg_buffer);
   $66 = HEAP32[$4>>2]|0;
   __THREW__ = 0;
   invoke_vi(661,($66|0));
   $67 = __THREW__; __THREW__ = 0;
   $68 = $67&1;
   if (!($68)) {
    HEAP32[$4>>2] = 2;
    __THREW__ = 0;
    invoke_vi(661,(0|0));
    $69 = __THREW__; __THREW__ = 0;
    $70 = $69&1;
    if (!($70)) {
     break;
    }
    $71 = ___cxa_find_matching_catch_3(0|0)|0;
    $72 = tempRet0;
    ___clang_call_terminate($71);
    // unreachable;
   }
   $85 = ___cxa_find_matching_catch_2()|0;
   $86 = tempRet0;
   __THREW__ = 0;
   invoke_vi(661,((2)|0));
   $87 = __THREW__; __THREW__ = 0;
   $88 = $87&1;
   if ($88) {
    $89 = ___cxa_find_matching_catch_3(0|0)|0;
    $90 = tempRet0;
    ___clang_call_terminate($89);
    // unreachable;
   } else {
    $$0 = $86;$$010 = $85;
    ___resumeException($$010|0);
    // unreachable;
   }
  }
 } while(0);
 HEAP32[$1>>2] = $0;
 $91 = ((($0)) + 80|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($92|0)==(0|0);
 if ($93) {
  $94 = (___cxa_allocate_exception(4)|0);
  HEAP32[$94>>2] = (2824);
  ___cxa_throw(($94|0),(272|0),(118|0));
  // unreachable;
 } else {
  $95 = HEAP32[$92>>2]|0;
  $96 = ((($95)) + 24|0);
  $97 = HEAP32[$96>>2]|0;
  FUNCTION_TABLE_vii[$97 & 1023]($92,$1);
  STACKTOP = sp;return;
 }
}
function __GLOBAL__sub_I_canvas_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(31096)>>2] = 0;
 HEAP32[(31100)>>2] = 0;
 HEAP32[7773] = (31096);
 (___cxa_atexit((681|0),(31092|0),(___dso_handle|0))|0);
 return;
}
function __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE($0,$2);
 return;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$1>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE($0,$3);
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE($0,$5);
 $6 = ((($1)) + 16|0);
 $7 = ((($1)) + 28|0);
 $8 = ((($7)) + 11|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)<(0);
 if ($10) {
  $11 = HEAP32[$7>>2]|0;
  __ZdlPv($11);
 }
 $12 = ((($6)) + 11|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)<(0);
 if ($14) {
  $15 = HEAP32[$6>>2]|0;
  __ZdlPv($15);
 }
 __ZdlPv($1);
 return;
}
function __Z10oakFontGetRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN6ObjectnwEj(60)|0);
 __THREW__ = 0;
 invoke_viid(682,($2|0),($0|0),(+$1));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  __ZdlPv($2);
  ___resumeException($5|0);
  // unreachable;
 } else {
  return ($2|0);
 }
 return (0)|0;
}
function __ZN7WebFontC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$0 = 0, $$013 = 0, $$016$i$i100 = 0, $$017$i$i101 = 0, $$1 = 0, $$11 = 0, $$1124 = 0, $$114 = 0, $$12 = 0, $$1225 = 0, $$13 = 0, $$1326 = 0, $$14 = 0, $$1427 = 0, $$17 = 0, $$1730 = 0, $$18 = 0, $$1831 = 0, $$19 = 0, $$1932 = 0;
 var $$2 = 0, $$215 = 0, $$6 = 0, $$619 = 0, $$7 = 0, $$720 = 0, $$8 = 0, $$821 = 0, $$pre = 0, $$pre$i$i$i$i$i$i = 0, $$pre$phi163Z2D = 0, $$pre162$pre$phiZZ2D = 0, $$pre165 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$index4Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body108$index10Z2D = 0, $eh$lpad$body108$indexZ2D = 0, $eh$lpad$body122$index15Z2D = 0, $eh$lpad$body122$indexZ2D = 0, $phitmp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $vararg_buffer = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $5 = sp + 164|0;
 $6 = sp + 160|0;
 $7 = sp + 156|0;
 $8 = sp + 144|0;
 $9 = sp + 132|0;
 $10 = sp + 120|0;
 $11 = sp + 108|0;
 $12 = sp + 96|0;
 $13 = sp + 84|0;
 $14 = sp + 72|0;
 $15 = sp + 48|0;
 $16 = sp + 40|0;
 $17 = sp + 36|0;
 $18 = sp + 168|0;
 $19 = sp + 24|0;
 __ZN4FontC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEf($0,$1,$2);
 HEAP32[$0>>2] = (4748);
 $20 = ((($0)) + 52|0);
 HEAP32[$20>>2] = (2);
 $21 = ((($0)) + 56|0);
 HEAP32[$21>>2] = (2);
 __THREW__ = 0;
 $22 = (invoke_ii(678,(18955|0))|0);
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 L1: do {
  if ($24) {
   $69 = ___cxa_find_matching_catch_2()|0;
   $70 = tempRet0;
   $$2 = $69;$$215 = $70;
   label = 26;
  } else {
   __THREW__ = 0;
   $25 = (invoke_ii(662,(18964|0))|0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    $71 = ___cxa_find_matching_catch_2()|0;
    $72 = tempRet0;
    $$1 = $71;$$114 = $72;
   } else {
    HEAP32[$7>>2] = $25;
    __THREW__ = 0;
    invoke_viiii(663,($6|0),($22|0),(18971|0),($7|0));
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    do {
     if ($29) {
      $73 = ___cxa_find_matching_catch_2()|0;
      $74 = tempRet0;
      $$0 = $73;$$013 = $74;
     } else {
      $30 = HEAP32[$20>>2]|0;
      __THREW__ = 0;
      invoke_vi(661,($30|0));
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       $75 = ___cxa_find_matching_catch_2()|0;
       $76 = tempRet0;
       $77 = HEAP32[$6>>2]|0;
       __THREW__ = 0;
       invoke_vi(661,($77|0));
       $78 = __THREW__; __THREW__ = 0;
       $79 = $78&1;
       if (!($79)) {
        $$0 = $75;$$013 = $76;
        break;
       }
       $80 = ___cxa_find_matching_catch_3(0|0)|0;
       $81 = tempRet0;
       ___clang_call_terminate($80);
       // unreachable;
      }
      $33 = HEAP32[$6>>2]|0;
      HEAP32[$20>>2] = $33;
      HEAP32[$6>>2] = 0;
      __THREW__ = 0;
      invoke_vi(661,(0|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       $36 = ___cxa_find_matching_catch_3(0|0)|0;
       $37 = tempRet0;
       ___clang_call_terminate($36);
       // unreachable;
      }
      $38 = HEAP32[$7>>2]|0;
      __THREW__ = 0;
      invoke_vi(661,($38|0));
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       $41 = ___cxa_find_matching_catch_3(0|0)|0;
       $42 = tempRet0;
       ___clang_call_terminate($41);
       // unreachable;
      }
      __THREW__ = 0;
      invoke_vi(661,($22|0));
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       $45 = ___cxa_find_matching_catch_3(0|0)|0;
       $46 = tempRet0;
       ___clang_call_terminate($45);
       // unreachable;
      }
      $47 = ((($0)) + 20|0);
      __THREW__ = 0;
      invoke_viii(683,($20|0),(23221|0),($47|0));
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      if (!($49)) {
       __THREW__ = 0;
       invoke_viii(684,($20|0),(23214|0),($47|0));
       $50 = __THREW__; __THREW__ = 0;
       $51 = $50&1;
       if (!($51)) {
        $52 = ((($8)) + 11|0);
        HEAP8[$52>>0] = 10;
        dest=$8; src=18985; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
        $53 = ((($8)) + 10|0);
        HEAP8[$53>>0] = 0;
        $54 = ((($1)) + 11|0);
        $55 = HEAP8[$54>>0]|0;
        $56 = ($55<<24>>24)<(0);
        $57 = ((($1)) + 4|0);
        $58 = HEAP32[$57>>2]|0;
        $59 = $55&255;
        $60 = $56 ? $58 : $59;
        $61 = ($60|0)==(0);
        L26: do {
         if ($61) {
          label = 95;
         } else {
          __THREW__ = 0;
          $62 = (invoke_iii(685,(31092|0),($1|0))|0);
          $63 = __THREW__; __THREW__ = 0;
          $64 = $63&1;
          if ($64) {
           $93 = ___cxa_find_matching_catch_2()|0;
           $94 = tempRet0;
           $$18 = $93;$$1831 = $94;
           break;
          }
          $65 = ($62|0)==((31096)|0);
          if ($65) {
           $97 = HEAP8[$54>>0]|0;
           $98 = ($97<<24>>24)<(0);
           $99 = HEAP32[$1>>2]|0;
           $100 = $98 ? $99 : $1;
           __THREW__ = 0;
           $101 = (invoke_iii(636,(28952|0),($100|0))|0);
           $102 = __THREW__; __THREW__ = 0;
           $103 = $102&1;
           if (!($103)) {
            __THREW__ = 0;
            (invoke_iii(563,($8|0),($1|0))|0);
            $104 = __THREW__; __THREW__ = 0;
            $105 = $104&1;
            do {
             if (!($105)) {
              $106 = ((($10)) + 11|0);
              $107 = ((($10)) + 1|0);
              $108 = ((($9)) + 11|0);
              $109 = ((($9)) + 4|0);
              while(1) {
               ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
               HEAP8[$106>>0] = 1;
               HEAP8[$10>>0] = 47;
               HEAP8[$107>>0] = 0;
               __THREW__ = 0;
               invoke_viiii(686,($9|0),($8|0),($10|0),1);
               $110 = __THREW__; __THREW__ = 0;
               $111 = $110&1;
               if ($111) {
                label = 40;
                break;
               }
               $112 = HEAP8[$108>>0]|0;
               $113 = ($112<<24>>24)<(0);
               $114 = HEAP32[$109>>2]|0;
               $115 = $112&255;
               $116 = $113 ? $114 : $115;
               $117 = ($116|0)==(0);
               if ($113) {
                $118 = HEAP32[$9>>2]|0;
                __ZdlPv($118);
               }
               $119 = HEAP8[$106>>0]|0;
               $120 = ($119<<24>>24)<(0);
               if ($120) {
                $121 = HEAP32[$10>>2]|0;
                __ZdlPv($121);
               }
               if ($117) {
                break;
               }
              }
              if ((label|0) == 40) {
               $124 = ___cxa_find_matching_catch_2()|0;
               $125 = tempRet0;
               $126 = HEAP8[$106>>0]|0;
               $127 = ($126<<24>>24)<(0);
               if ($127) {
                $128 = HEAP32[$10>>2]|0;
                __ZdlPv($128);
               }
               $$18 = $124;$$1831 = $125;
               break L26;
              }
              ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
              $129 = ((($11)) + 11|0);
              HEAP8[$129>>0] = 4;
              HEAP32[$11>>2] = 1718907950;
              $130 = ((($11)) + 4|0);
              HEAP8[$130>>0] = 0;
              __THREW__ = 0;
              (invoke_iiii(557,($8|0),($11|0),1)|0);
              $131 = __THREW__; __THREW__ = 0;
              $132 = $131&1;
              if ($132) {
               $232 = ___cxa_find_matching_catch_2()|0;
               $233 = tempRet0;
               $234 = HEAP8[$129>>0]|0;
               $235 = ($234<<24>>24)<(0);
               if ($235) {
                $236 = HEAP32[$11>>2]|0;
                __ZdlPv($236);
               }
               $$18 = $232;$$1831 = $233;
               break L26;
              }
              $133 = HEAP8[$129>>0]|0;
              $134 = ($133<<24>>24)<(0);
              if ($134) {
               $135 = HEAP32[$11>>2]|0;
               __ZdlPv($135);
              }
              ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
              $136 = ((($12)) + 11|0);
              HEAP8[$136>>0] = 4;
              HEAP32[$12>>2] = 1718906670;
              $137 = ((($12)) + 4|0);
              HEAP8[$137>>0] = 0;
              __THREW__ = 0;
              (invoke_iiii(557,($8|0),($12|0),1)|0);
              $138 = __THREW__; __THREW__ = 0;
              $139 = $138&1;
              if ($139) {
               $237 = ___cxa_find_matching_catch_2()|0;
               $238 = tempRet0;
               $239 = HEAP8[$136>>0]|0;
               $240 = ($239<<24>>24)<(0);
               if ($240) {
                $241 = HEAP32[$12>>2]|0;
                __ZdlPv($241);
               }
               $$18 = $237;$$1831 = $238;
               break L26;
              }
              $140 = HEAP8[$136>>0]|0;
              $141 = ($140<<24>>24)<(0);
              if ($141) {
               $142 = HEAP32[$12>>2]|0;
               __ZdlPv($142);
              }
              ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
              __THREW__ = 0;
              $143 = (invoke_ii(527,32)|0);
              $144 = __THREW__; __THREW__ = 0;
              $145 = $144&1;
              if ($145) {
               break;
              }
              HEAP32[$13>>2] = $143;
              $146 = ((($13)) + 8|0);
              HEAP32[$146>>2] = -2147483616;
              $147 = ((($13)) + 4|0);
              HEAP32[$147>>2] = 26;
              dest=$143; src=18996; stop=dest+26|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
              $148 = ((($143)) + 26|0);
              HEAP8[$148>>0] = 0;
              $149 = HEAP8[$52>>0]|0;
              $150 = ($149<<24>>24)<(0);
              $151 = HEAP32[$8>>2]|0;
              $152 = $150 ? $151 : $8;
              $153 = ((($8)) + 4|0);
              $154 = HEAP32[$153>>2]|0;
              $155 = $149&255;
              $156 = $150 ? $154 : $155;
              __THREW__ = 0;
              (invoke_iiii(578,($13|0),($152|0),($156|0))|0);
              $157 = __THREW__; __THREW__ = 0;
              $158 = $157&1;
              L70: do {
               if ($158) {
                label = 80;
               } else {
                __THREW__ = 0;
                (invoke_iii(603,($13|0),(19023|0))|0);
                $159 = __THREW__; __THREW__ = 0;
                $160 = $159&1;
                if ($160) {
                 label = 80;
                 break;
                }
                $161 = ((($101)) + 12|0);
                $162 = HEAP32[$161>>2]|0;
                $163 = ((($101)) + 16|0);
                $164 = HEAP32[$163>>2]|0;
                __THREW__ = 0;
                invoke_viii(687,($14|0),($162|0),($164|0));
                $165 = __THREW__; __THREW__ = 0;
                $166 = $165&1;
                do {
                 if ($166) {
                  $244 = ___cxa_find_matching_catch_2()|0;
                  $245 = tempRet0;
                  $$6 = $244;$$619 = $245;
                 } else {
                  $167 = ((($14)) + 11|0);
                  $168 = HEAP8[$167>>0]|0;
                  $169 = ($168<<24>>24)<(0);
                  $170 = HEAP32[$14>>2]|0;
                  $171 = $169 ? $170 : $14;
                  $172 = ((($14)) + 4|0);
                  $173 = HEAP32[$172>>2]|0;
                  $174 = $168&255;
                  $175 = $169 ? $173 : $174;
                  __THREW__ = 0;
                  (invoke_iiii(578,($13|0),($171|0),($175|0))|0);
                  $176 = __THREW__; __THREW__ = 0;
                  $177 = $176&1;
                  if ($177) {
                   $246 = ___cxa_find_matching_catch_2()|0;
                   $247 = tempRet0;
                   $248 = HEAP8[$167>>0]|0;
                   $249 = ($248<<24>>24)<(0);
                   if (!($249)) {
                    $$6 = $246;$$619 = $247;
                    break;
                   }
                   $250 = HEAP32[$14>>2]|0;
                   __ZdlPv($250);
                   $$6 = $246;$$619 = $247;
                   break;
                  }
                  $178 = HEAP8[$167>>0]|0;
                  $179 = ($178<<24>>24)<(0);
                  if ($179) {
                   $180 = HEAP32[$14>>2]|0;
                   __ZdlPv($180);
                  }
                  __THREW__ = 0;
                  (invoke_iii(603,($13|0),(19070|0))|0);
                  $181 = __THREW__; __THREW__ = 0;
                  $182 = $181&1;
                  if ($182) {
                   label = 80;
                   break L70;
                  }
                  $183 = ((($13)) + 11|0);
                  $184 = HEAP8[$183>>0]|0;
                  $185 = ($184<<24>>24)<(0);
                  $186 = HEAP32[$13>>2]|0;
                  $187 = $185 ? $186 : $13;
                  $188 = _emscripten_asm_const_ii(2, ($187|0))|0;
                  __THREW__ = 0;
                  invoke_vii(566,($15|0),($1|0));
                  $189 = __THREW__; __THREW__ = 0;
                  $190 = $189&1;
                  do {
                   if ($190) {
                    $251 = ___cxa_find_matching_catch_2()|0;
                    $252 = tempRet0;
                    $eh$lpad$body$index4Z2D = $252;$eh$lpad$body$indexZ2D = $251;
                    label = 86;
                   } else {
                    $191 = ((($15)) + 12|0);
                    __THREW__ = 0;
                    invoke_vii(566,($191|0),($8|0));
                    $192 = __THREW__; __THREW__ = 0;
                    $193 = $192&1;
                    if ($193) {
                     $194 = ___cxa_find_matching_catch_2()|0;
                     $195 = tempRet0;
                     $196 = ((($15)) + 11|0);
                     $197 = HEAP8[$196>>0]|0;
                     $198 = ($197<<24>>24)<(0);
                     if (!($198)) {
                      $eh$lpad$body$index4Z2D = $195;$eh$lpad$body$indexZ2D = $194;
                      label = 86;
                      break;
                     }
                     $199 = HEAP32[$15>>2]|0;
                     __ZdlPv($199);
                     $eh$lpad$body$index4Z2D = $195;$eh$lpad$body$indexZ2D = $194;
                     label = 86;
                     break;
                    }
                    __THREW__ = 0;
                    $200 = (invoke_iiii(688,(31092|0),($5|0),($15|0))|0);
                    $201 = __THREW__; __THREW__ = 0;
                    $202 = $201&1;
                    do {
                     if (!($202)) {
                      $203 = HEAP32[$200>>2]|0;
                      $204 = ($203|0)==(0|0);
                      if ($204) {
                       __THREW__ = 0;
                       $205 = (invoke_ii(527,40)|0);
                       $206 = __THREW__; __THREW__ = 0;
                       $207 = $206&1;
                       if ($207) {
                        break;
                       }
                       $208 = ((($205)) + 16|0);
                       ;HEAP32[$208>>2]=HEAP32[$15>>2]|0;HEAP32[$208+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$208+8>>2]=HEAP32[$15+8>>2]|0;
                       ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
                       $209 = ((($205)) + 28|0);
                       ;HEAP32[$209>>2]=HEAP32[$191>>2]|0;HEAP32[$209+4>>2]=HEAP32[$191+4>>2]|0;HEAP32[$209+8>>2]=HEAP32[$191+8>>2]|0;
                       ;HEAP32[$191>>2]=0|0;HEAP32[$191+4>>2]=0|0;HEAP32[$191+8>>2]=0|0;
                       $210 = HEAP32[$5>>2]|0;
                       HEAP32[$205>>2] = 0;
                       $211 = ((($205)) + 4|0);
                       HEAP32[$211>>2] = 0;
                       $212 = ((($205)) + 8|0);
                       HEAP32[$212>>2] = $210;
                       HEAP32[$200>>2] = $205;
                       $213 = HEAP32[7773]|0;
                       $214 = HEAP32[$213>>2]|0;
                       $215 = ($214|0)==(0|0);
                       if ($215) {
                        $218 = $205;
                       } else {
                        $216 = $214;
                        HEAP32[7773] = $216;
                        $$pre$i$i$i$i$i$i = HEAP32[$200>>2]|0;
                        $218 = $$pre$i$i$i$i$i$i;
                       }
                       $217 = HEAP32[(31096)>>2]|0;
                       __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($217,$218);
                       $219 = HEAP32[(31100)>>2]|0;
                       $220 = (($219) + 1)|0;
                       HEAP32[(31100)>>2] = $220;
                      }
                      $221 = ((($191)) + 11|0);
                      $222 = HEAP8[$221>>0]|0;
                      $223 = ($222<<24>>24)<(0);
                      if ($223) {
                       $224 = HEAP32[$191>>2]|0;
                       __ZdlPv($224);
                      }
                      $225 = ((($15)) + 11|0);
                      $226 = HEAP8[$225>>0]|0;
                      $227 = ($226<<24>>24)<(0);
                      if ($227) {
                       $228 = HEAP32[$15>>2]|0;
                       __ZdlPv($228);
                      }
                      $229 = HEAP8[$183>>0]|0;
                      $230 = ($229<<24>>24)<(0);
                      if ($230) {
                       $231 = HEAP32[$13>>2]|0;
                       __ZdlPv($231);
                      }
                      label = 95;
                      break L26;
                     }
                    } while(0);
                    $253 = ___cxa_find_matching_catch_2()|0;
                    $254 = tempRet0;
                    $255 = ((($191)) + 11|0);
                    $256 = HEAP8[$255>>0]|0;
                    $257 = ($256<<24>>24)<(0);
                    if ($257) {
                     $258 = HEAP32[$191>>2]|0;
                     __ZdlPv($258);
                    }
                    $259 = ((($15)) + 11|0);
                    $260 = HEAP8[$259>>0]|0;
                    $261 = ($260<<24>>24)<(0);
                    if (!($261)) {
                     $$7 = $253;$$720 = $254;
                     break;
                    }
                    $262 = HEAP32[$15>>2]|0;
                    __ZdlPv($262);
                    $$7 = $253;$$720 = $254;
                   }
                  } while(0);
                  if ((label|0) == 86) {
                   $$7 = $eh$lpad$body$indexZ2D;$$720 = $eh$lpad$body$index4Z2D;
                  }
                  $$8 = $$7;$$821 = $$720;
                  break L70;
                 }
                } while(0);
                $$8 = $$6;$$821 = $$619;
               }
              } while(0);
              if ((label|0) == 80) {
               $242 = ___cxa_find_matching_catch_2()|0;
               $243 = tempRet0;
               $$8 = $242;$$821 = $243;
              }
              $263 = ((($13)) + 11|0);
              $264 = HEAP8[$263>>0]|0;
              $265 = ($264<<24>>24)<(0);
              if ($265) {
               $266 = HEAP32[$13>>2]|0;
               __ZdlPv($266);
              }
              $$18 = $$8;$$1831 = $$821;
              break L26;
             }
            } while(0);
            $122 = ___cxa_find_matching_catch_2()|0;
            $123 = tempRet0;
            $$18 = $122;$$1831 = $123;
            break;
           }
          } else {
           $66 = ((($62)) + 28|0);
           __THREW__ = 0;
           (invoke_iii(563,($8|0),($66|0))|0);
           $67 = __THREW__; __THREW__ = 0;
           $68 = $67&1;
           if (!($68)) {
            label = 95;
            break;
           }
          }
          $95 = ___cxa_find_matching_catch_2()|0;
          $96 = tempRet0;
          $$18 = $95;$$1831 = $96;
         }
        } while(0);
        L127: do {
         if ((label|0) == 95) {
          __THREW__ = 0;
          $267 = (invoke_ii(662,(19251|0))|0);
          $268 = __THREW__; __THREW__ = 0;
          $269 = $268&1;
          if ($269) {
           $371 = ___cxa_find_matching_catch_2()|0;
           $372 = tempRet0;
           $$12 = $371;$$1225 = $372;
          } else {
           HEAP32[$17>>2] = $267;
           $270 = HEAP32[$20>>2]|0;
           __THREW__ = 0;
           invoke_viiii(663,($16|0),($270|0),(19254|0),($17|0));
           $271 = __THREW__; __THREW__ = 0;
           $272 = $271&1;
           do {
            if ($272) {
             $373 = ___cxa_find_matching_catch_2()|0;
             $374 = tempRet0;
             $$11 = $373;$$1124 = $374;
            } else {
             $273 = HEAP32[$21>>2]|0;
             __THREW__ = 0;
             invoke_vi(661,($273|0));
             $274 = __THREW__; __THREW__ = 0;
             $275 = $274&1;
             if ($275) {
              $375 = ___cxa_find_matching_catch_2()|0;
              $376 = tempRet0;
              $377 = HEAP32[$16>>2]|0;
              __THREW__ = 0;
              invoke_vi(661,($377|0));
              $378 = __THREW__; __THREW__ = 0;
              $379 = $378&1;
              if (!($379)) {
               $$11 = $375;$$1124 = $376;
               break;
              }
              $380 = ___cxa_find_matching_catch_3(0|0)|0;
              $381 = tempRet0;
              ___clang_call_terminate($380);
              // unreachable;
             }
             $276 = HEAP32[$16>>2]|0;
             HEAP32[$21>>2] = $276;
             HEAP32[$16>>2] = 0;
             __THREW__ = 0;
             invoke_vi(661,(0|0));
             $277 = __THREW__; __THREW__ = 0;
             $278 = $277&1;
             if ($278) {
              $279 = ___cxa_find_matching_catch_3(0|0)|0;
              $280 = tempRet0;
              ___clang_call_terminate($279);
              // unreachable;
             }
             $281 = HEAP32[$17>>2]|0;
             __THREW__ = 0;
             invoke_vi(661,($281|0));
             $282 = __THREW__; __THREW__ = 0;
             $283 = $282&1;
             if ($283) {
              $284 = ___cxa_find_matching_catch_3(0|0)|0;
              $285 = tempRet0;
              ___clang_call_terminate($284);
              // unreachable;
             }
             $286 = +HEAPF32[$47>>2];
             $287 = (~~(($286)));
             $288 = HEAP8[$52>>0]|0;
             $289 = ($288<<24>>24)<(0);
             $290 = HEAP32[$8>>2]|0;
             $291 = $289 ? $290 : $8;
             HEAP32[$vararg_buffer>>2] = $287;
             $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
             HEAP32[$vararg_ptr1>>2] = $291;
             (_sprintf($18,19265,$vararg_buffer)|0);
             ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
             $292 = (_strlen($18)|0);
             $293 = ($292>>>0)>(4294967279);
             L145: do {
              if ($293) {
               __THREW__ = 0;
               invoke_vi(574,($19|0));
               $294 = __THREW__; __THREW__ = 0;
               label = 139;
              } else {
               $295 = ($292>>>0)<(11);
               if ($295) {
                $304 = $292&255;
                $305 = ((($19)) + 11|0);
                HEAP8[$305>>0] = $304;
                $306 = ($292|0)==(0);
                if ($306) {
                 $$017$i$i101 = $19;$$pre$phi163Z2D = $305;
                } else {
                 $$016$i$i100 = $19;$$pre162$pre$phiZZ2D = $305;
                 label = 108;
                }
               } else {
                $296 = (($292) + 16)|0;
                $297 = $296 & -16;
                __THREW__ = 0;
                $298 = (invoke_ii(527,($297|0))|0);
                $299 = __THREW__; __THREW__ = 0;
                $300 = $299&1;
                if ($300) {
                 label = 139;
                 break;
                }
                HEAP32[$19>>2] = $298;
                $301 = $297 | -2147483648;
                $302 = ((($19)) + 8|0);
                HEAP32[$302>>2] = $301;
                $303 = ((($19)) + 4|0);
                HEAP32[$303>>2] = $292;
                $$pre165 = ((($19)) + 11|0);
                $$016$i$i100 = $298;$$pre162$pre$phiZZ2D = $$pre165;
                label = 108;
               }
               if ((label|0) == 108) {
                _memcpy(($$016$i$i100|0),($18|0),($292|0))|0;
                $$017$i$i101 = $$016$i$i100;$$pre$phi163Z2D = $$pre162$pre$phiZZ2D;
               }
               $307 = (($$017$i$i101) + ($292)|0);
               HEAP8[$307>>0] = 0;
               $308 = HEAP8[$$pre$phi163Z2D>>0]|0;
               $309 = ($308<<24>>24)<(0);
               $310 = ((($19)) + 4|0);
               $311 = HEAP32[$310>>2]|0;
               $312 = $308&255;
               $313 = $309 ? $311 : $312;
               $314 = (($313) + 4)|0;
               $315 = (_malloc($314)|0);
               HEAP32[$315>>2] = $313;
               $316 = ((($315)) + 4|0);
               $317 = HEAP32[$19>>2]|0;
               $318 = $309 ? $317 : $19;
               _memcpy(($316|0),($318|0),($313|0))|0;
               HEAP32[$4>>2] = $315;
               __THREW__ = 0;
               $319 = (invoke_iii(664,(1272|0),($4|0))|0);
               $320 = __THREW__; __THREW__ = 0;
               $321 = $320&1;
               do {
                if ($321) {
                 $389 = ___cxa_find_matching_catch_2()|0;
                 $390 = tempRet0;
                 $$13 = $389;$$1326 = $390;
                } else {
                 $322 = HEAP32[$21>>2]|0;
                 __THREW__ = 0;
                 $323 = (invoke_ii(662,(19273|0))|0);
                 $324 = __THREW__; __THREW__ = 0;
                 $325 = $324&1;
                 do {
                  if ($325) {
                   $391 = ___cxa_find_matching_catch_2()|0;
                   $392 = tempRet0;
                   $eh$lpad$body108$index10Z2D = $392;$eh$lpad$body108$indexZ2D = $391;
                  } else {
                   __THREW__ = 0;
                   invoke_viii(665,($322|0),($323|0),($319|0));
                   $326 = __THREW__; __THREW__ = 0;
                   $327 = $326&1;
                   if ($327) {
                    $332 = ___cxa_find_matching_catch_2()|0;
                    $333 = tempRet0;
                    __THREW__ = 0;
                    invoke_vi(661,($323|0));
                    $334 = __THREW__; __THREW__ = 0;
                    $335 = $334&1;
                    if (!($335)) {
                     $eh$lpad$body108$index10Z2D = $333;$eh$lpad$body108$indexZ2D = $332;
                     break;
                    }
                    $336 = ___cxa_find_matching_catch_3(0|0)|0;
                    $337 = tempRet0;
                    ___clang_call_terminate($336);
                    // unreachable;
                   }
                   __THREW__ = 0;
                   invoke_vi(661,($323|0));
                   $328 = __THREW__; __THREW__ = 0;
                   $329 = $328&1;
                   if ($329) {
                    $330 = ___cxa_find_matching_catch_3(0|0)|0;
                    $331 = tempRet0;
                    ___clang_call_terminate($330);
                    // unreachable;
                   }
                   __THREW__ = 0;
                   invoke_vi(661,($319|0));
                   $338 = __THREW__; __THREW__ = 0;
                   $339 = $338&1;
                   if ($339) {
                    $340 = ___cxa_find_matching_catch_3(0|0)|0;
                    $341 = tempRet0;
                    ___clang_call_terminate($340);
                    // unreachable;
                   }
                   $342 = HEAP8[$$pre$phi163Z2D>>0]|0;
                   $343 = ($342<<24>>24)<(0);
                   if ($343) {
                    $344 = HEAP32[$19>>2]|0;
                    __ZdlPv($344);
                   }
                   $345 = (_malloc(7)|0);
                   HEAP32[$345>>2] = 3;
                   $346 = ((($345)) + 4|0);
                   ;HEAP8[$346>>0]=HEAP8[23471>>0]|0;HEAP8[$346+1>>0]=HEAP8[23471+1>>0]|0;HEAP8[$346+2>>0]=HEAP8[23471+2>>0]|0;
                   HEAP32[$3>>2] = $345;
                   __THREW__ = 0;
                   $347 = (invoke_iii(664,(1272|0),($3|0))|0);
                   $348 = __THREW__; __THREW__ = 0;
                   $349 = $348&1;
                   if ($349) {
                    $400 = ___cxa_find_matching_catch_2()|0;
                    $401 = tempRet0;
                    $$17 = $400;$$1730 = $401;
                    break L145;
                   }
                   $350 = HEAP32[$21>>2]|0;
                   __THREW__ = 0;
                   $351 = (invoke_ii(662,(19278|0))|0);
                   $352 = __THREW__; __THREW__ = 0;
                   $353 = $352&1;
                   do {
                    if ($353) {
                     $402 = ___cxa_find_matching_catch_2()|0;
                     $403 = tempRet0;
                     $eh$lpad$body122$index15Z2D = $403;$eh$lpad$body122$indexZ2D = $402;
                    } else {
                     __THREW__ = 0;
                     invoke_viii(665,($350|0),($351|0),($347|0));
                     $354 = __THREW__; __THREW__ = 0;
                     $355 = $354&1;
                     if ($355) {
                      $360 = ___cxa_find_matching_catch_2()|0;
                      $361 = tempRet0;
                      __THREW__ = 0;
                      invoke_vi(661,($351|0));
                      $362 = __THREW__; __THREW__ = 0;
                      $363 = $362&1;
                      if (!($363)) {
                       $eh$lpad$body122$index15Z2D = $361;$eh$lpad$body122$indexZ2D = $360;
                       break;
                      }
                      $364 = ___cxa_find_matching_catch_3(0|0)|0;
                      $365 = tempRet0;
                      ___clang_call_terminate($364);
                      // unreachable;
                     }
                     __THREW__ = 0;
                     invoke_vi(661,($351|0));
                     $356 = __THREW__; __THREW__ = 0;
                     $357 = $356&1;
                     if ($357) {
                      $358 = ___cxa_find_matching_catch_3(0|0)|0;
                      $359 = tempRet0;
                      ___clang_call_terminate($358);
                      // unreachable;
                     }
                     __THREW__ = 0;
                     invoke_vi(661,($347|0));
                     $366 = __THREW__; __THREW__ = 0;
                     $367 = $366&1;
                     if ($367) {
                      $368 = ___cxa_find_matching_catch_3(0|0)|0;
                      $369 = tempRet0;
                      ___clang_call_terminate($368);
                      // unreachable;
                     }
                     $$pre = HEAP8[$52>>0]|0;
                     $phitmp = ($$pre<<24>>24)<(0);
                     if (!($phitmp)) {
                      STACKTOP = sp;return;
                     }
                     $370 = HEAP32[$8>>2]|0;
                     __ZdlPv($370);
                     STACKTOP = sp;return;
                    }
                   } while(0);
                   __THREW__ = 0;
                   invoke_vi(661,($347|0));
                   $404 = __THREW__; __THREW__ = 0;
                   $405 = $404&1;
                   if (!($405)) {
                    $$17 = $eh$lpad$body122$indexZ2D;$$1730 = $eh$lpad$body122$index15Z2D;
                    break L145;
                   }
                   $406 = ___cxa_find_matching_catch_3(0|0)|0;
                   $407 = tempRet0;
                   ___clang_call_terminate($406);
                   // unreachable;
                  }
                 } while(0);
                 __THREW__ = 0;
                 invoke_vi(661,($319|0));
                 $393 = __THREW__; __THREW__ = 0;
                 $394 = $393&1;
                 if (!($394)) {
                  $$13 = $eh$lpad$body108$indexZ2D;$$1326 = $eh$lpad$body108$index10Z2D;
                  break;
                 }
                 $395 = ___cxa_find_matching_catch_3(0|0)|0;
                 $396 = tempRet0;
                 ___clang_call_terminate($395);
                 // unreachable;
                }
               } while(0);
               $397 = HEAP8[$$pre$phi163Z2D>>0]|0;
               $398 = ($397<<24>>24)<(0);
               if (!($398)) {
                $$14 = $$13;$$1427 = $$1326;
                label = 146;
                break;
               }
               $399 = HEAP32[$19>>2]|0;
               __ZdlPv($399);
               $$14 = $$13;$$1427 = $$1326;
               label = 146;
              }
             } while(0);
             if ((label|0) == 139) {
              $387 = ___cxa_find_matching_catch_2()|0;
              $388 = tempRet0;
              $$14 = $387;$$1427 = $388;
              label = 146;
             }
             if ((label|0) == 146) {
              $$17 = $$14;$$1730 = $$1427;
             }
             $$18 = $$17;$$1831 = $$1730;
             break L127;
            }
           } while(0);
           $382 = HEAP32[$17>>2]|0;
           __THREW__ = 0;
           invoke_vi(661,($382|0));
           $383 = __THREW__; __THREW__ = 0;
           $384 = $383&1;
           if ($384) {
            $385 = ___cxa_find_matching_catch_3(0|0)|0;
            $386 = tempRet0;
            ___clang_call_terminate($385);
            // unreachable;
           } else {
            $$12 = $$11;$$1225 = $$1124;
           }
          }
          $$18 = $$12;$$1831 = $$1225;
         }
        } while(0);
        $408 = HEAP8[$52>>0]|0;
        $409 = ($408<<24>>24)<(0);
        if ($409) {
         $410 = HEAP32[$8>>2]|0;
         __ZdlPv($410);
        }
        $$19 = $$18;$$1932 = $$1831;
        break L1;
       }
      }
      $91 = ___cxa_find_matching_catch_2()|0;
      $92 = tempRet0;
      $$19 = $91;$$1932 = $92;
      break L1;
     }
    } while(0);
    $82 = HEAP32[$7>>2]|0;
    __THREW__ = 0;
    invoke_vi(661,($82|0));
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     $85 = ___cxa_find_matching_catch_3(0|0)|0;
     $86 = tempRet0;
     ___clang_call_terminate($85);
     // unreachable;
    } else {
     $$1 = $$0;$$114 = $$013;
    }
   }
   __THREW__ = 0;
   invoke_vi(661,($22|0));
   $87 = __THREW__; __THREW__ = 0;
   $88 = $87&1;
   if ($88) {
    $89 = ___cxa_find_matching_catch_3(0|0)|0;
    $90 = tempRet0;
    ___clang_call_terminate($89);
    // unreachable;
   } else {
    $$2 = $$1;$$215 = $$114;
    label = 26;
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $$19 = $$2;$$1932 = $$215;
 }
 $411 = HEAP32[$21>>2]|0;
 __THREW__ = 0;
 invoke_vi(661,($411|0));
 $412 = __THREW__; __THREW__ = 0;
 $413 = $412&1;
 if ($413) {
  $414 = ___cxa_find_matching_catch_3(0|0)|0;
  $415 = tempRet0;
  ___clang_call_terminate($414);
  // unreachable;
 }
 $416 = HEAP32[$20>>2]|0;
 __THREW__ = 0;
 invoke_vi(661,($416|0));
 $417 = __THREW__; __THREW__ = 0;
 $418 = $417&1;
 if ($418) {
  $419 = ___cxa_find_matching_catch_3(0|0)|0;
  $420 = tempRet0;
  ___clang_call_terminate($419);
  // unreachable;
 } else {
  __ZN4FontD2Ev($0);
  ___resumeException($$19|0);
  // unreachable;
 }
}
function __ZN10emscripten3val3setIA6_cfEEvRKT_RKT0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = (__emval_new_cstring(($1|0))|0);
 $6 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $6;
 __THREW__ = 0;
 $7 = (invoke_iii(664,(2176|0),($3|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $20 = ___cxa_find_matching_catch_2()|0;
   $21 = tempRet0;
   $$0 = $21;$$04 = $20;
  } else {
   __THREW__ = 0;
   invoke_viii(665,($4|0),($5|0),($7|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $22 = ___cxa_find_matching_catch_2()|0;
    $23 = tempRet0;
    __THREW__ = 0;
    invoke_vi(661,($7|0));
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if (!($25)) {
     $$0 = $23;$$04 = $22;
     break;
    }
    $26 = ___cxa_find_matching_catch_3(0|0)|0;
    $27 = tempRet0;
    ___clang_call_terminate($26);
    // unreachable;
   }
   __THREW__ = 0;
   invoke_vi(661,($7|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $14 = ___cxa_find_matching_catch_3(0|0)|0;
    $15 = tempRet0;
    ___clang_call_terminate($14);
    // unreachable;
   }
   __THREW__ = 0;
   invoke_vi(661,($5|0));
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    $18 = ___cxa_find_matching_catch_3(0|0)|0;
    $19 = tempRet0;
    ___clang_call_terminate($18);
    // unreachable;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(661,($5|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $30 = ___cxa_find_matching_catch_3(0|0)|0;
  $31 = tempRet0;
  ___clang_call_terminate($30);
  // unreachable;
 } else {
  ___resumeException($$04|0);
  // unreachable;
 }
}
function __ZN10emscripten3val3setIA7_cfEEvRKT_RKT0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = (__emval_new_cstring(($1|0))|0);
 $6 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $6;
 __THREW__ = 0;
 $7 = (invoke_iii(664,(2176|0),($3|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $20 = ___cxa_find_matching_catch_2()|0;
   $21 = tempRet0;
   $$0 = $21;$$04 = $20;
  } else {
   __THREW__ = 0;
   invoke_viii(665,($4|0),($5|0),($7|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $22 = ___cxa_find_matching_catch_2()|0;
    $23 = tempRet0;
    __THREW__ = 0;
    invoke_vi(661,($7|0));
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if (!($25)) {
     $$0 = $23;$$04 = $22;
     break;
    }
    $26 = ___cxa_find_matching_catch_3(0|0)|0;
    $27 = tempRet0;
    ___clang_call_terminate($26);
    // unreachable;
   }
   __THREW__ = 0;
   invoke_vi(661,($7|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $14 = ___cxa_find_matching_catch_3(0|0)|0;
    $15 = tempRet0;
    ___clang_call_terminate($14);
    // unreachable;
   }
   __THREW__ = 0;
   invoke_vi(661,($5|0));
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    $18 = ___cxa_find_matching_catch_3(0|0)|0;
    $19 = tempRet0;
    ___clang_call_terminate($18);
    // unreachable;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(661,($5|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $30 = ___cxa_find_matching_catch_3(0|0)|0;
  $31 = tempRet0;
  ___clang_call_terminate($30);
  // unreachable;
 } else {
  ___resumeException($$04|0);
  // unreachable;
 }
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$ph$lcssa$i = 0, $$0$ph14$i = 0, $$07$ph13$i = 0, $$0710$i = 0, $$sroa$0$0 = 0, $$sroa$speculated$i$i$i$i$i = 0, $$sroa$speculated$i$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if (!($4)) {
   $5 = ((($1)) + 11|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)<(0);
   $8 = ((($1)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $6&255;
   $11 = $7 ? $9 : $10;
   $12 = HEAP32[$1>>2]|0;
   $13 = $7 ? $12 : $1;
   $$0$ph14$i = $2;$$07$ph13$i = $3;
   L3: while(1) {
    $$0710$i = $$07$ph13$i;
    while(1) {
     $14 = ((($$0710$i)) + 16|0);
     $15 = ((($14)) + 11|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)<(0);
     $18 = ((($$0710$i)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = $16&255;
     $21 = $17 ? $19 : $20;
     $22 = ($11>>>0)<($21>>>0);
     $$sroa$speculated$i$i$i$i$i$i = $22 ? $11 : $21;
     $23 = ($$sroa$speculated$i$i$i$i$i$i|0)==(0);
     if ($23) {
      label = 6;
     } else {
      $24 = HEAP32[$14>>2]|0;
      $25 = $17 ? $24 : $14;
      $26 = (_memcmp($25,$13,$$sroa$speculated$i$i$i$i$i$i)|0);
      $27 = ($26|0)==(0);
      if ($27) {
       label = 6;
      } else {
       $29 = ($26|0)<(0);
       if (!($29)) {
        break;
       }
      }
     }
     if ((label|0) == 6) {
      label = 0;
      $28 = ($21>>>0)<($11>>>0);
      if (!($28)) {
       break;
      }
     }
     $32 = ((($$0710$i)) + 4|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)==(0|0);
     if ($34) {
      $$0$ph$lcssa$i = $$0$ph14$i;
      break L3;
     } else {
      $$0710$i = $33;
     }
    }
    $30 = HEAP32[$$0710$i>>2]|0;
    $31 = ($30|0)==(0|0);
    if ($31) {
     $$0$ph$lcssa$i = $$0710$i;
     break;
    } else {
     $$0$ph14$i = $$0710$i;$$07$ph13$i = $30;
    }
   }
   $35 = ($$0$ph$lcssa$i|0)==($2|0);
   if (!($35)) {
    $36 = ((($$0$ph$lcssa$i)) + 16|0);
    $37 = ((($36)) + 11|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = ($38<<24>>24)<(0);
    $40 = ((($$0$ph$lcssa$i)) + 20|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $38&255;
    $43 = $39 ? $41 : $42;
    $44 = ($43>>>0)<($11>>>0);
    $$sroa$speculated$i$i$i$i$i = $44 ? $43 : $11;
    $45 = ($$sroa$speculated$i$i$i$i$i|0)==(0);
    if (!($45)) {
     $46 = HEAP32[$36>>2]|0;
     $47 = $39 ? $46 : $36;
     $48 = (_memcmp($13,$47,$$sroa$speculated$i$i$i$i$i)|0);
     $49 = ($48|0)==(0);
     if (!($49)) {
      $51 = ($48|0)<(0);
      if ($51) {
       break;
      } else {
       $$sroa$0$0 = $$0$ph$lcssa$i;
      }
      return ($$sroa$0$0|0);
     }
    }
    $50 = ($11>>>0)<($43>>>0);
    if (!($50)) {
     $$sroa$0$0 = $$0$ph$lcssa$i;
     return ($$sroa$0$0|0);
    }
   }
  }
 } while(0);
 $$sroa$0$0 = $2;
 return ($$sroa$0$0|0);
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISJ_EERKT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$ph = 0, $$024 = 0, $$025 = 0, $$in = 0, $$sroa$speculated$i$i$i$i$i = 0, $$sroa$speculated$i$i$i$i$i26 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$1>>2] = $3;
  $$025 = $3;
  return ($$025|0);
 }
 $6 = ((($0)) + 4|0);
 $7 = ((($2)) + 11|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)<(0);
 $10 = ((($2)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $8&255;
 $13 = $9 ? $11 : $12;
 $14 = HEAP32[$2>>2]|0;
 $15 = $9 ? $14 : $2;
 $$0 = $6;$$024 = $4;
 while(1) {
  $16 = ((($$024)) + 16|0);
  $17 = ((($16)) + 11|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)<(0);
  $20 = ((($$024)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $18&255;
  $23 = $19 ? $21 : $22;
  $24 = ($23>>>0)<($13>>>0);
  $$sroa$speculated$i$i$i$i$i26 = $24 ? $23 : $13;
  $25 = ($$sroa$speculated$i$i$i$i$i26|0)==(0);
  if ($25) {
   label = 6;
  } else {
   $26 = HEAP32[$16>>2]|0;
   $27 = $19 ? $26 : $16;
   $28 = (_memcmp($15,$27,$$sroa$speculated$i$i$i$i$i26)|0);
   $29 = ($28|0)==(0);
   if ($29) {
    label = 6;
   } else {
    $31 = ($28|0)<(0);
    if ($31) {
     label = 8;
    } else {
     label = 10;
    }
   }
  }
  if ((label|0) == 6) {
   label = 0;
   $30 = ($13>>>0)<($23>>>0);
   if ($30) {
    label = 8;
   } else {
    label = 10;
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $32 = HEAP32[$$024>>2]|0;
   $33 = ($32|0)==(0|0);
   if ($33) {
    label = 9;
    break;
   } else {
    $$0$ph = $$024;$$in = $32;
   }
  }
  else if ((label|0) == 10) {
   label = 0;
   $34 = ($13>>>0)<($23>>>0);
   $$sroa$speculated$i$i$i$i$i = $34 ? $13 : $23;
   $35 = ($$sroa$speculated$i$i$i$i$i|0)==(0);
   if ($35) {
    label = 12;
   } else {
    $36 = HEAP32[$16>>2]|0;
    $37 = $19 ? $36 : $16;
    $38 = (_memcmp($37,$15,$$sroa$speculated$i$i$i$i$i)|0);
    $39 = ($38|0)==(0);
    if ($39) {
     label = 12;
    } else {
     $40 = ($38|0)<(0);
     if (!($40)) {
      label = 16;
      break;
     }
    }
   }
   if ((label|0) == 12) {
    label = 0;
    if (!($24)) {
     label = 16;
     break;
    }
   }
   $41 = ((($$024)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(0|0);
   if ($43) {
    label = 15;
    break;
   } else {
    $$0$ph = $41;$$in = $42;
   }
  }
  $$0 = $$0$ph;$$024 = $$in;
 }
 if ((label|0) == 9) {
  HEAP32[$1>>2] = $$024;
  $$025 = $$024;
  return ($$025|0);
 }
 else if ((label|0) == 15) {
  HEAP32[$1>>2] = $$024;
  $$025 = $41;
  return ($$025|0);
 }
 else if ((label|0) == 16) {
  HEAP32[$1>>2] = $$024;
  $$025 = $$0;
  return ($$025|0);
 }
 return (0)|0;
}
function __ZN7WebFontD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4748);
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi(661,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_3(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 $7 = ((($0)) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 __THREW__ = 0;
 invoke_vi(661,($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch_3(0|0)|0;
  $12 = tempRet0;
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  __ZN4FontD2Ev($0);
  return;
 }
}
function __ZN7WebFontD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4748);
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi(661,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_3(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 $7 = ((($0)) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 __THREW__ = 0;
 invoke_vi(661,($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch_3(0|0)|0;
  $12 = tempRet0;
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  __ZN4FontD2Ev($0);
  __ZdlPv($0);
  return;
 }
}
function __ZN7WebFont11createGlyphEDiP5Atlas($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$2 = 0, $$231 = 0, $$5 = 0, $$534 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body42$index7Z2D = 0, $eh$lpad$body42$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = sp + 24|0;
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(562,($6|0),($1|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 L1: do {
  if ($8) {
   label = 29;
  } else {
   __THREW__ = 0;
   $9 = (invoke_ii(678,(19927|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $114 = ___cxa_find_matching_catch_2()|0;
    $115 = tempRet0;
    $$5 = $114;$$534 = $115;
    break;
   }
   HEAP32[$5>>2] = 7;
   __THREW__ = 0;
   $12 = (invoke_iii(664,(2144|0),($5|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   do {
    if ($14) {
     $116 = ___cxa_find_matching_catch_2()|0;
     $117 = tempRet0;
     $eh$lpad$body$index2Z2D = $117;$eh$lpad$body$indexZ2D = $116;
    } else {
     $15 = ((($0)) + 56|0);
     $16 = HEAP32[$15>>2]|0;
     __THREW__ = 0;
     invoke_viii(665,($9|0),($12|0),($16|0));
     $17 = __THREW__; __THREW__ = 0;
     $18 = $17&1;
     if ($18) {
      $23 = ___cxa_find_matching_catch_2()|0;
      $24 = tempRet0;
      __THREW__ = 0;
      invoke_vi(661,($12|0));
      $25 = __THREW__; __THREW__ = 0;
      $26 = $25&1;
      if (!($26)) {
       $eh$lpad$body$index2Z2D = $24;$eh$lpad$body$indexZ2D = $23;
       break;
      }
      $27 = ___cxa_find_matching_catch_3(0|0)|0;
      $28 = tempRet0;
      ___clang_call_terminate($27);
      // unreachable;
     }
     __THREW__ = 0;
     invoke_vi(661,($12|0));
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if ($20) {
      $21 = ___cxa_find_matching_catch_3(0|0)|0;
      $22 = tempRet0;
      ___clang_call_terminate($21);
      // unreachable;
     }
     __THREW__ = 0;
     invoke_vi(661,($9|0));
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if ($30) {
      $31 = ___cxa_find_matching_catch_3(0|0)|0;
      $32 = tempRet0;
      ___clang_call_terminate($31);
      // unreachable;
     }
     __THREW__ = 0;
     $33 = (invoke_ii(523,44)|0);
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if ($35) {
      label = 29;
      break L1;
     }
     __THREW__ = 0;
     invoke_viiii(689,($33|0),($0|0),($1|0),0);
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if ($37) {
      $122 = ___cxa_find_matching_catch_2()|0;
      $123 = tempRet0;
      __ZdlPv($33);
      $$5 = $122;$$534 = $123;
      break L1;
     }
     $38 = ((($6)) + 11|0);
     $39 = HEAP8[$38>>0]|0;
     $40 = ($39<<24>>24)<(0);
     $41 = HEAP32[$6>>2]|0;
     $42 = $40 ? $41 : $6;
     $43 = _emscripten_asm_const_iiiii(3, ($0|0), ($33|0), ($42|0), (690|0))|0;
     $44 = ((($33)) + 16|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ((($33)) + 20|0);
     $47 = HEAP32[$46>>2]|0;
     __THREW__ = 0;
     $48 = (invoke_iiiii(691,($2|0),($45|0),($47|0),1)|0);
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if ($50) {
      $124 = ___cxa_find_matching_catch_2()|0;
      $125 = tempRet0;
      $$5 = $124;$$534 = $125;
      break L1;
     }
     $51 = ((($33)) + 32|0);
     HEAP32[$51>>2] = $48;
     $52 = ((($48)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($53)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = HEAP8[$38>>0]|0;
     $57 = ($56<<24>>24)<(0);
     $58 = HEAP32[$6>>2]|0;
     $59 = $57 ? $58 : $6;
     $60 = HEAP32[$44>>2]|0;
     $61 = HEAP32[$46>>2]|0;
     $62 = _emscripten_asm_const_iiii(4, ($59|0), ($60|0), ($61|0))|0;
     $63 = ((($55)) + 52|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ((($55)) + 48|0);
     $66 = HEAP32[$65>>2]|0;
     HEAP32[$4>>2] = $64;
     $67 = ((($4)) + 4|0);
     HEAP32[$67>>2] = $66;
     __THREW__ = 0;
     $68 = (invoke_iii(664,(1264|0),($4|0))|0);
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      $126 = ___cxa_find_matching_catch_2()|0;
      $127 = tempRet0;
      $$5 = $126;$$534 = $127;
      break L1;
     }
     __THREW__ = 0;
     $71 = (invoke_ii(678,(19927|0))|0);
     $72 = __THREW__; __THREW__ = 0;
     $73 = $72&1;
     if ($73) {
      $128 = ___cxa_find_matching_catch_2()|0;
      $129 = tempRet0;
      $$2 = $128;$$231 = $129;
     } else {
      HEAP32[$3>>2] = 8;
      __THREW__ = 0;
      $74 = (invoke_iii(664,(2144|0),($3|0))|0);
      $75 = __THREW__; __THREW__ = 0;
      $76 = $75&1;
      do {
       if ($76) {
        $130 = ___cxa_find_matching_catch_2()|0;
        $131 = tempRet0;
        $eh$lpad$body42$index7Z2D = $131;$eh$lpad$body42$indexZ2D = $130;
       } else {
        __THREW__ = 0;
        invoke_viii(665,($71|0),($74|0),($68|0));
        $77 = __THREW__; __THREW__ = 0;
        $78 = $77&1;
        if ($78) {
         $83 = ___cxa_find_matching_catch_2()|0;
         $84 = tempRet0;
         __THREW__ = 0;
         invoke_vi(661,($74|0));
         $85 = __THREW__; __THREW__ = 0;
         $86 = $85&1;
         if (!($86)) {
          $eh$lpad$body42$index7Z2D = $84;$eh$lpad$body42$indexZ2D = $83;
          break;
         }
         $87 = ___cxa_find_matching_catch_3(0|0)|0;
         $88 = tempRet0;
         ___clang_call_terminate($87);
         // unreachable;
        }
        __THREW__ = 0;
        invoke_vi(661,($74|0));
        $79 = __THREW__; __THREW__ = 0;
        $80 = $79&1;
        if ($80) {
         $81 = ___cxa_find_matching_catch_3(0|0)|0;
         $82 = tempRet0;
         ___clang_call_terminate($81);
         // unreachable;
        }
        __THREW__ = 0;
        invoke_vi(661,($71|0));
        $89 = __THREW__; __THREW__ = 0;
        $90 = $89&1;
        if ($90) {
         $91 = ___cxa_find_matching_catch_3(0|0)|0;
         $92 = tempRet0;
         ___clang_call_terminate($91);
         // unreachable;
        }
        $93 = HEAP32[$51>>2]|0;
        $94 = ((($93)) + 16|0);
        $95 = +HEAPF32[$94>>2];
        $96 = $95;
        $97 = ((($93)) + 20|0);
        $98 = +HEAPF32[$97>>2];
        $99 = $98;
        $100 = HEAP32[$44>>2]|0;
        $101 = HEAP32[$46>>2]|0;
        $102 = ((($55)) + 56|0);
        $103 = HEAP32[$102>>2]|0;
        $104 = _emscripten_asm_const_iddiii(5, (+$96), (+$99), ($100|0), ($101|0), ($103|0))|0;
        __THREW__ = 0;
        invoke_vi(661,($68|0));
        $105 = __THREW__; __THREW__ = 0;
        $106 = $105&1;
        if ($106) {
         $107 = ___cxa_find_matching_catch_3(0|0)|0;
         $108 = tempRet0;
         ___clang_call_terminate($107);
         // unreachable;
        }
        $109 = HEAP8[$38>>0]|0;
        $110 = ($109<<24>>24)<(0);
        if (!($110)) {
         STACKTOP = sp;return ($33|0);
        }
        $111 = HEAP32[$6>>2]|0;
        __ZdlPv($111);
        STACKTOP = sp;return ($33|0);
       }
      } while(0);
      __THREW__ = 0;
      invoke_vi(661,($71|0));
      $132 = __THREW__; __THREW__ = 0;
      $133 = $132&1;
      if ($133) {
       $134 = ___cxa_find_matching_catch_3(0|0)|0;
       $135 = tempRet0;
       ___clang_call_terminate($134);
       // unreachable;
      } else {
       $$2 = $eh$lpad$body42$indexZ2D;$$231 = $eh$lpad$body42$index7Z2D;
      }
     }
     __THREW__ = 0;
     invoke_vi(661,($68|0));
     $136 = __THREW__; __THREW__ = 0;
     $137 = $136&1;
     if (!($137)) {
      $$5 = $$2;$$534 = $$231;
      break L1;
     }
     $138 = ___cxa_find_matching_catch_3(0|0)|0;
     $139 = tempRet0;
     ___clang_call_terminate($138);
     // unreachable;
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(661,($9|0));
   $118 = __THREW__; __THREW__ = 0;
   $119 = $118&1;
   if ($119) {
    $120 = ___cxa_find_matching_catch_3(0|0)|0;
    $121 = tempRet0;
    ___clang_call_terminate($120);
    // unreachable;
   } else {
    $$5 = $eh$lpad$body$indexZ2D;$$534 = $eh$lpad$body$index2Z2D;
   }
  }
 } while(0);
 if ((label|0) == 29) {
  $112 = ___cxa_find_matching_catch_2()|0;
  $113 = tempRet0;
  $$5 = $112;$$534 = $113;
 }
 $140 = ((($6)) + 11|0);
 $141 = HEAP8[$140>>0]|0;
 $142 = ($141<<24>>24)<(0);
 if (!($142)) {
  ___resumeException($$5|0);
  // unreachable;
 }
 $143 = HEAP32[$6>>2]|0;
 __ZdlPv($143);
 ___resumeException($$5|0);
 // unreachable;
 return (0)|0;
}
function __ZN7WebFont15setGlyphMetricsEPS_P5Glyphi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+($2|0));
 $4 = (+Math_ceil((+$3)));
 $5 = (~~(($4)));
 $6 = ((($1)) + 16|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($0)) + 20|0);
 $8 = +HEAPF32[$7>>2];
 $9 = (+Math_ceil((+$8)));
 $10 = (~~(($9)));
 $11 = ((($1)) + 20|0);
 HEAP32[$11>>2] = $10;
 $12 = (($5) + 1)|0;
 $13 = (+($12|0));
 $14 = ((($1)) + 36|0);
 HEAPF32[$14>>2] = $13;
 return;
}
function __ZN10URLRequest11nativeStartEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN6ObjectnwEj(16)|0);
 __THREW__ = 0;
 invoke_vi(555,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  __ZdlPv($1);
  ___resumeException($7|0);
  // unreachable;
 } else {
  HEAP32[$1>>2] = (4772);
  $4 = ((($1)) + 12|0);
  HEAP32[$4>>2] = (2);
  $5 = ((($1)) + 8|0);
  HEAP32[$5>>2] = $0;
  __ZN6Object6retainEv($1);
  $6 = ((($0)) + 52|0);
  HEAP32[$6>>2] = $1;
  __ZN13NativeRequest5startEv($1);
  return;
 }
}
function __ZN13NativeRequest5startEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$02 = 0, $$2 = 0, $$24 = 0, $$4 = 0, $$46 = 0, $$sink61$index = 0, $$sink61$index2 = 0, $$sink62$index = 0, $$sink62$index7 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 24|0;
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 __ZN6Object6retainEv($6);
 $7 = HEAP32[$5>>2]|0;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 1;
 $11 = ($10|0)==(0);
 if ($11) {
  $76 = (__emval_get_global((20251|0))|0);
  __THREW__ = 0;
  $77 = (invoke_iiiii(679,($76|0),0,(31092|0),($2|0))|0);
  $78 = __THREW__; __THREW__ = 0;
  $79 = $78&1;
  do {
   if ($79) {
    $122 = ___cxa_find_matching_catch_2()|0;
    $123 = tempRet0;
    $$2 = $123;$$24 = $122;
   } else {
    $80 = ((($0)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    __THREW__ = 0;
    invoke_vi(661,($81|0));
    $82 = __THREW__; __THREW__ = 0;
    $83 = $82&1;
    if ($83) {
     $124 = ___cxa_find_matching_catch_2()|0;
     $125 = tempRet0;
     __THREW__ = 0;
     invoke_vi(661,($77|0));
     $126 = __THREW__; __THREW__ = 0;
     $127 = $126&1;
     if (!($127)) {
      $$2 = $125;$$24 = $124;
      break;
     }
     $128 = ___cxa_find_matching_catch_3(0|0)|0;
     $129 = tempRet0;
     ___clang_call_terminate($128);
     // unreachable;
    }
    $84 = $77;
    HEAP32[$80>>2] = $84;
    __THREW__ = 0;
    invoke_vi(661,(0|0));
    $85 = __THREW__; __THREW__ = 0;
    $86 = $85&1;
    if ($86) {
     $87 = ___cxa_find_matching_catch_3(0|0)|0;
     $88 = tempRet0;
     ___clang_call_terminate($87);
     // unreachable;
    }
    __THREW__ = 0;
    invoke_vi(661,($76|0));
    $89 = __THREW__; __THREW__ = 0;
    $90 = $89&1;
    if ($90) {
     $91 = ___cxa_find_matching_catch_3(0|0)|0;
     $92 = tempRet0;
     ___clang_call_terminate($91);
     // unreachable;
    }
    $93 = (__emval_get_global((19927|0))|0);
    HEAP32[$1>>2] = 1;
    __THREW__ = 0;
    $94 = (invoke_iii(664,(2144|0),($1|0))|0);
    $95 = __THREW__; __THREW__ = 0;
    $96 = $95&1;
    do {
     if ($96) {
      $134 = ___cxa_find_matching_catch_2()|0;
      $135 = tempRet0;
      $$sink62$index = $134;$$sink62$index7 = $135;
     } else {
      $97 = HEAP32[$80>>2]|0;
      __THREW__ = 0;
      invoke_viii(665,($93|0),($94|0),($97|0));
      $98 = __THREW__; __THREW__ = 0;
      $99 = $98&1;
      if ($99) {
       $104 = ___cxa_find_matching_catch_2()|0;
       $105 = tempRet0;
       __THREW__ = 0;
       invoke_vi(661,($94|0));
       $106 = __THREW__; __THREW__ = 0;
       $107 = $106&1;
       if (!($107)) {
        $$sink62$index = $104;$$sink62$index7 = $105;
        break;
       }
       $108 = ___cxa_find_matching_catch_3(0|0)|0;
       $109 = tempRet0;
       ___clang_call_terminate($108);
       // unreachable;
      }
      __THREW__ = 0;
      invoke_vi(661,($94|0));
      $100 = __THREW__; __THREW__ = 0;
      $101 = $100&1;
      if ($101) {
       $102 = ___cxa_find_matching_catch_3(0|0)|0;
       $103 = tempRet0;
       ___clang_call_terminate($102);
       // unreachable;
      }
      $110 = HEAP32[$5>>2]|0;
      $111 = ((($110)) + 8|0);
      $112 = ((($111)) + 11|0);
      $113 = HEAP8[$112>>0]|0;
      $114 = ($113<<24>>24)<(0);
      if ($114) {
       $115 = HEAP32[$111>>2]|0;
       $117 = $115;
      } else {
       $117 = $111;
      }
      $116 = _emscripten_asm_const_iiiiii(7, ($0|0), ($117|0), (694|0), (695|0), (693|0))|0;
      __THREW__ = 0;
      invoke_vi(661,($93|0));
      $118 = __THREW__; __THREW__ = 0;
      $119 = $118&1;
      if ($119) {
       $120 = ___cxa_find_matching_catch_3(0|0)|0;
       $121 = tempRet0;
       ___clang_call_terminate($120);
       // unreachable;
      } else {
       STACKTOP = sp;return;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(661,($93|0));
    $136 = __THREW__; __THREW__ = 0;
    $137 = $136&1;
    if ($137) {
     $138 = ___cxa_find_matching_catch_3(0|0)|0;
     $139 = tempRet0;
     ___clang_call_terminate($138);
     // unreachable;
    } else {
     $$4 = $$sink62$index7;$$46 = $$sink62$index;
     ___resumeException($$46|0);
     // unreachable;
    }
   }
  } while(0);
  __THREW__ = 0;
  invoke_vi(661,($76|0));
  $130 = __THREW__; __THREW__ = 0;
  $131 = $130&1;
  if ($131) {
   $132 = ___cxa_find_matching_catch_3(0|0)|0;
   $133 = tempRet0;
   ___clang_call_terminate($132);
   // unreachable;
  } else {
   $$4 = $$2;$$46 = $$24;
   ___resumeException($$46|0);
   // unreachable;
  }
 } else {
  $12 = (__emval_get_global((19921|0))|0);
  __THREW__ = 0;
  $13 = (invoke_iiiii(679,($12|0),0,(31092|0),($4|0))|0);
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  do {
   if ($15) {
    $58 = ___cxa_find_matching_catch_2()|0;
    $59 = tempRet0;
    $$0 = $59;$$02 = $58;
   } else {
    $16 = ((($0)) + 12|0);
    $17 = HEAP32[$16>>2]|0;
    __THREW__ = 0;
    invoke_vi(661,($17|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     $60 = ___cxa_find_matching_catch_2()|0;
     $61 = tempRet0;
     __THREW__ = 0;
     invoke_vi(661,($13|0));
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if (!($63)) {
      $$0 = $61;$$02 = $60;
      break;
     }
     $64 = ___cxa_find_matching_catch_3(0|0)|0;
     $65 = tempRet0;
     ___clang_call_terminate($64);
     // unreachable;
    }
    $20 = $13;
    HEAP32[$16>>2] = $20;
    __THREW__ = 0;
    invoke_vi(661,(0|0));
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     $23 = ___cxa_find_matching_catch_3(0|0)|0;
     $24 = tempRet0;
     ___clang_call_terminate($23);
     // unreachable;
    }
    __THREW__ = 0;
    invoke_vi(661,($12|0));
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if ($26) {
     $27 = ___cxa_find_matching_catch_3(0|0)|0;
     $28 = tempRet0;
     ___clang_call_terminate($27);
     // unreachable;
    }
    $29 = (__emval_get_global((19927|0))|0);
    HEAP32[$3>>2] = 1;
    __THREW__ = 0;
    $30 = (invoke_iii(664,(2144|0),($3|0))|0);
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    do {
     if ($32) {
      $70 = ___cxa_find_matching_catch_2()|0;
      $71 = tempRet0;
      $$sink61$index = $70;$$sink61$index2 = $71;
     } else {
      $33 = HEAP32[$16>>2]|0;
      __THREW__ = 0;
      invoke_viii(665,($29|0),($30|0),($33|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       $40 = ___cxa_find_matching_catch_2()|0;
       $41 = tempRet0;
       __THREW__ = 0;
       invoke_vi(661,($30|0));
       $42 = __THREW__; __THREW__ = 0;
       $43 = $42&1;
       if (!($43)) {
        $$sink61$index = $40;$$sink61$index2 = $41;
        break;
       }
       $44 = ___cxa_find_matching_catch_3(0|0)|0;
       $45 = tempRet0;
       ___clang_call_terminate($44);
       // unreachable;
      }
      __THREW__ = 0;
      invoke_vi(661,($30|0));
      $36 = __THREW__; __THREW__ = 0;
      $37 = $36&1;
      if ($37) {
       $38 = ___cxa_find_matching_catch_3(0|0)|0;
       $39 = tempRet0;
       ___clang_call_terminate($38);
       // unreachable;
      }
      $46 = HEAP32[$5>>2]|0;
      $47 = ((($46)) + 8|0);
      $48 = ((($47)) + 11|0);
      $49 = HEAP8[$48>>0]|0;
      $50 = ($49<<24>>24)<(0);
      if ($50) {
       $51 = HEAP32[$47>>2]|0;
       $53 = $51;
      } else {
       $53 = $47;
      }
      $52 = _emscripten_asm_const_iiiii(6, ($0|0), ($53|0), (692|0), (693|0))|0;
      __THREW__ = 0;
      invoke_vi(661,($29|0));
      $54 = __THREW__; __THREW__ = 0;
      $55 = $54&1;
      if ($55) {
       $56 = ___cxa_find_matching_catch_3(0|0)|0;
       $57 = tempRet0;
       ___clang_call_terminate($56);
       // unreachable;
      } else {
       STACKTOP = sp;return;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(661,($29|0));
    $72 = __THREW__; __THREW__ = 0;
    $73 = $72&1;
    if ($73) {
     $74 = ___cxa_find_matching_catch_3(0|0)|0;
     $75 = tempRet0;
     ___clang_call_terminate($74);
     // unreachable;
    } else {
     $$4 = $$sink61$index2;$$46 = $$sink61$index;
     ___resumeException($$46|0);
     // unreachable;
    }
   }
  } while(0);
  __THREW__ = 0;
  invoke_vi(661,($12|0));
  $66 = __THREW__; __THREW__ = 0;
  $67 = $66&1;
  if ($67) {
   $68 = ___cxa_find_matching_catch_3(0|0)|0;
   $69 = tempRet0;
   ___clang_call_terminate($68);
   // unreachable;
  } else {
   $$4 = $$0;$$46 = $$02;
   ___resumeException($$46|0);
   // unreachable;
  }
 }
}
function __ZN13NativeRequest11OnImageLoadEPS_($0) {
 $0 = $0|0;
 var $$0 = 0, $$01027 = 0, $$02729$i$i$i = 0, $$0828 = 0, $$2 = 0, $$2$i$i$i = 0, $$212 = 0, $$3 = 0, $$313 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $not$ = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = sp + 4|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = ((($4)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = HEAP32[$4>>2]|0;
  $9 = $8;
 } else {
  $9 = $4;
 }
 HEAP32[$vararg_buffer>>2] = $9;
 __ZN3App3logEPKcz(28952,21459,$vararg_buffer);
 $10 = HEAP32[$2>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = ((($11)) + 11|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)<(0);
 if ($14) {
  $15 = HEAP32[$11>>2]|0;
  $16 = ((($10)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $20 = $15;$21 = $17;
 } else {
  $18 = $13&255;
  $20 = $11;$21 = $18;
 }
 $19 = (($20) + ($21)|0);
 $22 = $19;
 $23 = $20;
 $24 = ($21|0)<(4);
 L9: do {
  if ($24) {
   $$2$i$i$i = $19;
  } else {
   $$02729$i$i$i = $20;$26 = $21;
   while(1) {
    $25 = (($26) + -3)|0;
    $27 = ($25|0)==(0);
    if ($27) {
     $$2$i$i$i = $19;
     break L9;
    }
    $28 = (_memchr($$02729$i$i$i,46,$25)|0);
    $29 = ($28|0)==(0|0);
    if ($29) {
     $$2$i$i$i = $19;
     break L9;
    }
    $30 = (_memcmp($28,21474,4)|0);
    $31 = ($30|0)==(0);
    if ($31) {
     $$2$i$i$i = $28;
     break L9;
    }
    $32 = ((($28)) + 1|0);
    $33 = $32;
    $34 = (($22) - ($33))|0;
    $35 = ($34|0)<(4);
    if ($35) {
     $$2$i$i$i = $19;
     break;
    } else {
     $$02729$i$i$i = $32;$26 = $34;
    }
   }
  }
 } while(0);
 $36 = (__ZN6ObjectnwEj(88)|0);
 $37 = ((($0)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 HEAP32[$1>>2] = $38;
 __THREW__ = 0;
 invoke_vi(672,($38|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if ($40) {
  $74 = ___cxa_find_matching_catch_2()|0;
  $75 = tempRet0;
  $$01027 = $74;$$0828 = $75;
 } else {
  $41 = $$2$i$i$i;
  $42 = (($41) - ($23))|0;
  $43 = ($42|0)!=(-1);
  $not$ = ($$2$i$i$i|0)!=($19|0);
  $44 = $43 & $not$;
  __THREW__ = 0;
  invoke_viii(696,($36|0),($1|0),($44|0));
  $45 = __THREW__; __THREW__ = 0;
  $46 = $45&1;
  do {
   if ($46) {
    $$0 = 1;
   } else {
    $47 = ($36|0)==(0|0);
    if (!($47)) {
     __THREW__ = 0;
     invoke_vi(526,($36|0));
     $48 = __THREW__; __THREW__ = 0;
     $49 = $48&1;
     if ($49) {
      $$0 = 0;
      break;
     }
    }
    $50 = HEAP32[$1>>2]|0;
    __THREW__ = 0;
    invoke_vi(661,($50|0));
    $51 = __THREW__; __THREW__ = 0;
    $52 = $51&1;
    if ($52) {
     $53 = ___cxa_find_matching_catch_3(0|0)|0;
     $54 = tempRet0;
     ___clang_call_terminate($53);
     // unreachable;
    }
    $55 = HEAP32[$37>>2]|0;
    __THREW__ = 0;
    invoke_vi(661,($55|0));
    $56 = __THREW__; __THREW__ = 0;
    $57 = $56&1;
    do {
     if ($57) {
      $83 = ___cxa_find_matching_catch_2()|0;
      $84 = tempRet0;
      __THREW__ = 0;
      invoke_vi(661,((2)|0));
      $85 = __THREW__; __THREW__ = 0;
      $86 = $85&1;
      if ($86) {
       $87 = ___cxa_find_matching_catch_3(0|0)|0;
       $88 = tempRet0;
       ___clang_call_terminate($87);
       // unreachable;
      } else {
       $$2 = $84;$$212 = $83;
      }
     } else {
      HEAP32[$37>>2] = 2;
      __THREW__ = 0;
      invoke_vi(661,(0|0));
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       $60 = ___cxa_find_matching_catch_3(0|0)|0;
       $61 = tempRet0;
       ___clang_call_terminate($60);
       // unreachable;
      }
      $62 = HEAP32[$2>>2]|0;
      __THREW__ = 0;
      $63 = (invoke_ii(523,16)|0);
      $64 = __THREW__; __THREW__ = 0;
      $65 = $64&1;
      if (!($65)) {
       __THREW__ = 0;
       invoke_vii(697,($63|0),($36|0));
       $66 = __THREW__; __THREW__ = 0;
       $67 = $66&1;
       if ($67) {
        $91 = ___cxa_find_matching_catch_2()|0;
        $92 = tempRet0;
        __ZdlPv($63);
        $$2 = $92;$$212 = $91;
        break;
       }
       __THREW__ = 0;
       invoke_vii(698,($62|0),($63|0));
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if (!($69)) {
        if ($47) {
         STACKTOP = sp;return;
        }
        __THREW__ = 0;
        invoke_vi(525,($36|0));
        $70 = __THREW__; __THREW__ = 0;
        $71 = $70&1;
        if ($71) {
         $72 = ___cxa_find_matching_catch_3(0|0)|0;
         $73 = tempRet0;
         ___clang_call_terminate($72);
         // unreachable;
        } else {
         STACKTOP = sp;return;
        }
       }
      }
      $89 = ___cxa_find_matching_catch_2()|0;
      $90 = tempRet0;
      $$2 = $90;$$212 = $89;
     }
    } while(0);
    if ($47) {
     $$3 = $$2;$$313 = $$212;
     ___resumeException($$313|0);
     // unreachable;
    }
    __THREW__ = 0;
    invoke_vi(525,($36|0));
    $93 = __THREW__; __THREW__ = 0;
    $94 = $93&1;
    if ($94) {
     $95 = ___cxa_find_matching_catch_3(0|0)|0;
     $96 = tempRet0;
     ___clang_call_terminate($95);
     // unreachable;
    } else {
     $$3 = $$2;$$313 = $$212;
     ___resumeException($$313|0);
     // unreachable;
    }
   }
  } while(0);
  $76 = ___cxa_find_matching_catch_2()|0;
  $77 = tempRet0;
  $78 = HEAP32[$1>>2]|0;
  __THREW__ = 0;
  invoke_vi(661,($78|0));
  $79 = __THREW__; __THREW__ = 0;
  $80 = $79&1;
  if ($80) {
   $81 = ___cxa_find_matching_catch_3(0|0)|0;
   $82 = tempRet0;
   ___clang_call_terminate($81);
   // unreachable;
  }
  if ($$0) {
   $$01027 = $76;$$0828 = $77;
  } else {
   $$3 = $77;$$313 = $76;
   ___resumeException($$313|0);
   // unreachable;
  }
 }
 __ZdlPv($36);
 $$3 = $$0828;$$313 = $$01027;
 ___resumeException($$313|0);
 // unreachable;
}
function __ZN13NativeRequest7OnErrorEPS_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = ((($3)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = HEAP32[$3>>2]|0;
  $8 = $7;
 } else {
  $8 = $3;
 }
 HEAP32[$vararg_buffer>>2] = $8;
 (_printf(21436,$vararg_buffer)|0);
 $9 = HEAP32[$1>>2]|0;
 __ZN10URLRequest14dispatchOnLoadEP7URLData($9,0);
 STACKTOP = sp;return;
}
function __ZN13NativeRequest10OnProgressEPS_iii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN13NativeRequest6OnDoneEPS_Phii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$06 = 0, $$1 = 0, $$17 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__ZN6ObjectnwEj(20)|0);
 __THREW__ = 0;
 invoke_vi(699,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $24 = ___cxa_find_matching_catch_2()|0;
  $25 = tempRet0;
  __ZdlPv($4);
  $$1 = $25;$$17 = $24;
  ___resumeException($$17|0);
  // unreachable;
 }
 $7 = ($4|0)==(0|0);
 if (!($7)) {
  __ZN6Object6retainEv($4);
 }
 $8 = (_malloc($2)|0);
 $9 = ((($4)) + 12|0);
 HEAP32[$9>>2] = $8;
 _memcpy(($8|0),($1|0),($2|0))|0;
 $10 = ((($4)) + 16|0);
 HEAP32[$10>>2] = $2;
 $11 = ((($0)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 $13 = (invoke_ii(523,16)|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 do {
  if ($15) {
   label = 11;
  } else {
   __THREW__ = 0;
   invoke_vii(700,($13|0),($4|0));
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    $28 = ___cxa_find_matching_catch_2()|0;
    $29 = tempRet0;
    __ZdlPv($13);
    $$0 = $29;$$06 = $28;
    break;
   }
   __THREW__ = 0;
   invoke_vii(698,($12|0),($13|0));
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    label = 11;
   } else {
    __THREW__ = 0;
    invoke_vi(525,($4|0));
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     $22 = ___cxa_find_matching_catch_3(0|0)|0;
     $23 = tempRet0;
     ___clang_call_terminate($22);
     // unreachable;
    } else {
     return;
    }
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $26 = ___cxa_find_matching_catch_2()|0;
  $27 = tempRet0;
  $$0 = $27;$$06 = $26;
 }
 __THREW__ = 0;
 invoke_vi(525,($4|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $32 = ___cxa_find_matching_catch_3(0|0)|0;
  $33 = tempRet0;
  ___clang_call_terminate($32);
  // unreachable;
 } else {
  $$1 = $$0;$$17 = $$06;
  ___resumeException($$17|0);
  // unreachable;
 }
}
function __ZN13NativeRequestD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4772);
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi(661,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_3(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  return;
 }
}
function __ZN13NativeRequestD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4772);
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi(661,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_3(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  __ZdlPv($0);
  return;
 }
}
function __ZN10URLRequest10nativeStopEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 52|0);
 $2 = HEAP32[$1>>2]|0;
 __ZN13NativeRequest4stopEv($2);
 __ZN6Object7releaseEv($2);
 return;
}
function __ZN13NativeRequest4stopEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$02 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body7$index7Z2D = 0, $eh$lpad$body7$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==((2)|0);
 $$pre = ((($0)) + 8|0);
 if ($4) {
  $84 = HEAP32[$$pre>>2]|0;
  __ZN6Object7releaseEv($84);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$$pre>>2]|0;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 L4: do {
  if ($9) {
   $61 = HEAP8[28928]|0;
   $62 = ($61<<24>>24)==(0);
   do {
    if ($62) {
     $63 = (___cxa_guard_acquire(28928)|0);
     $64 = ($63|0)==(0);
     if (!($64)) {
      __THREW__ = 0;
      $65 = (invoke_iii(671,1,(4760|0))|0);
      $66 = __THREW__; __THREW__ = 0;
      $67 = $66&1;
      if ($67) {
       $68 = ___cxa_find_matching_catch_2()|0;
       $69 = tempRet0;
       ___resumeException($68|0);
       // unreachable;
      } else {
       HEAP32[7776] = $65;
       break;
      }
     }
    }
   } while(0);
   $70 = HEAP32[7776]|0;
   __emval_call_void_method(($70|0),($3|0),(21510|0),($1|0));
  } else {
   __THREW__ = 0;
   $10 = (invoke_ii(662,(21495|0))|0);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   do {
    if ($12) {
     $49 = ___cxa_find_matching_catch_2()|0;
     $50 = tempRet0;
     $eh$lpad$body$index2Z2D = $50;$eh$lpad$body$indexZ2D = $49;
    } else {
     __THREW__ = 0;
     invoke_viii(665,($3|0),($10|0),((2)|0));
     $13 = __THREW__; __THREW__ = 0;
     $14 = $13&1;
     if ($14) {
      $19 = ___cxa_find_matching_catch_2()|0;
      $20 = tempRet0;
      __THREW__ = 0;
      invoke_vi(661,($10|0));
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if (!($22)) {
       $eh$lpad$body$index2Z2D = $20;$eh$lpad$body$indexZ2D = $19;
       break;
      }
      $23 = ___cxa_find_matching_catch_3(0|0)|0;
      $24 = tempRet0;
      ___clang_call_terminate($23);
      // unreachable;
     }
     __THREW__ = 0;
     invoke_vi(661,($10|0));
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if ($16) {
      $17 = ___cxa_find_matching_catch_3(0|0)|0;
      $18 = tempRet0;
      ___clang_call_terminate($17);
      // unreachable;
     }
     __THREW__ = 0;
     invoke_vi(661,((2)|0));
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      $27 = ___cxa_find_matching_catch_3(0|0)|0;
      $28 = tempRet0;
      ___clang_call_terminate($27);
      // unreachable;
     }
     $29 = HEAP32[$2>>2]|0;
     __THREW__ = 0;
     $30 = (invoke_ii(662,(21502|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     do {
      if ($32) {
       $55 = ___cxa_find_matching_catch_2()|0;
       $56 = tempRet0;
       $eh$lpad$body7$index7Z2D = $56;$eh$lpad$body7$indexZ2D = $55;
      } else {
       __THREW__ = 0;
       invoke_viii(665,($29|0),($30|0),((2)|0));
       $33 = __THREW__; __THREW__ = 0;
       $34 = $33&1;
       if ($34) {
        $39 = ___cxa_find_matching_catch_2()|0;
        $40 = tempRet0;
        __THREW__ = 0;
        invoke_vi(661,($30|0));
        $41 = __THREW__; __THREW__ = 0;
        $42 = $41&1;
        if (!($42)) {
         $eh$lpad$body7$index7Z2D = $40;$eh$lpad$body7$indexZ2D = $39;
         break;
        }
        $43 = ___cxa_find_matching_catch_3(0|0)|0;
        $44 = tempRet0;
        ___clang_call_terminate($43);
        // unreachable;
       }
       __THREW__ = 0;
       invoke_vi(661,($30|0));
       $35 = __THREW__; __THREW__ = 0;
       $36 = $35&1;
       if ($36) {
        $37 = ___cxa_find_matching_catch_3(0|0)|0;
        $38 = tempRet0;
        ___clang_call_terminate($37);
        // unreachable;
       }
       __THREW__ = 0;
       invoke_vi(661,((2)|0));
       $45 = __THREW__; __THREW__ = 0;
       $46 = $45&1;
       if (!($46)) {
        break L4;
       }
       $47 = ___cxa_find_matching_catch_3(0|0)|0;
       $48 = tempRet0;
       ___clang_call_terminate($47);
       // unreachable;
      }
     } while(0);
     __THREW__ = 0;
     invoke_vi(661,((2)|0));
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      $59 = ___cxa_find_matching_catch_3(0|0)|0;
      $60 = tempRet0;
      ___clang_call_terminate($59);
      // unreachable;
     } else {
      $$0 = $eh$lpad$body7$index7Z2D;$$02 = $eh$lpad$body7$indexZ2D;
      ___resumeException($$02|0);
      // unreachable;
     }
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(661,((2)|0));
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if ($52) {
    $53 = ___cxa_find_matching_catch_3(0|0)|0;
    $54 = tempRet0;
    ___clang_call_terminate($53);
    // unreachable;
   } else {
    $$0 = $eh$lpad$body$index2Z2D;$$02 = $eh$lpad$body$indexZ2D;
    ___resumeException($$02|0);
    // unreachable;
   }
  }
 } while(0);
 $71 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vi(661,($71|0));
 $72 = __THREW__; __THREW__ = 0;
 $73 = $72&1;
 if ($73) {
  $78 = ___cxa_find_matching_catch_2()|0;
  $79 = tempRet0;
  __THREW__ = 0;
  invoke_vi(661,((2)|0));
  $80 = __THREW__; __THREW__ = 0;
  $81 = $80&1;
  if ($81) {
   $82 = ___cxa_find_matching_catch_3(0|0)|0;
   $83 = tempRet0;
   ___clang_call_terminate($82);
   // unreachable;
  } else {
   $$0 = $79;$$02 = $78;
   ___resumeException($$02|0);
   // unreachable;
  }
 } else {
  HEAP32[$2>>2] = 2;
  __THREW__ = 0;
  invoke_vi(661,(0|0));
  $74 = __THREW__; __THREW__ = 0;
  $75 = $74&1;
  if ($75) {
   $76 = ___cxa_find_matching_catch_3(0|0)|0;
   $77 = tempRet0;
   ___clang_call_terminate($76);
   // unreachable;
  } else {
   $84 = HEAP32[$$pre>>2]|0;
   __ZN6Object7releaseEv($84);
   STACKTOP = sp;return;
  }
 }
}
function __GLOBAL__sub_I_web_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function((21516|0),4,(4780|0),(21534|0),(701|0),(702|0));
 __embind_register_function((21540|0),5,(4796|0),(21554|0),(703|0),(704|0));
 __embind_register_function((21561|0),1,(4760|0),(21570|0),(705|0),(706|0));
 return;
}
function __ZN10emscripten8internal7InvokerIvJiiiEE6invokeEPFviiiEiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_viii[$0 & 1023]($1,$2,$3);
 return;
}
function __ZL17oak_setWindowSizeiii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 __ZN3App3logEPKcz(28952,21586,$vararg_buffer);
 $3 = HEAP32[(28960)>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (+($2|0));
 FUNCTION_TABLE_viiid[$6 & 511]($3,$0,$1,$7);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal7InvokerIvJiiiiEE6invokeEPFviiiiEiiii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_viiii[$0 & 1023]($1,$2,$3,$4);
 return;
}
function __ZL13oak_userEventiiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[(28960)>>2]|0;
 $5 = ((($4)) + 44|0);
 $6 = +HEAPF32[$5>>2];
 $7 = (+($2|0));
 $8 = $7 * $6;
 $9 = (~~(($8)));
 $10 = (+($3|0));
 $11 = $10 * $6;
 $12 = (~~(($11)));
 $13 = HEAP32[$4>>2]|0;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $1 | 256;
 $17 = (__ZN3App13currentMillisEv(0)|0);
 FUNCTION_TABLE_viiiiii[$15 & 1023]($4,$0,$16,$17,$9,$12);
 return;
}
function __ZN10emscripten8internal7InvokerIvJEE6invokeEPFvvE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_v[$0 & 1023]();
 return;
}
function __ZL7appMainv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN3App4mainEv(28952);
 return;
}
function __ZN3App13currentMillisEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$02 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp;
 $3 = HEAP8[28936]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire(28936)|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    __THREW__ = 0;
    $7 = (invoke_ii(678,(21573|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     HEAP32[7777] = $7;
     (___cxa_atexit((707|0),(31108|0),(___dso_handle|0))|0);
     break;
    }
    $25 = ___cxa_find_matching_catch_2()|0;
    $26 = tempRet0;
    $$0 = $26;$$02 = $25;
    ___resumeException($$02|0);
    // unreachable;
   }
  }
 } while(0);
 $10 = HEAP32[7777]|0;
 $11 = (__emval_call(($10|0),0,(31092|0),($2|0))|0);
 __THREW__ = 0;
 $12 = (+invoke_diii(669,($11|0),(2144|0),($1|0)));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $27 = ___cxa_find_matching_catch_2()|0;
  $28 = tempRet0;
  __THREW__ = 0;
  invoke_vi(661,($11|0));
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if ($30) {
   $31 = ___cxa_find_matching_catch_3(0|0)|0;
   $32 = tempRet0;
   ___clang_call_terminate($31);
   // unreachable;
  } else {
   $$0 = $28;$$02 = $27;
   ___resumeException($$02|0);
   // unreachable;
  }
 }
 $15 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi(670,($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch_3(0|0)|0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(661,($11|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_3(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  $24 = (~~(($12)));
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function __ZN10emscripten3valD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi(661,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_3(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  return;
 }
}
function _dispatchMainWindowDraw() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(28960)>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($0);
 return;
}
function __ZN3App13requestRedrawEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = _emscripten_asm_const_i(8)|0;
 return;
}
function __ZN5Timer5startERKNSt3__28functionIFvvEEEib($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN6ObjectnwEj(40)|0);
 __THREW__ = 0;
 invoke_viiii(708,($3|0),($0|0),($1|0),($2|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  __ZdlPv($3);
  ___resumeException($8|0);
  // unreachable;
 } else {
  HEAP32[$3>>2] = (4824);
  $6 = _emscripten_asm_const_iiii(9, ($3|0), ($1|0), (709|0))|0;
  $7 = ((($3)) + 36|0);
  HEAP32[$7>>2] = $6;
  return ($3|0);
 }
 return (0)|0;
}
function __ZN7OSTimer8dispatchEPS_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  FUNCTION_TABLE_vi[$6 & 1023]($0);
 }
 $7 = ((($0)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = (___cxa_allocate_exception(4)|0);
  HEAP32[$10>>2] = (2824);
  ___cxa_throw(($10|0),(272|0),(118|0));
  // unreachable;
 } else {
  $11 = HEAP32[$8>>2]|0;
  $12 = ((($11)) + 24|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vi[$13 & 1023]($8);
  return;
 }
}
function __ZN7OSTimerD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5TimerD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN7OSTimer4stopEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  __ZN5Timer4stopEv($0);
  return;
 }
 $4 = _emscripten_asm_const_ii(10, ($2|0))|0;
 HEAP32[$1>>2] = 0;
 __ZN5Timer4stopEv($0);
 return;
}
function __Z14oakMessageLoopv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 __ZN3App3logEPKcz(28952,21795,$vararg_buffer);
 _emscripten_webgl_init_context_attributes(($2|0));
 $3 = ((($2)) + 24|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($2)) + 28|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 20|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($2)) + 40|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 HEAP32[$6>>2] = 1;
 $7 = ((($2)) + 16|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($2)) + 32|0);
 HEAP32[$8>>2] = 1;
 $9 = ((($2)) + 36|0);
 HEAP32[$9>>2] = 0;
 $10 = (_emscripten_webgl_create_context((0|0),($2|0))|0);
 $11 = _emscripten_asm_const_i(11)|0;
 (_emscripten_webgl_make_context_current(($10|0))|0);
 $12 = (__ZN6ObjectnwEj(128)|0);
 __THREW__ = 0;
 invoke_vi(710,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $19 = ___cxa_find_matching_catch_2()|0;
  $20 = tempRet0;
  __ZdlPv($12);
  ___resumeException($19|0);
  // unreachable;
 }
 $15 = HEAP32[(28960)>>2]|0;
 $16 = ($15|0)==($12|0);
 if ($16) {
  _emscripten_set_main_loop((711|0),1,1);
  STACKTOP = sp;return 0;
 }
 $17 = ($15|0)==(0|0);
 if (!($17)) {
  __ZN6Object7releaseEv($15);
 }
 HEAP32[(28960)>>2] = $12;
 $18 = ($12|0)==(0|0);
 if ($18) {
  _emscripten_set_main_loop((711|0),1,1);
  STACKTOP = sp;return 0;
 }
 __ZN6Object6retainEv($12);
 _emscripten_set_main_loop((711|0),1,1);
 STACKTOP = sp;return 0;
}
function __ZN3App9loadAssetEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$2 = 0, $$230 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $2 = sp;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $3 = ((($2)) + 11|0);
 HEAP8[$3>>0] = 8;
 $4 = $2;
 $5 = $4;
 HEAP32[$5>>2] = 1936941359;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 796095589;
 $8 = ((($2)) + 8|0);
 HEAP8[$8>>0] = 0;
 __THREW__ = 0;
 (invoke_iii(603,($2|0),($1|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 L1: do {
  if ($10) {
   $19 = ___cxa_find_matching_catch_2()|0;
   $20 = tempRet0;
   $$2 = $19;$$230 = $20;
  } else {
   $11 = HEAP8[$3>>0]|0;
   $12 = ($11<<24>>24)<(0);
   $13 = HEAP32[$2>>2]|0;
   $14 = $12 ? $13 : $2;
   $15 = (_fopen($14,21843)|0);
   $16 = ($15|0)==(0|0);
   do {
    if ($16) {
     __THREW__ = 0;
     HEAP32[$vararg_buffer>>2] = $1;
     invoke_viii(545,(28952|0),(21846|0),($vararg_buffer|0));
     $17 = __THREW__; __THREW__ = 0;
     $18 = $17&1;
     if ($18) {
      label = 5;
     } else {
      $$0 = 0;
     }
    } else {
     __THREW__ = 0;
     $23 = (invoke_ii(523,20)|0);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      label = 5;
     } else {
      __THREW__ = 0;
      invoke_vi(699,($23|0));
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       $40 = ___cxa_find_matching_catch_2()|0;
       $41 = tempRet0;
       __ZdlPv($23);
       $$2 = $40;$$230 = $41;
       break L1;
      }
      (_fseek($15,0,2)|0);
      $28 = (_ftell($15)|0);
      $29 = ((($23)) + 16|0);
      HEAP32[$29>>2] = $28;
      $30 = (_malloc($28)|0);
      $31 = ((($23)) + 12|0);
      HEAP32[$31>>2] = $30;
      (_fseek($15,0,0)|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = HEAP32[$29>>2]|0;
      $34 = (_fread($32,1,$33,$15)|0);
      $35 = HEAP32[$29>>2]|0;
      $36 = ($34|0)==($35|0);
      if ($36) {
       (_fclose($15)|0);
       $$0 = $23;
       break;
      } else {
       __THREW__ = 0;
       invoke_viiii(561,(21871|0),(21888|0),146,(21934|0));
       $37 = __THREW__; __THREW__ = 0;
       $38 = ___cxa_find_matching_catch_2()|0;
       $39 = tempRet0;
       $$2 = $38;$$230 = $39;
       break L1;
      }
     }
    }
   } while(0);
   if ((label|0) == 5) {
    $21 = ___cxa_find_matching_catch_2()|0;
    $22 = tempRet0;
    $$2 = $21;$$230 = $22;
    break;
   }
   $42 = HEAP8[$3>>0]|0;
   $43 = ($42<<24>>24)<(0);
   if (!($43)) {
    STACKTOP = sp;return ($$0|0);
   }
   $44 = HEAP32[$2>>2]|0;
   __ZdlPv($44);
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $45 = HEAP8[$3>>0]|0;
 $46 = ($45<<24>>24)<(0);
 if (!($46)) {
  ___resumeException($$2|0);
  // unreachable;
 }
 $47 = HEAP32[$2>>2]|0;
 __ZdlPv($47);
 ___resumeException($$2|0);
 // unreachable;
 return (0)|0;
}
function __ZN3App12keyboardShowEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN3App25keyboardNotifyTextChangedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __Z17stringIndexOfCharRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEDi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1&255;
 $3 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($0,$2,0)|0);
 return ($3|0);
}
function __Z18stringContainsCharRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEDi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1&255;
 $3 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($0,$2,0)|0);
 $4 = ($3|0)!=(-1);
 return ($4|0);
}
function __Z15stringSubstringRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($0,$1,$2,$3,$1);
 return;
}
function __Z15stringSubstringRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $4&255;
 $9 = $5 ? $7 : $8;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($0,$1,$2,$9,$1);
 return;
}
function __Z20stringParseDimensionNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0) {
 $0 = $0|0;
 var $$0 = 0.0, $$012$i = 0, $$012$i16 = 0, $$012$i30 = 0, $$05 = 0, $$06 = 0, $$07$off0 = 0, $$sroa$4$0$in$i = 0, $$sroa$4$0$in$i14 = 0, $$sroa$4$0$in$i28 = 0, $$sroa$441$0$in$i = 0, $$sroa$441$0$in$i15 = 0, $$sroa$441$0$in$i29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0;
 var $89 = 0.0, $9 = 0, $90 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = sp + 24|0;
 $2 = sp + 12|0;
 $3 = sp;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $4 = ((($1)) + 11|0);
 HEAP8[$4>>0] = 2;
 HEAP16[$1>>1] = 28772;
 $5 = ((($1)) + 2|0);
 HEAP8[$5>>0] = 0;
 $6 = ((($0)) + 11|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)<(0);
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $7&255;
 $12 = $8 ? $10 : $11;
 $13 = ($12>>>0)<(2);
 L1: do {
  if ($13) {
   label = 8;
  } else {
   $14 = HEAP32[$0>>2]|0;
   $15 = $8 ? $14 : $0;
   $16 = (($15) + ($12)|0);
   $$012$i = 2;$$sroa$4$0$in$i = $5;$$sroa$441$0$in$i = $16;
   while(1) {
    $17 = ($$012$i|0)==(0);
    if ($17) {
     break;
    }
    $18 = (($$012$i) + -1)|0;
    $19 = ((($$sroa$441$0$in$i)) + -1|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = ((($$sroa$4$0$in$i)) + -1|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = ($20<<24>>24)==($22<<24>>24);
    if ($23) {
     $$012$i = $18;$$sroa$4$0$in$i = $21;$$sroa$441$0$in$i = $19;
    } else {
     label = 8;
     break L1;
    }
   }
   $24 = ((($16)) + -2|0);
   $25 = $24;
   $26 = $15;
   $27 = (($25) - ($26))|0;
   __THREW__ = 0;
   (invoke_iiii(712,($0|0),($27|0),2)|0);
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if (!($29)) {
    $$07$off0 = 1;
    break;
   }
   $30 = ___cxa_find_matching_catch_2()|0;
   $31 = tempRet0;
   $$05 = $31;$$06 = $30;
   ___resumeException($$06|0);
   // unreachable;
  }
 } while(0);
 L11: do {
  if ((label|0) == 8) {
   ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
   $32 = ((($2)) + 11|0);
   HEAP8[$32>>0] = 2;
   HEAP16[$2>>1] = 28787;
   $33 = ((($2)) + 2|0);
   HEAP8[$33>>0] = 0;
   $34 = HEAP8[$6>>0]|0;
   $35 = ($34<<24>>24)<(0);
   $36 = HEAP32[$9>>2]|0;
   $37 = $34&255;
   $38 = $35 ? $36 : $37;
   $39 = ($38>>>0)<(2);
   L13: do {
    if (!($39)) {
     $40 = HEAP32[$0>>2]|0;
     $41 = $35 ? $40 : $0;
     $42 = (($41) + ($38)|0);
     $$012$i16 = 2;$$sroa$4$0$in$i14 = $33;$$sroa$441$0$in$i15 = $42;
     while(1) {
      $43 = ($$012$i16|0)==(0);
      if ($43) {
       break;
      }
      $44 = (($$012$i16) + -1)|0;
      $45 = ((($$sroa$441$0$in$i15)) + -1|0);
      $46 = HEAP8[$45>>0]|0;
      $47 = ((($$sroa$4$0$in$i14)) + -1|0);
      $48 = HEAP8[$47>>0]|0;
      $49 = ($46<<24>>24)==($48<<24>>24);
      if ($49) {
       $$012$i16 = $44;$$sroa$4$0$in$i14 = $47;$$sroa$441$0$in$i15 = $45;
      } else {
       break L13;
      }
     }
     $50 = ((($42)) + -2|0);
     $51 = $50;
     $52 = $41;
     $53 = (($51) - ($52))|0;
     __THREW__ = 0;
     (invoke_iiii(712,($0|0),($53|0),2)|0);
     $54 = __THREW__; __THREW__ = 0;
     $55 = $54&1;
     if (!($55)) {
      $$07$off0 = 0;
      break L11;
     }
     $56 = ___cxa_find_matching_catch_2()|0;
     $57 = tempRet0;
     $$05 = $57;$$06 = $56;
     ___resumeException($$06|0);
     // unreachable;
    }
   } while(0);
   ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
   $58 = ((($3)) + 11|0);
   HEAP8[$58>>0] = 2;
   HEAP16[$3>>1] = 30832;
   $59 = ((($3)) + 2|0);
   HEAP8[$59>>0] = 0;
   $60 = HEAP8[$6>>0]|0;
   $61 = ($60<<24>>24)<(0);
   $62 = HEAP32[$9>>2]|0;
   $63 = $60&255;
   $64 = $61 ? $62 : $63;
   $65 = ($64>>>0)<(2);
   L24: do {
    if (!($65)) {
     $66 = HEAP32[$0>>2]|0;
     $67 = $61 ? $66 : $0;
     $68 = (($67) + ($64)|0);
     $$012$i30 = 2;$$sroa$4$0$in$i28 = $59;$$sroa$441$0$in$i29 = $68;
     while(1) {
      $69 = ($$012$i30|0)==(0);
      if ($69) {
       break;
      }
      $70 = (($$012$i30) + -1)|0;
      $71 = ((($$sroa$441$0$in$i29)) + -1|0);
      $72 = HEAP8[$71>>0]|0;
      $73 = ((($$sroa$4$0$in$i28)) + -1|0);
      $74 = HEAP8[$73>>0]|0;
      $75 = ($72<<24>>24)==($74<<24>>24);
      if ($75) {
       $$012$i30 = $70;$$sroa$4$0$in$i28 = $73;$$sroa$441$0$in$i29 = $71;
      } else {
       break L24;
      }
     }
     $76 = ((($68)) + -2|0);
     $77 = $76;
     $78 = $67;
     $79 = (($77) - ($78))|0;
     __THREW__ = 0;
     (invoke_iiii(712,($0|0),($79|0),2)|0);
     $80 = __THREW__; __THREW__ = 0;
     $81 = $80&1;
     if ($81) {
      $82 = ___cxa_find_matching_catch_2()|0;
      $83 = tempRet0;
      $$05 = $83;$$06 = $82;
      ___resumeException($$06|0);
      // unreachable;
     }
    }
   } while(0);
   $$07$off0 = 0;
  }
 } while(0);
 $84 = HEAP8[$6>>0]|0;
 $85 = ($84<<24>>24)<(0);
 $86 = HEAP32[$0>>2]|0;
 $87 = $85 ? $86 : $0;
 $88 = (+_atof($87));
 $89 = $88;
 if (!($$07$off0)) {
  $$0 = $89;
  STACKTOP = sp;return (+$$0);
 }
 $90 = (+__ZN3App2dpEf(28952,$89));
 $$0 = $90;
 STACKTOP = sp;return (+$$0);
}
function __Z14stringEndsWithRNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKS5_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$012 = 0, $$1 = 0, $$sroa$4$0$in = 0, $$sroa$441$0$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $4&255;
 $9 = $5 ? $7 : $8;
 $10 = ((($0)) + 11|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)<(0);
 $13 = ((($0)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $11&255;
 $16 = $12 ? $14 : $15;
 $17 = ($9>>>0)>($16>>>0);
 if ($17) {
  $$1 = 0;
  return ($$1|0);
 }
 $18 = HEAP32[$0>>2]|0;
 $19 = $12 ? $18 : $0;
 $20 = (($19) + ($16)|0);
 $21 = HEAP32[$1>>2]|0;
 $22 = $5 ? $21 : $1;
 $23 = (($22) + ($9)|0);
 $$012 = $9;$$sroa$4$0$in = $23;$$sroa$441$0$in = $20;
 while(1) {
  $24 = ($$012|0)==(0);
  if ($24) {
   break;
  }
  $25 = (($$012) + -1)|0;
  $26 = ((($$sroa$441$0$in)) + -1|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = ((($$sroa$4$0$in)) + -1|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = ($27<<24>>24)==($29<<24>>24);
  if ($30) {
   $$012 = $25;$$sroa$4$0$in = $28;$$sroa$441$0$in = $26;
  } else {
   $$1 = 0;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return ($$1|0);
 }
 if (!($2)) {
  $$1 = 1;
  return ($$1|0);
 }
 $31 = (0 - ($9))|0;
 $32 = (($20) + ($31)|0);
 $33 = $32;
 $34 = $19;
 $35 = (($33) - ($34))|0;
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEjj($0,$35,$9)|0);
 $$1 = 1;
 return ($$1|0);
}
function __Z17stringParseDoubleRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 $4 = HEAP32[$0>>2]|0;
 $5 = $3 ? $4 : $0;
 $6 = (+_atof($5));
 return (+$6);
}
function __Z10stringTrimRNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2&255;
 $7 = $3 ? $5 : $6;
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   $15 = $2;$18 = $5;
  } else {
   $10 = $2;$43 = $5;
   while(1) {
    $9 = ($10<<24>>24)<(0);
    $11 = HEAP32[$0>>2]|0;
    $12 = $9 ? $11 : $0;
    $13 = HEAP8[$12>>0]|0;
    switch ($13<<24>>24) {
    case 10: case 13: case 9: case 32:  {
     break;
    }
    default: {
     $15 = $10;$18 = $43;
     break L1;
    }
    }
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEjj($0,0,1)|0);
    $20 = HEAP8[$1>>0]|0;
    $21 = ($20<<24>>24)<(0);
    $22 = HEAP32[$4>>2]|0;
    $23 = $20&255;
    $24 = $21 ? $22 : $23;
    $25 = ($24|0)==(0);
    if ($25) {
     $15 = $20;$18 = $22;
     break L1;
    } else {
     $10 = $20;$43 = $22;
    }
   }
  }
 } while(0);
 $14 = ($15<<24>>24)<(0);
 $16 = $15&255;
 $17 = $14 ? $18 : $16;
 $19 = ($17|0)==(0);
 if ($19) {
  return;
 }
 $27 = $15;$32 = $18;
 L10: while(1) {
  $26 = ($27<<24>>24)<(0);
  $28 = HEAP32[$0>>2]|0;
  $29 = $27&255;
  $30 = $26 ? $28 : $0;
  $31 = $26 ? $32 : $29;
  $33 = (($30) + ($31)|0);
  $34 = ((($33)) + -1|0);
  $35 = HEAP8[$34>>0]|0;
  switch ($35<<24>>24) {
  case 10: case 13: case 9: case 32:  {
   break;
  }
  default: {
   label = 9;
   break L10;
  }
  }
  $36 = (($31) + -1)|0;
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEjj($0,$36,-1)|0);
  $37 = HEAP8[$1>>0]|0;
  $38 = ($37<<24>>24)<(0);
  $39 = HEAP32[$4>>2]|0;
  $40 = $37&255;
  $41 = $38 ? $39 : $40;
  $42 = ($41|0)==(0);
  if ($42) {
   label = 9;
   break;
  } else {
   $27 = $37;$32 = $39;
  }
 }
 if ((label|0) == 9) {
  return;
 }
}
function __Z17stringExtractUpToRNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKS5_b($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$i$i = 0, $$02729$i$i$i = 0, $$1$i$i35 = 0, $$2$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ((($1)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 $8 = HEAP32[$1>>2]|0;
 $9 = $7 ? $8 : $1;
 $10 = ((($2)) + 11|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)<(0);
 $13 = HEAP32[$2>>2]|0;
 $14 = $12 ? $13 : $2;
 $15 = ((($2)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $11&255;
 $18 = $12 ? $16 : $17;
 $19 = ($18|0)==(0);
 if ($19) {
  $$1$i$i35 = 0;
 } else {
  $20 = ((($1)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $6&255;
  $23 = $7 ? $21 : $22;
  $24 = (($9) + ($23)|0);
  $25 = $24;
  $26 = $9;
  $27 = ($23|0)<($18|0);
  L3: do {
   if ($27) {
    $$2$i$i$i = $24;
   } else {
    $28 = HEAP8[$14>>0]|0;
    $29 = $28&255;
    $$02729$i$i$i = $9;$31 = $23;
    while(1) {
     $30 = (($31) - ($18))|0;
     $32 = (($30) + 1)|0;
     $33 = ($32|0)==(0);
     if ($33) {
      $$2$i$i$i = $24;
      break L3;
     }
     $34 = (_memchr($$02729$i$i$i,$29,$32)|0);
     $35 = ($34|0)==(0|0);
     if ($35) {
      $$2$i$i$i = $24;
      break L3;
     }
     $36 = (_memcmp($34,$14,$18)|0);
     $37 = ($36|0)==(0);
     if ($37) {
      $$2$i$i$i = $34;
      break L3;
     }
     $38 = ((($34)) + 1|0);
     $39 = $38;
     $40 = (($25) - ($39))|0;
     $41 = ($40|0)<($18|0);
     if ($41) {
      $$2$i$i$i = $24;
      break;
     } else {
      $$02729$i$i$i = $38;$31 = $40;
     }
    }
   }
  } while(0);
  $42 = ($$2$i$i$i|0)==($24|0);
  $43 = $$2$i$i$i;
  $44 = (($43) - ($26))|0;
  $$0$i$i = $42 ? -1 : $44;
  $45 = $7 ? $21 : $22;
  $46 = ($$0$i$i>>>0)>($45>>>0);
  if ($46) {
   ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
   STACKTOP = sp;return;
  } else {
   $$1$i$i35 = $$0$i$i;
  }
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($4,$1,0,$$1$i$i35,$1);
 $47 = HEAP8[$5>>0]|0;
 $48 = ($47<<24>>24)<(0);
 $49 = HEAP32[$1>>2]|0;
 $50 = $48 ? $49 : $1;
 $51 = $50;
 $52 = (($50) + ($$1$i$i35)|0);
 do {
  if ($3) {
   $53 = HEAP8[$10>>0]|0;
   $54 = ($53<<24>>24)<(0);
   if ($54) {
    $55 = HEAP32[$15>>2]|0;
    $58 = $55;
    break;
   } else {
    $56 = $53&255;
    $58 = $56;
    break;
   }
  } else {
   $58 = 0;
  }
 } while(0);
 $57 = (($52) + ($58)|0);
 $59 = $57;
 $60 = (($59) - ($51))|0;
 __THREW__ = 0;
 (invoke_iiii(712,($1|0),0,($60|0))|0);
 $61 = __THREW__; __THREW__ = 0;
 $62 = $61&1;
 if (!($62)) {
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;
  STACKTOP = sp;return;
 }
 $63 = ___cxa_find_matching_catch_2()|0;
 $64 = tempRet0;
 $65 = ((($4)) + 11|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = ($66<<24>>24)<(0);
 if (!($67)) {
  ___resumeException($63|0);
  // unreachable;
 }
 $68 = HEAP32[$4>>2]|0;
 __ZdlPv($68);
 ___resumeException($63|0);
 // unreachable;
}
function __Z16stringStartsWithRNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKS5_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $$sroa$017$0 = 0, $$sroa$019$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $4&255;
 $9 = $5 ? $7 : $8;
 $10 = ((($0)) + 11|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)<(0);
 $13 = ((($0)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $11&255;
 $16 = $12 ? $14 : $15;
 $17 = ($9>>>0)>($16>>>0);
 if ($17) {
  $$1 = 0;
  return ($$1|0);
 }
 $18 = HEAP32[$0>>2]|0;
 $19 = $12 ? $18 : $0;
 $20 = HEAP32[$1>>2]|0;
 $21 = $5 ? $20 : $1;
 $$0 = $9;$$sroa$017$0 = $21;$$sroa$019$0 = $19;
 while(1) {
  $22 = ($$0|0)==(0);
  if ($22) {
   break;
  }
  $23 = (($$0) + -1)|0;
  $24 = ((($$sroa$019$0)) + 1|0);
  $25 = HEAP8[$$sroa$019$0>>0]|0;
  $26 = ((($$sroa$017$0)) + 1|0);
  $27 = HEAP8[$$sroa$017$0>>0]|0;
  $28 = ($25<<24>>24)==($27<<24>>24);
  if ($28) {
   $$0 = $23;$$sroa$017$0 = $26;$$sroa$019$0 = $24;
  } else {
   $$1 = 0;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return ($$1|0);
 }
 if (!($2)) {
  $$1 = 1;
  return ($$1|0);
 }
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEjj($0,0,$9)|0);
 $$1 = 1;
 return ($$1|0);
}
function __Z13stringFromInti($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$016$i$i = 0, $$017$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_sprintf($2,21944,$vararg_buffer)|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = (_strlen($2)|0);
 $4 = ($3>>>0)>(4294967279);
 if ($4) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $5 = ($3>>>0)<(11);
 if ($5) {
  $12 = $3&255;
  $13 = ((($0)) + 11|0);
  HEAP8[$13>>0] = $12;
  $14 = ($3|0)==(0);
  if ($14) {
   $$017$i$i = $0;
   $15 = (($$017$i$i) + ($3)|0);
   HEAP8[$15>>0] = 0;
   STACKTOP = sp;return;
  } else {
   $$016$i$i = $0;
  }
 } else {
  $6 = (($3) + 16)|0;
  $7 = $6 & -16;
  $8 = (__Znwj($7)|0);
  HEAP32[$0>>2] = $8;
  $9 = $7 | -2147483648;
  $10 = ((($0)) + 8|0);
  HEAP32[$10>>2] = $9;
  $11 = ((($0)) + 4|0);
  HEAP32[$11>>2] = $3;
  $$016$i$i = $8;
 }
 _memcpy(($$016$i$i|0),($2|0),($3|0))|0;
 $$017$i$i = $$016$i$i;
 $15 = (($$017$i$i) + ($3)|0);
 HEAP8[$15>>0] = 0;
 STACKTOP = sp;return;
}
function __Z16stringFromDoubled($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$016$i$i = 0, $$017$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 HEAPF64[$vararg_buffer>>3] = $1;
 (_sprintf($2,21947,$vararg_buffer)|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = (_strlen($2)|0);
 $4 = ($3>>>0)>(4294967279);
 if ($4) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $5 = ($3>>>0)<(11);
 if ($5) {
  $12 = $3&255;
  $13 = ((($0)) + 11|0);
  HEAP8[$13>>0] = $12;
  $14 = ($3|0)==(0);
  if ($14) {
   $$017$i$i = $0;
   $15 = (($$017$i$i) + ($3)|0);
   HEAP8[$15>>0] = 0;
   STACKTOP = sp;return;
  } else {
   $$016$i$i = $0;
  }
 } else {
  $6 = (($3) + 16)|0;
  $7 = $6 & -16;
  $8 = (__Znwj($7)|0);
  HEAP32[$0>>2] = $8;
  $9 = $7 | -2147483648;
  $10 = ((($0)) + 8|0);
  HEAP32[$10>>2] = $9;
  $11 = ((($0)) + 4|0);
  HEAP32[$11>>2] = $3;
  $$016$i$i = $8;
 }
 _memcpy(($$016$i$i|0),($2|0),($3|0))|0;
 $$017$i$i = $$016$i$i;
 $15 = (($$017$i$i) + ($3)|0);
 HEAP8[$15>>0] = 0;
 STACKTOP = sp;return;
}
function __Z14stringParseIntRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0) {
 $0 = $0|0;
 var $$$us = 0, $$0$i$i42 = 0, $$0$i$i42$us = 0, $$0$i$i47 = 0, $$0$i$i53 = 0, $$027$i$i = 0, $$027$i$i$us = 0, $$027$i$i43 = 0, $$027$i$i49 = 0, $$034$us = 0, $$035$lcssa = 0, $$03575 = 0, $$03575$us = 0, $$036$ph = 0, $$not = 0, $$off = 0, $$off$us = 0, $$off39$us = 0, $$off40$us = 0, $$sroa$0$2$ph = 0;
 var $$sroa$0$274 = 0, $$sroa$0$274$us = 0, $$sroa$12$2$ph = 0, $$sroa$12$273 = 0, $$sroa$12$273$us = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 $4 = HEAP32[$0>>2]|0;
 $5 = $3 ? $4 : $0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2&255;
 $9 = $3 ? $7 : $8;
 $10 = ($9|0)<(1);
 if ($10) {
  $$035$lcssa = 0;
  return ($$035$lcssa|0);
 }
 $11 = HEAP8[$5>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = $12 & 128;
 $14 = ($13|0)==(0);
 do {
  if ($14) {
   $$0$i$i53 = $12;
  } else {
   $15 = $12 & 32;
   $16 = ($15|0)==(0);
   $17 = ((($5)) + 1|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18 & 63;
   $20 = $19&255;
   if ($16) {
    $43 = $12 << 6;
    $44 = $43 & 1984;
    $45 = $20 | $44;
    $$0$i$i53 = $45;
    break;
   }
   $21 = $12 & 16;
   $22 = ($21|0)==(0);
   $23 = ((($5)) + 2|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24 & 63;
   $26 = $25&255;
   if ($22) {
    $38 = $12 << 12;
    $39 = $38 & 61440;
    $40 = $20 << 6;
    $41 = $40 | $39;
    $42 = $41 | $26;
    $$0$i$i53 = $42;
    break;
   } else {
    $27 = $12 << 18;
    $28 = $27 & 1835008;
    $29 = $20 << 12;
    $30 = $29 | $28;
    $31 = $26 << 6;
    $32 = $30 | $31;
    $33 = ((($5)) + 3|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = $34 & 63;
    $36 = $35&255;
    $37 = $32 | $36;
    $$0$i$i53 = $37;
    break;
   }
  }
 } while(0);
 $$not = ($$0$i$i53|0)==(48);
 if ($$not) {
  if ($14) {
   $$027$i$i49 = 1;
  } else {
   $46 = $12 & 32;
   $47 = ($46|0)==(0);
   if ($47) {
    $$027$i$i49 = 2;
   } else {
    $48 = $12 >>> 4;
    $49 = $48 & 1;
    $50 = (($49) + 3)|0;
    $$027$i$i49 = $50;
   }
  }
  $51 = (($5) + ($$027$i$i49)|0);
  $52 = (($9) - ($$027$i$i49))|0;
  $53 = ($52|0)<(1);
  if ($53) {
   $$035$lcssa = 0;
   return ($$035$lcssa|0);
  }
  $54 = HEAP8[$51>>0]|0;
  $55 = $54 << 24 >> 24;
  $56 = $55 & 128;
  $57 = ($56|0)==(0);
  do {
   if ($57) {
    $$0$i$i47 = $55;
   } else {
    $58 = $55 & 32;
    $59 = ($58|0)==(0);
    $60 = ((($51)) + 1|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61 & 63;
    $63 = $62&255;
    if ($59) {
     $86 = $55 << 6;
     $87 = $86 & 1984;
     $88 = $63 | $87;
     $$0$i$i47 = $88;
     break;
    }
    $64 = $55 & 16;
    $65 = ($64|0)==(0);
    $66 = ((($51)) + 2|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67 & 63;
    $69 = $68&255;
    if ($65) {
     $81 = $55 << 12;
     $82 = $81 & 61440;
     $83 = $63 << 6;
     $84 = $83 | $82;
     $85 = $84 | $69;
     $$0$i$i47 = $85;
     break;
    } else {
     $70 = $55 << 18;
     $71 = $70 & 1835008;
     $72 = $63 << 12;
     $73 = $72 | $71;
     $74 = $69 << 6;
     $75 = $73 | $74;
     $76 = ((($51)) + 3|0);
     $77 = HEAP8[$76>>0]|0;
     $78 = $77 & 63;
     $79 = $78&255;
     $80 = $75 | $79;
     $$0$i$i47 = $80;
     break;
    }
   }
  } while(0);
  $89 = ($$0$i$i47|0)==(120);
  if ($89) {
   if ($57) {
    $$027$i$i43 = 1;
   } else {
    $90 = $55 & 32;
    $91 = ($90|0)==(0);
    if ($91) {
     $$027$i$i43 = 2;
    } else {
     $92 = $55 >>> 4;
     $93 = $92 & 1;
     $94 = (($93) + 3)|0;
     $$027$i$i43 = $94;
    }
   }
   $95 = (($51) + ($$027$i$i43)|0);
   $96 = (($52) - ($$027$i$i43))|0;
   $$036$ph = 16;$$sroa$0$2$ph = $95;$$sroa$12$2$ph = $96;
  } else {
   $$036$ph = 10;$$sroa$0$2$ph = $51;$$sroa$12$2$ph = $52;
  }
 } else {
  $$036$ph = 10;$$sroa$0$2$ph = $5;$$sroa$12$2$ph = $9;
 }
 $97 = ($$sroa$12$2$ph|0)<(1);
 if ($97) {
  $$035$lcssa = 0;
  return ($$035$lcssa|0);
 }
 $98 = ($$036$ph|0)==(16);
 if ($98) {
  $$03575$us = 0;$$sroa$0$274$us = $$sroa$0$2$ph;$$sroa$12$273$us = $$sroa$12$2$ph;
 } else {
  $$03575 = 0;$$sroa$0$274 = $$sroa$0$2$ph;$$sroa$12$273 = $$sroa$12$2$ph;
  while(1) {
   $149 = HEAP8[$$sroa$0$274>>0]|0;
   $150 = $149 << 24 >> 24;
   $151 = $150 & 128;
   $152 = ($151|0)==(0);
   do {
    if ($152) {
     $$0$i$i42 = $150;
    } else {
     $153 = $150 & 32;
     $154 = ($153|0)==(0);
     $155 = ((($$sroa$0$274)) + 1|0);
     $156 = HEAP8[$155>>0]|0;
     $157 = $156 & 63;
     $158 = $157&255;
     if ($154) {
      $181 = $150 << 6;
      $182 = $181 & 1984;
      $183 = $158 | $182;
      $$0$i$i42 = $183;
      break;
     }
     $159 = $150 & 16;
     $160 = ($159|0)==(0);
     $161 = ((($$sroa$0$274)) + 2|0);
     $162 = HEAP8[$161>>0]|0;
     $163 = $162 & 63;
     $164 = $163&255;
     if ($160) {
      $176 = $150 << 12;
      $177 = $176 & 61440;
      $178 = $158 << 6;
      $179 = $178 | $177;
      $180 = $179 | $164;
      $$0$i$i42 = $180;
      break;
     } else {
      $165 = $150 << 18;
      $166 = $165 & 1835008;
      $167 = $158 << 12;
      $168 = $167 | $166;
      $169 = $164 << 6;
      $170 = $168 | $169;
      $171 = ((($$sroa$0$274)) + 3|0);
      $172 = HEAP8[$171>>0]|0;
      $173 = $172 & 63;
      $174 = $173&255;
      $175 = $170 | $174;
      $$0$i$i42 = $175;
      break;
     }
    }
   } while(0);
   $$off = (($$0$i$i42) + -48)|0;
   $184 = ($$off>>>0)<(10);
   if (!($184)) {
    $$035$lcssa = $$03575;
    label = 52;
    break;
   }
   $185 = Math_imul($$03575, $$036$ph)|0;
   $186 = (($$off) + ($185))|0;
   if ($152) {
    $$027$i$i = 1;
   } else {
    $187 = $150 & 32;
    $188 = ($187|0)==(0);
    if ($188) {
     $$027$i$i = 2;
    } else {
     $189 = $150 >>> 4;
     $190 = $189 & 1;
     $191 = (($190) + 3)|0;
     $$027$i$i = $191;
    }
   }
   $192 = (($$sroa$0$274) + ($$027$i$i)|0);
   $193 = (($$sroa$12$273) - ($$027$i$i))|0;
   $194 = ($193|0)<(1);
   if ($194) {
    $$035$lcssa = $186;
    label = 52;
    break;
   } else {
    $$03575 = $186;$$sroa$0$274 = $192;$$sroa$12$273 = $193;
   }
  }
  if ((label|0) == 52) {
   return ($$035$lcssa|0);
  }
 }
 L60: while(1) {
  $99 = HEAP8[$$sroa$0$274$us>>0]|0;
  $100 = $99 << 24 >> 24;
  $101 = $100 & 128;
  $102 = ($101|0)==(0);
  do {
   if ($102) {
    $$0$i$i42$us = $100;
   } else {
    $103 = $100 & 32;
    $104 = ($103|0)==(0);
    $105 = ((($$sroa$0$274$us)) + 1|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106 & 63;
    $108 = $107&255;
    if ($104) {
     $131 = $100 << 6;
     $132 = $131 & 1984;
     $133 = $108 | $132;
     $$0$i$i42$us = $133;
     break;
    }
    $109 = $100 & 16;
    $110 = ($109|0)==(0);
    $111 = ((($$sroa$0$274$us)) + 2|0);
    $112 = HEAP8[$111>>0]|0;
    $113 = $112 & 63;
    $114 = $113&255;
    if ($110) {
     $126 = $100 << 12;
     $127 = $126 & 61440;
     $128 = $108 << 6;
     $129 = $128 | $127;
     $130 = $129 | $114;
     $$0$i$i42$us = $130;
     break;
    } else {
     $115 = $100 << 18;
     $116 = $115 & 1835008;
     $117 = $108 << 12;
     $118 = $117 | $116;
     $119 = $114 << 6;
     $120 = $118 | $119;
     $121 = ((($$sroa$0$274$us)) + 3|0);
     $122 = HEAP8[$121>>0]|0;
     $123 = $122 & 63;
     $124 = $123&255;
     $125 = $120 | $124;
     $$0$i$i42$us = $125;
     break;
    }
   }
  } while(0);
  $$off$us = (($$0$i$i42$us) + -48)|0;
  $134 = ($$off$us>>>0)<(10);
  if (!($134)) {
   switch ($$0$i$i42$us|0) {
   case 65: case 66: case 67: case 68: case 69: case 70: case 97: case 98: case 99: case 100: case 101: case 102:  {
    break;
   }
   default: {
    $$035$lcssa = $$03575$us;
    label = 52;
    break L60;
   }
   }
  }
  $$off39$us = (($$0$i$i42$us) + -97)|0;
  $135 = ($$off39$us>>>0)<(6);
  if ($135) {
   $138 = (($$0$i$i42$us) + -87)|0;
   $$034$us = $138;
  } else {
   $$off40$us = (($$0$i$i42$us) + -65)|0;
   $136 = ($$off40$us>>>0)<(6);
   $137 = (($$0$i$i42$us) + -55)|0;
   $$$us = $136 ? $137 : $$off$us;
   $$034$us = $$$us;
  }
  $139 = $$03575$us << 4;
  $140 = (($$034$us) + ($139))|0;
  if ($102) {
   $$027$i$i$us = 1;
  } else {
   $141 = $100 & 32;
   $142 = ($141|0)==(0);
   if ($142) {
    $$027$i$i$us = 2;
   } else {
    $143 = $100 >>> 4;
    $144 = $143 & 1;
    $145 = (($144) + 3)|0;
    $$027$i$i$us = $145;
   }
  }
  $146 = (($$sroa$0$274$us) + ($$027$i$i$us)|0);
  $147 = (($$sroa$12$273$us) - ($$027$i$i$us))|0;
  $148 = ($147|0)<(1);
  if ($148) {
   $$035$lcssa = $140;
   label = 52;
   break;
  } else {
   $$03575$us = $140;$$sroa$0$274$us = $146;$$sroa$12$273$us = $147;
  }
 }
 if ((label|0) == 52) {
  return ($$035$lcssa|0);
 }
 return (0)|0;
}
function __ZN12Utf8Iterator4peekEv($0) {
 $0 = $0|0;
 var $$0$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(1);
 if ($3) {
  $$0$i = 0;
  return ($$0$i|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = $6 & 128;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0$i = $6;
  return ($$0$i|0);
 }
 $9 = $6 & 32;
 $10 = ($9|0)==(0);
 $11 = ((($4)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 & 63;
 $14 = $13&255;
 if ($10) {
  $37 = $6 << 6;
  $38 = $37 & 1984;
  $39 = $14 | $38;
  $$0$i = $39;
  return ($$0$i|0);
 }
 $15 = $6 & 16;
 $16 = ($15|0)==(0);
 $17 = ((($4)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18 & 63;
 $20 = $19&255;
 if ($16) {
  $32 = $6 << 12;
  $33 = $32 & 61440;
  $34 = $14 << 6;
  $35 = $34 | $33;
  $36 = $35 | $20;
  $$0$i = $36;
  return ($$0$i|0);
 } else {
  $21 = $6 << 18;
  $22 = $21 & 1835008;
  $23 = $14 << 12;
  $24 = $23 | $22;
  $25 = $20 << 6;
  $26 = $24 | $25;
  $27 = ((($4)) + 3|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28 & 63;
  $30 = $29&255;
  $31 = $26 | $30;
  $$0$i = $31;
  return ($$0$i|0);
 }
 return (0)|0;
}
function __ZN12Utf8Iterator4nextEv($0) {
 $0 = $0|0;
 var $$0$i = 0, $$026$i = 0, $$027$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(1);
 if ($3) {
  $$0$i = 0;
  return ($$0$i|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = $6 & 128;
 $8 = ($7|0)==(0);
 do {
  if ($8) {
   $$026$i = $6;$$027$i = 1;
  } else {
   $9 = $6 & 32;
   $10 = ($9|0)==(0);
   $11 = ((($4)) + 1|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12 & 63;
   $14 = $13&255;
   if ($10) {
    $37 = $6 << 6;
    $38 = $37 & 1984;
    $39 = $14 | $38;
    $$026$i = $39;$$027$i = 2;
    break;
   }
   $15 = $6 & 16;
   $16 = ($15|0)==(0);
   $17 = ((($4)) + 2|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18 & 63;
   $20 = $19&255;
   if ($16) {
    $32 = $6 << 12;
    $33 = $32 & 61440;
    $34 = $14 << 6;
    $35 = $34 | $33;
    $36 = $35 | $20;
    $$026$i = $36;$$027$i = 3;
    break;
   } else {
    $21 = $6 << 18;
    $22 = $21 & 1835008;
    $23 = $14 << 12;
    $24 = $23 | $22;
    $25 = $20 << 6;
    $26 = $24 | $25;
    $27 = ((($4)) + 3|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 & 63;
    $30 = $29&255;
    $31 = $26 | $30;
    $$026$i = $31;$$027$i = 4;
    break;
   }
  }
 } while(0);
 $40 = (($4) + ($$027$i)|0);
 HEAP32[$0>>2] = $40;
 $41 = (($2) - ($$027$i))|0;
 HEAP32[$1>>2] = $41;
 $$0$i = $$026$i;
 return ($$0$i|0);
}
function __ZN12Utf8Iterator3eofEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(1);
 return ($3|0);
}
function __ZN12Utf8IteratorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 $5 = HEAP32[$1>>2]|0;
 $6 = $4 ? $5 : $1;
 HEAP32[$0>>2] = $6;
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $3&255;
 $10 = $4 ? $8 : $9;
 $11 = ((($0)) + 4|0);
 HEAP32[$11>>2] = $10;
 return;
}
function __ZN12Utf8IteratorC2EPK4Data($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $3;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = $5;
 return;
}
function __ZN12Utf8Iterator14skipWhitespaceEv($0) {
 $0 = $0|0;
 var $$0$i$i11 = 0, $$027$i$i = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(1);
 if ($3) {
  return;
 }
 $$pre = HEAP32[$0>>2]|0;
 $41 = $2;$5 = $$pre;
 L4: while(1) {
  $4 = HEAP8[$5>>0]|0;
  $6 = $4 << 24 >> 24;
  $7 = $6 & 128;
  $8 = ($7|0)==(0);
  do {
   if ($8) {
    $$0$i$i11 = $6;
   } else {
    $9 = $6 & 32;
    $10 = ($9|0)==(0);
    $11 = ((($5)) + 1|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 & 63;
    $14 = $13&255;
    if ($10) {
     $37 = $6 << 6;
     $38 = $37 & 1984;
     $39 = $14 | $38;
     $$0$i$i11 = $39;
     break;
    }
    $15 = $6 & 16;
    $16 = ($15|0)==(0);
    $17 = ((($5)) + 2|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18 & 63;
    $20 = $19&255;
    if ($16) {
     $32 = $6 << 12;
     $33 = $32 & 61440;
     $34 = $14 << 6;
     $35 = $34 | $33;
     $36 = $35 | $20;
     $$0$i$i11 = $36;
     break;
    } else {
     $21 = $6 << 18;
     $22 = $21 & 1835008;
     $23 = $14 << 12;
     $24 = $23 | $22;
     $25 = $20 << 6;
     $26 = $24 | $25;
     $27 = ((($5)) + 3|0);
     $28 = HEAP8[$27>>0]|0;
     $29 = $28 & 63;
     $30 = $29&255;
     $31 = $26 | $30;
     $$0$i$i11 = $31;
     break;
    }
   }
  } while(0);
  switch ($$0$i$i11|0) {
  case 9: case 10: case 13: case 32:  {
   break;
  }
  default: {
   label = 15;
   break L4;
  }
  }
  $40 = ($41|0)<(1);
  if ($40) {
   label = 15;
   break;
  }
  if ($8) {
   $$027$i$i = 1;
  } else {
   $45 = $6 & 32;
   $46 = ($45|0)==(0);
   if ($46) {
    $$027$i$i = 2;
   } else {
    $47 = $6 >>> 4;
    $48 = $47 & 1;
    $49 = (($48) + 3)|0;
    $$027$i$i = $49;
   }
  }
  $42 = (($5) + ($$027$i$i)|0);
  HEAP32[$0>>2] = $42;
  $43 = (($41) - ($$027$i$i))|0;
  HEAP32[$1>>2] = $43;
  $44 = ($43|0)<(1);
  if ($44) {
   label = 15;
   break;
  } else {
   $41 = $43;$5 = $42;
  }
 }
 if ((label|0) == 15) {
  return;
 }
}
function __ZN12Utf8Iterator9nextTokenEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$0$i$i = 0, $$027$i$i = 0, $$off$i = 0, $$off$i14 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(1);
 L1: do {
  if (!($4)) {
   $5 = HEAP32[$1>>2]|0;
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = $7 & 128;
   $9 = ($8|0)==(0);
   do {
    if ($9) {
     $$0$i$i = $7;
    } else {
     $10 = $7 & 32;
     $11 = ($10|0)==(0);
     $12 = ((($5)) + 1|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = $13 & 63;
     $15 = $14&255;
     if ($11) {
      $38 = $7 << 6;
      $39 = $38 & 1984;
      $40 = $15 | $39;
      $$0$i$i = $40;
      break;
     }
     $16 = $7 & 16;
     $17 = ($16|0)==(0);
     $18 = ((($5)) + 2|0);
     $19 = HEAP8[$18>>0]|0;
     $20 = $19 & 63;
     $21 = $20&255;
     if ($17) {
      $33 = $7 << 12;
      $34 = $33 & 61440;
      $35 = $15 << 6;
      $36 = $35 | $34;
      $37 = $36 | $21;
      $$0$i$i = $37;
      break;
     } else {
      $22 = $7 << 18;
      $23 = $22 & 1835008;
      $24 = $15 << 12;
      $25 = $24 | $23;
      $26 = $21 << 6;
      $27 = $25 | $26;
      $28 = ((($5)) + 3|0);
      $29 = HEAP8[$28>>0]|0;
      $30 = $29 & 63;
      $31 = $30&255;
      $32 = $27 | $31;
      $$0$i$i = $32;
      break;
     }
    }
   } while(0);
   $41 = $$0$i$i&255;
   $$off$i = (($41) + -48)<<24>>24;
   $42 = ($$off$i&255)<(10);
   if ($42) {
    __ZN12Utf8Iterator10nextNumberEv($0,$1);
    STACKTOP = sp;return;
   }
   $43 = $41 & -33;
   $44 = (($43) + -65)<<24>>24;
   $45 = ($44&255)<(26);
   L16: do {
    if (!($45)) {
     switch ($41<<24>>24) {
     case 64: case 45: case 95:  {
      break L16;
      break;
     }
     default: {
     }
     }
     $$off$i14 = (($41) + -33)<<24>>24;
     $46 = ($$off$i14&255)<(15);
     L19: do {
      if (!($46)) {
       switch ($41<<24>>24) {
       case 59: case 60: case 61: case 62: case 63: case 58: case 91: case 92: case 93: case 94:  {
        break L19;
        break;
       }
       default: {
       }
       }
       $47 = ($41<<24>>24)>(122);
       $48 = ($41<<24>>24)!=(127);
       $$$i = $47 & $48;
       if (!($$$i)) {
        HEAP32[$vararg_buffer>>2] = $$0$i$i;
        __ZN3App3logEPKcz(28952,21951,$vararg_buffer);
        break L1;
       }
      }
     } while(0);
     if ($9) {
      $$027$i$i = 1;
     } else {
      $49 = $7 & 32;
      $50 = ($49|0)==(0);
      if ($50) {
       $$027$i$i = 2;
      } else {
       $51 = $7 >>> 4;
       $52 = $51 & 1;
       $53 = (($52) + 3)|0;
       $$027$i$i = $53;
      }
     }
     $54 = (($5) + ($$027$i$i)|0);
     HEAP32[$1>>2] = $54;
     $55 = (($3) - ($$027$i$i))|0;
     HEAP32[$2>>2] = $55;
     ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
     __THREW__ = 0;
     invoke_vii(713,($0|0),($41|0));
     $56 = __THREW__; __THREW__ = 0;
     $57 = $56&1;
     if (!($57)) {
      STACKTOP = sp;return;
     }
     $58 = ___cxa_find_matching_catch_2()|0;
     $59 = tempRet0;
     $60 = ((($0)) + 11|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = ($61<<24>>24)<(0);
     if (!($62)) {
      ___resumeException($58|0);
      // unreachable;
     }
     $63 = HEAP32[$0>>2]|0;
     __ZdlPv($63);
     ___resumeException($58|0);
     // unreachable;
    }
   } while(0);
   __ZN12Utf8Iterator14nextIdentifierEv($0,$1);
   STACKTOP = sp;return;
  }
 } while(0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZN12Utf8Iterator10nextNumberEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $$012$ph = 0, $$01220 = 0, $$01221 = 0, $$013$off0$ = 0, $$013$off0$ph = 0, $$021$lcssa$i$i = 0, $$021$ph$i$i = 0, $$02122$i$i = 0, $$023$i$i = 0, $$027$i$i = 0, $$not = 0, $$not$not = 0, $$off$i = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $brmerge = 0, $scevgep25$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $$pre = HEAP32[$3>>2]|0;
 $$012$ph = $2;$$013$off0$ph = 0;$5 = $$pre;$72 = $2;
 L1: while(1) {
  $4 = ($5|0)<(1);
  if ($4) {
   $$01220 = $$012$ph;
   break;
  } else {
   $$01221 = $$012$ph;$45 = $5;$7 = $72;
  }
  while(1) {
   $6 = HEAP8[$7>>0]|0;
   $8 = $6 << 24 >> 24;
   $9 = $8 & 128;
   $10 = ($9|0)==(0);
   do {
    if ($10) {
     $$0$i$i = $8;
    } else {
     $11 = $8 & 32;
     $12 = ($11|0)==(0);
     $13 = ((($7)) + 1|0);
     $14 = HEAP8[$13>>0]|0;
     $15 = $14 & 63;
     $16 = $15&255;
     if ($12) {
      $39 = $8 << 6;
      $40 = $39 & 1984;
      $41 = $16 | $40;
      $$0$i$i = $41;
      break;
     }
     $17 = $8 & 16;
     $18 = ($17|0)==(0);
     $19 = ((($7)) + 2|0);
     $20 = HEAP8[$19>>0]|0;
     $21 = $20 & 63;
     $22 = $21&255;
     if ($18) {
      $34 = $8 << 12;
      $35 = $34 & 61440;
      $36 = $16 << 6;
      $37 = $36 | $35;
      $38 = $37 | $22;
      $$0$i$i = $38;
      break;
     } else {
      $23 = $8 << 18;
      $24 = $23 & 1835008;
      $25 = $16 << 12;
      $26 = $25 | $24;
      $27 = $22 << 6;
      $28 = $26 | $27;
      $29 = ((($7)) + 3|0);
      $30 = HEAP8[$29>>0]|0;
      $31 = $30 & 63;
      $32 = $31&255;
      $33 = $28 | $32;
      $$0$i$i = $33;
      break;
     }
    }
   } while(0);
   $42 = $$0$i$i&255;
   $$off$i = (($42) + -48)<<24>>24;
   $43 = ($$off$i&255)<(10);
   if (!($43)) {
    break;
   }
   $44 = ($45|0)<(1);
   if ($44) {
    $$01220 = $7;
    break L1;
   }
   if ($10) {
    $$027$i$i = 1;
   } else {
    $46 = $8 & 32;
    $47 = ($46|0)==(0);
    if ($47) {
     $$027$i$i = 2;
    } else {
     $48 = $8 >>> 4;
     $49 = $48 & 1;
     $50 = (($49) + 3)|0;
     $$027$i$i = $50;
    }
   }
   $51 = (($7) + ($$027$i$i)|0);
   HEAP32[$1>>2] = $51;
   $52 = (($45) - ($$027$i$i))|0;
   HEAP32[$3>>2] = $52;
   $53 = ($52|0)<(1);
   if ($53) {
    $$01220 = $51;
    break L1;
   } else {
    $$01221 = $51;$45 = $52;$7 = $51;
   }
  }
  $$not = ($$0$i$i|0)!=(46);
  $brmerge = $$013$off0$ph | $$not;
  $$not$not = $$not ^ 1;
  $$013$off0$ = $$013$off0$ph | $$not$not;
  if ($brmerge) {
   $$01220 = $$01221;
   break;
  } else {
   $$012$ph = $$01221;$$013$off0$ph = $$013$off0$;$5 = $45;$72 = $7;
  }
 }
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $54 = $2;
 $55 = $$01220;
 $56 = (($55) - ($54))|0;
 $57 = ($56>>>0)>(4294967279);
 if ($57) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $58 = ($56>>>0)<(11);
 if ($58) {
  $59 = $56&255;
  $60 = ((($0)) + 11|0);
  HEAP8[$60>>0] = $59;
  $$021$ph$i$i = $0;
 } else {
  $61 = (($56) + 16)|0;
  $62 = $61 & -16;
  $63 = (__Znwj($62)|0);
  HEAP32[$0>>2] = $63;
  $64 = $62 | -2147483648;
  $65 = ((($0)) + 8|0);
  HEAP32[$65>>2] = $64;
  $66 = ((($0)) + 4|0);
  HEAP32[$66>>2] = $56;
  $$021$ph$i$i = $63;
 }
 $67 = ($2|0)==($$01220|0);
 if ($67) {
  $$021$lcssa$i$i = $$021$ph$i$i;
  HEAP8[$$021$lcssa$i$i>>0] = 0;
  return;
 } else {
  $$02122$i$i = $$021$ph$i$i;$$023$i$i = $2;
 }
 while(1) {
  $68 = HEAP8[$$023$i$i>>0]|0;
  HEAP8[$$02122$i$i>>0] = $68;
  $69 = ((($$023$i$i)) + 1|0);
  $70 = ((($$02122$i$i)) + 1|0);
  $71 = ($69|0)==($$01220|0);
  if ($71) {
   break;
  } else {
   $$02122$i$i = $70;$$023$i$i = $69;
  }
 }
 $scevgep25$i$i = (($$021$ph$i$i) + ($56)|0);
 $$021$lcssa$i$i = $scevgep25$i$i;
 HEAP8[$$021$lcssa$i$i>>0] = 0;
 return;
}
function __ZN12Utf8Iterator14nextIdentifierEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $$010$lcssa = 0, $$021$lcssa$i$i = 0, $$021$ph$i$i = 0, $$02122$i$i = 0, $$023$i$i = 0, $$027$i$i = 0, $$off$i = 0, $$off$i$i = 0, $$off13$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond12$i = 0, $scevgep25$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(1);
 L1: do {
  if ($5) {
   $$010$lcssa = $2;
  } else {
   $41 = $4;$7 = $2;
   while(1) {
    $6 = HEAP8[$7>>0]|0;
    $8 = $6 << 24 >> 24;
    $9 = $8 & 128;
    $10 = ($9|0)==(0);
    do {
     if ($10) {
      $$0$i$i = $8;
     } else {
      $11 = $8 & 32;
      $12 = ($11|0)==(0);
      $13 = ((($7)) + 1|0);
      $14 = HEAP8[$13>>0]|0;
      $15 = $14 & 63;
      $16 = $15&255;
      if ($12) {
       $33 = $8 << 6;
       $34 = $33 & 1984;
       $35 = $16 | $34;
       $$0$i$i = $35;
       break;
      }
      $17 = $8 & 16;
      $18 = ($17|0)==(0);
      $19 = ((($7)) + 2|0);
      $20 = HEAP8[$19>>0]|0;
      $21 = $20 & 63;
      $22 = $21&255;
      if ($18) {
       $31 = $16 << 6;
       $32 = $31 | $22;
       $$0$i$i = $32;
       break;
      } else {
       $23 = $16 << 12;
       $24 = $22 << 6;
       $25 = $23 | $24;
       $26 = ((($7)) + 3|0);
       $27 = HEAP8[$26>>0]|0;
       $28 = $27 & 63;
       $29 = $28&255;
       $30 = $25 | $29;
       $$0$i$i = $30;
       break;
      }
     }
    } while(0);
    $36 = $$0$i$i&255;
    $$off$i = (($36) + -65)<<24>>24;
    $37 = ($$off$i&255)<(26);
    if (!($37)) {
     $$off13$i = (($36) + -97)<<24>>24;
     $38 = ($$off13$i&255)<(26);
     $$off$i$i = (($36) + -48)<<24>>24;
     $39 = ($$off$i$i&255)<(10);
     $or$cond12$i = $38 | $39;
     if (!($or$cond12$i)) {
      switch ($36<<24>>24) {
      case 64: case 45: case 95:  {
       break;
      }
      default: {
       $$010$lcssa = $7;
       break L1;
      }
      }
     }
    }
    $40 = ($41|0)<(1);
    if ($40) {
     $$010$lcssa = $7;
     break L1;
    }
    if ($10) {
     $$027$i$i = 1;
    } else {
     $42 = $8 & 32;
     $43 = ($42|0)==(0);
     if ($43) {
      $$027$i$i = 2;
     } else {
      $44 = $8 >>> 4;
      $45 = $44 & 1;
      $46 = (($45) + 3)|0;
      $$027$i$i = $46;
     }
    }
    $47 = (($7) + ($$027$i$i)|0);
    HEAP32[$1>>2] = $47;
    $48 = (($41) - ($$027$i$i))|0;
    HEAP32[$3>>2] = $48;
    $49 = ($48|0)<(1);
    if ($49) {
     $$010$lcssa = $47;
     break;
    } else {
     $41 = $48;$7 = $47;
    }
   }
  }
 } while(0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $50 = $2;
 $51 = $$010$lcssa;
 $52 = (($51) - ($50))|0;
 $53 = ($52>>>0)>(4294967279);
 if ($53) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $54 = ($52>>>0)<(11);
 if ($54) {
  $55 = $52&255;
  $56 = ((($0)) + 11|0);
  HEAP8[$56>>0] = $55;
  $$021$ph$i$i = $0;
 } else {
  $57 = (($52) + 16)|0;
  $58 = $57 & -16;
  $59 = (__Znwj($58)|0);
  HEAP32[$0>>2] = $59;
  $60 = $58 | -2147483648;
  $61 = ((($0)) + 8|0);
  HEAP32[$61>>2] = $60;
  $62 = ((($0)) + 4|0);
  HEAP32[$62>>2] = $52;
  $$021$ph$i$i = $59;
 }
 $63 = ($2|0)==($$010$lcssa|0);
 if ($63) {
  $$021$lcssa$i$i = $$021$ph$i$i;
  HEAP8[$$021$lcssa$i$i>>0] = 0;
  return;
 } else {
  $$02122$i$i = $$021$ph$i$i;$$023$i$i = $2;
 }
 while(1) {
  $64 = HEAP8[$$023$i$i>>0]|0;
  HEAP8[$$02122$i$i>>0] = $64;
  $65 = ((($$023$i$i)) + 1|0);
  $66 = ((($$02122$i$i)) + 1|0);
  $67 = ($65|0)==($$010$lcssa|0);
  if ($67) {
   break;
  } else {
   $$02122$i$i = $66;$$023$i$i = $65;
  }
 }
 $scevgep25$i$i = (($$021$ph$i$i) + ($52)|0);
 $$021$lcssa$i$i = $scevgep25$i$i;
 HEAP8[$$021$lcssa$i$i>>0] = 0;
 return;
}
function __ZN12Utf8Iterator15nextToEndOfLineEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $$012$lcssa = 0, $$021$lcssa$i$i = 0, $$021$ph$i$i = 0, $$02122$i$i = 0, $$023$i$i = 0, $$027$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep25$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(1);
 L1: do {
  if ($5) {
   $$012$lcssa = $2;
  } else {
   $43 = $4;$7 = $2;
   while(1) {
    $6 = HEAP8[$7>>0]|0;
    $8 = $6 << 24 >> 24;
    $9 = $8 & 128;
    $10 = ($9|0)==(0);
    do {
     if ($10) {
      $$0$i$i = $8;
     } else {
      $11 = $8 & 32;
      $12 = ($11|0)==(0);
      $13 = ((($7)) + 1|0);
      $14 = HEAP8[$13>>0]|0;
      $15 = $14 & 63;
      $16 = $15&255;
      if ($12) {
       $39 = $8 << 6;
       $40 = $39 & 1984;
       $41 = $16 | $40;
       $$0$i$i = $41;
       break;
      }
      $17 = $8 & 16;
      $18 = ($17|0)==(0);
      $19 = ((($7)) + 2|0);
      $20 = HEAP8[$19>>0]|0;
      $21 = $20 & 63;
      $22 = $21&255;
      if ($18) {
       $34 = $8 << 12;
       $35 = $34 & 61440;
       $36 = $16 << 6;
       $37 = $36 | $35;
       $38 = $37 | $22;
       $$0$i$i = $38;
       break;
      } else {
       $23 = $8 << 18;
       $24 = $23 & 1835008;
       $25 = $16 << 12;
       $26 = $25 | $24;
       $27 = $22 << 6;
       $28 = $26 | $27;
       $29 = ((($7)) + 3|0);
       $30 = HEAP8[$29>>0]|0;
       $31 = $30 & 63;
       $32 = $31&255;
       $33 = $28 | $32;
       $$0$i$i = $33;
       break;
      }
     }
    } while(0);
    switch ($$0$i$i|0) {
    case 10: case 13:  {
     $$012$lcssa = $7;
     break L1;
     break;
    }
    default: {
    }
    }
    $42 = ($43|0)<(1);
    if ($42) {
     $$012$lcssa = $7;
     break L1;
    }
    if ($10) {
     $$027$i$i = 1;
    } else {
     $44 = $8 & 32;
     $45 = ($44|0)==(0);
     if ($45) {
      $$027$i$i = 2;
     } else {
      $46 = $8 >>> 4;
      $47 = $46 & 1;
      $48 = (($47) + 3)|0;
      $$027$i$i = $48;
     }
    }
    $49 = (($7) + ($$027$i$i)|0);
    HEAP32[$1>>2] = $49;
    $50 = (($43) - ($$027$i$i))|0;
    HEAP32[$3>>2] = $50;
    $51 = ($50|0)<(1);
    if ($51) {
     $$012$lcssa = $49;
     break L1;
    } else {
     $43 = $50;$7 = $49;
    }
   }
  }
 } while(0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $52 = $2;
 $53 = $$012$lcssa;
 $54 = (($53) - ($52))|0;
 $55 = ($54>>>0)>(4294967279);
 if ($55) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $56 = ($54>>>0)<(11);
 if ($56) {
  $57 = $54&255;
  $58 = ((($0)) + 11|0);
  HEAP8[$58>>0] = $57;
  $$021$ph$i$i = $0;
 } else {
  $59 = (($54) + 16)|0;
  $60 = $59 & -16;
  $61 = (__Znwj($60)|0);
  HEAP32[$0>>2] = $61;
  $62 = $60 | -2147483648;
  $63 = ((($0)) + 8|0);
  HEAP32[$63>>2] = $62;
  $64 = ((($0)) + 4|0);
  HEAP32[$64>>2] = $54;
  $$021$ph$i$i = $61;
 }
 $65 = ($2|0)==($$012$lcssa|0);
 if ($65) {
  $$021$lcssa$i$i = $$021$ph$i$i;
  HEAP8[$$021$lcssa$i$i>>0] = 0;
  return;
 } else {
  $$02122$i$i = $$021$ph$i$i;$$023$i$i = $2;
 }
 while(1) {
  $66 = HEAP8[$$023$i$i>>0]|0;
  HEAP8[$$02122$i$i>>0] = $66;
  $67 = ((($$023$i$i)) + 1|0);
  $68 = ((($$02122$i$i)) + 1|0);
  $69 = ($67|0)==($$012$lcssa|0);
  if ($69) {
   break;
  } else {
   $$02122$i$i = $68;$$023$i$i = $67;
  }
 }
 $scevgep25$i$i = (($$021$ph$i$i) + ($54)|0);
 $$021$lcssa$i$i = $scevgep25$i$i;
 HEAP8[$$021$lcssa$i$i>>0] = 0;
 return;
}
function __Z21stringAppendCodepointRNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEDi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 HEAP32[$2>>2] = $1;
 $6 = ($1>>>0)<(128);
 if ($6) {
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($0,$2,1)|0);
  STACKTOP = sp;return;
 }
 $7 = ($1>>>0)<(2048);
 if ($7) {
  $8 = $1 >>> 6;
  $9 = $8 | 192;
  $10 = $9&255;
  HEAP8[$3>>0] = $10;
  $11 = $1 & 63;
  $12 = $11 | 128;
  $13 = $12&255;
  $14 = ((($3)) + 1|0);
  HEAP8[$14>>0] = $13;
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($0,$3,2)|0);
  STACKTOP = sp;return;
 }
 $15 = ($1>>>0)<(65536);
 if ($15) {
  $16 = $1 >>> 12;
  $17 = $16 | 224;
  $18 = $17&255;
  HEAP8[$4>>0] = $18;
  $19 = $1 >>> 6;
  $20 = $19 & 63;
  $21 = $20 | 128;
  $22 = $21&255;
  $23 = ((($4)) + 1|0);
  HEAP8[$23>>0] = $22;
  $24 = $1 & 63;
  $25 = $24 | 128;
  $26 = $25&255;
  $27 = ((($4)) + 2|0);
  HEAP8[$27>>0] = $26;
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($0,$4,3)|0);
  STACKTOP = sp;return;
 }
 $28 = ($1>>>0)<(1114112);
 if (!($28)) {
  ___assert_fail((22544|0),(21978|0),345,(22017|0));
  // unreachable;
 }
 $29 = $1 >>> 18;
 $30 = $29 | 240;
 $31 = $30&255;
 HEAP8[$5>>0] = $31;
 $32 = $1 >>> 12;
 $33 = $32 & 63;
 $34 = $33 | 128;
 $35 = $34&255;
 $36 = ((($5)) + 1|0);
 HEAP8[$36>>0] = $35;
 $37 = $1 >>> 6;
 $38 = $37 & 63;
 $39 = $38 | 128;
 $40 = $39&255;
 $41 = ((($5)) + 2|0);
 HEAP8[$41>>0] = $40;
 $42 = $1 & 63;
 $43 = $42 | 128;
 $44 = $43&255;
 $45 = ((($5)) + 3|0);
 HEAP8[$45>>0] = $44;
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($0,$5,4)|0);
 STACKTOP = sp;return;
}
function __ZN6ButtonD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4844);
 $1 = ((($0)) + 464|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 448|0);
 $4 = ($2|0)==($3|0);
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_vi[$7 & 1023]($2);
  __ZN5LabelD2Ev($0);
  return;
 }
 $8 = ($2|0)==(0|0);
 if ($8) {
  __ZN5LabelD2Ev($0);
  return;
 }
 $9 = HEAP32[$2>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 FUNCTION_TABLE_vi[$11 & 1023]($2);
 __ZN5LabelD2Ev($0);
 return;
}
function __ZN6ButtonD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (4844);
 $1 = ((($0)) + 464|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 448|0);
 $4 = ($2|0)==($3|0);
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_vi[$7 & 1023]($2);
 } else {
  $8 = ($2|0)==(0|0);
  if (!($8)) {
   $9 = HEAP32[$2>>2]|0;
   $10 = ((($9)) + 20|0);
   $11 = HEAP32[$10>>2]|0;
   FUNCTION_TABLE_vi[$11 & 1023]($2);
  }
 }
 __ZN5LabelD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN6Button12onTouchEventEii6_POINT($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($1|0)==(0);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($6)) + 196|0);
  $8 = HEAP32[$7>>2]|0;
  FUNCTION_TABLE_vii[$8 & 1023]($0,1);
  STACKTOP = sp;return 1;
 }
 $9 = $1 | 1;
 $10 = ($9|0)==(3);
 if ($10) {
  $11 = HEAP32[$0>>2]|0;
  $12 = ((($11)) + 196|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$13 & 1023]($0,0);
 }
 $14 = ($1|0)==(6);
 if (!($14)) {
  STACKTOP = sp;return 1;
 }
 $15 = ((($0)) + 464|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  STACKTOP = sp;return 1;
 }
 HEAP32[$4>>2] = $0;
 $18 = HEAP32[$16>>2]|0;
 $19 = ((($18)) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 FUNCTION_TABLE_vii[$20 & 1023]($16,$4);
 STACKTOP = sp;return 1;
}
function __ZN6Button16applyStyleValuesERKNSt3__26vectorINS0_4pairINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP10StyleValueEENS6_ISB_EEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$06 = 0, $$07 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy2 = sp + 12|0;
 $$byval_copy1 = sp + 8|0;
 $$byval_copy = sp + 49|0;
 $2 = sp + 48|0;
 $3 = sp + 4|0;
 $4 = sp + 32|0;
 $5 = sp + 16|0;
 $6 = sp;
 __ZN4View16applyStyleValuesERKNSt3__26vectorINS0_4pairINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP10StyleValueEENS6_ISB_EEEE($0,$1);
 $7 = ((($0)) + 324|0);
 $8 = ((($0)) + 229|0);
 $9 = HEAP8[$8>>0]|0;
 HEAP8[$2>>0] = $9;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$2>>0]|0;
 __ZN12TextRenderer10setGravityE7GRAVITY($7,$$byval_copy);
 $10 = ((($0)) + 476|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if (!($12)) {
  $13 = HEAP32[$0>>2]|0;
  $14 = ((($13)) + 116|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (__ZN6ObjectnwEj(104)|0);
  $17 = ((($0)) + 472|0);
  $18 = HEAP32[$17>>2]|0;
  __THREW__ = 0;
  $19 = (+invoke_did(537,(28952|0),2.0));
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   $22 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $23 = (+invoke_did(537,(28952|0),6.0));
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if (!($25)) {
    __THREW__ = 0;
    invoke_viiidid(714,($16|0),($0|0),($18|0),(+$19),($22|0),(+$23));
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if (!($27)) {
     FUNCTION_TABLE_vii[$15 & 1023]($0,$16);
     $28 = HEAP32[$0>>2]|0;
     $29 = ((($28)) + 120|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (__ZN6ObjectnwEj(104)|0);
     $32 = ((($0)) + 480|0);
     $33 = HEAP32[$32>>2]|0;
     __THREW__ = 0;
     $34 = (+invoke_did(537,(28952|0),2.0));
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if (!($36)) {
      $37 = HEAP32[$10>>2]|0;
      __THREW__ = 0;
      $38 = (+invoke_did(537,(28952|0),6.0));
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if (!($40)) {
       __THREW__ = 0;
       invoke_viiidid(714,($31|0),($0|0),($33|0),(+$34),($37|0),(+$38));
       $41 = __THREW__; __THREW__ = 0;
       $42 = $41&1;
       if (!($42)) {
        HEAP16[$3>>1] = 16;
        $43 = ((($3)) + 2|0);
        HEAP16[$43>>1] = 16;
        ;HEAP16[$$byval_copy1>>1]=HEAP16[$3>>1]|0;HEAP16[$$byval_copy1+2>>1]=HEAP16[$3+2>>1]|0;
        FUNCTION_TABLE_viii[$30 & 1023]($0,$31,$$byval_copy1);
        STACKTOP = sp;return;
       }
      }
     }
     $46 = ___cxa_find_matching_catch_2()|0;
     $47 = tempRet0;
     __ZdlPv($31);
     $$06 = $47;$$07 = $46;
     ___resumeException($$07|0);
     // unreachable;
    }
   }
  }
  $44 = ___cxa_find_matching_catch_2()|0;
  $45 = tempRet0;
  __ZdlPv($16);
  $$06 = $45;$$07 = $44;
  ___resumeException($$07|0);
  // unreachable;
 }
 $48 = ((($0)) + 472|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(0);
 do {
  if (!($50)) {
   $51 = HEAP32[$0>>2]|0;
   $52 = ((($51)) + 116|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (__ZN6ObjectnwEj(72)|0);
   $55 = HEAP32[$0>>2]|0;
   $56 = ((($55)) + 48|0);
   $57 = HEAP32[$56>>2]|0;
   __THREW__ = 0;
   invoke_vii($57|0,($4|0),($0|0));
   $58 = __THREW__; __THREW__ = 0;
   $59 = $58&1;
   if (!($59)) {
    $60 = HEAP32[$48>>2]|0;
    __THREW__ = 0;
    invoke_viiii(715,($54|0),($0|0),($4|0),($60|0));
    $61 = __THREW__; __THREW__ = 0;
    $62 = $61&1;
    if (!($62)) {
     __THREW__ = 0;
     invoke_vii($53|0,($0|0),($54|0));
     $63 = __THREW__; __THREW__ = 0;
     $64 = $63&1;
     if (!($64)) {
      break;
     }
     $65 = ___cxa_find_matching_catch_2()|0;
     $66 = tempRet0;
     $$06 = $66;$$07 = $65;
     ___resumeException($$07|0);
     // unreachable;
    }
   }
   $67 = ___cxa_find_matching_catch_2()|0;
   $68 = tempRet0;
   __ZdlPv($54);
   $$06 = $68;$$07 = $67;
   ___resumeException($$07|0);
   // unreachable;
  }
 } while(0);
 $69 = ((($0)) + 480|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70|0)==(0);
 if ($71) {
  STACKTOP = sp;return;
 }
 $72 = HEAP32[$0>>2]|0;
 $73 = ((($72)) + 120|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (__ZN6ObjectnwEj(72)|0);
 $76 = HEAP32[$0>>2]|0;
 $77 = ((($76)) + 48|0);
 $78 = HEAP32[$77>>2]|0;
 __THREW__ = 0;
 invoke_vii($78|0,($5|0),($0|0));
 $79 = __THREW__; __THREW__ = 0;
 $80 = $79&1;
 if (!($80)) {
  $81 = HEAP32[$69>>2]|0;
  __THREW__ = 0;
  invoke_viiii(715,($75|0),($0|0),($5|0),($81|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  if (!($83)) {
   HEAP16[$6>>1] = 16;
   $84 = ((($6)) + 2|0);
   HEAP16[$84>>1] = 16;
   __THREW__ = 0;
   ;HEAP16[$$byval_copy2>>1]=HEAP16[$6>>1]|0;HEAP16[$$byval_copy2+2>>1]=HEAP16[$6+2>>1]|0;
   invoke_viii($74|0,($0|0),($75|0),($$byval_copy2|0));
   $85 = __THREW__; __THREW__ = 0;
   $86 = $85&1;
   if ($86) {
    $87 = ___cxa_find_matching_catch_2()|0;
    $88 = tempRet0;
    $$06 = $88;$$07 = $87;
    ___resumeException($$07|0);
    // unreachable;
   } else {
    STACKTOP = sp;return;
   }
  }
 }
 $89 = ___cxa_find_matching_catch_2()|0;
 $90 = tempRet0;
 __ZdlPv($75);
 $$06 = $90;$$07 = $89;
 ___resumeException($$07|0);
 // unreachable;
}
function __ZN6Button15applyStyleValueERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP10StyleValue($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$pre = 0, $$pre14 = 0, $$pre15 = 0, $$pre16 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $4&255;
 $9 = $5 ? $7 : $8;
 $10 = ($9|0)==(10);
 do {
  if ($10) {
   __THREW__ = 0;
   $11 = (invoke_iiiiii(546,($1|0),0,-1,(23241|0),10)|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $14 = ___cxa_find_matching_catch_3(0|0)|0;
    $15 = tempRet0;
    ___clang_call_terminate($14);
    // unreachable;
   }
   $16 = ($11|0)==(0);
   if (!($16)) {
    $$pre = HEAP8[$3>>0]|0;
    $$pre14 = HEAP32[$6>>2]|0;
    $21 = $$pre;$24 = $$pre14;
    break;
   }
   $17 = ((($2)) + 24|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($0)) + 472|0);
   HEAP32[$19>>2] = $18;
   $$0 = 1;
   return ($$0|0);
  } else {
   $21 = $4;$24 = $7;
  }
 } while(0);
 $20 = ($21<<24>>24)<(0);
 $22 = $21&255;
 $23 = $20 ? $24 : $22;
 $25 = ($23|0)==(13);
 do {
  if ($25) {
   __THREW__ = 0;
   $26 = (invoke_iiiiii(546,($1|0),0,-1,(22039|0),13)|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    $29 = ___cxa_find_matching_catch_3(0|0)|0;
    $30 = tempRet0;
    ___clang_call_terminate($29);
    // unreachable;
   }
   $31 = ($26|0)==(0);
   if (!($31)) {
    $$pre15 = HEAP8[$3>>0]|0;
    $$pre16 = HEAP32[$6>>2]|0;
    $36 = $$pre15;$39 = $$pre16;
    break;
   }
   $32 = ((($2)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($0)) + 476|0);
   HEAP32[$34>>2] = $33;
   $$0 = 1;
   return ($$0|0);
  } else {
   $36 = $21;$39 = $24;
  }
 } while(0);
 $35 = ($36<<24>>24)<(0);
 $37 = $36&255;
 $38 = $35 ? $39 : $37;
 $40 = ($38|0)==(14);
 if ($40) {
  __THREW__ = 0;
  $41 = (invoke_iiiiii(546,($1|0),0,-1,(22053|0),14)|0);
  $42 = __THREW__; __THREW__ = 0;
  $43 = $42&1;
  if ($43) {
   $44 = ___cxa_find_matching_catch_3(0|0)|0;
   $45 = tempRet0;
   ___clang_call_terminate($44);
   // unreachable;
  }
  $46 = ($41|0)==(0);
  if ($46) {
   $47 = ((($2)) + 24|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($0)) + 480|0);
   HEAP32[$49>>2] = $48;
   $$0 = 1;
   return ($$0|0);
  }
 }
 $50 = (__ZN5Label15applyStyleValueERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP10StyleValue($0,$1,$2)|0);
 $$0 = $50;
 return ($$0|0);
}
function __ZN5Label7getTextEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 332|0);
 return ($1|0);
}
function __ZN13ToolbarButtonD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (5136);
 $1 = ((($0)) + 344|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 328|0);
 $4 = ($2|0)==($3|0);
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_vi[$7 & 1023]($2);
  __ZN4ViewD2Ev($0);
  return;
 }
 $8 = ($2|0)==(0|0);
 if ($8) {
  __ZN4ViewD2Ev($0);
  return;
 }
 $9 = HEAP32[$2>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 FUNCTION_TABLE_vi[$11 & 1023]($2);
 __ZN4ViewD2Ev($0);
 return;
}
function __ZN13ToolbarButtonD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (5136);
 $1 = ((($0)) + 344|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 328|0);
 $4 = ($2|0)==($3|0);
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_vi[$7 & 1023]($2);
 } else {
  $8 = ($2|0)==(0|0);
  if (!($8)) {
   $9 = HEAP32[$2>>2]|0;
   $10 = ((($9)) + 20|0);
   $11 = HEAP32[$10>>2]|0;
   FUNCTION_TABLE_vi[$11 & 1023]($2);
  }
 }
 __ZN4ViewD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN13ToolbarButton12onTouchEventEii6_POINT($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($1|0)==(0);
 if ($5) {
  $6 = ((($0)) + 308|0);
  HEAPF32[$6>>2] = 0.5;
  $7 = HEAP32[$0>>2]|0;
  $8 = ((($7)) + 176|0);
  $9 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_vi[$9 & 1023]($0);
  STACKTOP = sp;return 1;
 }
 $10 = $1 | 1;
 $11 = ($10|0)==(3);
 if ($11) {
  $12 = ((($0)) + 76|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if ($14) {
   $15 = HEAP32[$0>>2]|0;
   $16 = ((($15)) + 236|0);
   $17 = HEAP32[$16>>2]|0;
   FUNCTION_TABLE_vidd[$17 & 1023]($0,1.0,350.0);
  }
 }
 $18 = ($1|0)==(6);
 if (!($18)) {
  STACKTOP = sp;return 1;
 }
 $19 = ((($0)) + 344|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  STACKTOP = sp;return 1;
 }
 HEAP32[$4>>2] = $0;
 $22 = HEAP32[$20>>2]|0;
 $23 = ((($22)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 FUNCTION_TABLE_vii[$24 & 1023]($20,$4);
 STACKTOP = sp;return 1;
}
function __GLOBAL__sub_I_button_cpp() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = sp + 12|0;
 $1 = sp;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $2 = ((($1)) + 11|0);
 HEAP8[$2>>0] = 6;
 ;HEAP8[$1>>0]=HEAP8[22092>>0]|0;HEAP8[$1+1>>0]=HEAP8[22092+1>>0]|0;HEAP8[$1+2>>0]=HEAP8[22092+2>>0]|0;HEAP8[$1+3>>0]=HEAP8[22092+3>>0]|0;HEAP8[$1+4>>0]=HEAP8[22092+4>>0]|0;HEAP8[$1+5>>0]=HEAP8[22092+5>>0]|0;
 $3 = ((($1)) + 6|0);
 HEAP8[$3>>0] = 0;
 __THREW__ = 0;
 invoke_vii(716,(31704|0),($1|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  $11 = HEAP8[$2>>0]|0;
  $12 = ($11<<24>>24)<(0);
  if (!($12)) {
   ___resumeException($9|0);
   // unreachable;
  }
  $13 = HEAP32[$1>>2]|0;
  __ZdlPv($13);
  ___resumeException($9|0);
  // unreachable;
 }
 $6 = HEAP8[$2>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = HEAP32[$1>>2]|0;
  __ZdlPv($8);
 }
 $14 = (__Znwj(16)|0);
 HEAP32[$0>>2] = $14;
 $15 = ((($0)) + 8|0);
 HEAP32[$15>>2] = -2147483632;
 $16 = ((($0)) + 4|0);
 HEAP32[$16>>2] = 13;
 dest=$14; src=22099; stop=dest+13|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $17 = ((($14)) + 13|0);
 HEAP8[$17>>0] = 0;
 __THREW__ = 0;
 invoke_vii(717,(31705|0),($0|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $24 = ___cxa_find_matching_catch_2()|0;
  $25 = tempRet0;
  $26 = ((($0)) + 11|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = ($27<<24>>24)<(0);
  if (!($28)) {
   ___resumeException($24|0);
   // unreachable;
  }
  $29 = HEAP32[$0>>2]|0;
  __ZdlPv($29);
  ___resumeException($24|0);
  // unreachable;
 } else {
  $20 = ((($0)) + 11|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = ($21<<24>>24)<(0);
  if (!($22)) {
   STACKTOP = sp;return;
  }
  $23 = HEAP32[$0>>2]|0;
  __ZdlPv($23);
  STACKTOP = sp;return;
 }
}
function __ZN14ClassRegistrarI6ButtonEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp;
 $4 = HEAP32[7778]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (__Znwj(12)|0);
  $7 = ((($6)) + 4|0);
  HEAP32[$7>>2] = 0;
  $8 = ((($6)) + 8|0);
  HEAP32[$8>>2] = 0;
  HEAP32[$6>>2] = $7;
  HEAP32[7778] = $6;
  $10 = $6;
 } else {
  $10 = $4;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 $9 = ((($3)) + 12|0);
 HEAP32[$9>>2] = (718);
 __THREW__ = 0;
 $11 = (invoke_iiii(535,($10|0),($2|0),($3|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if (!($13)) {
   $14 = HEAP32[$11>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    __THREW__ = 0;
    $16 = (invoke_ii(527,32)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     break;
    }
    $19 = ((($16)) + 16|0);
    ;HEAP32[$19>>2]=HEAP32[$3>>2]|0;HEAP32[$19+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$3+8>>2]|0;
    ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
    $20 = ((($16)) + 28|0);
    $21 = HEAP32[$9>>2]|0;
    HEAP32[$20>>2] = $21;
    $22 = HEAP32[$2>>2]|0;
    HEAP32[$16>>2] = 0;
    $23 = ((($16)) + 4|0);
    HEAP32[$23>>2] = 0;
    $24 = ((($16)) + 8|0);
    HEAP32[$24>>2] = $22;
    HEAP32[$11>>2] = $16;
    $25 = HEAP32[$10>>2]|0;
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0|0);
    if ($27) {
     $31 = $16;
    } else {
     $28 = $26;
     HEAP32[$10>>2] = $28;
     $$pre$i$i$i$i$i$i = HEAP32[$11>>2]|0;
     $31 = $$pre$i$i$i$i$i$i;
    }
    $29 = ((($10)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($30,$31);
    $32 = ((($10)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + 1)|0;
    HEAP32[$32>>2] = $34;
   }
   $35 = ((($3)) + 11|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = ($36<<24>>24)<(0);
   if (!($37)) {
    STACKTOP = sp;return;
   }
   $38 = HEAP32[$3>>2]|0;
   __ZdlPv($38);
   STACKTOP = sp;return;
  }
 } while(0);
 $39 = ___cxa_find_matching_catch_2()|0;
 $40 = tempRet0;
 $41 = ((($3)) + 11|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = ($42<<24>>24)<(0);
 if (!($43)) {
  ___resumeException($39|0);
  // unreachable;
 }
 $44 = HEAP32[$3>>2]|0;
 __ZdlPv($44);
 ___resumeException($39|0);
 // unreachable;
}
function __ZN14ClassRegistrarI13ToolbarButtonEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp;
 $4 = HEAP32[7778]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (__Znwj(12)|0);
  $7 = ((($6)) + 4|0);
  HEAP32[$7>>2] = 0;
  $8 = ((($6)) + 8|0);
  HEAP32[$8>>2] = 0;
  HEAP32[$6>>2] = $7;
  HEAP32[7778] = $6;
  $10 = $6;
 } else {
  $10 = $4;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 $9 = ((($3)) + 12|0);
 HEAP32[$9>>2] = (719);
 __THREW__ = 0;
 $11 = (invoke_iiii(535,($10|0),($2|0),($3|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if (!($13)) {
   $14 = HEAP32[$11>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    __THREW__ = 0;
    $16 = (invoke_ii(527,32)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     break;
    }
    $19 = ((($16)) + 16|0);
    ;HEAP32[$19>>2]=HEAP32[$3>>2]|0;HEAP32[$19+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$3+8>>2]|0;
    ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
    $20 = ((($16)) + 28|0);
    $21 = HEAP32[$9>>2]|0;
    HEAP32[$20>>2] = $21;
    $22 = HEAP32[$2>>2]|0;
    HEAP32[$16>>2] = 0;
    $23 = ((($16)) + 4|0);
    HEAP32[$23>>2] = 0;
    $24 = ((($16)) + 8|0);
    HEAP32[$24>>2] = $22;
    HEAP32[$11>>2] = $16;
    $25 = HEAP32[$10>>2]|0;
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0|0);
    if ($27) {
     $31 = $16;
    } else {
     $28 = $26;
     HEAP32[$10>>2] = $28;
     $$pre$i$i$i$i$i$i = HEAP32[$11>>2]|0;
     $31 = $$pre$i$i$i$i$i$i;
    }
    $29 = ((($10)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($30,$31);
    $32 = ((($10)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + 1)|0;
    HEAP32[$32>>2] = $34;
   }
   $35 = ((($3)) + 11|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = ($36<<24>>24)<(0);
   if (!($37)) {
    STACKTOP = sp;return;
   }
   $38 = HEAP32[$3>>2]|0;
   __ZdlPv($38);
   STACKTOP = sp;return;
  }
 } while(0);
 $39 = ___cxa_find_matching_catch_2()|0;
 $40 = tempRet0;
 $41 = ((($3)) + 11|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = ($42<<24>>24)<(0);
 if (!($43)) {
  ___resumeException($39|0);
  // unreachable;
 }
 $44 = HEAP32[$3>>2]|0;
 __ZdlPv($44);
 ___resumeException($39|0);
 // unreachable;
}
function __ZN14ClassRegistrarI13ToolbarButtonE7createTEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN6ObjectnwEj(352)|0);
 _memset(($0|0),0,352)|0;
 __THREW__ = 0;
 invoke_vi(720,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  __ZdlPv($0);
  ___resumeException($4|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = (5136);
  $3 = ((($0)) + 344|0);
  HEAP32[$3>>2] = 0;
  return ($0|0);
 }
 return (0)|0;
}
function __ZN14ClassRegistrarI6ButtonE7createTEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN6ObjectnwEj(488)|0);
 __THREW__ = 0;
 invoke_vi(721,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  __ZdlPv($0);
  ___resumeException($5|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = (4844);
  $3 = ((($0)) + 464|0);
  HEAP32[$3>>2] = 0;
  $4 = ((($0)) + 229|0);
  HEAP8[$4>>0] = 34;
  return ($0|0);
 }
 return (0)|0;
}
function __ZN8EditTextD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (5400);
 $1 = ((($0)) + 444|0);
 HEAP32[$1>>2] = (5724);
 $2 = ((($0)) + 468|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  __THREW__ = 0;
  invoke_vi(525,($3|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   $7 = ___cxa_find_matching_catch_3(0|0)|0;
   $8 = tempRet0;
   ___clang_call_terminate($7);
   // unreachable;
  }
 }
 $9 = ((($0)) + 464|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  __THREW__ = 0;
  invoke_vi(525,($10|0));
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  }
 }
 $16 = ((($0)) + 460|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  __ZN5LabelD2Ev($0);
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($17|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch_3(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  __ZN5LabelD2Ev($0);
  return;
 }
}
function __ZN8EditTextD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (5400);
 $1 = ((($0)) + 444|0);
 HEAP32[$1>>2] = (5724);
 $2 = ((($0)) + 468|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  __THREW__ = 0;
  invoke_vi(525,($3|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   $7 = ___cxa_find_matching_catch_3(0|0)|0;
   $8 = tempRet0;
   ___clang_call_terminate($7);
   // unreachable;
  }
 }
 $9 = ((($0)) + 464|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  __THREW__ = 0;
  invoke_vi(525,($10|0));
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  }
 }
 $16 = ((($0)) + 460|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  __ZN5LabelD2Ev($0);
  __ZdlPv($0);
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($17|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch_3(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  __ZN5LabelD2Ev($0);
  __ZdlPv($0);
  return;
 }
}
function __ZN8EditText15updateRenderOpsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5Label15updateRenderOpsEv($0);
 __ZN8EditText12updateCursorEv($0);
 return;
}
function __ZN8EditText10setPaddingE11_EDGEINSETS($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 $2 = ((($0)) + 458|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  $5 = (+__ZN3App2dpEf(28952,16.0));
  $6 = ((($1)) + 8|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$6>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$6+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$6+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$6+3>>0];$7 = +HEAPF32[tempDoublePtr>>2];
  $8 = $5 + $7;
  HEAPF32[tempDoublePtr>>2]=$8;HEAP8[$6>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$6+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$6+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$6+3>>0]=HEAP8[tempDoublePtr+3>>0];
 }
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 __ZN4View10setPaddingE11_EDGEINSETS($0,$$byval_copy);
 STACKTOP = sp;return;
}
function __ZN8EditText6layoutEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5Label6layoutEv($0);
 return;
}
function __ZN8EditText16detachFromWindowEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 228|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($0)|0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = ((($5)) + 232|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_vi[$7 & 1023]($0);
 }
 __ZN4View16detachFromWindowEv($0);
 $8 = ((($0)) + 460|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  return;
 }
 $11 = HEAP32[$9>>2]|0;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 FUNCTION_TABLE_vi[$13 & 1023]($9);
 return;
}
function __ZN8EditText12onTouchEventEii6_POINT($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($1|0)==(6);
 if (!($5)) {
  STACKTOP = sp;return 1;
 }
 $6 = ((($0)) + 468|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = ((($7)) + 12|0);
  $10 = (__ZN4RECT8containsERK6_POINT($9,$3)|0);
  if ($10) {
   $11 = HEAP32[$0>>2]|0;
   $12 = ((($11)) + 284|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($4)) + 11|0);
   ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
   __THREW__ = 0;
   invoke_vii($13|0,($0|0),($4|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if ($16) {
    $20 = ___cxa_find_matching_catch_2()|0;
    $21 = tempRet0;
    $22 = HEAP8[$14>>0]|0;
    $23 = ($22<<24>>24)<(0);
    if (!($23)) {
     ___resumeException($20|0);
     // unreachable;
    }
    $24 = HEAP32[$4>>2]|0;
    __ZdlPv($24);
    ___resumeException($20|0);
    // unreachable;
   } else {
    $17 = HEAP8[$14>>0]|0;
    $18 = ($17<<24>>24)<(0);
    if (!($18)) {
     STACKTOP = sp;return 1;
    }
    $19 = HEAP32[$4>>2]|0;
    __ZdlPv($19);
    STACKTOP = sp;return 1;
   }
  }
 }
 $25 = HEAP32[$0>>2]|0;
 $26 = ((($25)) + 224|0);
 $27 = HEAP32[$26>>2]|0;
 (FUNCTION_TABLE_ii[$27 & 1023]($0)|0);
 STACKTOP = sp;return 1;
}
function __ZN8EditText23getKeyboardInputHandlerEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 444|0);
 return ($1|0);
}
function __ZN8EditText20becomeFirstResponderEv($0) {
 $0 = $0|0;
 var $$pre$i6 = 0, $$sroa$017$0$$sroa_idx = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$520$0$$sroa_idx = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $2 = (__ZN4View20becomeFirstResponderEv($0)|0);
 if (!($2)) {
  STACKTOP = sp;return ($2|0);
 }
 $3 = $0;
 $4 = ((($1)) + 16|0);
 HEAP32[$1>>2] = (5760);
 $$sroa$017$0$$sroa_idx = ((($1)) + 4|0);
 HEAP32[$$sroa$017$0$$sroa_idx>>2] = (722);
 $$sroa$4$0$$sroa_idx = ((($1)) + 8|0);
 HEAP32[$$sroa$4$0$$sroa_idx>>2] = 0;
 $$sroa$520$0$$sroa_idx = ((($1)) + 12|0);
 HEAP32[$$sroa$520$0$$sroa_idx>>2] = $3;
 HEAP32[$4>>2] = $1;
 __THREW__ = 0;
 $5 = (invoke_iiii(532,($1|0),500,1)|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if (!($7)) {
   $8 = ((($0)) + 460|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==($5|0);
   if (!($10)) {
    $11 = ($9|0)==(0|0);
    if (!($11)) {
     __THREW__ = 0;
     invoke_vi(525,($9|0));
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if ($13) {
      break;
     }
    }
    HEAP32[$8>>2] = $5;
    $14 = ($5|0)==(0|0);
    if (!($14)) {
     __THREW__ = 0;
     invoke_vi(526,($5|0));
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if ($16) {
      break;
     }
    }
   }
   $17 = HEAP32[$4>>2]|0;
   $18 = ($17|0)==($1|0);
   if ($18) {
    $19 = HEAP32[$17>>2]|0;
    $20 = ((($19)) + 16|0);
    $21 = HEAP32[$20>>2]|0;
    FUNCTION_TABLE_vi[$21 & 1023]($17);
   } else {
    $22 = ($17|0)==(0|0);
    if (!($22)) {
     $23 = HEAP32[$17>>2]|0;
     $24 = ((($23)) + 20|0);
     $25 = HEAP32[$24>>2]|0;
     FUNCTION_TABLE_vi[$25 & 1023]($17);
    }
   }
   $26 = ((($0)) + 464|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    __ZN8EditText12updateCursorEv($0);
    $$pre$i6 = HEAP32[$26>>2]|0;
    $30 = $$pre$i6;
   } else {
    $30 = $27;
   }
   $29 = ((($30)) + 40|0);
   $31 = HEAP32[$29>>2]|0;
   $32 = ($31|0)==(0|0);
   $33 = HEAP32[$0>>2]|0;
   if ($32) {
    $36 = ((($33)) + 160|0);
    $37 = HEAP32[$36>>2]|0;
    FUNCTION_TABLE_vii[$37 & 1023]($0,$30);
   } else {
    $34 = ((($33)) + 168|0);
    $35 = HEAP32[$34>>2]|0;
    FUNCTION_TABLE_vii[$35 & 1023]($0,$30);
   }
   $38 = HEAP32[$0>>2]|0;
   $39 = ((($38)) + 180|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = HEAP32[$26>>2]|0;
   $42 = ((($41)) + 12|0);
   FUNCTION_TABLE_vii[$40 & 1023]($0,$42);
   STACKTOP = sp;return ($2|0);
  }
 } while(0);
 $43 = ___cxa_find_matching_catch_2()|0;
 $44 = tempRet0;
 $45 = HEAP32[$4>>2]|0;
 $46 = ($45|0)==($1|0);
 if ($46) {
  $47 = HEAP32[$45>>2]|0;
  $48 = ((($47)) + 16|0);
  $49 = HEAP32[$48>>2]|0;
  FUNCTION_TABLE_vi[$49 & 1023]($45);
  ___resumeException($43|0);
  // unreachable;
 }
 $50 = ($45|0)==(0|0);
 if ($50) {
  ___resumeException($43|0);
  // unreachable;
 }
 $51 = HEAP32[$45>>2]|0;
 $52 = ((($51)) + 20|0);
 $53 = HEAP32[$52>>2]|0;
 FUNCTION_TABLE_vi[$53 & 1023]($45);
 ___resumeException($43|0);
 // unreachable;
 return (0)|0;
}
function __ZN8EditText7setTextENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated = 0, $$sroa$speculated8 = 0, $$sroa$speculated813 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5Label7setTextERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1);
 $2 = ((($0)) + 448|0);
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($1)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$2>>2]|0;
  $9 = ($7|0)<($8|0);
  $$sroa$speculated813 = $9 ? $7 : $8;
  HEAP32[$2>>2] = $$sroa$speculated813;
  $10 = ((($1)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $19 = $11;
 } else {
  $12 = $4&255;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12|0)<($13|0);
  $$sroa$speculated8 = $14 ? $12 : $13;
  HEAP32[$2>>2] = $$sroa$speculated8;
  $15 = $4&255;
  $19 = $15;
 }
 $16 = ((($0)) + 452|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($19|0)<($17|0);
 $$sroa$speculated = $18 ? $19 : $17;
 HEAP32[$16>>2] = $$sroa$speculated;
 __ZN8EditText17updateClearButtonEv($0);
 $20 = HEAP32[$0>>2]|0;
 $21 = ((($20)) + 228|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (FUNCTION_TABLE_ii[$22 & 1023]($0)|0);
 if (!($23)) {
  return;
 }
 return;
}
function __ZN8EditText10insertTextENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$07 = 0, $$ph$in = 0, $$ph$in27 = 0, $$ph29 = 0, $$ph29$v = 0, $$v = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 12|0;
 $5 = sp;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + 256|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_ii[$8 & 1023]($0)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($4,$9);
 $10 = ($3|0)>($2|0);
 if ($10) {
  $11 = ((($4)) + 11|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)<(0);
  $14 = HEAP32[$4>>2]|0;
  $$ph$in27 = (($14) + ($2)|0);
  $15 = (($14) + ($3)|0);
  $$ph$in = (($4) + ($2)|0);
  $16 = (($4) + ($3)|0);
  $$v = $13 ? $15 : $16;
  $17 = $$v;
  $$ph29$v = $13 ? $$ph$in27 : $$ph$in;
  $$ph29 = $$ph29$v;
  $18 = $13 ? $14 : $4;
  $19 = $18;
  $20 = (($$ph29) - ($19))|0;
  $21 = (($17) - ($$ph29))|0;
  __THREW__ = 0;
  (invoke_iiii(712,($4|0),($20|0),($21|0))|0);
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if ($23) {
   $24 = ___cxa_find_matching_catch_2()|0;
   $25 = tempRet0;
   $$0 = $24;$$07 = $25;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $26 = ((($1)) + 11|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = ($27<<24>>24)<(0);
   $29 = HEAP32[$1>>2]|0;
   $30 = $28 ? $29 : $1;
   $31 = ((($1)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $27&255;
   $34 = $28 ? $32 : $33;
   __THREW__ = 0;
   (invoke_iiiii(723,($4|0),($2|0),($30|0),($34|0))|0);
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   if (!($36)) {
    $37 = HEAP32[$0>>2]|0;
    $38 = ((($37)) + 284|0);
    $39 = HEAP32[$38>>2]|0;
    __THREW__ = 0;
    invoke_vii(566,($5|0),($4|0));
    $40 = __THREW__; __THREW__ = 0;
    $41 = $40&1;
    if (!($41)) {
     __THREW__ = 0;
     invoke_vii($39|0,($0|0),($5|0));
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      $54 = ___cxa_find_matching_catch_2()|0;
      $55 = tempRet0;
      $56 = ((($5)) + 11|0);
      $57 = HEAP8[$56>>0]|0;
      $58 = ($57<<24>>24)<(0);
      if (!($58)) {
       $$0 = $54;$$07 = $55;
       break;
      }
      $59 = HEAP32[$5>>2]|0;
      __ZdlPv($59);
      $$0 = $54;$$07 = $55;
      break;
     }
     $44 = ((($5)) + 11|0);
     $45 = HEAP8[$44>>0]|0;
     $46 = ($45<<24>>24)<(0);
     if ($46) {
      $47 = HEAP32[$5>>2]|0;
      __ZdlPv($47);
     }
     $48 = ((($4)) + 11|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = ($49<<24>>24)<(0);
     if (!($50)) {
      STACKTOP = sp;return;
     }
     $51 = HEAP32[$4>>2]|0;
     __ZdlPv($51);
     STACKTOP = sp;return;
    }
   }
   $52 = ___cxa_find_matching_catch_2()|0;
   $53 = tempRet0;
   $$0 = $52;$$07 = $53;
  }
 } while(0);
 $60 = ((($4)) + 11|0);
 $61 = HEAP8[$60>>0]|0;
 $62 = ($61<<24>>24)<(0);
 if (!($62)) {
  ___resumeException($$0|0);
  // unreachable;
 }
 $63 = HEAP32[$4>>2]|0;
 __ZdlPv($63);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZN8EditText14deleteBackwardEv($0) {
 $0 = $0|0;
 var $$2 = 0, $$28 = 0, $$ph$in = 0, $$ph$in56 = 0, $$ph58 = 0, $$ph58$v = 0, $$pre$phi52Z2D = 0, $$pre$phi55Z2D = 0, $$sink = 0, $$sroa$speculated = 0, $$v = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = sp + 24|0;
 $2 = sp + 12|0;
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 256|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 1023]($0)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($1,$7);
 $8 = ((($0)) + 448|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 452|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9|0)==($11|0);
 do {
  if ($12) {
   $62 = ($9|0)>(0);
   $63 = ((($1)) + 11|0);
   if ($62) {
    $64 = HEAP8[$63>>0]|0;
    $65 = ($64<<24>>24)<(0);
    $66 = HEAP32[$1>>2]|0;
    $$sink = $65 ? $66 : $1;
    $67 = $65 ? $66 : $1;
    $68 = (($$sink) + ($9)|0);
    $69 = ((($68)) + -1|0);
    $70 = $69;
    $71 = $67;
    $72 = (($70) - ($71))|0;
    __THREW__ = 0;
    (invoke_iiii(712,($1|0),($72|0),1)|0);
    $73 = __THREW__; __THREW__ = 0;
    $74 = $73&1;
    if ($74) {
     $88 = ___cxa_find_matching_catch_2()|0;
     $89 = tempRet0;
     $$2 = $88;$$28 = $89;$$pre$phi52Z2D = $63;
     label = 25;
     break;
    }
    $75 = HEAP32[$10>>2]|0;
    $76 = (($75) + -1)|0;
    HEAP32[$10>>2] = $76;
    $77 = HEAP32[$0>>2]|0;
    $78 = ((($77)) + 284|0);
    $79 = HEAP32[$78>>2]|0;
    __THREW__ = 0;
    invoke_vii(566,($3|0),($1|0));
    $80 = __THREW__; __THREW__ = 0;
    $81 = $80&1;
    if ($81) {
     $50 = ___cxa_find_matching_catch_2()|0;
     $51 = tempRet0;
     $$2 = $50;$$28 = $51;$$pre$phi52Z2D = $63;
     label = 25;
     break;
    }
    __THREW__ = 0;
    invoke_vii($79|0,($0|0),($3|0));
    $82 = __THREW__; __THREW__ = 0;
    $83 = $82&1;
    if ($83) {
     $90 = ___cxa_find_matching_catch_2()|0;
     $91 = tempRet0;
     $92 = ((($3)) + 11|0);
     $93 = HEAP8[$92>>0]|0;
     $94 = ($93<<24>>24)<(0);
     if (!($94)) {
      $$2 = $90;$$28 = $91;$$pre$phi52Z2D = $63;
      label = 25;
      break;
     }
     $95 = HEAP32[$3>>2]|0;
     __ZdlPv($95);
     $$2 = $90;$$28 = $91;$$pre$phi52Z2D = $63;
     label = 25;
     break;
    } else {
     $84 = ((($3)) + 11|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = ($85<<24>>24)<(0);
     if (!($86)) {
      $$pre$phi55Z2D = $63;
      label = 22;
      break;
     }
     $87 = HEAP32[$3>>2]|0;
     __ZdlPv($87);
     $$pre$phi55Z2D = $63;
     label = 22;
     break;
    }
   } else {
    $$pre$phi55Z2D = $63;
    label = 22;
   }
  } else {
   $13 = ($11|0)<($9|0);
   $14 = $13 ? $10 : $8;
   $15 = HEAP32[$14>>2]|0;
   $16 = ($9|0)<($11|0);
   $17 = $16 ? $10 : $8;
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($1)) + 11|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = ($20<<24>>24)<(0);
   $22 = HEAP32[$1>>2]|0;
   $$ph$in56 = (($22) + ($15)|0);
   $23 = (($22) + ($18)|0);
   $$ph$in = (($1) + ($15)|0);
   $24 = (($1) + ($18)|0);
   $$v = $21 ? $23 : $24;
   $25 = $$v;
   $$ph58$v = $21 ? $$ph$in56 : $$ph$in;
   $$ph58 = $$ph58$v;
   $26 = $21 ? $22 : $1;
   $27 = $26;
   $28 = (($$ph58) - ($27))|0;
   $29 = (($25) - ($$ph58))|0;
   __THREW__ = 0;
   (invoke_iiii(712,($1|0),($28|0),($29|0))|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    $52 = ___cxa_find_matching_catch_2()|0;
    $53 = tempRet0;
    $$2 = $52;$$28 = $53;$$pre$phi52Z2D = $19;
    label = 25;
    break;
   }
   $32 = HEAP32[$0>>2]|0;
   $33 = ((($32)) + 284|0);
   $34 = HEAP32[$33>>2]|0;
   __THREW__ = 0;
   invoke_vii(566,($2|0),($1|0));
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   if ($36) {
    $54 = ___cxa_find_matching_catch_2()|0;
    $55 = tempRet0;
    $$2 = $54;$$28 = $55;$$pre$phi52Z2D = $19;
    label = 25;
    break;
   }
   __THREW__ = 0;
   invoke_vii($34|0,($0|0),($2|0));
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   if ($38) {
    $56 = ___cxa_find_matching_catch_2()|0;
    $57 = tempRet0;
    $58 = ((($2)) + 11|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = ($59<<24>>24)<(0);
    if (!($60)) {
     $$2 = $56;$$28 = $57;$$pre$phi52Z2D = $19;
     label = 25;
     break;
    }
    $61 = HEAP32[$2>>2]|0;
    __ZdlPv($61);
    $$2 = $56;$$28 = $57;$$pre$phi52Z2D = $19;
    label = 25;
    break;
   }
   $39 = ((($2)) + 11|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = ($40<<24>>24)<(0);
   if ($41) {
    $42 = HEAP32[$2>>2]|0;
    __ZdlPv($42);
   }
   $43 = HEAP8[$19>>0]|0;
   $44 = ($43<<24>>24)<(0);
   $45 = ((($1)) + 4|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $43&255;
   $48 = $44 ? $46 : $47;
   $49 = ($48|0)<($15|0);
   $$sroa$speculated = $49 ? $48 : $15;
   HEAP32[$8>>2] = $$sroa$speculated;
   HEAP32[$10>>2] = $$sroa$speculated;
   $$pre$phi55Z2D = $19;
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $96 = HEAP8[$$pre$phi55Z2D>>0]|0;
  $97 = ($96<<24>>24)<(0);
  if (!($97)) {
   STACKTOP = sp;return;
  }
  $98 = HEAP32[$1>>2]|0;
  __ZdlPv($98);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 25) {
  $99 = HEAP8[$$pre$phi52Z2D>>0]|0;
  $100 = ($99<<24>>24)<(0);
  if (!($100)) {
   ___resumeException($$2|0);
   // unreachable;
  }
  $101 = HEAP32[$1>>2]|0;
  __ZdlPv($101);
  ___resumeException($$2|0);
  // unreachable;
 }
}
function __ZN8EditText13getTextLengthEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 332|0);
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = ((($0)) + 336|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  return ($8|0);
 } else {
  $7 = $3&255;
  $8 = $7;
  return ($8|0);
 }
 return (0)|0;
}
function __ZN8EditText17getSelectionStartEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 448|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZN8EditText17getInsertionPointEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 452|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZN8EditText11textInRangeEii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$$1 = 0, $$$127 = 0, $$$12739 = 0, $$$12740 = 0, $$$133 = 0, $$$134 = 0, $$0$lcssa$i$i = 0, $$0$ph$i$i = 0, $$020$i$i = 0, $$2283641 = 0, $$22837 = 0, $$230 = 0, $$231 = 0, $$29 = 0, $$pn = 0, $$sroa$02$0$i = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($2|0)>($3|0);
 $$ = $4 ? $2 : $3;
 $$29 = $4 ? $3 : $2;
 $5 = ((($1)) + 332|0);
 $6 = ((($5)) + 11|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)<(0);
 if ($8) {
  $9 = ((($1)) + 336|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 } else {
  $11 = $7&255;
  $13 = $11;
 }
 $12 = ($$29>>>0)<($13>>>0);
 do {
  if ($12) {
   $18 = ($$29|0)>(0);
   $$$1 = $18 ? $$29 : 0;
   if ($8) {
    $$$134 = $$$1;
    label = 9;
   } else {
    $$231 = $$$1;
    label = 10;
   }
  } else {
   if ($8) {
    $14 = ((($1)) + 336|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)>(0);
    $$$133 = $16 ? $15 : 0;
    $$$134 = $$$133;
    label = 9;
    break;
   } else {
    $17 = $7&255;
    $$231 = $17;
    label = 10;
    break;
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $19 = ((($1)) + 336|0);
  $20 = HEAP32[$19>>2]|0;
  $$230 = $$$134;$23 = $20;
 }
 else if ((label|0) == 10) {
  $21 = $7&255;
  $$230 = $$231;$23 = $21;
 }
 $22 = ($$>>>0)<($23>>>0);
 do {
  if ($22) {
   $28 = ($$|0)>(0);
   $$$127 = $28 ? $$ : 0;
   if ($8) {
    $$$12740 = $$$127;
    label = 16;
   } else {
    $$22837 = $$$127;
    label = 17;
   }
  } else {
   if ($8) {
    $24 = ((($1)) + 336|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)>(0);
    $$$12739 = $26 ? $25 : 0;
    $$$12740 = $$$12739;
    label = 16;
    break;
   } else {
    $27 = $7&255;
    $$22837 = $27;
    label = 17;
    break;
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $29 = HEAP32[$5>>2]|0;
  $$2283641 = $$$12740;$$pn = $29;$32 = $29;
 }
 else if ((label|0) == 17) {
  $$2283641 = $$22837;$$pn = $5;$32 = $5;
 }
 $30 = (($$pn) + ($$230)|0);
 $31 = (($32) + ($$2283641)|0);
 $33 = $31;
 $34 = $30;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $35 = (($33) - ($34))|0;
 $36 = ($35>>>0)>(4294967279);
 if ($36) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $37 = ($35>>>0)<(11);
 if ($37) {
  $38 = $35&255;
  $39 = ((($0)) + 11|0);
  HEAP8[$39>>0] = $38;
  $$0$ph$i$i = $0;
 } else {
  $40 = (($35) + 16)|0;
  $41 = $40 & -16;
  $42 = (__Znwj($41)|0);
  HEAP32[$0>>2] = $42;
  $43 = $41 | -2147483648;
  $44 = ((($0)) + 8|0);
  HEAP32[$44>>2] = $43;
  $45 = ((($0)) + 4|0);
  HEAP32[$45>>2] = $35;
  $$0$ph$i$i = $42;
 }
 $46 = ($30|0)==($31|0);
 if ($46) {
  $$0$lcssa$i$i = $$0$ph$i$i;
  HEAP8[$$0$lcssa$i$i>>0] = 0;
  return;
 } else {
  $$020$i$i = $$0$ph$i$i;$$sroa$02$0$i = $34;$48 = $30;
 }
 while(1) {
  $47 = HEAP8[$48>>0]|0;
  HEAP8[$$020$i$i>>0] = $47;
  $49 = $$sroa$02$0$i;
  $50 = ((($49)) + 1|0);
  $51 = $50;
  $52 = ((($$020$i$i)) + 1|0);
  $53 = ($50|0)==($31|0);
  if ($53) {
   $$0$lcssa$i$i = $52;
   break;
  } else {
   $$020$i$i = $52;$$sroa$02$0$i = $51;$48 = $50;
  }
 }
 HEAP8[$$0$lcssa$i$i>>0] = 0;
 return;
}
function __ZN8EditText16setSelectedRangeEii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 448|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($0)) + 452|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($0)) + 457|0);
 HEAP8[$5>>0] = 0;
 return;
}
function __ZThn444_N8EditText10insertTextENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + -444|0);
 __ZN8EditText10insertTextENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEii($4,$1,$2,$3);
 return;
}
function __ZThn444_N8EditText14deleteBackwardEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + -444|0);
 __ZN8EditText14deleteBackwardEv($1);
 return;
}
function __ZThn444_N8EditText13getTextLengthEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + -444|0);
 $2 = ((($1)) + 332|0);
 $3 = ((($2)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($1)) + 336|0);
  $7 = HEAP32[$6>>2]|0;
  $9 = $7;
  return ($9|0);
 } else {
  $8 = $4&255;
  $9 = $8;
  return ($9|0);
 }
 return (0)|0;
}
function __ZThn444_N8EditText17getSelectionStartEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + -444|0);
 $2 = ((($1)) + 448|0);
 $3 = HEAP32[$2>>2]|0;
 return ($3|0);
}
function __ZThn444_N8EditText17getInsertionPointEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + -444|0);
 $2 = ((($1)) + 452|0);
 $3 = HEAP32[$2>>2]|0;
 return ($3|0);
}
function __ZThn444_N8EditText16setSelectedRangeEii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + -444|0);
 $4 = ((($3)) + 448|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($3)) + 452|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($3)) + 457|0);
 HEAP8[$6>>0] = 0;
 return;
}
function __ZThn444_N8EditText11textInRangeEii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + -444|0);
 __ZN8EditText11textInRangeEii($0,$4,$2,$3);
 return;
}
function __ZN8EditText17updateClearButtonEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 296|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = ((($0)) + 468|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   STACKTOP = sp;return;
  }
  $10 = HEAP32[$0>>2]|0;
  $11 = ((($10)) + 168|0);
  $12 = HEAP32[$11>>2]|0;
  FUNCTION_TABLE_vii[$12 & 1023]($0,$8);
  $13 = HEAP32[$7>>2]|0;
  $14 = ($13|0)==(0|0);
  if ($14) {
   STACKTOP = sp;return;
  }
  __ZN6Object7releaseEv($13);
  HEAP32[$7>>2] = 0;
  STACKTOP = sp;return;
 }
 $15 = ((($0)) + 458|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)==(0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = ((($0)) + 468|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = (__ZN6ObjectnwEj(96)|0);
 __THREW__ = 0;
 invoke_viiii(724,($21|0),($0|0),(22113|0),-6710887);
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $53 = ___cxa_find_matching_catch_2()|0;
  $54 = tempRet0;
  __ZdlPv($21);
  ___resumeException($53|0);
  // unreachable;
 }
 $24 = HEAP32[$18>>2]|0;
 $25 = ($24|0)==($21|0);
 if (!($25)) {
  $26 = ($24|0)==(0|0);
  if (!($26)) {
   __ZN6Object7releaseEv($24);
  }
  HEAP32[$18>>2] = $21;
  $27 = ($21|0)==(0|0);
  if (!($27)) {
   __ZN6Object6retainEv($21);
  }
 }
 $28 = HEAP32[$0>>2]|0;
 $29 = ((($28)) + 52|0);
 $30 = HEAP32[$29>>2]|0;
 FUNCTION_TABLE_vii[$30 & 1023]($1,$0);
 $31 = +HEAPF32[$1>>2];
 $32 = ((($1)) + 8|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $31 + $33;
 $35 = HEAP32[$18>>2]|0;
 $36 = ((($35)) + 20|0);
 $37 = +HEAPF32[$36>>2];
 $38 = $34 - $37;
 $39 = ((($35)) + 12|0);
 HEAPF32[$39>>2] = $38;
 $40 = ((($1)) + 4|0);
 $41 = +HEAPF32[$40>>2];
 $42 = ((($1)) + 12|0);
 $43 = +HEAPF32[$42>>2];
 $44 = ((($35)) + 24|0);
 $45 = +HEAPF32[$44>>2];
 $46 = $43 - $45;
 $47 = $46 * 0.5;
 $48 = $41 + $47;
 $49 = ((($35)) + 16|0);
 HEAPF32[$49>>2] = $48;
 $50 = HEAP32[$0>>2]|0;
 $51 = ((($50)) + 160|0);
 $52 = HEAP32[$51>>2]|0;
 FUNCTION_TABLE_vii[$52 & 1023]($0,$35);
 STACKTOP = sp;return;
}
function __ZN8EditText11blinkCursorEv($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 464|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  __ZN8EditText12updateCursorEv($0);
  $$pre = HEAP32[$1>>2]|0;
  $5 = $$pre;
 } else {
  $5 = $2;
 }
 $4 = ((($5)) + 40|0);
 $6 = HEAP32[$4>>2]|0;
 $7 = ($6|0)==(0|0);
 $8 = HEAP32[$0>>2]|0;
 if ($7) {
  $11 = ((($8)) + 160|0);
  $12 = HEAP32[$11>>2]|0;
  FUNCTION_TABLE_vii[$12 & 1023]($0,$5);
 } else {
  $9 = ((($8)) + 168|0);
  $10 = HEAP32[$9>>2]|0;
  FUNCTION_TABLE_vii[$10 & 1023]($0,$5);
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = ((($13)) + 180|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$1>>2]|0;
 $17 = ((($16)) + 12|0);
 FUNCTION_TABLE_vii[$15 & 1023]($0,$17);
 return;
}
function __ZN8EditText12updateCursorEv($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 $4 = sp + 16|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 228|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($0)|0);
 $9 = ((($0)) + 464|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($8)) {
  if (!($11)) {
   STACKTOP = sp;return;
  }
  $12 = HEAP32[$0>>2]|0;
  $13 = ((($12)) + 168|0);
  $14 = HEAP32[$13>>2]|0;
  FUNCTION_TABLE_vii[$14 & 1023]($0,$10);
  $15 = HEAP32[$9>>2]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   STACKTOP = sp;return;
  }
  __ZN6Object7releaseEv($15);
  HEAP32[$9>>2] = 0;
  STACKTOP = sp;return;
 }
 if (!($11)) {
  $17 = (__ZN6ObjectnwEj(72)|0);
  __THREW__ = 0;
  invoke_vii(725,($17|0),($0|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $28 = ___cxa_find_matching_catch_2()|0;
   $29 = tempRet0;
   __ZdlPv($17);
   ___resumeException($28|0);
   // unreachable;
  }
  $20 = HEAP32[$9>>2]|0;
  $21 = ($20|0)==($17|0);
  if ($21) {
   $25 = $17;
  } else {
   $22 = ($20|0)==(0|0);
   if (!($22)) {
    __ZN6Object7releaseEv($20);
   }
   HEAP32[$9>>2] = $17;
   $23 = ($17|0)==(0|0);
   if ($23) {
    $25 = $17;
   } else {
    __ZN6Object6retainEv($17);
    $$pre = HEAP32[$9>>2]|0;
    $25 = $$pre;
   }
  }
  $24 = HEAP32[$25>>2]|0;
  $26 = ((($24)) + 40|0);
  $27 = HEAP32[$26>>2]|0;
  FUNCTION_TABLE_vii[$27 & 1023]($25,-13421773);
 }
 $30 = ((($0)) + 324|0);
 $31 = ((($0)) + 452|0);
 $32 = HEAP32[$31>>2]|0;
 __ZN12TextRenderer14getGlyphOriginEiP6_POINTPfS2_($30,$32,$1,$2,$3);
 $33 = HEAP32[$9>>2]|0;
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 16|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = +HEAPF32[$1>>2];
 $38 = ((($1)) + 4|0);
 $39 = +HEAPF32[$38>>2];
 $40 = +HEAPF32[$2>>2];
 $41 = $39 - $40;
 $42 = +HEAPF32[$3>>2];
 $43 = $40 - $42;
 __Z9RECT_Makeffff($4,$37,$41,4.0,$43);
 FUNCTION_TABLE_vii[$36 & 1023]($33,$4);
 $44 = ((($0)) + 457|0);
 HEAP8[$44>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcINS_6__bindIM8EditTextFvvEJPS3_EEENS_9allocatorIS7_EEFvvEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210__function6__funcINS_6__bindIM8EditTextFvvEJPS3_EEENS_9allocatorIS7_EEFvvEE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(16)|0);
 $2 = ((($0)) + 4|0);
 HEAP32[$1>>2] = (5760);
 $3 = ((($1)) + 4|0);
 ;HEAP32[$3>>2]=HEAP32[$2>>2]|0;HEAP32[$3+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$2+8>>2]|0;
 return ($1|0);
}
function __ZNKSt3__210__function6__funcINS_6__bindIM8EditTextFvvEJPS3_EEENS_9allocatorIS7_EEFvvEE7__cloneEPNS0_6__baseISA_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 HEAP32[$1>>2] = (5760);
 $3 = ((($1)) + 4|0);
 ;HEAP32[$3>>2]=HEAP32[$2>>2]|0;HEAP32[$3+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$2+8>>2]|0;
 return;
}
function __ZNSt3__210__function6__funcINS_6__bindIM8EditTextFvvEJPS3_EEENS_9allocatorIS7_EEFvvEE7destroyEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__210__function6__funcINS_6__bindIM8EditTextFvvEJPS3_EEENS_9allocatorIS7_EEFvvEE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__210__function6__funcINS_6__bindIM8EditTextFvvEJPS3_EEENS_9allocatorIS7_EEFvvEEclEv($0) {
 $0 = $0|0;
 var $$elt$i$i$i$i$i = 0, $$elt2$i$i$i$i$i = 0, $$unpack$i$i$i$i$i = 0, $$unpack3$i$i$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $$elt$i$i$i$i$i = ((($0)) + 4|0);
 $$unpack$i$i$i$i$i = HEAP32[$$elt$i$i$i$i$i>>2]|0;
 $$elt2$i$i$i$i$i = ((($0)) + 8|0);
 $$unpack3$i$i$i$i$i = HEAP32[$$elt2$i$i$i$i$i>>2]|0;
 $3 = $$unpack3$i$i$i$i$i >> 1;
 $4 = (($2) + ($3)|0);
 $5 = $$unpack3$i$i$i$i$i & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack$i$i$i$i$i;
  $11 = $10;
  FUNCTION_TABLE_vi[$11 & 1023]($4);
  return;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack$i$i$i$i$i)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
  FUNCTION_TABLE_vi[$11 & 1023]($4);
  return;
 }
}
function __ZNKSt3__210__function6__funcINS_6__bindIM8EditTextFvvEJPS3_EEENS_9allocatorIS7_EEFvvEE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(22139|0);
 $5 = ((($0)) + 4|0);
 $$0 = $4 ? $5 : 0;
 return ($$0|0);
}
function __ZNKSt3__210__function6__funcINS_6__bindIM8EditTextFvvEJPS3_EEENS_9allocatorIS7_EEFvvEE11target_typeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1432|0);
}
function __GLOBAL__sub_I_edittext_cpp() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $1 = ((($0)) + 11|0);
 HEAP8[$1>>0] = 8;
 $2 = $0;
 $3 = $2;
 HEAP32[$3>>2] = 1953064005;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 1954047316;
 $6 = ((($0)) + 8|0);
 HEAP8[$6>>0] = 0;
 __THREW__ = 0;
 invoke_vii(726,(31706|0),($0|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = tempRet0;
  $14 = HEAP8[$1>>0]|0;
  $15 = ($14<<24>>24)<(0);
  if (!($15)) {
   ___resumeException($12|0);
   // unreachable;
  }
  $16 = HEAP32[$0>>2]|0;
  __ZdlPv($16);
  ___resumeException($12|0);
  // unreachable;
 } else {
  $9 = HEAP8[$1>>0]|0;
  $10 = ($9<<24>>24)<(0);
  if (!($10)) {
   STACKTOP = sp;return;
  }
  $11 = HEAP32[$0>>2]|0;
  __ZdlPv($11);
  STACKTOP = sp;return;
 }
}
function __ZN14ClassRegistrarI8EditTextEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp;
 $4 = HEAP32[7778]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (__Znwj(12)|0);
  $7 = ((($6)) + 4|0);
  HEAP32[$7>>2] = 0;
  $8 = ((($6)) + 8|0);
  HEAP32[$8>>2] = 0;
  HEAP32[$6>>2] = $7;
  HEAP32[7778] = $6;
  $10 = $6;
 } else {
  $10 = $4;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 $9 = ((($3)) + 12|0);
 HEAP32[$9>>2] = (727);
 __THREW__ = 0;
 $11 = (invoke_iiii(535,($10|0),($2|0),($3|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if (!($13)) {
   $14 = HEAP32[$11>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    __THREW__ = 0;
    $16 = (invoke_ii(527,32)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     break;
    }
    $19 = ((($16)) + 16|0);
    ;HEAP32[$19>>2]=HEAP32[$3>>2]|0;HEAP32[$19+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$3+8>>2]|0;
    ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
    $20 = ((($16)) + 28|0);
    $21 = HEAP32[$9>>2]|0;
    HEAP32[$20>>2] = $21;
    $22 = HEAP32[$2>>2]|0;
    HEAP32[$16>>2] = 0;
    $23 = ((($16)) + 4|0);
    HEAP32[$23>>2] = 0;
    $24 = ((($16)) + 8|0);
    HEAP32[$24>>2] = $22;
    HEAP32[$11>>2] = $16;
    $25 = HEAP32[$10>>2]|0;
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0|0);
    if ($27) {
     $31 = $16;
    } else {
     $28 = $26;
     HEAP32[$10>>2] = $28;
     $$pre$i$i$i$i$i$i = HEAP32[$11>>2]|0;
     $31 = $$pre$i$i$i$i$i$i;
    }
    $29 = ((($10)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($30,$31);
    $32 = ((($10)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + 1)|0;
    HEAP32[$32>>2] = $34;
   }
   $35 = ((($3)) + 11|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = ($36<<24>>24)<(0);
   if (!($37)) {
    STACKTOP = sp;return;
   }
   $38 = HEAP32[$3>>2]|0;
   __ZdlPv($38);
   STACKTOP = sp;return;
  }
 } while(0);
 $39 = ___cxa_find_matching_catch_2()|0;
 $40 = tempRet0;
 $41 = ((($3)) + 11|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = ($42<<24>>24)<(0);
 if (!($43)) {
  ___resumeException($39|0);
  // unreachable;
 }
 $44 = HEAP32[$3>>2]|0;
 __ZdlPv($44);
 ___resumeException($39|0);
 // unreachable;
}
function __ZN14ClassRegistrarI8EditTextE7createTEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN6ObjectnwEj(472)|0);
 __THREW__ = 0;
 invoke_vi(721,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  __ZdlPv($0);
  ___resumeException($11|0);
  // unreachable;
 } else {
  $3 = ((($0)) + 444|0);
  HEAP32[$0>>2] = (5400);
  HEAP32[$3>>2] = (5724);
  $4 = ((($0)) + 460|0);
  HEAP32[$4>>2] = 0;
  $5 = ((($0)) + 464|0);
  HEAP32[$5>>2] = 0;
  $6 = ((($0)) + 468|0);
  HEAP32[$6>>2] = 0;
  $7 = ((($0)) + 229|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 & 15;
  $10 = $9 | 32;
  HEAP8[$7>>0] = $10;
  return ($0|0);
 }
 return (0)|0;
}
function __ZN8EditTextC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5LabelC2Ev($0);
 $1 = ((($0)) + 444|0);
 HEAP32[$0>>2] = (5400);
 HEAP32[$1>>2] = (5724);
 $2 = ((($0)) + 460|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 464|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 468|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 229|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 15;
 $8 = $7 | 32;
 HEAP8[$5>>0] = $8;
 return;
}
function __ZN9ImageViewD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (5804);
 $1 = ((($0)) + 324|0);
 HEAP32[$1>>2] = (6072);
 $2 = ((($0)) + 344|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  __THREW__ = 0;
  invoke_vi(525,($3|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   $7 = ___cxa_find_matching_catch_3(0|0)|0;
   $8 = tempRet0;
   ___clang_call_terminate($7);
   // unreachable;
  }
 }
 $9 = ((($0)) + 340|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  __THREW__ = 0;
  invoke_vi(525,($10|0));
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  }
 }
 $16 = ((($0)) + 328|0);
 $17 = ((($16)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if (!($19)) {
  __ZN4ViewD2Ev($0);
  return;
 }
 $20 = HEAP32[$16>>2]|0;
 __ZdlPv($20);
 __ZN4ViewD2Ev($0);
 return;
}
function __ZN9ImageViewD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (5804);
 $1 = ((($0)) + 324|0);
 HEAP32[$1>>2] = (6072);
 $2 = ((($0)) + 344|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  __THREW__ = 0;
  invoke_vi(525,($3|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   $7 = ___cxa_find_matching_catch_3(0|0)|0;
   $8 = tempRet0;
   ___clang_call_terminate($7);
   // unreachable;
  }
 }
 $9 = ((($0)) + 340|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  __THREW__ = 0;
  invoke_vi(525,($10|0));
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  }
 }
 $16 = ((($0)) + 328|0);
 $17 = ((($16)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if (!($19)) {
  __ZN4ViewD2Ev($0);
  __ZdlPv($0);
  return;
 }
 $20 = HEAP32[$16>>2]|0;
 __ZdlPv($20);
 __ZN4ViewD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN9ImageView28onEffectiveTintColourChangedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 340|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 320|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vii[$5 & 1023]($2,$7);
 return;
}
function __ZN9ImageView6layoutEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __ZN4View6layoutEv($0);
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($1,$0);
 $5 = ((($0)) + 212|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$5>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$5+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$5+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$5+3>>0];$6 = +HEAPF32[tempDoublePtr>>2];
 $7 = +HEAPF32[$1>>2];
 $8 = $6 + $7;
 HEAPF32[$1>>2] = $8;
 $9 = ((($0)) + 216|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$9>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$9+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$9+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$9+3>>0];$10 = +HEAPF32[tempDoublePtr>>2];
 $11 = ((($1)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $10 + $12;
 HEAPF32[$11>>2] = $13;
 $14 = ((($0)) + 220|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$14>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$14+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$14+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$14+3>>0];$15 = +HEAPF32[tempDoublePtr>>2];
 $16 = $6 + $15;
 $17 = ((($1)) + 8|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $18 - $16;
 HEAPF32[$17>>2] = $19;
 $20 = ((($0)) + 224|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$20>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$20+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$20+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$20+3>>0];$21 = +HEAPF32[tempDoublePtr>>2];
 $22 = $10 + $21;
 $23 = ((($1)) + 12|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $24 - $22;
 HEAPF32[$23>>2] = $25;
 $26 = ((($0)) + 340|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 FUNCTION_TABLE_vii[$30 & 1023]($27,$1);
 STACKTOP = sp;return;
}
function __ZN9ImageView14attachToWindowEP6Window($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4View14attachToWindowEP6Window($0,$1);
 $2 = ((($0)) + 328|0);
 $3 = ((($2)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($0)) + 332|0);
  $7 = HEAP32[$6>>2]|0;
  $10 = $7;
 } else {
  $8 = $4&255;
  $10 = $8;
 }
 $9 = ($10|0)==(0);
 if ($9) {
  return;
 }
 $11 = ((($0)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  return;
 }
 $14 = (__ZN3App13currentMillisEv(28952)|0);
 $15 = ((($0)) + 352|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($0)) + 324|0);
 __ZN10URLRequest7requestERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP19IURLRequestDelegatei($2,$16,1);
 return;
}
function __ZN9ImageView16detachFromWindowEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4View16detachFromWindowEv($0);
 $1 = ((($0)) + 328|0);
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = ((($0)) + 332|0);
  $6 = HEAP32[$5>>2]|0;
  $9 = $6;
 } else {
  $7 = $3&255;
  $9 = $7;
 }
 $8 = ($9|0)==(0);
 if ($8) {
  return;
 }
 $10 = ((($0)) + 324|0);
 __ZN10URLRequest9unrequestERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP19IURLRequestDelegate($1,$10);
 return;
}
function __ZN9ImageView16onUrlRequestLoadEP7URLData($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $3 = ($1|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(2);
 if ($6) {
  $7 = ((($1)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($0)) + 340|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$13 & 1023]($10,$8);
  __Z9RECT_Makeffff($2,0.0,0.0,1.0,1.0);
  $14 = ((($0)) + 366|0);
  dest=$14; src=$2; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $15 = HEAP32[$0>>2]|0;
  $16 = ((($15)) + 80|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vi[$17 & 1023]($0);
  STACKTOP = sp;return;
 } else {
  __ZN3App3logEPKcz(28952,22380,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function __ZThn324_N9ImageView16onUrlRequestLoadEP7URLData($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $3 = ((($0)) + -324|0);
 $4 = ($1|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(2);
 if ($7) {
  $8 = ((($1)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($3)) + 340|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  FUNCTION_TABLE_vii[$14 & 1023]($11,$9);
  __Z9RECT_Makeffff($2,0.0,0.0,1.0,1.0);
  $15 = ((($3)) + 366|0);
  dest=$15; src=$2; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $16 = HEAP32[$3>>2]|0;
  $17 = ((($16)) + 80|0);
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_vi[$18 & 1023]($3);
  STACKTOP = sp;return;
 } else {
  __ZN3App3logEPKcz(28952,22380,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function __GLOBAL__sub_I_imageview_cpp() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $1 = ((($0)) + 11|0);
 HEAP8[$1>>0] = 9;
 dest=$0; src=22446; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $2 = ((($0)) + 9|0);
 HEAP8[$2>>0] = 0;
 __THREW__ = 0;
 invoke_vii(728,(31707|0),($0|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  $10 = HEAP8[$1>>0]|0;
  $11 = ($10<<24>>24)<(0);
  if (!($11)) {
   ___resumeException($8|0);
   // unreachable;
  }
  $12 = HEAP32[$0>>2]|0;
  __ZdlPv($12);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $5 = HEAP8[$1>>0]|0;
  $6 = ($5<<24>>24)<(0);
  if (!($6)) {
   STACKTOP = sp;return;
  }
  $7 = HEAP32[$0>>2]|0;
  __ZdlPv($7);
  STACKTOP = sp;return;
 }
}
function __ZN14ClassRegistrarI9ImageViewEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp;
 $4 = HEAP32[7778]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (__Znwj(12)|0);
  $7 = ((($6)) + 4|0);
  HEAP32[$7>>2] = 0;
  $8 = ((($6)) + 8|0);
  HEAP32[$8>>2] = 0;
  HEAP32[$6>>2] = $7;
  HEAP32[7778] = $6;
  $10 = $6;
 } else {
  $10 = $4;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 $9 = ((($3)) + 12|0);
 HEAP32[$9>>2] = (729);
 __THREW__ = 0;
 $11 = (invoke_iiii(535,($10|0),($2|0),($3|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if (!($13)) {
   $14 = HEAP32[$11>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    __THREW__ = 0;
    $16 = (invoke_ii(527,32)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     break;
    }
    $19 = ((($16)) + 16|0);
    ;HEAP32[$19>>2]=HEAP32[$3>>2]|0;HEAP32[$19+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$3+8>>2]|0;
    ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
    $20 = ((($16)) + 28|0);
    $21 = HEAP32[$9>>2]|0;
    HEAP32[$20>>2] = $21;
    $22 = HEAP32[$2>>2]|0;
    HEAP32[$16>>2] = 0;
    $23 = ((($16)) + 4|0);
    HEAP32[$23>>2] = 0;
    $24 = ((($16)) + 8|0);
    HEAP32[$24>>2] = $22;
    HEAP32[$11>>2] = $16;
    $25 = HEAP32[$10>>2]|0;
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0|0);
    if ($27) {
     $31 = $16;
    } else {
     $28 = $26;
     HEAP32[$10>>2] = $28;
     $$pre$i$i$i$i$i$i = HEAP32[$11>>2]|0;
     $31 = $$pre$i$i$i$i$i$i;
    }
    $29 = ((($10)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($30,$31);
    $32 = ((($10)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + 1)|0;
    HEAP32[$32>>2] = $34;
   }
   $35 = ((($3)) + 11|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = ($36<<24>>24)<(0);
   if (!($37)) {
    STACKTOP = sp;return;
   }
   $38 = HEAP32[$3>>2]|0;
   __ZdlPv($38);
   STACKTOP = sp;return;
  }
 } while(0);
 $39 = ___cxa_find_matching_catch_2()|0;
 $40 = tempRet0;
 $41 = ((($3)) + 11|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = ($42<<24>>24)<(0);
 if (!($43)) {
  ___resumeException($39|0);
  // unreachable;
 }
 $44 = HEAP32[$3>>2]|0;
 __ZdlPv($44);
 ___resumeException($39|0);
 // unreachable;
}
function __ZN14ClassRegistrarI9ImageViewE7createTEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN6ObjectnwEj(384)|0);
 __THREW__ = 0;
 invoke_vi(730,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZdlPv($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  return ($0|0);
 }
 return (0)|0;
}
function __ZN9ImageViewC2Ev($0) {
 $0 = $0|0;
 var $$0 = 0, $$02 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4ViewC2Ev($0);
 $1 = ((($0)) + 324|0);
 HEAP32[$0>>2] = (5804);
 HEAP32[$1>>2] = (6072);
 $2 = ((($0)) + 328|0);
 $3 = ((($0)) + 340|0);
 $4 = ((($0)) + 344|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;
 __THREW__ = 0;
 $5 = (invoke_ii(523,96)|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   label = 11;
  } else {
   __THREW__ = 0;
   invoke_vii(538,($5|0),($0|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $26 = ___cxa_find_matching_catch_2()|0;
    $27 = tempRet0;
    __ZdlPv($5);
    $$0 = $27;$$02 = $26;
    break;
   }
   $10 = HEAP32[$3>>2]|0;
   $11 = ($10|0)==($5|0);
   if ($11) {
    $21 = $5;
   } else {
    $12 = ($10|0)==(0|0);
    if (!($12)) {
     __THREW__ = 0;
     invoke_vi(525,($10|0));
     $13 = __THREW__; __THREW__ = 0;
     $14 = $13&1;
     if ($14) {
      label = 11;
      break;
     }
    }
    HEAP32[$3>>2] = $5;
    $15 = ($5|0)==(0|0);
    if ($15) {
     $21 = $5;
    } else {
     __THREW__ = 0;
     invoke_vi(526,($5|0));
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if ($17) {
      label = 11;
      break;
     }
     $$pre = HEAP32[$3>>2]|0;
     $21 = $$pre;
    }
   }
   $18 = HEAP32[$0>>2]|0;
   $19 = ((($18)) + 160|0);
   $20 = HEAP32[$19>>2]|0;
   __THREW__ = 0;
   invoke_vii($20|0,($0|0),($21|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    label = 11;
   } else {
    return;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $24 = ___cxa_find_matching_catch_2()|0;
  $25 = tempRet0;
  $$0 = $25;$$02 = $24;
 }
 $28 = HEAP32[$4>>2]|0;
 $29 = ($28|0)==(0|0);
 if (!($29)) {
  __THREW__ = 0;
  invoke_vi(525,($28|0));
  $30 = __THREW__; __THREW__ = 0;
  $31 = $30&1;
  if ($31) {
   $32 = ___cxa_find_matching_catch_3(0|0)|0;
   $33 = tempRet0;
   ___clang_call_terminate($32);
   // unreachable;
  }
 }
 $34 = HEAP32[$3>>2]|0;
 $35 = ($34|0)==(0|0);
 if (!($35)) {
  __THREW__ = 0;
  invoke_vi(525,($34|0));
  $36 = __THREW__; __THREW__ = 0;
  $37 = $36&1;
  if ($37) {
   $38 = ___cxa_find_matching_catch_3(0|0)|0;
   $39 = tempRet0;
   ___clang_call_terminate($38);
   // unreachable;
  }
 }
 $40 = ((($2)) + 11|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = ($41<<24>>24)<(0);
 if (!($42)) {
  __ZN4ViewD2Ev($0);
  ___resumeException($$02|0);
  // unreachable;
 }
 $43 = HEAP32[$2>>2]|0;
 __ZdlPv($43);
 __ZN4ViewD2Ev($0);
 ___resumeException($$02|0);
 // unreachable;
}
function __ZN9ImageView17setBitmapProviderEP14BitmapProvider($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 340|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==($1|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$4>>2]|0;
 $9 = ((($8)) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vii[$10 & 1023]($4,$1);
 __Z9RECT_Makeffff($2,0.0,0.0,1.0,1.0);
 $11 = ((($0)) + 366|0);
 dest=$11; src=$2; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $12 = HEAP32[$0>>2]|0;
 $13 = ((($12)) + 80|0);
 $14 = HEAP32[$13>>2]|0;
 FUNCTION_TABLE_vi[$14 & 1023]($0);
 STACKTOP = sp;return;
}
function __ZN5LabelD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (6084);
 $1 = ((($0)) + 324|0);
 __ZN12TextRendererD2Ev($1);
 __ZN4ViewD2Ev($0);
 return;
}
function __ZN5LabelD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (6084);
 $1 = ((($0)) + 324|0);
 __ZN12TextRendererD2Ev($1);
 __ZN4ViewD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN5Label15updateRenderOpsEv($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$pre = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp;
 $1 = sp + 16|0;
 $2 = ((($0)) + 440|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 $$pre = ((($0)) + 324|0);
 if ($4) {
  __ZN12TextRenderer15updateRenderOpsEP4View($$pre,$0);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vii[$7 & 1023]($1,$0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 __ZN12TextRenderer6layoutE4RECT($$pre,$$byval_copy);
 HEAP8[$2>>0] = 0;
 __ZN12TextRenderer15updateRenderOpsEP4View($$pre,$0);
 STACKTOP = sp;return;
}
function __ZN5Label28onEffectiveTintColourChangedEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 324|0);
 $2 = ((($0)) + 320|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($0)) + 436|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6;
 } else {
  $7 = $3;
 }
 __ZN12TextRenderer16setDefaultColourEj($1,$7);
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($8)) + 176|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 1023]($0);
 return;
}
function __ZN5Label6layoutEv($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp;
 $1 = sp + 16|0;
 __ZN4View6layoutEv($0);
 $2 = ((($0)) + 324|0);
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vii[$5 & 1023]($1,$0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 __ZN12TextRenderer6layoutE4RECT($2,$$byval_copy);
 $6 = ((($0)) + 440|0);
 HEAP8[$6>>0] = 0;
 $7 = ((($0)) + 106|0);
 HEAP8[$7>>0] = 1;
 STACKTOP = sp;return;
}
function __ZN5Label17updateContentSizeEff($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $$byval_copy = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 $3 = sp + 8|0;
 $4 = ((($0)) + 196|0);
 HEAPF32[$4>>2] = 0.0;
 $5 = ((($0)) + 200|0);
 HEAPF32[$5>>2] = 0.0;
 $6 = ((($0)) + 212|0);
 $7 = +HEAPF32[$6>>2];
 $8 = ((($0)) + 220|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $7 + $9;
 $11 = $1 - $10;
 $12 = ((($0)) + 216|0);
 $13 = +HEAPF32[$12>>2];
 $14 = ((($0)) + 224|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $13 + $15;
 $17 = $2 - $16;
 $18 = ((($0)) + 324|0);
 __Z9SIZE_Makeff($3,$11,$17);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 __ZN12TextRenderer7measureE5_SIZE($18,$$byval_copy);
 $19 = ((($0)) + 366|0);
 $20 = $19;
 $21 = $20;
 $22 = HEAPU8[$21>>0]|(HEAPU8[$21+1>>0]<<8)|(HEAPU8[$21+2>>0]<<16)|(HEAPU8[$21+3>>0]<<24);
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAPU8[$24>>0]|(HEAPU8[$24+1>>0]<<8)|(HEAPU8[$24+2>>0]<<16)|(HEAPU8[$24+3>>0]<<24);
 $26 = $4;
 $27 = $26;
 HEAP8[$27>>0]=$22&255;HEAP8[$27+1>>0]=($22>>8)&255;HEAP8[$27+2>>0]=($22>>16)&255;HEAP8[$27+3>>0]=$22>>24;
 $28 = (($26) + 4)|0;
 $29 = $28;
 HEAP8[$29>>0]=$25&255;HEAP8[$29+1>>0]=($25>>8)&255;HEAP8[$29+2>>0]=($25>>16)&255;HEAP8[$29+3>>0]=$25>>24;
 $30 = ((($0)) + 440|0);
 HEAP8[$30>>0] = 1;
 $31 = ((($0)) + 106|0);
 HEAP8[$31>>0] = 1;
 STACKTOP = sp;return;
}
function __ZN5Label10setGravityE7GRAVITY($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 3|0;
 $$byval_copy = sp + 2|0;
 $2 = sp + 1|0;
 $3 = sp;
 $4 = HEAP8[$1>>0]|0;
 HEAP8[$2>>0] = $4;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$2>>0]|0;
 __ZN4View10setGravityE7GRAVITY($0,$$byval_copy);
 $5 = ((($0)) + 324|0);
 HEAP8[$3>>0] = $4;
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$3>>0]|0;
 __ZN12TextRenderer10setGravityE7GRAVITY($5,$$byval_copy1);
 STACKTOP = sp;return;
}
function __ZN5Label15applyStyleValueERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP10StyleValue($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre = 0, $$pre52 = 0, $$pre53 = 0, $$pre54 = 0, $$pre55 = 0, $$pre56 = 0, $$pre57 = 0, $$pre58 = 0, $$pre59 = 0, $$pre60 = 0, $$pre61 = 0, $$pre62 = 0, $$pre63 = 0, $$pre64 = 0, $$pre65 = 0, $$pre66 = 0, $$pre67 = 0;
 var $$pre68 = 0, $$pre69 = 0, $$pre70 = 0, $$pre71 = 0, $$pre72 = 0, $$pre73 = 0, $$pre74 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 3|0;
 $$byval_copy = sp + 2|0;
 $3 = sp + 1|0;
 $4 = sp;
 $5 = ((($1)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 $8 = ((($1)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $6&255;
 $11 = $7 ? $9 : $10;
 $12 = ($11|0)==(9);
 do {
  if ($12) {
   __THREW__ = 0;
   $13 = (invoke_iiiiii(546,($1|0),0,-1,(22490|0),9)|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $16 = ___cxa_find_matching_catch_3(0|0)|0;
    $17 = tempRet0;
    ___clang_call_terminate($16);
    // unreachable;
   }
   $18 = ($13|0)==(0);
   if (!($18)) {
    $$pre = HEAP8[$5>>0]|0;
    $$pre52 = HEAP32[$8>>2]|0;
    $29 = $$pre;$32 = $$pre52;
    break;
   }
   $19 = HEAP32[$0>>2]|0;
   $20 = ((($19)) + 272|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($2)) + 8|0);
   $23 = ((($0)) + 356|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($24)) + 20|0);
   $26 = +HEAPF32[$25>>2];
   $27 = (__Z10oakFontGetRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEf($22,$26)|0);
   FUNCTION_TABLE_vii[$21 & 1023]($0,$27);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $29 = $6;$32 = $9;
  }
 } while(0);
 $28 = ($29<<24>>24)<(0);
 $30 = $29&255;
 $31 = $28 ? $32 : $30;
 $33 = ($31|0)==(9);
 do {
  if ($33) {
   __THREW__ = 0;
   $34 = (invoke_iiiiii(546,($1|0),0,-1,(22500|0),9)|0);
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   if ($36) {
    $37 = ___cxa_find_matching_catch_3(0|0)|0;
    $38 = tempRet0;
    ___clang_call_terminate($37);
    // unreachable;
   }
   $39 = ($34|0)==(0);
   if (!($39)) {
    $$pre53 = HEAP8[$5>>0]|0;
    $$pre54 = HEAP32[$8>>2]|0;
    $49 = $$pre53;$52 = $$pre54;
    break;
   }
   $40 = HEAP32[$0>>2]|0;
   $41 = ((($40)) + 272|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($0)) + 356|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($44)) + 8|0);
   $46 = (+__ZN10StyleValue10getAsFloatEv($2));
   $47 = (__Z10oakFontGetRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEf($45,$46)|0);
   FUNCTION_TABLE_vii[$42 & 1023]($0,$47);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $49 = $29;$52 = $32;
  }
 } while(0);
 $48 = ($49<<24>>24)<(0);
 $50 = $49&255;
 $51 = $48 ? $52 : $50;
 $53 = ($51|0)==(10);
 do {
  if ($53) {
   __THREW__ = 0;
   $54 = (invoke_iiiiii(546,($1|0),0,-1,(22510|0),10)|0);
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    $57 = ___cxa_find_matching_catch_3(0|0)|0;
    $58 = tempRet0;
    ___clang_call_terminate($57);
    // unreachable;
   }
   $59 = ($54|0)==(0);
   if (!($59)) {
    $$pre55 = HEAP8[$5>>0]|0;
    $$pre56 = HEAP32[$8>>2]|0;
    $66 = $$pre55;$69 = $$pre56;
    break;
   }
   $60 = HEAP32[$0>>2]|0;
   $61 = ((($60)) + 268|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ((($2)) + 24|0);
   $64 = HEAP32[$63>>2]|0;
   FUNCTION_TABLE_vii[$62 & 1023]($0,$64);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $66 = $49;$69 = $52;
  }
 } while(0);
 $65 = ($66<<24>>24)<(0);
 $67 = $66&255;
 $68 = $65 ? $69 : $67;
 $70 = ($68|0)==(4);
 do {
  if ($70) {
   __THREW__ = 0;
   $71 = (invoke_iiiiii(546,($1|0),0,-1,(22521|0),4)|0);
   $72 = __THREW__; __THREW__ = 0;
   $73 = $72&1;
   if ($73) {
    $74 = ___cxa_find_matching_catch_3(0|0)|0;
    $75 = tempRet0;
    ___clang_call_terminate($74);
    // unreachable;
   }
   $76 = ($71|0)==(0);
   if (!($76)) {
    $$pre57 = HEAP8[$5>>0]|0;
    $$pre58 = HEAP32[$8>>2]|0;
    $82 = $$pre57;$85 = $$pre58;
    break;
   }
   $77 = HEAP32[$0>>2]|0;
   $78 = ((($77)) + 260|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($2)) + 8|0);
   FUNCTION_TABLE_vii[$79 & 1023]($0,$80);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $82 = $66;$85 = $69;
  }
 } while(0);
 $81 = ($82<<24>>24)<(0);
 $83 = $82&255;
 $84 = $81 ? $85 : $83;
 $86 = ($84|0)==(8);
 do {
  if ($86) {
   __THREW__ = 0;
   $87 = (invoke_iiiiii(546,($1|0),0,-1,(22526|0),8)|0);
   $88 = __THREW__; __THREW__ = 0;
   $89 = $88&1;
   if ($89) {
    $90 = ___cxa_find_matching_catch_3(0|0)|0;
    $91 = tempRet0;
    ___clang_call_terminate($90);
    // unreachable;
   }
   $92 = ($87|0)==(0);
   if (!($92)) {
    $$pre59 = HEAP8[$5>>0]|0;
    $$pre60 = HEAP32[$8>>2]|0;
    $102 = $$pre60;$99 = $$pre59;
    break;
   }
   $93 = HEAP32[$0>>2]|0;
   $94 = ((($93)) + 276|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ((($2)) + 24|0);
   $97 = HEAP32[$96>>2]|0;
   FUNCTION_TABLE_vii[$95 & 1023]($0,$97);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $102 = $85;$99 = $82;
  }
 } while(0);
 $98 = ($99<<24>>24)<(0);
 $100 = $99&255;
 $101 = $98 ? $102 : $100;
 $103 = ($101|0)==(8);
 do {
  if ($103) {
   __THREW__ = 0;
   $104 = (invoke_iiiiii(546,($1|0),0,-1,(22535|0),8)|0);
   $105 = __THREW__; __THREW__ = 0;
   $106 = $105&1;
   if ($106) {
    $107 = ___cxa_find_matching_catch_3(0|0)|0;
    $108 = tempRet0;
    ___clang_call_terminate($107);
    // unreachable;
   }
   $109 = ($104|0)==(0);
   if (!($109)) {
    $$pre61 = HEAP8[$5>>0]|0;
    $$pre62 = HEAP32[$8>>2]|0;
    $175 = $$pre61;$178 = $$pre62;
    break;
   }
   $110 = ((($2)) + 8|0);
   $111 = ((($110)) + 11|0);
   $112 = HEAP8[$111>>0]|0;
   $113 = ($112<<24>>24)<(0);
   $114 = ((($2)) + 12|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = $112&255;
   $117 = $113 ? $115 : $116;
   $118 = ($117|0)==(4);
   do {
    if ($118) {
     __THREW__ = 0;
     $119 = (invoke_iiiiii(546,($110|0),0,-1,(23460|0),4)|0);
     $120 = __THREW__; __THREW__ = 0;
     $121 = $120&1;
     if ($121) {
      $122 = ___cxa_find_matching_catch_3(0|0)|0;
      $123 = tempRet0;
      ___clang_call_terminate($122);
      // unreachable;
     }
     $124 = ($119|0)==(0);
     if ($124) {
      $125 = ((($0)) + 229|0);
      $126 = HEAP8[$125>>0]|0;
      $127 = $126 & -16;
      HEAP8[$125>>0] = $127;
      $173 = $127;
      break;
     } else {
      $$pre69 = HEAP8[$111>>0]|0;
      $$pre70 = HEAP32[$114>>2]|0;
      $129 = $$pre69;$132 = $$pre70;
      label = 42;
      break;
     }
    } else {
     $129 = $112;$132 = $115;
     label = 42;
    }
   } while(0);
   L67: do {
    if ((label|0) == 42) {
     $128 = ($129<<24>>24)<(0);
     $130 = $129&255;
     $131 = $128 ? $132 : $130;
     $133 = ($131|0)==(5);
     do {
      if ($133) {
       __THREW__ = 0;
       $134 = (invoke_iiiiii(546,($110|0),0,-1,(23465|0),5)|0);
       $135 = __THREW__; __THREW__ = 0;
       $136 = $135&1;
       if ($136) {
        $137 = ___cxa_find_matching_catch_3(0|0)|0;
        $138 = tempRet0;
        ___clang_call_terminate($137);
        // unreachable;
       }
       $139 = ($134|0)==(0);
       if ($139) {
        $140 = ((($0)) + 229|0);
        $141 = HEAP8[$140>>0]|0;
        $142 = $141 & -16;
        $143 = $142 | 1;
        HEAP8[$140>>0] = $143;
        $173 = $143;
        break L67;
       } else {
        $$pre71 = HEAP8[$111>>0]|0;
        $$pre72 = HEAP32[$114>>2]|0;
        $145 = $$pre71;$148 = $$pre72;
        break;
       }
      } else {
       $145 = $129;$148 = $132;
      }
     } while(0);
     $144 = ($145<<24>>24)<(0);
     $146 = $145&255;
     $147 = $144 ? $148 : $146;
     $149 = ($147|0)==(6);
     if ($149) {
      __THREW__ = 0;
      $150 = (invoke_iiiiii(546,($110|0),0,-1,(23446|0),6)|0);
      $151 = __THREW__; __THREW__ = 0;
      $152 = $151&1;
      if ($152) {
       $153 = ___cxa_find_matching_catch_3(0|0)|0;
       $154 = tempRet0;
       ___clang_call_terminate($153);
       // unreachable;
      }
      $155 = ($150|0)==(0);
      if (!($155)) {
       $$pre73 = HEAP8[$111>>0]|0;
       $$pre74 = HEAP32[$114>>2]|0;
       $157 = $$pre73;$160 = $$pre74;
       label = 53;
      }
     } else {
      $157 = $145;$160 = $148;
      label = 53;
     }
     if ((label|0) == 53) {
      $156 = ($157<<24>>24)<(0);
      $158 = $157&255;
      $159 = $156 ? $160 : $158;
      $161 = ($159|0)==(6);
      if (!($161)) {
       ___assert_fail((22544|0),(22546|0),80,(23328|0));
       // unreachable;
      }
      __THREW__ = 0;
      $162 = (invoke_iiiiii(546,($110|0),0,-1,(23453|0),6)|0);
      $163 = __THREW__; __THREW__ = 0;
      $164 = $163&1;
      if ($164) {
       $165 = ___cxa_find_matching_catch_3(0|0)|0;
       $166 = tempRet0;
       ___clang_call_terminate($165);
       // unreachable;
      }
      $167 = ($162|0)==(0);
      if (!($167)) {
       ___assert_fail((22544|0),(22546|0),80,(23328|0));
       // unreachable;
      }
     }
     $168 = ((($0)) + 229|0);
     $169 = HEAP8[$168>>0]|0;
     $170 = $169 & -16;
     $171 = $170 | 2;
     HEAP8[$168>>0] = $171;
     $173 = $171;
    }
   } while(0);
   $172 = ((($0)) + 324|0);
   HEAP8[$3>>0] = $173;
   ;HEAP8[$$byval_copy>>0]=HEAP8[$3>>0]|0;
   __ZN12TextRenderer10setGravityE7GRAVITY($172,$$byval_copy);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $175 = $99;$178 = $102;
  }
 } while(0);
 $174 = ($175<<24>>24)<(0);
 $176 = $175&255;
 $177 = $174 ? $178 : $176;
 $179 = ($177|0)==(8);
 if ($179) {
  __THREW__ = 0;
  $180 = (invoke_iiiiii(546,($1|0),0,-1,(22586|0),8)|0);
  $181 = __THREW__; __THREW__ = 0;
  $182 = $181&1;
  if ($182) {
   $183 = ___cxa_find_matching_catch_3(0|0)|0;
   $184 = tempRet0;
   ___clang_call_terminate($183);
   // unreachable;
  }
  $185 = ($180|0)==(0);
  if ($185) {
   $186 = ((($2)) + 8|0);
   $187 = ((($186)) + 11|0);
   $188 = HEAP8[$187>>0]|0;
   $189 = ($188<<24>>24)<(0);
   $190 = ((($2)) + 12|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = $188&255;
   $193 = $189 ? $191 : $192;
   $194 = ($193|0)==(3);
   do {
    if ($194) {
     __THREW__ = 0;
     $195 = (invoke_iiiiii(546,($186|0),0,-1,(23471|0),3)|0);
     $196 = __THREW__; __THREW__ = 0;
     $197 = $196&1;
     if ($197) {
      $198 = ___cxa_find_matching_catch_3(0|0)|0;
      $199 = tempRet0;
      ___clang_call_terminate($198);
      // unreachable;
     }
     $200 = ($195|0)==(0);
     if ($200) {
      $201 = ((($0)) + 229|0);
      $202 = HEAP8[$201>>0]|0;
      $203 = $202 & 15;
      HEAP8[$201>>0] = $203;
      $249 = $203;
      break;
     } else {
      $$pre63 = HEAP8[$187>>0]|0;
      $$pre64 = HEAP32[$190>>2]|0;
      $205 = $$pre63;$208 = $$pre64;
      label = 70;
      break;
     }
    } else {
     $205 = $188;$208 = $191;
     label = 70;
    }
   } while(0);
   L111: do {
    if ((label|0) == 70) {
     $204 = ($205<<24>>24)<(0);
     $206 = $205&255;
     $207 = $204 ? $208 : $206;
     $209 = ($207|0)==(6);
     do {
      if ($209) {
       __THREW__ = 0;
       $210 = (invoke_iiiiii(546,($186|0),0,-1,(23475|0),6)|0);
       $211 = __THREW__; __THREW__ = 0;
       $212 = $211&1;
       if ($212) {
        $213 = ___cxa_find_matching_catch_3(0|0)|0;
        $214 = tempRet0;
        ___clang_call_terminate($213);
        // unreachable;
       }
       $215 = ($210|0)==(0);
       if ($215) {
        $216 = ((($0)) + 229|0);
        $217 = HEAP8[$216>>0]|0;
        $218 = $217 & 15;
        $219 = $218 | 16;
        HEAP8[$216>>0] = $219;
        $249 = $219;
        break L111;
       } else {
        $$pre65 = HEAP8[$187>>0]|0;
        $$pre66 = HEAP32[$190>>2]|0;
        $221 = $$pre65;$224 = $$pre66;
        break;
       }
      } else {
       $221 = $205;$224 = $208;
      }
     } while(0);
     $220 = ($221<<24>>24)<(0);
     $222 = $221&255;
     $223 = $220 ? $224 : $222;
     $225 = ($223|0)==(6);
     if ($225) {
      __THREW__ = 0;
      $226 = (invoke_iiiiii(546,($186|0),0,-1,(23446|0),6)|0);
      $227 = __THREW__; __THREW__ = 0;
      $228 = $227&1;
      if ($228) {
       $229 = ___cxa_find_matching_catch_3(0|0)|0;
       $230 = tempRet0;
       ___clang_call_terminate($229);
       // unreachable;
      }
      $231 = ($226|0)==(0);
      if (!($231)) {
       $$pre67 = HEAP8[$187>>0]|0;
       $$pre68 = HEAP32[$190>>2]|0;
       $233 = $$pre67;$236 = $$pre68;
       label = 81;
      }
     } else {
      $233 = $221;$236 = $224;
      label = 81;
     }
     if ((label|0) == 81) {
      $232 = ($233<<24>>24)<(0);
      $234 = $233&255;
      $235 = $232 ? $236 : $234;
      $237 = ($235|0)==(6);
      if (!($237)) {
       ___assert_fail((22544|0),(22546|0),93,(23328|0));
       // unreachable;
      }
      __THREW__ = 0;
      $238 = (invoke_iiiiii(546,($186|0),0,-1,(23453|0),6)|0);
      $239 = __THREW__; __THREW__ = 0;
      $240 = $239&1;
      if ($240) {
       $241 = ___cxa_find_matching_catch_3(0|0)|0;
       $242 = tempRet0;
       ___clang_call_terminate($241);
       // unreachable;
      }
      $243 = ($238|0)==(0);
      if (!($243)) {
       ___assert_fail((22544|0),(22546|0),93,(23328|0));
       // unreachable;
      }
     }
     $244 = ((($0)) + 229|0);
     $245 = HEAP8[$244>>0]|0;
     $246 = $245 & 15;
     $247 = $246 | 32;
     HEAP8[$244>>0] = $247;
     $249 = $247;
    }
   } while(0);
   $248 = ((($0)) + 324|0);
   HEAP8[$4>>0] = $249;
   ;HEAP8[$$byval_copy1>>0]=HEAP8[$4>>0]|0;
   __ZN12TextRenderer10setGravityE7GRAVITY($248,$$byval_copy1);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $250 = (__ZN4View15applyStyleValueERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP10StyleValue($0,$1,$2)|0);
 $$0 = $250;
 STACKTOP = sp;return ($$0|0);
}
function __ZN5Label7setTextERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 324|0);
 __ZN12TextRenderer7setTextERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($2,$1);
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 80|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($0);
 return;
}
function __ZN5Label7setTextEPKcz($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp;
 HEAP32[$2>>2] = $varargs;
 __Z7vformatPKcPi($3,$1,$2);
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 260|0);
 $6 = HEAP32[$5>>2]|0;
 __THREW__ = 0;
 invoke_vii($6|0,($0|0),($3|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  $15 = ((($3)) + 11|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(0);
  if (!($17)) {
   ___resumeException($13|0);
   // unreachable;
  }
  $18 = HEAP32[$3>>2]|0;
  __ZdlPv($18);
  ___resumeException($13|0);
  // unreachable;
 } else {
  $9 = ((($3)) + 11|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)<(0);
  if (!($11)) {
   STACKTOP = sp;return;
  }
  $12 = HEAP32[$3>>2]|0;
  __ZdlPv($12);
  STACKTOP = sp;return;
 }
}
function __ZN5Label13setTextColourEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 436|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($0);
 return;
}
function __ZN5Label7setFontEP4Font($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 324|0);
 __ZN12TextRenderer14setDefaultFontEP4Font($2,$1);
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 80|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($0);
 return;
}
function __ZN5Label11setMaxLinesEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 324|0);
 __ZN12TextRenderer11setMaxLinesEi($2,$1);
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 80|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($0);
 return;
}
function __ZN5Label8setStyleENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$012 = 0, $$1 = 0, $$113 = 0, $$3 = 0, $$315 = 0, $$4 = 0, $$416 = 0, $$pre$phi25Z2D = 0, $$pre24 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 36|0;
 $3 = sp + 24|0;
 $4 = sp + 12|0;
 $5 = sp;
 __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_($3,$1,22456);
 __THREW__ = 0;
 invoke_vii(731,($2|0),($3|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $38 = ___cxa_find_matching_catch_2()|0;
  $39 = tempRet0;
  $40 = ((($3)) + 11|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = ($41<<24>>24)<(0);
  if ($42) {
   $43 = HEAP32[$3>>2]|0;
   __ZdlPv($43);
  }
  $$4 = $38;$$416 = $39;
  ___resumeException($$4|0);
  // unreachable;
 }
 $8 = ((($3)) + 11|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)<(0);
 if ($10) {
  $11 = HEAP32[$3>>2]|0;
  __ZdlPv($11);
 }
 __THREW__ = 0;
 invoke_viii(573,($4|0),($1|0),(22467|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 L11: do {
  if ($13) {
   $44 = ___cxa_find_matching_catch_2()|0;
   $45 = tempRet0;
   $$0 = $44;$$012 = $45;
   label = 17;
  } else {
   __THREW__ = 0;
   $14 = (+invoke_di(732,($4|0)));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if ($16) {
    $46 = ___cxa_find_matching_catch_2()|0;
    $47 = tempRet0;
    $48 = ((($4)) + 11|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = ($49<<24>>24)<(0);
    if (!($50)) {
     $$0 = $46;$$012 = $47;
     label = 17;
     break;
    }
    $51 = HEAP32[$4>>2]|0;
    __ZdlPv($51);
    $$0 = $46;$$012 = $47;
    label = 17;
    break;
   }
   $17 = ((($4)) + 11|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = ($18<<24>>24)<(0);
   if ($19) {
    $20 = HEAP32[$4>>2]|0;
    __ZdlPv($20);
   }
   $21 = ((($2)) + 11|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = ($22<<24>>24)<(0);
   $24 = ((($2)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $22&255;
   $27 = $23 ? $25 : $26;
   $28 = ($27|0)!=(0);
   $29 = $14 != 0.0;
   $or$cond = $29 & $28;
   do {
    if ($or$cond) {
     $30 = HEAP32[$0>>2]|0;
     $31 = ((($30)) + 272|0);
     $32 = HEAP32[$31>>2]|0;
     __THREW__ = 0;
     $33 = (invoke_iid(576,($2|0),(+$14))|0);
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if (!($35)) {
      __THREW__ = 0;
      invoke_vii($32|0,($0|0),($33|0));
      $36 = __THREW__; __THREW__ = 0;
      $37 = $36&1;
      if (!($37)) {
       break;
      }
     }
     $52 = ___cxa_find_matching_catch_2()|0;
     $53 = tempRet0;
     $$3 = $52;$$315 = $53;$$pre$phi25Z2D = $21;
     break L11;
    }
   } while(0);
   __THREW__ = 0;
   invoke_viii(573,($5|0),($1|0),(22478|0));
   $54 = __THREW__; __THREW__ = 0;
   $55 = $54&1;
   do {
    if ($55) {
     $69 = ___cxa_find_matching_catch_2()|0;
     $70 = tempRet0;
     $$1 = $69;$$113 = $70;
    } else {
     __THREW__ = 0;
     $56 = (invoke_ii(733,($5|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      $71 = ___cxa_find_matching_catch_2()|0;
      $72 = tempRet0;
      $73 = ((($5)) + 11|0);
      $74 = HEAP8[$73>>0]|0;
      $75 = ($74<<24>>24)<(0);
      if (!($75)) {
       $$1 = $71;$$113 = $72;
       break;
      }
      $76 = HEAP32[$5>>2]|0;
      __ZdlPv($76);
      $$1 = $71;$$113 = $72;
      break;
     }
     $59 = ((($5)) + 11|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = ($60<<24>>24)<(0);
     if ($61) {
      $62 = HEAP32[$5>>2]|0;
      __ZdlPv($62);
     }
     $63 = ($56|0)==(0);
     if (!($63)) {
      $64 = HEAP32[$0>>2]|0;
      $65 = ((($64)) + 268|0);
      $66 = HEAP32[$65>>2]|0;
      __THREW__ = 0;
      invoke_vii($66|0,($0|0),($56|0));
      $67 = __THREW__; __THREW__ = 0;
      $68 = $67&1;
      if ($68) {
       $77 = ___cxa_find_matching_catch_2()|0;
       $78 = tempRet0;
       $$3 = $77;$$315 = $78;$$pre$phi25Z2D = $21;
       break L11;
      }
     }
     $79 = HEAP8[$21>>0]|0;
     $80 = ($79<<24>>24)<(0);
     if (!($80)) {
      STACKTOP = sp;return;
     }
     $81 = HEAP32[$2>>2]|0;
     __ZdlPv($81);
     STACKTOP = sp;return;
    }
   } while(0);
   $$3 = $$1;$$315 = $$113;$$pre$phi25Z2D = $21;
  }
 } while(0);
 if ((label|0) == 17) {
  $$pre24 = ((($2)) + 11|0);
  $$3 = $$0;$$315 = $$012;$$pre$phi25Z2D = $$pre24;
 }
 $82 = HEAP8[$$pre$phi25Z2D>>0]|0;
 $83 = ($82<<24>>24)<(0);
 if ($83) {
  $84 = HEAP32[$2>>2]|0;
  __ZdlPv($84);
 }
 $$4 = $$3;$$416 = $$315;
 ___resumeException($$4|0);
 // unreachable;
}
function __Z7vformatPKcPi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$016$i$i = 0, $$017$i$i = 0, $$02739 = 0, $$028$lcssa = 0, $$lcssa = 0, $$pre = 0, $$pre43 = 0, $$pre44 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $vacopy_currentptr = 0, $vacopy_currentptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $3 = sp + 32|0;
 $4 = sp + 16|0;
 $5 = sp;
 HEAP32[$4>>2] = 0;
 $6 = ((($4)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($4)) + 8|0);
 HEAP32[$7>>2] = 0;
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$5>>2] = $vacopy_currentptr;
 $8 = (_vsnprintf($3,1024,$1,$2)|0);
 $9 = ($8>>>0)<(1025);
 L1: do {
  if ($9) {
   $$028$lcssa = $3;$$lcssa = $8;
   label = 3;
  } else {
   $$02739 = 1024;$29 = $8;$34 = 0;$35 = 0;$55 = 0;
   while(1) {
    $28 = ($29|0)>(0);
    $30 = (($29) + 1)|0;
    $31 = $$02739 << 1;
    $32 = $28 ? $30 : $31;
    $33 = (($34) - ($35))|0;
    $36 = ($32>>>0)>($33>>>0);
    $37 = $35;
    $38 = $34;
    if ($36) {
     $39 = (($32) - ($33))|0;
     __THREW__ = 0;
     invoke_vii(734,($4|0),($39|0));
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if ($41) {
      break L1;
     }
     $$pre44 = HEAP32[$4>>2]|0;
     $45 = $$pre44;
    } else {
     $42 = ($32>>>0)<($33>>>0);
     if ($42) {
      $43 = (($37) + ($32)|0);
      $44 = ($38|0)==($43|0);
      if ($44) {
       $45 = $55;
      } else {
       HEAP32[$6>>2] = $43;
       $45 = $55;
      }
     } else {
      $45 = $55;
     }
    }
    $vacopy_currentptr5 = HEAP32[$2>>2]|0;
    HEAP32[$5>>2] = $vacopy_currentptr5;
    $46 = (_vsnprintf($45,$32,$1,$2)|0);
    $47 = ($46|0)<=($32|0);
    $48 = ($46|0)>(-1);
    $or$cond = $47 & $48;
    if ($or$cond) {
     $$028$lcssa = $45;$$lcssa = $46;
     label = 3;
     break L1;
    }
    $$pre = HEAP32[$6>>2]|0;
    $$pre43 = HEAP32[$4>>2]|0;
    $49 = $$pre43;
    $$02739 = $32;$29 = $46;$34 = $$pre;$35 = $$pre43;$55 = $49;
   }
  }
 } while(0);
 do {
  if ((label|0) == 3) {
   ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
   $10 = ($$lcssa>>>0)<(11);
   if ($10) {
    $19 = $$lcssa&255;
    $20 = ((($0)) + 11|0);
    HEAP8[$20>>0] = $19;
    $21 = ($$lcssa|0)==(0);
    if ($21) {
     $$017$i$i = $0;
    } else {
     $$016$i$i = $0;
     label = 7;
    }
   } else {
    $11 = (($$lcssa) + 16)|0;
    $12 = $11 & -16;
    __THREW__ = 0;
    $13 = (invoke_ii(527,($12|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     break;
    }
    HEAP32[$0>>2] = $13;
    $16 = $12 | -2147483648;
    $17 = ((($0)) + 8|0);
    HEAP32[$17>>2] = $16;
    $18 = ((($0)) + 4|0);
    HEAP32[$18>>2] = $$lcssa;
    $$016$i$i = $13;
    label = 7;
   }
   if ((label|0) == 7) {
    _memcpy(($$016$i$i|0),($$028$lcssa|0),($$lcssa|0))|0;
    $$017$i$i = $$016$i$i;
   }
   $50 = (($$017$i$i) + ($$lcssa)|0);
   HEAP8[$50>>0] = 0;
   $51 = HEAP32[$4>>2]|0;
   $52 = ($51|0)==(0|0);
   if ($52) {
    STACKTOP = sp;return;
   }
   $53 = HEAP32[$6>>2]|0;
   $54 = ($53|0)==($51|0);
   if (!($54)) {
    HEAP32[$6>>2] = $51;
   }
   __ZdlPv($51);
   STACKTOP = sp;return;
  }
 } while(0);
 $22 = ___cxa_find_matching_catch_2()|0;
 $23 = tempRet0;
 $24 = HEAP32[$4>>2]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  ___resumeException($22|0);
  // unreachable;
 }
 $26 = HEAP32[$6>>2]|0;
 $27 = ($26|0)==($24|0);
 if (!($27)) {
  HEAP32[$6>>2] = $24;
 }
 __ZdlPv($24);
 ___resumeException($22|0);
 // unreachable;
}
function __ZNSt3__26vectorIcNS_9allocatorIcEEE8__appendEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i14 = 0, $$sroa$15$0 = 0, $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) - ($5))|0;
 $7 = ($6>>>0)<($1>>>0);
 if (!($7)) {
  $8 = $5;
  $$0$i = $1;$9 = $8;
  while(1) {
   HEAP8[$9>>0] = 0;
   $10 = HEAP32[$4>>2]|0;
   $11 = ((($10)) + 1|0);
   HEAP32[$4>>2] = $11;
   $12 = (($$0$i) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    break;
   } else {
    $$0$i = $12;$9 = $11;
   }
  }
  return;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = (($5) - ($14))|0;
 $16 = (($15) + ($1))|0;
 $17 = ($16|0)<(0);
 if ($17) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $18 = (($3) - ($14))|0;
 $19 = ($18>>>0)<(1073741823);
 $20 = $18 << 1;
 $21 = ($20>>>0)<($16>>>0);
 $$sroa$speculated$i = $21 ? $16 : $20;
 $$sroa$speculated$$i = $19 ? $$sroa$speculated$i : 2147483647;
 $22 = ($$sroa$speculated$$i|0)==(0);
 if ($22) {
  $25 = 0;
 } else {
  $23 = (__Znwj($$sroa$speculated$$i)|0);
  $25 = $23;
 }
 $24 = (($25) + ($15)|0);
 $26 = $24;
 $27 = (($25) + ($$sroa$speculated$$i)|0);
 $$0$i14 = $1;$$sroa$15$0 = $26;$28 = $24;
 while(1) {
  HEAP8[$28>>0] = 0;
  $29 = $$sroa$15$0;
  $30 = ((($29)) + 1|0);
  $31 = $30;
  $32 = (($$0$i14) + -1)|0;
  $33 = ($32|0)==(0);
  if ($33) {
   break;
  } else {
   $$0$i14 = $32;$$sroa$15$0 = $31;$28 = $30;
  }
 }
 $34 = $27;
 $35 = HEAP32[$0>>2]|0;
 $36 = HEAP32[$4>>2]|0;
 $37 = $35;
 $38 = (($36) - ($37))|0;
 $39 = (0 - ($38))|0;
 $40 = (($24) + ($39)|0);
 $41 = $40;
 $42 = ($38|0)>(0);
 if ($42) {
  _memcpy(($40|0),($35|0),($38|0))|0;
 }
 HEAP32[$0>>2] = $41;
 HEAP32[$4>>2] = $31;
 HEAP32[$2>>2] = $34;
 $43 = ($35|0)==(0|0);
 if ($43) {
  return;
 }
 __ZdlPv($35);
 return;
}
function __GLOBAL__sub_I_label_cpp() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $1 = ((($0)) + 11|0);
 HEAP8[$1>>0] = 5;
 ;HEAP8[$0>>0]=HEAP8[22602>>0]|0;HEAP8[$0+1>>0]=HEAP8[22602+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[22602+2>>0]|0;HEAP8[$0+3>>0]=HEAP8[22602+3>>0]|0;HEAP8[$0+4>>0]=HEAP8[22602+4>>0]|0;
 $2 = ((($0)) + 5|0);
 HEAP8[$2>>0] = 0;
 __THREW__ = 0;
 invoke_vii(735,(31708|0),($0|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  $10 = HEAP8[$1>>0]|0;
  $11 = ($10<<24>>24)<(0);
  if (!($11)) {
   ___resumeException($8|0);
   // unreachable;
  }
  $12 = HEAP32[$0>>2]|0;
  __ZdlPv($12);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $5 = HEAP8[$1>>0]|0;
  $6 = ($5<<24>>24)<(0);
  if (!($6)) {
   STACKTOP = sp;return;
  }
  $7 = HEAP32[$0>>2]|0;
  __ZdlPv($7);
  STACKTOP = sp;return;
 }
}
function __ZN14ClassRegistrarI5LabelEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp;
 $4 = HEAP32[7778]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (__Znwj(12)|0);
  $7 = ((($6)) + 4|0);
  HEAP32[$7>>2] = 0;
  $8 = ((($6)) + 8|0);
  HEAP32[$8>>2] = 0;
  HEAP32[$6>>2] = $7;
  HEAP32[7778] = $6;
  $10 = $6;
 } else {
  $10 = $4;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 $9 = ((($3)) + 12|0);
 HEAP32[$9>>2] = (736);
 __THREW__ = 0;
 $11 = (invoke_iiii(535,($10|0),($2|0),($3|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if (!($13)) {
   $14 = HEAP32[$11>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    __THREW__ = 0;
    $16 = (invoke_ii(527,32)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     break;
    }
    $19 = ((($16)) + 16|0);
    ;HEAP32[$19>>2]=HEAP32[$3>>2]|0;HEAP32[$19+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$3+8>>2]|0;
    ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
    $20 = ((($16)) + 28|0);
    $21 = HEAP32[$9>>2]|0;
    HEAP32[$20>>2] = $21;
    $22 = HEAP32[$2>>2]|0;
    HEAP32[$16>>2] = 0;
    $23 = ((($16)) + 4|0);
    HEAP32[$23>>2] = 0;
    $24 = ((($16)) + 8|0);
    HEAP32[$24>>2] = $22;
    HEAP32[$11>>2] = $16;
    $25 = HEAP32[$10>>2]|0;
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0|0);
    if ($27) {
     $31 = $16;
    } else {
     $28 = $26;
     HEAP32[$10>>2] = $28;
     $$pre$i$i$i$i$i$i = HEAP32[$11>>2]|0;
     $31 = $$pre$i$i$i$i$i$i;
    }
    $29 = ((($10)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($30,$31);
    $32 = ((($10)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + 1)|0;
    HEAP32[$32>>2] = $34;
   }
   $35 = ((($3)) + 11|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = ($36<<24>>24)<(0);
   if (!($37)) {
    STACKTOP = sp;return;
   }
   $38 = HEAP32[$3>>2]|0;
   __ZdlPv($38);
   STACKTOP = sp;return;
  }
 } while(0);
 $39 = ___cxa_find_matching_catch_2()|0;
 $40 = tempRet0;
 $41 = ((($3)) + 11|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = ($42<<24>>24)<(0);
 if (!($43)) {
  ___resumeException($39|0);
  // unreachable;
 }
 $44 = HEAP32[$3>>2]|0;
 __ZdlPv($44);
 ___resumeException($39|0);
 // unreachable;
}
function __ZN14ClassRegistrarI5LabelE7createTEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN6ObjectnwEj(448)|0);
 __THREW__ = 0;
 invoke_vi(721,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZdlPv($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  return ($0|0);
 }
 return (0)|0;
}
function __ZN5LabelC2Ev($0) {
 $0 = $0|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$13 = 0, $$2 = 0, $$24 = 0, $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 13|0;
 $1 = sp;
 $2 = sp + 12|0;
 __ZN4ViewC2Ev($0);
 HEAP32[$0>>2] = (6084);
 $3 = ((($0)) + 324|0);
 __THREW__ = 0;
 invoke_vi(737,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $26 = ___cxa_find_matching_catch_2()|0;
  $27 = tempRet0;
  $$2 = $27;$$24 = $26;
  __ZN4ViewD2Ev($0);
  ___resumeException($$24|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(738,($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $28 = ___cxa_find_matching_catch_2()|0;
   $29 = tempRet0;
   $$0 = $29;$$02 = $28;
   label = 15;
  } else {
   __THREW__ = 0;
   $8 = (+invoke_d(739));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    __THREW__ = 0;
    $11 = (invoke_iid(576,($1|0),(+$8))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     __THREW__ = 0;
     invoke_vii(740,($3|0),($11|0));
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      $16 = ((($1)) + 11|0);
      $17 = HEAP8[$16>>0]|0;
      $18 = ($17<<24>>24)<(0);
      if ($18) {
       $19 = HEAP32[$1>>2]|0;
       __ZdlPv($19);
      }
      __THREW__ = 0;
      invoke_vii(741,($3|0),-16777216);
      $20 = __THREW__; __THREW__ = 0;
      $21 = $20&1;
      if (!($21)) {
       $22 = ((($0)) + 229|0);
       $23 = HEAP8[$22>>0]|0;
       HEAP8[$2>>0] = $23;
       __THREW__ = 0;
       ;HEAP8[$$byval_copy>>0]=HEAP8[$2>>0]|0;
       invoke_vii(742,($3|0),($$byval_copy|0));
       $24 = __THREW__; __THREW__ = 0;
       $25 = $24&1;
       if (!($25)) {
        STACKTOP = sp;return;
       }
      }
      $36 = ___cxa_find_matching_catch_2()|0;
      $37 = tempRet0;
      $$1 = $37;$$13 = $36;
      break;
     }
    }
   }
   $30 = ___cxa_find_matching_catch_2()|0;
   $31 = tempRet0;
   $32 = ((($1)) + 11|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = ($33<<24>>24)<(0);
   if ($34) {
    $35 = HEAP32[$1>>2]|0;
    __ZdlPv($35);
    $$0 = $31;$$02 = $30;
    label = 15;
   } else {
    $$0 = $31;$$02 = $30;
    label = 15;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  $$1 = $$0;$$13 = $$02;
 }
 __ZN12TextRendererD2Ev($3);
 $$2 = $$1;$$24 = $$13;
 __ZN4ViewD2Ev($0);
 ___resumeException($$24|0);
 // unreachable;
}
function __ZN12LinearLayoutD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (6376);
 $1 = ((($0)) + 328|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  __ZN4ViewD2Ev($0);
  return;
 }
 $4 = ((($0)) + 332|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($2|0);
 if (!($6)) {
  $scevgep$i$i$i = ((($5)) + -4|0);
  $7 = $scevgep$i$i$i;
  $8 = $2;
  $9 = (($7) - ($8))|0;
  $10 = $9 >>> 2;
  $11 = $10 ^ -1;
  $scevgep4$i$i$i = (($5) + ($11<<2)|0);
  HEAP32[$4>>2] = $scevgep4$i$i$i;
 }
 __ZdlPv($2);
 __ZN4ViewD2Ev($0);
 return;
}
function __ZN12LinearLayoutD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i$i = 0, $scevgep4$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (6376);
 $1 = ((($0)) + 328|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  __ZN4ViewD2Ev($0);
  __ZdlPv($0);
  return;
 }
 $4 = ((($0)) + 332|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($2|0);
 if (!($6)) {
  $scevgep$i$i$i$i = ((($5)) + -4|0);
  $7 = $scevgep$i$i$i$i;
  $8 = $2;
  $9 = (($7) - ($8))|0;
  $10 = $9 >>> 2;
  $11 = $10 ^ -1;
  $scevgep4$i$i$i$i = (($5) + ($11<<2)|0);
  HEAP32[$4>>2] = $scevgep4$i$i$i$i;
 }
 __ZdlPv($2);
 __ZN4ViewD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN12LinearLayout7measureEff($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $$04450 = 0, $$04551 = 0, $$052 = 0, $$052$us = 0, $$lcssa67$sink = 0.0, $$pre = 0, $$pre58 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0;
 var $13 = 0, $130 = 0.0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0;
 var $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge$lcssa = 0.0, $storemerge54 = 0.0, $storemerge54$us = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 __ZN4View7measureEff($0,$1,$2);
 $3 = ((($0)) + 200|0);
 HEAPF32[$3>>2] = 0.0;
 $4 = ((($0)) + 196|0);
 HEAPF32[$4>>2] = 0.0;
 $5 = ((($0)) + 28|0);
 $6 = ((($0)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$5>>2]|0;
 $9 = ($7|0)==($8|0);
 if ($9) {
  $53 = 0.0;$86 = 0.0;
 } else {
  $10 = ((($0)) + 324|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(1);
  $13 = (($7) - ($8))|0;
  $14 = $13 >> 2;
  $15 = $8;
  if ($12) {
   $$052$us = 0;$23 = 0.0;$storemerge54$us = 0.0;
   while(1) {
    $16 = (($15) + ($$052$us<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ((($17)) + 115|0);
    HEAP8[tempDoublePtr>>0]=HEAP8[$18>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$18+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$18+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$18+3>>0];$19 = +HEAPF32[tempDoublePtr>>2];
    $20 = ((($17)) + 119|0);
    HEAP8[tempDoublePtr>>0]=HEAP8[$20>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$20+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$20+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$20+3>>0];$21 = +HEAPF32[tempDoublePtr>>2];
    $22 = $23 + $21;
    $24 = (+_fmaxf($storemerge54$us,$19));
    $25 = (($$052$us) + 1)|0;
    $26 = ($25>>>0)<($14>>>0);
    if ($26) {
     $$052$us = $25;$23 = $22;$storemerge54$us = $24;
    } else {
     $$lcssa67$sink = $22;$storemerge$lcssa = $24;
     break;
    }
   }
  } else {
   $$052 = 0;$36 = 0.0;$storemerge54 = 0.0;
   while(1) {
    $30 = (($15) + ($$052<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($31)) + 115|0);
    HEAP8[tempDoublePtr>>0]=HEAP8[$32>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$32+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$32+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$32+3>>0];$33 = +HEAPF32[tempDoublePtr>>2];
    $34 = ((($31)) + 119|0);
    HEAP8[tempDoublePtr>>0]=HEAP8[$34>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$34+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$34+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$34+3>>0];$35 = +HEAPF32[tempDoublePtr>>2];
    $37 = (+_fmaxf($36,$35));
    $38 = $33 + $storemerge54;
    $39 = (($$052) + 1)|0;
    $40 = ($39>>>0)<($14>>>0);
    if ($40) {
     $$052 = $39;$36 = $37;$storemerge54 = $38;
    } else {
     $$lcssa67$sink = $37;$storemerge$lcssa = $38;
     break;
    }
   }
  }
  HEAPF32[$3>>2] = $$lcssa67$sink;
  HEAPF32[$4>>2] = $storemerge$lcssa;
  $53 = $$lcssa67$sink;$86 = $storemerge$lcssa;
 }
 $27 = ((($0)) + 340|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $28 > 0.0;
 do {
  if ($29) {
   $41 = ((($0)) + 324|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(1);
   if ($43) {
    $44 = ((($0)) + 148|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($45|0)==(3);
    if (!($46)) {
     $116 = $86;$127 = $53;
     break;
    }
    $47 = ((($0)) + 152|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)==(0|0);
    if (!($49)) {
     $116 = $86;$127 = $53;
     break;
    }
    $50 = ((($0)) + 119|0);
    HEAP8[tempDoublePtr>>0]=HEAP8[$50>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$50+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$50+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$50+3>>0];$51 = +HEAPF32[tempDoublePtr>>2];
    $52 = $51 - $53;
    $54 = ((($0)) + 216|0);
    $55 = +HEAPF32[$54>>2];
    $56 = ((($0)) + 224|0);
    $57 = +HEAPF32[$56>>2];
    $58 = $55 + $57;
    $59 = $52 - $58;
    if ($9) {
     $116 = $86;$127 = $53;
     break;
    }
    $60 = ((($0)) + 328|0);
    $$pre58 = HEAP32[$60>>2]|0;
    $61 = $8;
    $62 = (($7) - ($8))|0;
    $63 = $62 >> 2;
    $$04450 = 0;$74 = $53;
    while(1) {
     $64 = (($61) + ($$04450<<2)|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (($$pre58) + ($$04450<<2)|0);
     $67 = +HEAPF32[$66>>2];
     $68 = $67 / $28;
     $69 = $59 * $68;
     $70 = ((($65)) + 119|0);
     HEAP8[tempDoublePtr>>0]=HEAP8[$70>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$70+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$70+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$70+3>>0];$71 = +HEAPF32[tempDoublePtr>>2];
     $72 = $71 + $69;
     HEAPF32[tempDoublePtr>>2]=$72;HEAP8[$70>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$70+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$70+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$70+3>>0]=HEAP8[tempDoublePtr+3>>0];
     $73 = $69 + $74;
     HEAPF32[$3>>2] = $73;
     $75 = (($$04450) + 1)|0;
     $76 = ($75>>>0)<($63>>>0);
     if ($76) {
      $$04450 = $75;$74 = $73;
     } else {
      $116 = $86;$127 = $73;
      break;
     }
    }
   } else {
    $77 = ((($0)) + 132|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($78|0)==(3);
    if (!($79)) {
     $116 = $86;$127 = $53;
     break;
    }
    $80 = ((($0)) + 136|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ($81|0)==(0|0);
    if (!($82)) {
     $116 = $86;$127 = $53;
     break;
    }
    $83 = ((($0)) + 115|0);
    HEAP8[tempDoublePtr>>0]=HEAP8[$83>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$83+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$83+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$83+3>>0];$84 = +HEAPF32[tempDoublePtr>>2];
    $85 = $84 - $86;
    $87 = ((($0)) + 212|0);
    $88 = +HEAPF32[$87>>2];
    $89 = ((($0)) + 220|0);
    $90 = +HEAPF32[$89>>2];
    $91 = $88 + $90;
    $92 = $85 - $91;
    if ($9) {
     $116 = $86;$127 = $53;
     break;
    }
    $93 = ((($0)) + 328|0);
    $$pre = HEAP32[$93>>2]|0;
    $94 = $8;
    $95 = (($7) - ($8))|0;
    $96 = $95 >> 2;
    $$04551 = 0;$107 = $86;
    while(1) {
     $97 = (($94) + ($$04551<<2)|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (($$pre) + ($$04551<<2)|0);
     $100 = +HEAPF32[$99>>2];
     $101 = $100 / $28;
     $102 = $92 * $101;
     $103 = ((($98)) + 115|0);
     HEAP8[tempDoublePtr>>0]=HEAP8[$103>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$103+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$103+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$103+3>>0];$104 = +HEAPF32[tempDoublePtr>>2];
     $105 = $104 + $102;
     HEAPF32[tempDoublePtr>>2]=$105;HEAP8[$103>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$103+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$103+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$103+3>>0]=HEAP8[tempDoublePtr+3>>0];
     $106 = $102 + $107;
     HEAPF32[$4>>2] = $106;
     $108 = (($$04551) + 1)|0;
     $109 = ($108>>>0)<($96>>>0);
     if ($109) {
      $$04551 = $108;$107 = $106;
     } else {
      $116 = $106;$127 = $53;
      break;
     }
    }
   }
  } else {
   $116 = $86;$127 = $53;
  }
 } while(0);
 $110 = ((($0)) + 132|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ($111|0)==(2);
 if ($112) {
  $113 = ((($0)) + 212|0);
  $114 = +HEAPF32[$113>>2];
  $115 = $114 + $116;
  $117 = ((($0)) + 220|0);
  $118 = +HEAPF32[$117>>2];
  $119 = $115 + $118;
  $120 = ((($0)) + 115|0);
  HEAPF32[tempDoublePtr>>2]=$119;HEAP8[$120>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$120+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$120+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$120+3>>0]=HEAP8[tempDoublePtr+3>>0];
 }
 $121 = ((($0)) + 148|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ($122|0)==(2);
 if (!($123)) {
  return;
 }
 $124 = ((($0)) + 216|0);
 $125 = +HEAPF32[$124>>2];
 $126 = $125 + $127;
 $128 = ((($0)) + 224|0);
 $129 = +HEAPF32[$128>>2];
 $130 = $126 + $129;
 $131 = ((($0)) + 119|0);
 HEAPF32[tempDoublePtr>>2]=$130;HEAP8[$131>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$131+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$131+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$131+3>>0]=HEAP8[tempDoublePtr+3>>0];
 return;
}
function __ZN12LinearLayout6layoutEv($0) {
 $0 = $0|0;
 var $$01924 = 0, $$023 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __ZN4View6layoutEv($0);
 $2 = ((($0)) + 200|0);
 HEAPF32[$2>>2] = 0.0;
 $3 = ((($0)) + 196|0);
 HEAPF32[$3>>2] = 0.0;
 $4 = ((($0)) + 212|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$1>>2] = $5;
 $6 = ((($1)) + 4|0);
 $7 = ((($0)) + 216|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($0)) + 324|0);
 $10 = HEAP32[$9>>2]|0;
 switch ($10|0) {
 case 1:  {
  $16 = ((($0)) + 28|0);
  $17 = ((($0)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$16>>2]|0;
  $20 = ($18|0)==($19|0);
  if ($20) {
   STACKTOP = sp;return;
  } else {
   $$023 = 0;$22 = $19;
  }
  while(1) {
   $21 = $22;
   $23 = (($21) + ($$023<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($25)) + 76|0);
   $27 = HEAP32[$26>>2]|0;
   FUNCTION_TABLE_vi[$27 & 1023]($24);
   __ZN4View14setFrameOriginERK6_POINT($24,$1);
   $28 = ((($24)) + 119|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$28>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$28+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$28+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$28+3>>0];$29 = +HEAPF32[tempDoublePtr>>2];
   $30 = +HEAPF32[$6>>2];
   $31 = $29 + $30;
   HEAPF32[$6>>2] = $31;
   $32 = (($$023) + 1)|0;
   $33 = HEAP32[$17>>2]|0;
   $34 = HEAP32[$16>>2]|0;
   $35 = (($33) - ($34))|0;
   $36 = $35 >> 2;
   $37 = ($32>>>0)<($36>>>0);
   if ($37) {
    $$023 = $32;$22 = $34;
   } else {
    break;
   }
  }
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  $11 = ((($0)) + 28|0);
  $12 = ((($0)) + 32|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$11>>2]|0;
  $15 = ($13|0)==($14|0);
  if ($15) {
   STACKTOP = sp;return;
  } else {
   $$01924 = 0;$39 = $14;
  }
  while(1) {
   $38 = $39;
   $40 = (($38) + ($$01924<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($42)) + 76|0);
   $44 = HEAP32[$43>>2]|0;
   FUNCTION_TABLE_vi[$44 & 1023]($41);
   __ZN4View14setFrameOriginERK6_POINT($41,$1);
   $45 = ((($41)) + 115|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$45>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$45+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$45+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$45+3>>0];$46 = +HEAPF32[tempDoublePtr>>2];
   $47 = +HEAPF32[$1>>2];
   $48 = $46 + $47;
   HEAPF32[$1>>2] = $48;
   $49 = (($$01924) + 1)|0;
   $50 = HEAP32[$12>>2]|0;
   $51 = HEAP32[$11>>2]|0;
   $52 = (($50) - ($51))|0;
   $53 = $52 >> 2;
   $54 = ($49>>>0)<($53>>>0);
   if ($54) {
    $$01924 = $49;$39 = $51;
   } else {
    break;
   }
  }
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function __ZN12LinearLayout10addSubviewEP4View($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 __ZN4View10addSubviewEPS_($0,$1);
 HEAPF32[$2>>2] = 0.0;
 $3 = ((($0)) + 332|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 336|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<($6>>>0);
 if ($7) {
  HEAP32[$4>>2] = 0;
  $8 = ((($4)) + 4|0);
  HEAP32[$3>>2] = $8;
  STACKTOP = sp;return;
 } else {
  $9 = ((($0)) + 328|0);
  __ZNSt3__26vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIfEEvOT_($9,$2);
  STACKTOP = sp;return;
 }
}
function __ZN12LinearLayout13removeSubviewEP4View($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 148|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_iii[$4 & 1023]($0,$1)|0);
 __ZN4View13removeSubviewEPS_($0,$1);
 $6 = ((($0)) + 328|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($5<<2)|0);
 $9 = ((($8)) + 4|0);
 $10 = ((($0)) + 332|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $9;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14|0)==(0);
 $16 = $11;
 if ($15) {
  $19 = $16;
 } else {
  _memmove(($8|0),($9|0),($13|0))|0;
  $$pre$i = HEAP32[$10>>2]|0;
  $19 = $$pre$i;
 }
 $17 = (($8) + ($14<<2)|0);
 $18 = ($19|0)==($17|0);
 if ($18) {
  return;
 }
 $scevgep$i$i$i = ((($19)) + -4|0);
 $20 = $scevgep$i$i$i;
 $21 = $17;
 $22 = (($20) - ($21))|0;
 $23 = $22 >>> 2;
 $24 = $23 ^ -1;
 $scevgep4$i$i$i = (($19) + ($24<<2)|0);
 HEAP32[$10>>2] = $scevgep4$i$i$i;
 return;
}
function __ZN12LinearLayout15applyStyleValueERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP10StyleValue($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$pre = 0, $$pre12 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $4&255;
 $9 = $5 ? $7 : $8;
 $10 = ($9|0)==(11);
 if ($10) {
  __THREW__ = 0;
  $11 = (invoke_iiiiii(546,($1|0),0,-1,(22615|0),11)|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $14 = ___cxa_find_matching_catch_3(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  }
  $16 = ($11|0)==(0);
  if ($16) {
   $17 = HEAP32[$2>>2]|0;
   $18 = ($17|0)==(0);
   if (!($18)) {
    $$0 = 0;
    return ($$0|0);
   }
   $19 = ((($2)) + 8|0);
   $20 = ((($19)) + 11|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)<(0);
   $23 = ((($2)) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $21&255;
   $26 = $22 ? $24 : $25;
   $27 = ($26|0)==(10);
   do {
    if ($27) {
     __THREW__ = 0;
     $28 = (invoke_iiiiii(546,($19|0),0,-1,(22627|0),10)|0);
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if ($30) {
      $31 = ___cxa_find_matching_catch_3(0|0)|0;
      $32 = tempRet0;
      ___clang_call_terminate($31);
      // unreachable;
     }
     $33 = ($28|0)==(0);
     if (!($33)) {
      $$pre = HEAP8[$20>>0]|0;
      $$pre12 = HEAP32[$23>>2]|0;
      $36 = $$pre;$39 = $$pre12;
      break;
     }
     $34 = ((($0)) + 324|0);
     HEAP32[$34>>2] = 0;
     $$0 = 1;
     return ($$0|0);
    } else {
     $36 = $21;$39 = $24;
    }
   } while(0);
   $35 = ($36<<24>>24)<(0);
   $37 = $36&255;
   $38 = $35 ? $39 : $37;
   $40 = ($38|0)==(8);
   if ($40) {
    __THREW__ = 0;
    $41 = (invoke_iiiiii(546,($19|0),0,-1,(22638|0),8)|0);
    $42 = __THREW__; __THREW__ = 0;
    $43 = $42&1;
    if ($43) {
     $44 = ___cxa_find_matching_catch_3(0|0)|0;
     $45 = tempRet0;
     ___clang_call_terminate($44);
     // unreachable;
    }
    $46 = ($41|0)==(0);
    if ($46) {
     $47 = ((($0)) + 324|0);
     HEAP32[$47>>2] = 1;
     $$0 = 1;
     return ($$0|0);
    }
   }
  }
 }
 $48 = (__ZN4View15applyStyleValueERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP10StyleValue($0,$1,$2)|0);
 $$0 = $48;
 return ($$0|0);
}
function __ZN12LinearLayout24applyStyleValueFromChildERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP10StyleValueP4View($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5&255;
 $10 = $6 ? $8 : $9;
 $11 = ($10|0)==(6);
 if (!($11)) {
  $$0 = 0;
  return ($$0|0);
 }
 __THREW__ = 0;
 $12 = (invoke_iiiiii(546,($1|0),0,-1,(22608|0),6)|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $15 = ___cxa_find_matching_catch_3(0|0)|0;
  $16 = tempRet0;
  ___clang_call_terminate($15);
  // unreachable;
 }
 $17 = ($12|0)==(0);
 if (!($17)) {
  $$0 = 0;
  return ($$0|0);
 }
 $18 = HEAP32[$0>>2]|0;
 $19 = ((($18)) + 256|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (+__ZN10StyleValue10getAsFloatEv($2));
 FUNCTION_TABLE_viid[$20 & 1023]($0,$3,$21);
 $$0 = 1;
 return ($$0|0);
}
function __ZN12LinearLayout9setWeightEP4Viewf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 148|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iii[$5 & 1023]($0,$1)|0);
 $7 = ((($0)) + 328|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($6<<2)|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $2 - $10;
 $12 = ((($0)) + 340|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $13 + $11;
 HEAPF32[$12>>2] = $14;
 HEAPF32[$9>>2] = $2;
 $15 = HEAP32[$0>>2]|0;
 $16 = ((($15)) + 68|0);
 $17 = HEAP32[$16>>2]|0;
 FUNCTION_TABLE_vi[$17 & 1023]($0);
 return;
}
function __ZNSt3__26vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIfEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>(1073741823);
 if ($8) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($4))|0;
 $12 = $11 >> 2;
 $13 = ($12>>>0)<(536870911);
 $14 = $11 >> 1;
 $15 = ($14>>>0)<($7>>>0);
 $$sroa$speculated$i = $15 ? $7 : $14;
 $$sroa$speculated$$i = $13 ? $$sroa$speculated$i : 1073741823;
 $16 = ($$sroa$speculated$$i|0)==(0);
 do {
  if ($16) {
   $26 = 0;
  } else {
   $17 = ($$sroa$speculated$$i>>>0)>(1073741823);
   if (!($17)) {
    $23 = $$sroa$speculated$$i << 2;
    $24 = (__Znwj($23)|0);
    $26 = $24;
    break;
   }
   $18 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(568,($18|0),(23604|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $21 = ___cxa_find_matching_catch_2()|0;
    $22 = tempRet0;
    ___cxa_free_exception(($18|0));
    ___resumeException($21|0);
    // unreachable;
   } else {
    HEAP32[$18>>2] = (9544);
    ___cxa_throw(($18|0),(1992|0),(506|0));
    // unreachable;
   }
  }
 } while(0);
 $25 = (($26) + ($6<<2)|0);
 $27 = (($26) + ($$sroa$speculated$$i<<2)|0);
 $28 = $27;
 $29 = HEAP32[$1>>2]|0;
 HEAP32[$25>>2] = $29;
 $30 = ((($25)) + 4|0);
 $31 = $30;
 $32 = (0 - ($6))|0;
 $33 = (($25) + ($32<<2)|0);
 $34 = $33;
 $35 = ($5|0)>(0);
 if ($35) {
  $36 = $4;
  _memcpy(($33|0),($36|0),($5|0))|0;
 }
 HEAP32[$0>>2] = $34;
 HEAP32[$2>>2] = $31;
 HEAP32[$9>>2] = $28;
 $37 = ($4|0)==(0);
 if ($37) {
  return;
 }
 $38 = $4;
 __ZdlPv($38);
 return;
}
function __GLOBAL__sub_I_linearlayout_cpp() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 $1 = (__Znwj(16)|0);
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = -2147483632;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = 12;
 dest=$1; src=22662; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $4 = ((($1)) + 12|0);
 HEAP8[$4>>0] = 0;
 __THREW__ = 0;
 invoke_vii(743,(31709|0),($0|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $13 = ((($0)) + 11|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)<(0);
  if (!($15)) {
   ___resumeException($11|0);
   // unreachable;
  }
  $16 = HEAP32[$0>>2]|0;
  __ZdlPv($16);
  ___resumeException($11|0);
  // unreachable;
 } else {
  $7 = ((($0)) + 11|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)<(0);
  if (!($9)) {
   STACKTOP = sp;return;
  }
  $10 = HEAP32[$0>>2]|0;
  __ZdlPv($10);
  STACKTOP = sp;return;
 }
}
function __ZN14ClassRegistrarI12LinearLayoutEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp;
 $4 = HEAP32[7778]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (__Znwj(12)|0);
  $7 = ((($6)) + 4|0);
  HEAP32[$7>>2] = 0;
  $8 = ((($6)) + 8|0);
  HEAP32[$8>>2] = 0;
  HEAP32[$6>>2] = $7;
  HEAP32[7778] = $6;
  $10 = $6;
 } else {
  $10 = $4;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 $9 = ((($3)) + 12|0);
 HEAP32[$9>>2] = (744);
 __THREW__ = 0;
 $11 = (invoke_iiii(535,($10|0),($2|0),($3|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if (!($13)) {
   $14 = HEAP32[$11>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    __THREW__ = 0;
    $16 = (invoke_ii(527,32)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     break;
    }
    $19 = ((($16)) + 16|0);
    ;HEAP32[$19>>2]=HEAP32[$3>>2]|0;HEAP32[$19+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$3+8>>2]|0;
    ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
    $20 = ((($16)) + 28|0);
    $21 = HEAP32[$9>>2]|0;
    HEAP32[$20>>2] = $21;
    $22 = HEAP32[$2>>2]|0;
    HEAP32[$16>>2] = 0;
    $23 = ((($16)) + 4|0);
    HEAP32[$23>>2] = 0;
    $24 = ((($16)) + 8|0);
    HEAP32[$24>>2] = $22;
    HEAP32[$11>>2] = $16;
    $25 = HEAP32[$10>>2]|0;
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0|0);
    if ($27) {
     $31 = $16;
    } else {
     $28 = $26;
     HEAP32[$10>>2] = $28;
     $$pre$i$i$i$i$i$i = HEAP32[$11>>2]|0;
     $31 = $$pre$i$i$i$i$i$i;
    }
    $29 = ((($10)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($30,$31);
    $32 = ((($10)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + 1)|0;
    HEAP32[$32>>2] = $34;
   }
   $35 = ((($3)) + 11|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = ($36<<24>>24)<(0);
   if (!($37)) {
    STACKTOP = sp;return;
   }
   $38 = HEAP32[$3>>2]|0;
   __ZdlPv($38);
   STACKTOP = sp;return;
  }
 } while(0);
 $39 = ___cxa_find_matching_catch_2()|0;
 $40 = tempRet0;
 $41 = ((($3)) + 11|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = ($42<<24>>24)<(0);
 if (!($43)) {
  ___resumeException($39|0);
  // unreachable;
 }
 $44 = HEAP32[$3>>2]|0;
 __ZdlPv($44);
 ___resumeException($39|0);
 // unreachable;
}
function __ZN14ClassRegistrarI12LinearLayoutE7createTEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN6ObjectnwEj(344)|0);
 __THREW__ = 0;
 invoke_vi(720,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  __ZdlPv($0);
  ___resumeException($4|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = (6376);
  $3 = ((($0)) + 324|0);
  ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
  return ($0|0);
 }
 return (0)|0;
}
function __ZN12LinearLayoutC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4ViewC2Ev($0);
 HEAP32[$0>>2] = (6376);
 $1 = ((($0)) + 324|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 return;
}
function __ZN8ListViewD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i1 = 0, $scevgep$i$i$i4 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i2 = 0, $scevgep4$i$i$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (6644);
 $1 = ((($0)) + 392|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($0)) + 396|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==($2|0);
  if (!($6)) {
   $scevgep$i$i$i = ((($5)) + -12|0);
   $7 = $scevgep$i$i$i;
   $8 = $2;
   $9 = (($7) - ($8))|0;
   $10 = (($9>>>0) / 12)&-1;
   $11 = $10 ^ -1;
   $scevgep4$i$i$i = (($5) + (($11*12)|0)|0);
   HEAP32[$4>>2] = $scevgep4$i$i$i;
  }
  __ZdlPv($2);
 }
 $12 = ((($0)) + 384|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 368|0);
 $15 = ($13|0)==($14|0);
 if ($15) {
  $16 = HEAP32[$13>>2]|0;
  $17 = ((($16)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_vi[$18 & 1023]($13);
 } else {
  $19 = ($13|0)==(0|0);
  if (!($19)) {
   $20 = HEAP32[$13>>2]|0;
   $21 = ((($20)) + 20|0);
   $22 = HEAP32[$21>>2]|0;
   FUNCTION_TABLE_vi[$22 & 1023]($13);
  }
 }
 $23 = ((($0)) + 340|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  $26 = ((($0)) + 344|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==($24|0);
  if (!($28)) {
   $scevgep$i$i$i1 = ((($27)) + -8|0);
   $29 = $scevgep$i$i$i1;
   $30 = $24;
   $31 = (($29) - ($30))|0;
   $32 = $31 >>> 3;
   $33 = $32 ^ -1;
   $scevgep4$i$i$i2 = (($27) + ($33<<3)|0);
   HEAP32[$26>>2] = $scevgep4$i$i$i2;
  }
  __ZdlPv($24);
 }
 $34 = ((($0)) + 328|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0|0);
 if ($36) {
  __ZN4ViewD2Ev($0);
  return;
 }
 $37 = ((($0)) + 332|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==($35|0);
 if (!($39)) {
  $scevgep$i$i$i4 = ((($38)) + -16|0);
  $40 = $scevgep$i$i$i4;
  $41 = $35;
  $42 = (($40) - ($41))|0;
  $43 = $42 >>> 4;
  $44 = $43 ^ -1;
  $scevgep4$i$i$i5 = (($38) + ($44<<4)|0);
  HEAP32[$37>>2] = $scevgep4$i$i$i5;
 }
 __ZdlPv($35);
 __ZN4ViewD2Ev($0);
 return;
}
function __ZN8ListViewD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8ListViewD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN8ListView16setContentOffsetE6_POINT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0;
 var $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $2 = sp;
 $3 = ((($0)) + 208|0);
 $4 = +HEAPF32[$3>>2];
 $5 = ((($1)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$5>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$5+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$5+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$5+3>>0];$6 = +HEAPF32[tempDoublePtr>>2];
 $7 = $4 - $6;
 $8 = $1;
 $9 = $8;
 $10 = HEAPU8[$9>>0]|(HEAPU8[$9+1>>0]<<8)|(HEAPU8[$9+2>>0]<<16)|(HEAPU8[$9+3>>0]<<24);
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAPU8[$12>>0]|(HEAPU8[$12+1>>0]<<8)|(HEAPU8[$12+2>>0]<<16)|(HEAPU8[$12+3>>0]<<24);
 $14 = $2;
 $15 = $14;
 HEAP32[$15>>2] = $10;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $13;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
 __ZN4View16setContentOffsetE6_POINT($0,$tmpcast$byval_copy);
 $18 = $7 != 0.0;
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = HEAP32[$0>>2]|0;
 $20 = ((($19)) + 280|0);
 $21 = HEAP32[$20>>2]|0;
 FUNCTION_TABLE_vi[$21 & 1023]($0);
 STACKTOP = sp;return;
}
function __ZN8ListView7measureEff($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 80|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($0);
 __ZN4View7measureEff($0,$1,$2);
 $6 = ((($0)) + 324|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 $9 = HEAP32[$0>>2]|0;
 if ($8) {
  $10 = ((($9)) + 260|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_vi[$11 & 1023]($0);
  return;
 } else {
  $12 = ((($9)) + 280|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vi[$13 & 1023]($0);
  return;
 }
}
function __ZN8ListView17updateContentSizeEff($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $$02829 = 0, $$030 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond33 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 196|0);
 HEAPF32[$4>>2] = $1;
 $5 = ((($0)) + 243|0);
 $6 = HEAPU8[$5>>0]|(HEAPU8[$5+1>>0]<<8)|(HEAPU8[$5+2>>0]<<16)|(HEAPU8[$5+3>>0]<<24);
 $7 = ((($0)) + 200|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($0)) + 324|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 392|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 396|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==($11|0);
 if (!($14)) {
  $scevgep$i$i$i = ((($13)) + -12|0);
  $15 = $scevgep$i$i$i;
  $16 = $11;
  $17 = (($15) - ($16))|0;
  $18 = (($17>>>0) / 12)&-1;
  $19 = $18 ^ -1;
  $scevgep4$i$i$i = (($13) + (($19*12)|0)|0);
  HEAP32[$12>>2] = $scevgep4$i$i$i;
 }
 $20 = ($9|0)==(0|0);
 if (!($20)) {
  $21 = HEAP32[$9>>2]|0;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (FUNCTION_TABLE_ii[$23 & 1023]($9)|0);
  $25 = ($24|0)>(0);
  if ($25) {
   $26 = ((($3)) + 4|0);
   $27 = ((($3)) + 8|0);
   $28 = ((($0)) + 400|0);
   $$030 = 0;
   while(1) {
    $29 = +HEAPF32[$7>>2];
    $30 = (~~(($29)));
    HEAP32[$3>>2] = $30;
    $31 = HEAP32[$9>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (+FUNCTION_TABLE_dii[$33 & 0]($9,$$030));
    $35 = (~~(($34)));
    HEAP32[$26>>2] = $35;
    HEAP32[$27>>2] = $35;
    $36 = HEAP32[$9>>2]|0;
    $37 = ((($36)) + 12|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iii[$38 & 1023]($9,$$030)|0);
    $40 = ($39|0)==(0);
    if ($40) {
     $$pre = HEAP32[$27>>2]|0;
     $42 = $$pre;
    } else {
     $$02829 = 0;
     while(1) {
      $51 = HEAP32[$9>>2]|0;
      $52 = ((($51)) + 16|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = ($$02829|0)<(0);
      $55 = $54 << 31 >> 31;
      $56 = $55 | $$030;
      $57 = (+FUNCTION_TABLE_diii[$53 & 1023]($9,$$02829,$56));
      $58 = HEAP32[$27>>2]|0;
      $59 = (+($58|0));
      $60 = $57 + $59;
      $61 = (~~(($60)));
      HEAP32[$27>>2] = $61;
      $62 = (($$02829) + 1)|0;
      $exitcond = ($62|0)==($39|0);
      if ($exitcond) {
       $42 = $61;
       break;
      } else {
       $$02829 = $62;
      }
     }
    }
    $41 = (+($42|0));
    $43 = +HEAPF32[$7>>2];
    $44 = $43 + $41;
    HEAPF32[$7>>2] = $44;
    $45 = HEAP32[$12>>2]|0;
    $46 = HEAP32[$28>>2]|0;
    $47 = ($45|0)==($46|0);
    if ($47) {
     __ZNSt3__26vectorIN8ListView15SECTION_METRICSENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($10,$3);
    } else {
     ;HEAP32[$45>>2]=HEAP32[$3>>2]|0;HEAP32[$45+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$45+8>>2]=HEAP32[$3+8>>2]|0;
     $48 = HEAP32[$12>>2]|0;
     $49 = ((($48)) + 12|0);
     HEAP32[$12>>2] = $49;
    }
    $50 = (($$030) + 1)|0;
    $exitcond33 = ($50|0)==($24|0);
    if ($exitcond33) {
     break;
    } else {
     $$030 = $50;
    }
   }
  }
 }
 $63 = ((($0)) + 251|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$63>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$63+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$63+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$63+3>>0];$64 = +HEAPF32[tempDoublePtr>>2];
 $65 = +HEAPF32[$7>>2];
 $66 = $64 + $65;
 HEAPF32[$7>>2] = $66;
 STACKTOP = sp;return;
}
function __ZN8ListView13removeSubviewEP4View($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa$i$i$i = 0, $$0$lcssa$i$i$i23 = 0, $$078$i$i$i = 0, $$078$i$i$i19 = 0, $$09$i$i$i = 0, $$09$i$i$i18 = 0, $$sroa$030$0$$sroa$030$0$3165 = 0, $$sroa$042$0$$sroa$042$0$4370 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i24 = 0, $scevgep$i$i8$i = 0, $scevgep$i$i8$i16 = 0, $scevgep12$i$i$i = 0, $scevgep12$i$i$i21 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4View13removeSubviewEPS_($0,$1);
 $2 = ((($0)) + 328|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 332|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = ($6|0)==($5|0);
 L1: do {
  if (!($7)) {
   $$sroa$042$0$$sroa$042$0$4370 = $3;$9 = $6;
   while(1) {
    $8 = ((($9)) + 8|0);
    $10 = HEAP32[$8>>2]|0;
    $11 = ($10|0)==($1|0);
    if ($11) {
     break;
    }
    $44 = ((($9)) + 16|0);
    $45 = $44;
    $46 = ($44|0)==($5|0);
    if ($46) {
     break L1;
    } else {
     $$sroa$042$0$$sroa$042$0$4370 = $45;$9 = $44;
    }
   }
   $12 = (($$sroa$042$0$$sroa$042$0$4370) - ($3))|0;
   $13 = $12 >> 4;
   $14 = (($6) + ($13<<4)|0);
   $15 = ((($14)) + 16|0);
   $16 = ($15|0)==($5|0);
   if ($16) {
    $$0$lcssa$i$i$i23 = $14;
   } else {
    $scevgep$i$i8$i16 = ((($5)) + -16|0);
    $17 = $scevgep$i$i8$i16;
    $$078$i$i$i19 = $15;$$09$i$i$i18 = $14;
    while(1) {
     $18 = $$078$i$i$i19;
     $19 = $18;
     $20 = HEAP32[$19>>2]|0;
     $21 = (($18) + 4)|0;
     $22 = $21;
     $23 = HEAP32[$22>>2]|0;
     $24 = $$09$i$i$i18;
     $25 = $24;
     HEAP32[$25>>2] = $20;
     $26 = (($24) + 4)|0;
     $27 = $26;
     HEAP32[$27>>2] = $23;
     $28 = ((($$078$i$i$i19)) + 8|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ((($$09$i$i$i18)) + 8|0);
     HEAP32[$30>>2] = $29;
     $31 = ((($$078$i$i$i19)) + 16|0);
     $32 = ((($$09$i$i$i18)) + 16|0);
     $33 = ($31|0)==($5|0);
     if ($33) {
      break;
     } else {
      $$078$i$i$i19 = $31;$$09$i$i$i18 = $32;
     }
    }
    $34 = $15;
    $35 = (($17) - ($34))|0;
    $36 = $35 >>> 4;
    $37 = (($36) + 1)|0;
    $scevgep12$i$i$i21 = (($14) + ($37<<4)|0);
    $$0$lcssa$i$i$i23 = $scevgep12$i$i$i21;
   }
   $38 = ($5|0)==($$0$lcssa$i$i$i23|0);
   if ($38) {
    return;
   }
   $scevgep$i$i$i24 = ((($5)) + -16|0);
   $39 = $scevgep$i$i$i24;
   $40 = $$0$lcssa$i$i$i23;
   $41 = (($39) - ($40))|0;
   $42 = $41 >>> 4;
   $43 = $42 ^ -1;
   $scevgep4$i$i$i25 = (($5) + ($43<<4)|0);
   HEAP32[$4>>2] = $scevgep4$i$i$i25;
   return;
  }
 } while(0);
 $47 = ((($0)) + 340|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($0)) + 344|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $48;
 $52 = ($51|0)==($50|0);
 if ($52) {
  return;
 } else {
  $$sroa$030$0$$sroa$030$0$3165 = $48;$54 = $51;
 }
 while(1) {
  $53 = ((($54)) + 4|0);
  $55 = HEAP32[$53>>2]|0;
  $56 = ($55|0)==($1|0);
  if ($56) {
   break;
  }
  $80 = ((($54)) + 8|0);
  $81 = $80;
  $82 = ($80|0)==($50|0);
  if ($82) {
   label = 19;
   break;
  } else {
   $$sroa$030$0$$sroa$030$0$3165 = $81;$54 = $80;
  }
 }
 if ((label|0) == 19) {
  return;
 }
 $57 = (($$sroa$030$0$$sroa$030$0$3165) - ($48))|0;
 $58 = $57 >> 3;
 $59 = (($51) + ($58<<3)|0);
 $60 = ((($59)) + 8|0);
 $61 = ($60|0)==($50|0);
 if ($61) {
  $$0$lcssa$i$i$i = $59;
 } else {
  $scevgep$i$i8$i = ((($50)) + -8|0);
  $62 = $scevgep$i$i8$i;
  $$078$i$i$i = $60;$$09$i$i$i = $59;
  while(1) {
   $63 = HEAP32[$$078$i$i$i>>2]|0;
   HEAP32[$$09$i$i$i>>2] = $63;
   $64 = ((($$078$i$i$i)) + 4|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ((($$09$i$i$i)) + 4|0);
   HEAP32[$66>>2] = $65;
   $67 = ((($$078$i$i$i)) + 8|0);
   $68 = ((($$09$i$i$i)) + 8|0);
   $69 = ($67|0)==($50|0);
   if ($69) {
    break;
   } else {
    $$078$i$i$i = $67;$$09$i$i$i = $68;
   }
  }
  $70 = $60;
  $71 = (($62) - ($70))|0;
  $72 = $71 >>> 3;
  $73 = (($72) + 1)|0;
  $scevgep12$i$i$i = (($59) + ($73<<3)|0);
  $$0$lcssa$i$i$i = $scevgep12$i$i$i;
 }
 $74 = ($50|0)==($$0$lcssa$i$i$i|0);
 if ($74) {
  return;
 }
 $scevgep$i$i$i = ((($50)) + -8|0);
 $75 = $scevgep$i$i$i;
 $76 = $$0$lcssa$i$i$i;
 $77 = (($75) - ($76))|0;
 $78 = $77 >>> 3;
 $79 = $78 ^ -1;
 $scevgep4$i$i$i = (($50) + ($79<<3)|0);
 HEAP32[$49>>2] = $scevgep4$i$i$i;
 return;
}
function __ZN8ListView12onTouchEventEii6_POINT($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $4 = sp;
 $5 = $3;
 $6 = $5;
 $7 = HEAPU8[$6>>0]|(HEAPU8[$6+1>>0]<<8)|(HEAPU8[$6+2>>0]<<16)|(HEAPU8[$6+3>>0]<<24);
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAPU8[$9>>0]|(HEAPU8[$9+1>>0]<<8)|(HEAPU8[$9+2>>0]<<16)|(HEAPU8[$9+3>>0]<<24);
 $11 = $4;
 $12 = $11;
 HEAP32[$12>>2] = $7;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $10;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
 (__ZN4View12onTouchEventEii6_POINT($0,$1,$2,$tmpcast$byval_copy)|0);
 switch ($1|0) {
 case 0:  {
  $15 = (HEAP32[tempDoublePtr>>2]=$7,+HEAPF32[tempDoublePtr>>2]);
  $16 = ((($0)) + 204|0);
  $17 = +HEAPF32[$16>>2];
  $18 = $17 + $15;
  HEAPF32[tempDoublePtr>>2]=$18;HEAP8[$3>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$3+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$3+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$3+3>>0]=HEAP8[tempDoublePtr+3>>0];
  $19 = ((($0)) + 208|0);
  $20 = +HEAPF32[$19>>2];
  $21 = ((($3)) + 4|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$21>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$21+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$21+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$21+3>>0];$22 = +HEAPF32[tempDoublePtr>>2];
  $23 = $20 + $22;
  HEAPF32[tempDoublePtr>>2]=$23;HEAP8[$21>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$21+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$21+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$21+3>>0]=HEAP8[tempDoublePtr+3>>0];
  $24 = ((($0)) + 328|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($0)) + 332|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($25|0)==($27|0);
  if ($28) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $30 = $25;
  }
  while(1) {
   $29 = ((($30)) + 8|0);
   $31 = HEAP32[$29>>2]|0;
   $32 = ((($31)) + 107|0);
   $33 = (__ZN4RECT8containsERK6_POINT($32,$3)|0);
   if ($33) {
    break;
   }
   $43 = ((($30)) + 16|0);
   $44 = HEAP32[$26>>2]|0;
   $45 = ($43|0)==($44|0);
   if ($45) {
    $$0 = 1;
    label = 10;
    break;
   } else {
    $30 = $43;
   }
  }
  if ((label|0) == 10) {
   STACKTOP = sp;return ($$0|0);
  }
  $34 = HEAP32[$0>>2]|0;
  $35 = ((($34)) + 276|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $30;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) + 4)|0;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  FUNCTION_TABLE_viii[$36 & 1023]($0,$39,$42);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 4:  {
  $46 = HEAP32[$0>>2]|0;
  $47 = ((($46)) + 276|0);
  $48 = HEAP32[$47>>2]|0;
  FUNCTION_TABLE_viii[$48 & 1023]($0,-1,-1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 6:  {
  $49 = ((($0)) + 360|0);
  $50 = $49;
  $51 = $50;
  $52 = HEAP32[$51>>2]|0;
  $53 = (($50) + 4)|0;
  $54 = $53;
  $55 = HEAP32[$54>>2]|0;
  $56 = ($52|0)==(-1);
  $57 = ($55|0)==(-1);
  $58 = $56 & $57;
  if ($58) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $59 = HEAP32[$0>>2]|0;
  $60 = ((($59)) + 264|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($59)) + 272|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (FUNCTION_TABLE_iiii[$63 & 1023]($0,$52,$55)|0);
  $65 = $49;
  $66 = $65;
  $67 = HEAP32[$66>>2]|0;
  $68 = (($65) + 4)|0;
  $69 = $68;
  $70 = HEAP32[$69>>2]|0;
  FUNCTION_TABLE_viiii[$61 & 1023]($0,$64,$67,$70);
  $71 = HEAP32[$0>>2]|0;
  $72 = ((($71)) + 276|0);
  $73 = HEAP32[$72>>2]|0;
  FUNCTION_TABLE_viii[$73 & 1023]($0,-1,-1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 2:  {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return (0)|0;
}
function __ZN8ListView10setAdapterEP12IListAdapter($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 324|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$1>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($1,$0);
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 268|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 1023]($0);
 return;
}
function __ZN8ListView18removeAllItemViewsEv($0) {
 $0 = $0|0;
 var $$in = 0, $$in11 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 328|0);
 $2 = ((($0)) + 332|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($3|0)==($4|0);
 if (!($5)) {
  $$in = $4;
  while(1) {
   $11 = $$in;
   $12 = ((($11)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$0>>2]|0;
   $15 = ((($14)) + 140|0);
   $16 = HEAP32[$15>>2]|0;
   FUNCTION_TABLE_vii[$16 & 1023]($0,$13);
   $17 = HEAP32[$2>>2]|0;
   $18 = HEAP32[$1>>2]|0;
   $19 = ($17|0)==($18|0);
   if ($19) {
    break;
   } else {
    $$in = $18;
   }
  }
 }
 $6 = ((($0)) + 340|0);
 $7 = ((($0)) + 344|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$6>>2]|0;
 $10 = ($8|0)==($9|0);
 if ($10) {
  return;
 }
 $$in11 = $9;
 while(1) {
  $20 = $$in11;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[$0>>2]|0;
  $24 = ((($23)) + 140|0);
  $25 = HEAP32[$24>>2]|0;
  FUNCTION_TABLE_vii[$25 & 1023]($0,$22);
  $26 = HEAP32[$7>>2]|0;
  $27 = HEAP32[$6>>2]|0;
  $28 = ($26|0)==($27|0);
  if ($28) {
   break;
  } else {
   $$in11 = $27;
  }
 }
 return;
}
function __ZN8ListView9onItemTapEP4Viewx($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 8|0;
 $5 = sp;
 $6 = ((($0)) + 384|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 HEAP32[$4>>2] = $1;
 $9 = $5;
 $10 = $9;
 HEAP32[$10>>2] = $2;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $3;
 $13 = HEAP32[$7>>2]|0;
 $14 = ((($13)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 FUNCTION_TABLE_viii[$15 & 1023]($7,$4,$5);
 STACKTOP = sp;return;
}
function __ZN8ListView6reloadEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 260|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($0);
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vi[$6 & 1023]($0);
 return;
}
function __ZN8ListView11indexToViewEx($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa$09$0$$sroa$09$0$1119 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 328|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 332|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $21 = 0;
  return ($21|0);
 } else {
  $$sroa$09$0$$sroa$09$0$1119 = $4;
 }
 while(1) {
  $8 = $$sroa$09$0$$sroa$09$0$1119;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)==($1|0);
  $15 = ($13|0)==($2|0);
  $16 = $14 & $15;
  if ($16) {
   break;
  }
  $17 = ((($$sroa$09$0$$sroa$09$0$1119)) + 16|0);
  $18 = ($17|0)==($6|0);
  if ($18) {
   $21 = 0;
   label = 5;
   break;
  } else {
   $$sroa$09$0$$sroa$09$0$1119 = $17;
  }
 }
 if ((label|0) == 5) {
  return ($21|0);
 }
 $19 = ((($$sroa$09$0$$sroa$09$0$1119)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20;
 return ($21|0);
}
function __ZN8ListView16setSelectedIndexEx($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 360|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)==(-1);
 $12 = ($10|0)==(-1);
 $13 = $11 & $12;
 if (!($13)) {
  $14 = HEAP32[$0>>2]|0;
  $15 = ((($14)) + 272|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_iiii[$16 & 1023]($0,$7,$10)|0);
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   $19 = HEAP32[$17>>2]|0;
   $20 = ((($19)) + 116|0);
   $21 = HEAP32[$20>>2]|0;
   FUNCTION_TABLE_vii[$21 & 1023]($17,0);
  }
  $22 = $4;
  $23 = $22;
  HEAP32[$23>>2] = -1;
  $24 = (($22) + 4)|0;
  $25 = $24;
  HEAP32[$25>>2] = -1;
 }
 $26 = ($1|0)==(-1);
 $27 = ($2|0)==(-1);
 $28 = $26 & $27;
 if ($28) {
  STACKTOP = sp;return;
 }
 $29 = $4;
 $30 = $29;
 HEAP32[$30>>2] = $1;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $2;
 $33 = HEAP32[$0>>2]|0;
 $34 = ((($33)) + 272|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (FUNCTION_TABLE_iiii[$35 & 1023]($0,$1,$2)|0);
 $37 = ($36|0)==(0|0);
 if ($37) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$36>>2]|0;
 $39 = ((($38)) + 124|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (__Znwj(32)|0);
 HEAP32[$3>>2] = $41;
 $42 = ((($3)) + 8|0);
 HEAP32[$42>>2] = -2147483616;
 $43 = ((($3)) + 4|0);
 HEAP32[$43>>2] = 30;
 dest=$41; src=22772; stop=dest+30|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $44 = ((($41)) + 30|0);
 HEAP8[$44>>0] = 0;
 __THREW__ = 0;
 $45 = (invoke_ii(733,($3|0))|0);
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if (!($47)) {
  __THREW__ = 0;
  invoke_vii($40|0,($36|0),($45|0));
  $48 = __THREW__; __THREW__ = 0;
  $49 = $48&1;
  if (!($49)) {
   $50 = ((($3)) + 11|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = ($51<<24>>24)<(0);
   if ($52) {
    $53 = HEAP32[$3>>2]|0;
    __ZdlPv($53);
   }
   STACKTOP = sp;return;
  }
 }
 $54 = ___cxa_find_matching_catch_2()|0;
 $55 = tempRet0;
 $56 = ((($3)) + 11|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = ($57<<24>>24)<(0);
 if (!($58)) {
  ___resumeException($54|0);
  // unreachable;
 }
 $59 = HEAP32[$3>>2]|0;
 __ZdlPv($59);
 ___resumeException($54|0);
 // unreachable;
}
function __ZN8ListView18updateVisibleItemsEv($0) {
 $0 = $0|0;
 var $$0160189 = 0, $$0213 = 0.0, $$025$lcssa$i = 0, $$025$lcssa$i102 = 0, $$02535$i = 0, $$02535$i104 = 0, $$026$lcssa$i = 0, $$026$lcssa$i101 = 0, $$02634$i = 0, $$02634$i105 = 0, $$086212 = 0, $$090 = 0.0, $$091207 = 0, $$092202 = 0.0, $$095 = 0.0, $$1208 = 0.0, $$12732$i = 0, $$12732$i108 = 0, $$133$i = 0, $$133$i107 = 0;
 var $$193 = 0.0, $$2 = 0.0, $$4 = 0.0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$pre = 0, $$pre233 = 0, $$pre234 = 0, $$sroa$0124$0187 = 0, $$sroa$0142$0192 = 0, $$sroa$0142$1 = 0, $$sroa$0142$2 = 0, $$sroa$0151$0201$off0 = 0, $$sroa$0151$0201$off32 = 0, $$sroa$11$3 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0.0;
 var $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0, $294 = 0.0, $295 = 0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0.0, $331 = 0, $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $extract$t167196 = 0, $extract$t170197 = 0, $or$cond = 0, $or$cond164 = 0, $or$cond165 = 0, $or$cond166 = 0, $or$cond96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $$byval_copy2 = sp + 128|0;
 $$byval_copy1 = sp + 112|0;
 $$byval_copy = sp + 96|0;
 $1 = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = sp + 80|0;
 $5 = sp + 64|0;
 $6 = sp + 144|0;
 $7 = sp + 56|0;
 $8 = sp + 48|0;
 $9 = sp + 136|0;
 $10 = ((($0)) + 324|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 1023]($11)|0);
 $16 = HEAP32[$0>>2]|0;
 $17 = ((($16)) + 152|0);
 $18 = HEAP32[$17>>2]|0;
 FUNCTION_TABLE_vi[$18 & 1023]($0);
 $19 = ((($0)) + 328|0);
 $20 = ((($0)) + 332|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$19>>2]|0;
 $23 = ($21|0)==($22|0);
 if ($23) {
  $24 = ((($0)) + 208|0);
  $25 = +HEAPF32[$24>>2];
  $26 = ((($0)) + 119|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$26>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$26+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$26+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$26+3>>0];$27 = +HEAPF32[tempDoublePtr>>2];
  $28 = $25 + $27;
  $29 = ($15|0)>(0);
  if (!($29)) {
   STACKTOP = sp;return;
  }
  $30 = ((($0)) + 243|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$30>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$30+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$30+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$30+3>>0];$31 = +HEAPF32[tempDoublePtr>>2];
  $32 = ((($1)) + 8|0);
  $$0213 = $31;$$086212 = 0;
  while(1) {
   $33 = HEAP32[$10>>2]|0;
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($34)) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (FUNCTION_TABLE_iii[$36 & 1023]($33,$$086212)|0);
   $38 = ($37|0)>(0);
   L8: do {
    if ($38) {
     $$091207 = 0;$$1208 = $$0213;
     while(1) {
      $46 = ($$091207|0)<(0);
      $47 = $46 << 31 >> 31;
      $48 = $47 | $$086212;
      $49 = ($$091207|0)==(0);
      if ($49) {
       $50 = HEAP32[$10>>2]|0;
       $51 = HEAP32[$50>>2]|0;
       $52 = ((($51)) + 8|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = (+FUNCTION_TABLE_dii[$53 & 0]($50,$$086212));
       $55 = $$1208 + $54;
       $$2 = $55;
      } else {
       $$2 = $$1208;
      }
      $56 = HEAP32[$10>>2]|0;
      $57 = HEAP32[$56>>2]|0;
      $58 = ((($57)) + 16|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = (+FUNCTION_TABLE_diii[$59 & 1023]($56,$$091207,$48));
      $61 = +HEAPF32[$24>>2];
      $62 = $$2 >= $61;
      $63 = $$2 < $28;
      $or$cond = $63 & $62;
      if ($or$cond) {
       break;
      }
      $64 = $$2 + $60;
      $65 = $64 >= $61;
      $66 = $64 < $28;
      $or$cond96 = $65 & $66;
      $45 = (($$091207) + 1)|0;
      if ($or$cond96) {
       break;
      }
      $39 = HEAP32[$10>>2]|0;
      $40 = HEAP32[$39>>2]|0;
      $41 = ((($40)) + 12|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (FUNCTION_TABLE_iii[$42 & 1023]($39,$$086212)|0);
      $44 = ($45|0)<($43|0);
      if ($44) {
       $$091207 = $45;$$1208 = $64;
      } else {
       $$4 = $64;$$sroa$11$3 = 0;
       break L8;
      }
     }
     $67 = HEAP32[$0>>2]|0;
     $68 = ((($67)) + 284|0);
     $69 = HEAP32[$68>>2]|0;
     FUNCTION_TABLE_viiiiidd[$69 & 511]($1,$0,$$091207,$48,0,$60,$$2);
     $70 = HEAP32[$32>>2]|0;
     $$4 = $$2;$$sroa$11$3 = $70;
    } else {
     $$4 = $$0213;$$sroa$11$3 = 0;
    }
   } while(0);
   $71 = (($$086212) + 1)|0;
   $72 = ($71|0)<($15|0);
   $73 = ($$sroa$11$3|0)==(0);
   $or$cond164 = $73 & $72;
   if ($or$cond164) {
    $$0213 = $$4;$$086212 = $71;
   } else {
    break;
   }
  }
  $$pre = HEAP32[$20>>2]|0;
  $$pre233 = HEAP32[$19>>2]|0;
  $75 = $$pre;$76 = $$pre233;
 } else {
  $75 = $21;$76 = $22;
 }
 $74 = ($75|0)==($76|0);
 if ($74) {
  STACKTOP = sp;return;
 }
 $77 = $76;
 $78 = $77;
 $79 = $78;
 $80 = HEAP32[$79>>2]|0;
 $81 = (($78) + 4)|0;
 $82 = $81;
 $83 = HEAP32[$82>>2]|0;
 $84 = ((($77)) + 8|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ((($85)) + 111|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$86>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$86+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$86+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$86+3>>0];$87 = +HEAPF32[tempDoublePtr>>2];
 $88 = ((($0)) + 208|0);
 $89 = +HEAPF32[$88>>2];
 $90 = $87 > $89;
 $91 = ($83|0)>(0);
 $92 = ($80>>>0)>(0);
 $93 = ($83|0)==(0);
 $94 = $93 & $92;
 $95 = $91 | $94;
 $96 = $95 & $90;
 L24: do {
  if ($96) {
   $$092202 = $87;$$sroa$0151$0201$off0 = $80;$$sroa$0151$0201$off32 = $83;
   while(1) {
    $97 = HEAP32[$10>>2]|0;
    $98 = HEAP32[$97>>2]|0;
    $99 = ((($98)) + 4|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = (FUNCTION_TABLE_ii[$100 & 1023]($97)|0);
    $102 = (($$sroa$0151$0201$off0) + -1)|0;
    $103 = ($$sroa$0151$0201$off0|0)<(1);
    $104 = ($$sroa$0151$0201$off32|0)>(0);
    $105 = $103 & $104;
    if ($105) {
     $$02535$i = $102;$$02634$i = $$sroa$0151$0201$off32;
     while(1) {
      $107 = HEAP32[$10>>2]|0;
      $108 = HEAP32[$107>>2]|0;
      $109 = ((($108)) + 12|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = (($$02634$i) + -1)|0;
      $112 = (FUNCTION_TABLE_iii[$110 & 1023]($107,$111)|0);
      $113 = (($112) + ($$02535$i))|0;
      $114 = ($113|0)<(0);
      $115 = ($$02634$i|0)>(1);
      $116 = $115 & $114;
      if ($116) {
       $$02535$i = $113;$$02634$i = $111;
      } else {
       $$025$lcssa$i = $113;$$026$lcssa$i = $111;
       break;
      }
     }
    } else {
     $$025$lcssa$i = $102;$$026$lcssa$i = $$sroa$0151$0201$off32;
    }
    $106 = ($$026$lcssa$i|0)<($101|0);
    if ($106) {
     $$12732$i = $$026$lcssa$i;$$133$i = $$025$lcssa$i;
    } else {
     break L24;
    }
    while(1) {
     $117 = HEAP32[$10>>2]|0;
     $118 = HEAP32[$117>>2]|0;
     $119 = ((($118)) + 12|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = (FUNCTION_TABLE_iii[$120 & 1023]($117,$$12732$i)|0);
     $122 = ($$133$i|0)<($121|0);
     if ($122) {
      break;
     }
     $123 = HEAP32[$10>>2]|0;
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($$12732$i) + 1)|0;
     $128 = (FUNCTION_TABLE_iii[$126 & 1023]($123,$$12732$i)|0);
     $129 = (($$133$i) - ($128))|0;
     $130 = ($127|0)<($101|0);
     if ($130) {
      $$12732$i = $127;$$133$i = $129;
     } else {
      break L24;
     }
    }
    $131 = ($$133$i|0)<(0);
    $132 = ($$133$i|0)<(0);
    $133 = $132 << 31 >> 31;
    $134 = $$12732$i | $133;
    $135 = ($$133$i|0)==(-1);
    $136 = ($134|0)==(-1);
    $137 = $135 & $136;
    $or$cond165 = $131 | $137;
    if ($or$cond165) {
     break L24;
    }
    $138 = ($$sroa$0151$0201$off0|0)==(0);
    if ($138) {
     $139 = HEAP32[$10>>2]|0;
     $140 = HEAP32[$139>>2]|0;
     $141 = ((($140)) + 8|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = (+FUNCTION_TABLE_dii[$142 & 0]($139,$$sroa$0151$0201$off32));
     $144 = $$092202 - $143;
     $$193 = $144;
    } else {
     $$193 = $$092202;
    }
    $145 = HEAP32[$10>>2]|0;
    $146 = HEAP32[$145>>2]|0;
    $147 = ((($146)) + 16|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = (+FUNCTION_TABLE_diii[$148 & 1023]($145,$$133$i,$134));
    $150 = $$193 - $149;
    $151 = HEAP32[$0>>2]|0;
    $152 = ((($151)) + 284|0);
    $153 = HEAP32[$152>>2]|0;
    FUNCTION_TABLE_viiiiidd[$153 & 511]($2,$0,$$133$i,$134,1,$149,$150);
    $154 = $2;
    $155 = $154;
    $156 = HEAP32[$155>>2]|0;
    $157 = (($154) + 4)|0;
    $158 = $157;
    $159 = HEAP32[$158>>2]|0;
    $160 = +HEAPF32[$88>>2];
    $161 = $150 > $160;
    $162 = ($159|0)>(0);
    $163 = ($156>>>0)>(0);
    $164 = ($159|0)==(0);
    $165 = $164 & $163;
    $166 = $162 | $165;
    $167 = $166 & $161;
    if ($167) {
     $$092202 = $150;$$sroa$0151$0201$off0 = $156;$$sroa$0151$0201$off32 = $159;
    } else {
     break;
    }
   }
  }
 } while(0);
 $168 = HEAP32[$20>>2]|0;
 $169 = HEAP32[$19>>2]|0;
 $170 = (($168) - ($169))|0;
 $171 = $170 >> 4;
 $172 = ($171|0)==(0);
 if ($172) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv($19);
  // unreachable;
 }
 $173 = (($171) + -1)|0;
 $174 = $169;
 $175 = (($174) + ($173<<4)|0);
 $176 = $175;
 $177 = $176;
 $178 = HEAP32[$177>>2]|0;
 $179 = (($176) + 4)|0;
 $180 = $179;
 $181 = HEAP32[$180>>2]|0;
 $182 = (((($174) + ($173<<4)|0)) + 8|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = ((($183)) + 107|0);
 $185 = (+__ZNK4RECT6bottomEv($184));
 $186 = ((($0)) + 107|0);
 $187 = (+__ZNK4RECT6bottomEv($186));
 $188 = +HEAPF32[$88>>2];
 $189 = $187 + $188;
 $190 = $185 < $189;
 L44: do {
  if ($190) {
   $191 = ((($3)) + 8|0);
   $192 = $184;$extract$t167196 = $178;$extract$t170197 = $181;
   while(1) {
    $193 = (+__ZNK4RECT6bottomEv($192));
    $194 = HEAP32[$10>>2]|0;
    $195 = HEAP32[$194>>2]|0;
    $196 = ((($195)) + 4|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = (FUNCTION_TABLE_ii[$197 & 1023]($194)|0);
    $199 = (($extract$t167196) + 1)|0;
    $200 = ($extract$t167196|0)<(-1);
    $201 = ($extract$t170197|0)>(0);
    $202 = $200 & $201;
    if ($202) {
     $$02535$i104 = $199;$$02634$i105 = $extract$t170197;
     while(1) {
      $204 = HEAP32[$10>>2]|0;
      $205 = HEAP32[$204>>2]|0;
      $206 = ((($205)) + 12|0);
      $207 = HEAP32[$206>>2]|0;
      $208 = (($$02634$i105) + -1)|0;
      $209 = (FUNCTION_TABLE_iii[$207 & 1023]($204,$208)|0);
      $210 = (($209) + ($$02535$i104))|0;
      $211 = ($210|0)<(0);
      $212 = ($$02634$i105|0)>(1);
      $213 = $212 & $211;
      if ($213) {
       $$02535$i104 = $210;$$02634$i105 = $208;
      } else {
       $$025$lcssa$i102 = $210;$$026$lcssa$i101 = $208;
       break;
      }
     }
    } else {
     $$025$lcssa$i102 = $199;$$026$lcssa$i101 = $extract$t170197;
    }
    $203 = ($$026$lcssa$i101|0)<($198|0);
    if ($203) {
     $$12732$i108 = $$026$lcssa$i101;$$133$i107 = $$025$lcssa$i102;
    } else {
     break L44;
    }
    while(1) {
     $214 = HEAP32[$10>>2]|0;
     $215 = HEAP32[$214>>2]|0;
     $216 = ((($215)) + 12|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = (FUNCTION_TABLE_iii[$217 & 1023]($214,$$12732$i108)|0);
     $219 = ($$133$i107|0)<($218|0);
     if ($219) {
      break;
     }
     $220 = HEAP32[$10>>2]|0;
     $221 = HEAP32[$220>>2]|0;
     $222 = ((($221)) + 12|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = (($$12732$i108) + 1)|0;
     $225 = (FUNCTION_TABLE_iii[$223 & 1023]($220,$$12732$i108)|0);
     $226 = (($$133$i107) - ($225))|0;
     $227 = ($224|0)<($198|0);
     if ($227) {
      $$12732$i108 = $224;$$133$i107 = $226;
     } else {
      break L44;
     }
    }
    $228 = ($$133$i107|0)<(0);
    $229 = ($$133$i107|0)<(0);
    $230 = $229 << 31 >> 31;
    $231 = $$12732$i108 | $230;
    $232 = ($$133$i107|0)==(-1);
    $233 = ($231|0)==(-1);
    $234 = $232 & $233;
    $or$cond166 = $228 | $234;
    if ($or$cond166) {
     break L44;
    }
    $235 = ($$133$i107|0)==(0);
    if ($235) {
     $236 = HEAP32[$10>>2]|0;
     $237 = HEAP32[$236>>2]|0;
     $238 = ((($237)) + 8|0);
     $239 = HEAP32[$238>>2]|0;
     $240 = (+FUNCTION_TABLE_dii[$239 & 0]($236,$231));
     $241 = $193 + $240;
     $$095 = $241;
    } else {
     $$095 = $193;
    }
    $242 = HEAP32[$10>>2]|0;
    $243 = HEAP32[$242>>2]|0;
    $244 = ((($243)) + 16|0);
    $245 = HEAP32[$244>>2]|0;
    $246 = (+FUNCTION_TABLE_diii[$245 & 1023]($242,$$133$i107,$231));
    $247 = HEAP32[$0>>2]|0;
    $248 = ((($247)) + 284|0);
    $249 = HEAP32[$248>>2]|0;
    FUNCTION_TABLE_viiiiidd[$249 & 511]($3,$0,$$133$i107,$231,0,$246,$$095);
    $250 = $3;
    $251 = $250;
    $252 = HEAP32[$251>>2]|0;
    $253 = (($250) + 4)|0;
    $254 = $253;
    $255 = HEAP32[$254>>2]|0;
    $256 = HEAP32[$191>>2]|0;
    $257 = ((($256)) + 107|0);
    $258 = (+__ZNK4RECT6bottomEv($257));
    $259 = (+__ZNK4RECT6bottomEv($186));
    $260 = +HEAPF32[$88>>2];
    $261 = $259 + $260;
    $262 = $258 < $261;
    if ($262) {
     $192 = $257;$extract$t167196 = $252;$extract$t170197 = $255;
    } else {
     break;
    }
   }
  }
 } while(0);
 $263 = ((($0)) + 340|0);
 $264 = +HEAPF32[$88>>2];
 $265 = ((($0)) + 243|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$265>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$265+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$265+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$265+3>>0];$266 = +HEAPF32[tempDoublePtr>>2];
 $267 = $264 + $266;
 $268 = ((($0)) + 119|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$268>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$268+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$268+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$268+3>>0];$269 = +HEAPF32[tempDoublePtr>>2];
 $270 = $264 + $269;
 $271 = HEAP32[$19>>2]|0;
 $272 = $271;
 $273 = $272;
 $274 = HEAP32[$273>>2]|0;
 $275 = (($272) + 4)|0;
 $276 = $275;
 $277 = HEAP32[$276>>2]|0;
 $278 = ((($0)) + 392|0);
 $279 = HEAP32[$278>>2]|0;
 $280 = (($279) + (($277*12)|0)|0);
 $281 = ((($0)) + 396|0);
 $282 = HEAP32[$281>>2]|0;
 $283 = ($280|0)==($282|0);
 if ($283) {
  STACKTOP = sp;return;
 }
 $284 = HEAP32[$263>>2]|0;
 $285 = ((($0)) + 344|0);
 $286 = ((($0)) + 115|0);
 $287 = ((($7)) + 4|0);
 $$0160189 = $277;$$sroa$0124$0187 = $280;$$sroa$0142$0192 = $284;$349 = $282;
 L64: while(1) {
  $288 = ((($$sroa$0124$0187)) + 4|0);
  $289 = HEAP32[$288>>2]|0;
  $290 = ($289|0)<(1);
  do {
   if ($290) {
    $$sroa$0142$2 = $$sroa$0142$0192;$348 = $349;
   } else {
    $291 = HEAP32[$$sroa$0124$0187>>2]|0;
    $292 = (+($291|0));
    $293 = !($270 >= $292);
    if ($293) {
     $294 = +HEAPF32[$88>>2];
     $295 = ((($$sroa$0124$0187)) + 8|0);
     $296 = HEAP32[$295>>2]|0;
     $297 = (($296) + ($291))|0;
     $298 = (+($297|0));
     $299 = !($294 >= $298);
     if ($299) {
      $$sroa$0142$2 = $$sroa$0142$0192;$348 = $349;
      break;
     }
    }
    $300 = $292 > $267;
    if ($300) {
     $$090 = $292;
    } else {
     $301 = ((($$sroa$0124$0187)) + 8|0);
     $302 = HEAP32[$301>>2]|0;
     $303 = (($302) + ($291))|0;
     $304 = (($303) - ($289))|0;
     $305 = (+($304|0));
     $306 = (+_fminf($305,$267));
     $$090 = $306;
    }
    $307 = HEAP32[$285>>2]|0;
    $308 = $$sroa$0142$0192;
    $309 = ($308|0)==($307|0);
    if ($309) {
     label = 48;
    } else {
     $310 = HEAP32[$308>>2]|0;
     $311 = ($$0160189|0)==($310|0);
     if ($311) {
      $340 = ((($308)) + 4|0);
      $341 = HEAP32[$340>>2]|0;
      __Z10POINT_Makeff($9,0.0,$$090);
      __ZN4View14setFrameOriginERK6_POINT($341,$9);
      $$sroa$0142$1 = $$sroa$0142$0192;
     } else {
      label = 48;
     }
    }
    if ((label|0) == 48) {
     label = 0;
     $312 = HEAP32[$10>>2]|0;
     $313 = HEAP32[$312>>2]|0;
     $314 = ((($313)) + 24|0);
     $315 = HEAP32[$314>>2]|0;
     $316 = (FUNCTION_TABLE_iii[$315 & 1023]($312,$$0160189)|0);
     $317 = ($316|0)==(0|0);
     if ($317) {
      label = 49;
      break L64;
     }
     $318 = $316;
     $319 = HEAP32[$316>>2]|0;
     $320 = ((($319)) + 60|0);
     $321 = HEAP32[$320>>2]|0;
     __Z16MEASURESPEC_MakeiP4Viewff($4,3,0,1.0,0.0);
     $322 = HEAP32[$288>>2]|0;
     $323 = (+($322|0));
     __Z16MEASURESPEC_MakeiP4Viewff($5,1,0,0.0,$323);
     ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$4+12>>2]|0;
     ;HEAP32[$$byval_copy1>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$5+12>>2]|0;
     FUNCTION_TABLE_viii[$321 & 1023]($316,$$byval_copy,$$byval_copy1);
     $324 = HEAP32[$0>>2]|0;
     $325 = ((($324)) + 132|0);
     $326 = HEAP32[$325>>2]|0;
     FUNCTION_TABLE_vii[$326 & 1023]($0,$316);
     $327 = HEAP32[$316>>2]|0;
     $328 = ((($327)) + 72|0);
     $329 = HEAP32[$328>>2]|0;
     HEAP8[tempDoublePtr>>0]=HEAP8[$286>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$286+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$286+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$286+3>>0];$330 = +HEAPF32[tempDoublePtr>>2];
     $331 = HEAP32[$288>>2]|0;
     $332 = (+($331|0));
     FUNCTION_TABLE_vidd[$329 & 1023]($316,$330,$332);
     $333 = HEAP32[$316>>2]|0;
     $334 = ((($333)) + 76|0);
     $335 = HEAP32[$334>>2]|0;
     FUNCTION_TABLE_vi[$335 & 1023]($316);
     $336 = ((($316)) + 107|0);
     HEAP8[tempDoublePtr>>0]=HEAP8[$336>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$336+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$336+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$336+3>>0];$337 = +HEAPF32[tempDoublePtr>>2];
     __Z10POINT_Makeff($6,$337,$$090);
     __ZN4View14setFrameOriginERK6_POINT($316,$6);
     HEAP32[$7>>2] = $$0160189;
     HEAP32[$287>>2] = $318;
     HEAP32[$8>>2] = $$sroa$0142$0192;
     ;HEAP32[$$byval_copy2>>2]=HEAP32[$8>>2]|0;
     $338 = (__ZNSt3__26vectorINS_4pairIiP4ViewEENS_9allocatorIS4_EEE6insertENS_11__wrap_iterIPKS4_EERS9_($263,$$byval_copy2,$7)|0);
     $339 = $338;
     $$sroa$0142$1 = $339;
    }
    $342 = $$sroa$0142$1;
    $343 = ((($342)) + 8|0);
    $344 = $343;
    $$pre234 = HEAP32[$281>>2]|0;
    $$sroa$0142$2 = $344;$348 = $$pre234;
   }
  } while(0);
  $345 = ((($$sroa$0124$0187)) + 12|0);
  $346 = (($$0160189) + 1)|0;
  $347 = ($345|0)==($348|0);
  if ($347) {
   label = 54;
   break;
  } else {
   $$0160189 = $346;$$sroa$0124$0187 = $345;$$sroa$0142$0192 = $$sroa$0142$2;$349 = $348;
  }
 }
 if ((label|0) == 49) {
  ___assert_fail((22742|0),(22684|0),294,(22753|0));
  // unreachable;
 }
 else if ((label|0) == 54) {
  STACKTOP = sp;return;
 }
}
function __ZN8ListView14createItemViewExbff($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = +$6;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$sink24 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy2 = sp + 72|0;
 $$byval_copy1 = sp + 56|0;
 $$byval_copy = sp + 40|0;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 96|0;
 $10 = sp;
 $11 = sp + 80|0;
 $12 = ((($1)) + 324|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (FUNCTION_TABLE_iiii[$16 & 1023]($13,$2,$3)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  ___assert_fail((22675|0),(22684|0),163,(22727|0));
  // unreachable;
 }
 $19 = $17;
 $20 = HEAP32[$12>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 32|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($21)) + 28|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (FUNCTION_TABLE_iiii[$25 & 1023]($20,$2,$3)|0);
 FUNCTION_TABLE_viiiii[$23 & 1023]($20,$17,$2,$3,$26);
 $27 = HEAP32[$17>>2]|0;
 $28 = ((($27)) + 60|0);
 $29 = HEAP32[$28>>2]|0;
 __Z16MEASURESPEC_MakeiP4Viewff($7,3,0,1.0,0.0);
 __Z16MEASURESPEC_MakeiP4Viewff($8,1,0,0.0,$5);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$7+12>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$8+12>>2]|0;
 FUNCTION_TABLE_viii[$29 & 1023]($17,$$byval_copy,$$byval_copy1);
 $30 = HEAP32[$1>>2]|0;
 $31 = ((($30)) + 136|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($1)) + 328|0);
 $34 = ((($1)) + 332|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$33>>2]|0;
 $37 = (($35) - ($36))|0;
 $38 = $37 >> 4;
 FUNCTION_TABLE_viii[$32 & 1023]($1,$17,$38);
 $39 = HEAP32[$17>>2]|0;
 $40 = ((($39)) + 72|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($1)) + 115|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$42>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$42+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$42+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$42+3>>0];$43 = +HEAPF32[tempDoublePtr>>2];
 FUNCTION_TABLE_vidd[$41 & 1023]($17,$43,$5);
 $44 = HEAP32[$17>>2]|0;
 $45 = ((($44)) + 76|0);
 $46 = HEAP32[$45>>2]|0;
 FUNCTION_TABLE_vi[$46 & 1023]($17);
 $47 = ((($17)) + 107|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$47>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$47+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$47+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$47+3>>0];$48 = +HEAPF32[tempDoublePtr>>2];
 __Z10POINT_Makeff($9,$48,$6);
 __ZN4View14setFrameOriginERK6_POINT($17,$9);
 $49 = $0;
 $50 = $49;
 HEAP32[$50>>2] = $2;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = $3;
 $53 = ((($0)) + 8|0);
 HEAP32[$53>>2] = $19;
 $$sink24 = $4 ? $33 : $34;
 $54 = HEAP32[$$sink24>>2]|0;
 HEAP32[$10>>2] = $54;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$10>>2]|0;
 (__ZNSt3__26vectorINS_4pairIxP4ViewEENS_9allocatorIS4_EEE6insertENS_11__wrap_iterIPKS4_EERS9_($33,$$byval_copy2,$0)|0);
 $55 = (__ZN6ObjectnwEj(72)|0);
 __THREW__ = 0;
 invoke_vii(725,($55|0),($17|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if ($57) {
  $76 = ___cxa_find_matching_catch_2()|0;
  $77 = tempRet0;
  __ZdlPv($55);
  ___resumeException($76|0);
  // unreachable;
 } else {
  $58 = HEAP32[$55>>2]|0;
  $59 = ((($58)) + 40|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($1)) + 356|0);
  $62 = HEAP32[$61>>2]|0;
  FUNCTION_TABLE_vii[$60 & 1023]($55,$62);
  $63 = HEAP32[$17>>2]|0;
  $64 = ((($63)) + 48|0);
  $65 = HEAP32[$64>>2]|0;
  FUNCTION_TABLE_vii[$65 & 1023]($11,$17);
  $66 = (+__ZNK4RECT6bottomEv($11));
  $67 = ((($1)) + 352|0);
  $68 = +HEAPF32[$67>>2];
  $69 = $66 - $68;
  $70 = ((($11)) + 4|0);
  HEAPF32[tempDoublePtr>>2]=$69;HEAP8[$70>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$70+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$70+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$70+3>>0]=HEAP8[tempDoublePtr+3>>0];
  $71 = ((($11)) + 12|0);
  HEAPF32[tempDoublePtr>>2]=$68;HEAP8[$71>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$71+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$71+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$71+3>>0]=HEAP8[tempDoublePtr+3>>0];
  $72 = ((($55)) + 12|0);
  dest=$72; src=$11; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $73 = HEAP32[$17>>2]|0;
  $74 = ((($73)) + 160|0);
  $75 = HEAP32[$74>>2]|0;
  FUNCTION_TABLE_vii[$75 & 1023]($17,$55);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorINS_4pairIxP4ViewEENS_9allocatorIS4_EEE6insertENS_11__wrap_iterIPKS4_EERS9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$017$i = 0, $$025 = 0, $$056$i$i$i = 0, $$07$i$i$i = 0, $$idx = 0, $$in$i33 = 0, $$pre = 0, $$sroa$21$0 = 0, $$sroa$21$1 = 0, $$sroa$21$1$in = 0, $$sroa$37$0 = 0, $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $$sroa$speculated$i34 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) - ($4))|0;
 $7 = $6 >> 4;
 $8 = (($3) + ($7<<4)|0);
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10>>>0)<($12>>>0);
 $14 = $10;
 $15 = $12;
 if ($13) {
  $16 = ($8|0)==($10|0);
  if ($16) {
   ;HEAP32[$8>>2]=HEAP32[$2>>2]|0;HEAP32[$8+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[$2+12>>2]|0;
   $17 = HEAP32[$9>>2]|0;
   $18 = ((($17)) + 16|0);
   HEAP32[$9>>2] = $18;
   $$0 = $8;
   return ($$0|0);
  }
  $19 = ((($8)) + 16|0);
  $20 = $19;
  $21 = (($14) - ($20))|0;
  $22 = $21 >> 4;
  $23 = (($8) + ($22<<4)|0);
  $24 = ($23>>>0)<($10>>>0);
  if ($24) {
   $$017$i = $23;$$in$i33 = $10;
   while(1) {
    ;HEAP32[$$in$i33>>2]=HEAP32[$$017$i>>2]|0;HEAP32[$$in$i33+4>>2]=HEAP32[$$017$i+4>>2]|0;HEAP32[$$in$i33+8>>2]=HEAP32[$$017$i+8>>2]|0;HEAP32[$$in$i33+12>>2]=HEAP32[$$017$i+12>>2]|0;
    $42 = ((($$017$i)) + 16|0);
    $43 = HEAP32[$9>>2]|0;
    $44 = ((($43)) + 16|0);
    HEAP32[$9>>2] = $44;
    $45 = ($42>>>0)<($10>>>0);
    if ($45) {
     $$017$i = $42;$$in$i33 = $44;
    } else {
     $48 = $44;
     break;
    }
   }
  } else {
   $48 = $10;
  }
  $25 = ($22|0)==(0);
  if (!($25)) {
   $$056$i$i$i = $23;$$07$i$i$i = $10;
   while(1) {
    $26 = ((($$056$i$i$i)) + -16|0);
    $27 = ((($$07$i$i$i)) + -16|0);
    $28 = $26;
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 4)|0;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $34 = $27;
    $35 = $34;
    HEAP32[$35>>2] = $30;
    $36 = (($34) + 4)|0;
    $37 = $36;
    HEAP32[$37>>2] = $33;
    $38 = ((($$056$i$i$i)) + -8|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ((($$07$i$i$i)) + -8|0);
    HEAP32[$40>>2] = $39;
    $41 = ($26|0)==($8|0);
    if ($41) {
     break;
    } else {
     $$056$i$i$i = $26;$$07$i$i$i = $27;
    }
   }
  }
  $46 = ($8>>>0)>($2>>>0);
  $47 = ($48>>>0)>($2>>>0);
  $49 = ((($2)) + 16|0);
  $$ = $47 ? $49 : $2;
  $$025 = $46 ? $2 : $$;
  $50 = $$025;
  $51 = $50;
  $52 = HEAP32[$51>>2]|0;
  $53 = (($50) + 4)|0;
  $54 = $53;
  $55 = HEAP32[$54>>2]|0;
  $56 = $8;
  $57 = $56;
  HEAP32[$57>>2] = $52;
  $58 = (($56) + 4)|0;
  $59 = $58;
  HEAP32[$59>>2] = $55;
  $60 = ((($$025)) + 8|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (((($3) + ($7<<4)|0)) + 8|0);
  HEAP32[$62>>2] = $61;
  $$0 = $8;
  return ($$0|0);
 }
 $63 = (($14) - ($4))|0;
 $64 = $63 >> 4;
 $65 = (($64) + 1)|0;
 $66 = ($65>>>0)>(268435455);
 if ($66) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $67 = (($15) - ($4))|0;
 $68 = $67 >> 4;
 $69 = ($68>>>0)<(134217727);
 $70 = $67 >> 3;
 $71 = ($70>>>0)<($65>>>0);
 $$sroa$speculated$i34 = $71 ? $65 : $70;
 $$sroa$speculated$$i = $69 ? $$sroa$speculated$i34 : 268435455;
 $72 = $8;
 $73 = $6 >> 4;
 $74 = ($$sroa$speculated$$i|0)==(0);
 do {
  if ($74) {
   $113 = 0;$84 = 0;
  } else {
   $75 = ($$sroa$speculated$$i>>>0)>(268435455);
   if (!($75)) {
    $81 = $$sroa$speculated$$i << 4;
    $82 = (__Znwj($81)|0);
    $113 = $82;$84 = $82;
    break;
   }
   $76 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(568,($76|0),(23604|0));
   $77 = __THREW__; __THREW__ = 0;
   $78 = $77&1;
   if ($78) {
    $79 = ___cxa_find_matching_catch_2()|0;
    $80 = tempRet0;
    ___cxa_free_exception(($76|0));
    ___resumeException($79|0);
    // unreachable;
   } else {
    HEAP32[$76>>2] = (9544);
    ___cxa_throw(($76|0),(1992|0),(506|0));
    // unreachable;
   }
  }
 } while(0);
 $83 = (($84) + ($73<<4)|0);
 $85 = $83;
 $86 = (($84) + ($$sroa$speculated$$i<<4)|0);
 $87 = $86;
 $88 = ($73|0)==($$sroa$speculated$$i|0);
 L29: do {
  if ($88) {
   $89 = ($6|0)>(0);
   if ($89) {
    $90 = (($$sroa$speculated$$i) + 1)|0;
    $91 = (($90|0) / -2)&-1;
    $92 = (($83) + ($91<<4)|0);
    $93 = $92;
    $$sroa$21$0 = $93;$$sroa$37$0 = $87;$114 = $92;$119 = $3;
    break;
   }
   $$idx = $$sroa$speculated$$i << 4;
   $94 = $$idx >> 3;
   $95 = ($94|0)==(0);
   $$sroa$speculated$i = $95 ? 1 : $94;
   $96 = ($$sroa$speculated$i>>>0)>(268435455);
   do {
    if ($96) {
     $97 = (___cxa_allocate_exception(8)|0);
     __THREW__ = 0;
     invoke_vii(568,($97|0),(23604|0));
     $98 = __THREW__; __THREW__ = 0;
     $99 = $98&1;
     if ($99) {
      $101 = ___cxa_find_matching_catch_2()|0;
      $102 = tempRet0;
      ___cxa_free_exception(($97|0));
      $eh$lpad$body$index2Z2D = $102;$eh$lpad$body$indexZ2D = $101;
      break;
     } else {
      HEAP32[$97>>2] = (9544);
      __THREW__ = 0;
      invoke_viii(745,($97|0),(1992|0),(506|0));
      $100 = __THREW__; __THREW__ = 0;
      label = 33;
      break;
     }
    } else {
     $103 = $$sroa$speculated$i << 4;
     __THREW__ = 0;
     $104 = (invoke_ii(527,($103|0))|0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 33;
     } else {
      $107 = $$sroa$speculated$i >>> 2;
      $108 = (($104) + ($107<<4)|0);
      $109 = $108;
      $110 = (($104) + ($$sroa$speculated$i<<4)|0);
      $111 = $110;
      $112 = ($84|0)==(0|0);
      if ($112) {
       $$sroa$21$0 = $109;$$sroa$37$0 = $111;$114 = $108;$119 = $3;
       break L29;
      }
      __ZdlPv($113);
      $$pre = HEAP32[$0>>2]|0;
      $$sroa$21$0 = $109;$$sroa$37$0 = $111;$114 = $108;$119 = $$pre;
      break L29;
     }
    }
   } while(0);
   if ((label|0) == 33) {
    $133 = ___cxa_find_matching_catch_2()|0;
    $134 = tempRet0;
    $eh$lpad$body$index2Z2D = $134;$eh$lpad$body$indexZ2D = $133;
   }
   $135 = ($84|0)==(0|0);
   if ($135) {
    ___resumeException($eh$lpad$body$indexZ2D|0);
    // unreachable;
   }
   __ZdlPv($113);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  } else {
   $$sroa$21$0 = $85;$$sroa$37$0 = $87;$114 = $83;$119 = $3;
  }
 } while(0);
 ;HEAP32[$114>>2]=HEAP32[$2>>2]|0;HEAP32[$114+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$114+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$114+12>>2]=HEAP32[$2+12>>2]|0;
 $115 = $$sroa$21$0;
 $116 = ((($115)) + 16|0);
 $117 = $$sroa$21$0;
 $118 = $119;
 $120 = (($72) - ($118))|0;
 $121 = $120 >> 4;
 $122 = (0 - ($121))|0;
 $123 = (($117) + ($122<<4)|0);
 $124 = $123;
 $125 = ($120|0)>(0);
 if ($125) {
  _memcpy(($123|0),($119|0),($120|0))|0;
 }
 $126 = HEAP32[$9>>2]|0;
 $127 = (($126) - ($72))|0;
 $128 = ($127|0)>(0);
 if ($128) {
  $129 = $127 >>> 4;
  $130 = (($116) + ($129<<4)|0);
  _memcpy(($116|0),($8|0),($127|0))|0;
  $$sroa$21$1$in = $130;
 } else {
  $$sroa$21$1$in = $116;
 }
 $$sroa$21$1 = $$sroa$21$1$in;
 $131 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = $124;
 HEAP32[$9>>2] = $$sroa$21$1;
 HEAP32[$11>>2] = $$sroa$37$0;
 $132 = ($131|0)==(0|0);
 if ($132) {
  $$0 = $117;
  return ($$0|0);
 }
 __ZdlPv($131);
 $$0 = $117;
 return ($$0|0);
}
function __ZNSt3__26vectorINS_4pairIiP4ViewEENS_9allocatorIS4_EEE6insertENS_11__wrap_iterIPKS4_EERS9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$017$i = 0, $$025 = 0, $$056$i$i$i = 0, $$07$i$i$i = 0, $$idx = 0, $$in$i33 = 0, $$pre = 0, $$sroa$21$0 = 0, $$sroa$21$1 = 0, $$sroa$21$1$in = 0, $$sroa$37$0 = 0, $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $$sroa$speculated$i34 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) - ($4))|0;
 $7 = $6 >> 3;
 $8 = (($3) + ($7<<3)|0);
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10>>>0)<($12>>>0);
 $14 = $10;
 $15 = $12;
 if ($13) {
  $16 = ($8|0)==($10|0);
  if ($16) {
   $17 = $2;
   $18 = $17;
   $19 = HEAP32[$18>>2]|0;
   $20 = (($17) + 4)|0;
   $21 = $20;
   $22 = HEAP32[$21>>2]|0;
   $23 = $8;
   $24 = $23;
   HEAP32[$24>>2] = $19;
   $25 = (($23) + 4)|0;
   $26 = $25;
   HEAP32[$26>>2] = $22;
   $27 = HEAP32[$9>>2]|0;
   $28 = ((($27)) + 8|0);
   HEAP32[$9>>2] = $28;
   $$0 = $8;
   return ($$0|0);
  }
  $29 = ((($8)) + 8|0);
  $30 = $29;
  $31 = (($14) - ($30))|0;
  $32 = $31 >> 3;
  $33 = (($8) + ($32<<3)|0);
  $34 = ($33>>>0)<($10>>>0);
  if ($34) {
   $$017$i = $33;$$in$i33 = $10;
   while(1) {
    $43 = $$017$i;
    $44 = $43;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($43) + 4)|0;
    $47 = $46;
    $48 = HEAP32[$47>>2]|0;
    $49 = $$in$i33;
    $50 = $49;
    HEAP32[$50>>2] = $45;
    $51 = (($49) + 4)|0;
    $52 = $51;
    HEAP32[$52>>2] = $48;
    $53 = ((($$017$i)) + 8|0);
    $54 = HEAP32[$9>>2]|0;
    $55 = ((($54)) + 8|0);
    HEAP32[$9>>2] = $55;
    $56 = ($53>>>0)<($10>>>0);
    if ($56) {
     $$017$i = $53;$$in$i33 = $55;
    } else {
     $59 = $55;
     break;
    }
   }
  } else {
   $59 = $10;
  }
  $35 = ($32|0)==(0);
  if (!($35)) {
   $$056$i$i$i = $33;$$07$i$i$i = $10;
   while(1) {
    $36 = ((($$056$i$i$i)) + -8|0);
    $37 = ((($$07$i$i$i)) + -8|0);
    $38 = HEAP32[$36>>2]|0;
    HEAP32[$37>>2] = $38;
    $39 = ((($$056$i$i$i)) + -4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ((($$07$i$i$i)) + -4|0);
    HEAP32[$41>>2] = $40;
    $42 = ($36|0)==($8|0);
    if ($42) {
     break;
    } else {
     $$056$i$i$i = $36;$$07$i$i$i = $37;
    }
   }
  }
  $57 = ($8>>>0)>($2>>>0);
  $58 = ($59>>>0)>($2>>>0);
  $60 = ((($2)) + 8|0);
  $$ = $58 ? $60 : $2;
  $$025 = $57 ? $2 : $$;
  $61 = HEAP32[$$025>>2]|0;
  HEAP32[$8>>2] = $61;
  $62 = ((($$025)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (((($3) + ($7<<3)|0)) + 4|0);
  HEAP32[$64>>2] = $63;
  $$0 = $8;
  return ($$0|0);
 }
 $65 = (($14) - ($4))|0;
 $66 = $65 >> 3;
 $67 = (($66) + 1)|0;
 $68 = ($67>>>0)>(536870911);
 if ($68) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $69 = (($15) - ($4))|0;
 $70 = $69 >> 3;
 $71 = ($70>>>0)<(268435455);
 $72 = $69 >> 2;
 $73 = ($72>>>0)<($67>>>0);
 $$sroa$speculated$i34 = $73 ? $67 : $72;
 $$sroa$speculated$$i = $71 ? $$sroa$speculated$i34 : 536870911;
 $74 = $8;
 $75 = $6 >> 3;
 $76 = ($$sroa$speculated$$i|0)==(0);
 do {
  if ($76) {
   $115 = 0;$86 = 0;
  } else {
   $77 = ($$sroa$speculated$$i>>>0)>(536870911);
   if (!($77)) {
    $83 = $$sroa$speculated$$i << 3;
    $84 = (__Znwj($83)|0);
    $115 = $84;$86 = $84;
    break;
   }
   $78 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(568,($78|0),(23604|0));
   $79 = __THREW__; __THREW__ = 0;
   $80 = $79&1;
   if ($80) {
    $81 = ___cxa_find_matching_catch_2()|0;
    $82 = tempRet0;
    ___cxa_free_exception(($78|0));
    ___resumeException($81|0);
    // unreachable;
   } else {
    HEAP32[$78>>2] = (9544);
    ___cxa_throw(($78|0),(1992|0),(506|0));
    // unreachable;
   }
  }
 } while(0);
 $85 = (($86) + ($75<<3)|0);
 $87 = $85;
 $88 = (($86) + ($$sroa$speculated$$i<<3)|0);
 $89 = $88;
 $90 = ($75|0)==($$sroa$speculated$$i|0);
 L29: do {
  if ($90) {
   $91 = ($6|0)>(0);
   if ($91) {
    $92 = (($$sroa$speculated$$i) + 1)|0;
    $93 = (($92|0) / -2)&-1;
    $94 = (($85) + ($93<<3)|0);
    $95 = $94;
    $$sroa$21$0 = $95;$$sroa$37$0 = $89;$123 = $94;$131 = $3;
    break;
   }
   $$idx = $$sroa$speculated$$i << 3;
   $96 = $$idx >> 2;
   $97 = ($96|0)==(0);
   $$sroa$speculated$i = $97 ? 1 : $96;
   $98 = ($$sroa$speculated$i>>>0)>(536870911);
   do {
    if ($98) {
     $99 = (___cxa_allocate_exception(8)|0);
     __THREW__ = 0;
     invoke_vii(568,($99|0),(23604|0));
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      $103 = ___cxa_find_matching_catch_2()|0;
      $104 = tempRet0;
      ___cxa_free_exception(($99|0));
      $eh$lpad$body$index2Z2D = $104;$eh$lpad$body$indexZ2D = $103;
      break;
     } else {
      HEAP32[$99>>2] = (9544);
      __THREW__ = 0;
      invoke_viii(745,($99|0),(1992|0),(506|0));
      $102 = __THREW__; __THREW__ = 0;
      label = 33;
      break;
     }
    } else {
     $105 = $$sroa$speculated$i << 3;
     __THREW__ = 0;
     $106 = (invoke_ii(527,($105|0))|0);
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     if ($108) {
      label = 33;
     } else {
      $109 = $$sroa$speculated$i >>> 2;
      $110 = (($106) + ($109<<3)|0);
      $111 = $110;
      $112 = (($106) + ($$sroa$speculated$i<<3)|0);
      $113 = $112;
      $114 = ($86|0)==(0|0);
      if ($114) {
       $$sroa$21$0 = $111;$$sroa$37$0 = $113;$123 = $110;$131 = $3;
       break L29;
      }
      __ZdlPv($115);
      $$pre = HEAP32[$0>>2]|0;
      $$sroa$21$0 = $111;$$sroa$37$0 = $113;$123 = $110;$131 = $$pre;
      break L29;
     }
    }
   } while(0);
   if ((label|0) == 33) {
    $145 = ___cxa_find_matching_catch_2()|0;
    $146 = tempRet0;
    $eh$lpad$body$index2Z2D = $146;$eh$lpad$body$indexZ2D = $145;
   }
   $147 = ($86|0)==(0|0);
   if ($147) {
    ___resumeException($eh$lpad$body$indexZ2D|0);
    // unreachable;
   }
   __ZdlPv($115);
   ___resumeException($eh$lpad$body$indexZ2D|0);
   // unreachable;
  } else {
   $$sroa$21$0 = $87;$$sroa$37$0 = $89;$123 = $85;$131 = $3;
  }
 } while(0);
 $116 = $2;
 $117 = $116;
 $118 = HEAP32[$117>>2]|0;
 $119 = (($116) + 4)|0;
 $120 = $119;
 $121 = HEAP32[$120>>2]|0;
 $122 = $123;
 $124 = $122;
 HEAP32[$124>>2] = $118;
 $125 = (($122) + 4)|0;
 $126 = $125;
 HEAP32[$126>>2] = $121;
 $127 = $$sroa$21$0;
 $128 = ((($127)) + 8|0);
 $129 = $$sroa$21$0;
 $130 = $131;
 $132 = (($74) - ($130))|0;
 $133 = $132 >> 3;
 $134 = (0 - ($133))|0;
 $135 = (($129) + ($134<<3)|0);
 $136 = $135;
 $137 = ($132|0)>(0);
 if ($137) {
  _memcpy(($135|0),($131|0),($132|0))|0;
 }
 $138 = HEAP32[$9>>2]|0;
 $139 = (($138) - ($74))|0;
 $140 = ($139|0)>(0);
 if ($140) {
  $141 = $139 >>> 3;
  $142 = (($128) + ($141<<3)|0);
  _memcpy(($128|0),($8|0),($139|0))|0;
  $$sroa$21$1$in = $142;
 } else {
  $$sroa$21$1$in = $128;
 }
 $$sroa$21$1 = $$sroa$21$1$in;
 $143 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = $136;
 HEAP32[$9>>2] = $$sroa$21$1;
 HEAP32[$11>>2] = $$sroa$37$0;
 $144 = ($143|0)==(0|0);
 if ($144) {
  $$0 = $129;
  return ($$0|0);
 }
 __ZdlPv($143);
 $$0 = $129;
 return ($$0|0);
}
function __ZNSt3__26vectorIN8ListView15SECTION_METRICSENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = (($5|0) / 12)&-1;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>(357913941);
 if ($8) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($4))|0;
 $12 = (($11|0) / 12)&-1;
 $13 = ($12>>>0)<(178956970);
 $14 = $12 << 1;
 $15 = ($14>>>0)<($7>>>0);
 $$sroa$speculated$i = $15 ? $7 : $14;
 $$sroa$speculated$$i = $13 ? $$sroa$speculated$i : 357913941;
 $16 = ($$sroa$speculated$$i|0)==(0);
 do {
  if ($16) {
   $26 = 0;
  } else {
   $17 = ($$sroa$speculated$$i>>>0)>(357913941);
   if (!($17)) {
    $23 = ($$sroa$speculated$$i*12)|0;
    $24 = (__Znwj($23)|0);
    $26 = $24;
    break;
   }
   $18 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(568,($18|0),(23604|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $21 = ___cxa_find_matching_catch_2()|0;
    $22 = tempRet0;
    ___cxa_free_exception(($18|0));
    ___resumeException($21|0);
    // unreachable;
   } else {
    HEAP32[$18>>2] = (9544);
    ___cxa_throw(($18|0),(1992|0),(506|0));
    // unreachable;
   }
  }
 } while(0);
 $25 = (($26) + (($6*12)|0)|0);
 $27 = (($26) + (($$sroa$speculated$$i*12)|0)|0);
 $28 = $27;
 ;HEAP32[$25>>2]=HEAP32[$1>>2]|0;HEAP32[$25+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$25+8>>2]=HEAP32[$1+8>>2]|0;
 $29 = ((($25)) + 12|0);
 $30 = $29;
 $31 = (($5|0) / -12)&-1;
 $32 = (($25) + (($31*12)|0)|0);
 $33 = $32;
 $34 = ($5|0)>(0);
 if ($34) {
  $35 = $4;
  _memcpy(($32|0),($35|0),($5|0))|0;
 }
 HEAP32[$0>>2] = $33;
 HEAP32[$2>>2] = $30;
 HEAP32[$9>>2] = $28;
 $36 = ($4|0)==(0);
 if ($36) {
  return;
 }
 $37 = $4;
 __ZdlPv($37);
 return;
}
function __GLOBAL__sub_I_listview_cpp() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $1 = ((($0)) + 11|0);
 HEAP8[$1>>0] = 8;
 $2 = $0;
 $3 = $2;
 HEAP32[$3>>2] = 1953720652;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 2003134806;
 $6 = ((($0)) + 8|0);
 HEAP8[$6>>0] = 0;
 __THREW__ = 0;
 invoke_vii(746,(31710|0),($0|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = tempRet0;
  $14 = HEAP8[$1>>0]|0;
  $15 = ($14<<24>>24)<(0);
  if (!($15)) {
   ___resumeException($12|0);
   // unreachable;
  }
  $16 = HEAP32[$0>>2]|0;
  __ZdlPv($16);
  ___resumeException($12|0);
  // unreachable;
 } else {
  $9 = HEAP8[$1>>0]|0;
  $10 = ($9<<24>>24)<(0);
  if (!($10)) {
   STACKTOP = sp;return;
  }
  $11 = HEAP32[$0>>2]|0;
  __ZdlPv($11);
  STACKTOP = sp;return;
 }
}
function __ZN14ClassRegistrarI8ListViewEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp;
 $4 = HEAP32[7778]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (__Znwj(12)|0);
  $7 = ((($6)) + 4|0);
  HEAP32[$7>>2] = 0;
  $8 = ((($6)) + 8|0);
  HEAP32[$8>>2] = 0;
  HEAP32[$6>>2] = $7;
  HEAP32[7778] = $6;
  $10 = $6;
 } else {
  $10 = $4;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 $9 = ((($3)) + 12|0);
 HEAP32[$9>>2] = (747);
 __THREW__ = 0;
 $11 = (invoke_iiii(535,($10|0),($2|0),($3|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if (!($13)) {
   $14 = HEAP32[$11>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    __THREW__ = 0;
    $16 = (invoke_ii(527,32)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     break;
    }
    $19 = ((($16)) + 16|0);
    ;HEAP32[$19>>2]=HEAP32[$3>>2]|0;HEAP32[$19+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$3+8>>2]|0;
    ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
    $20 = ((($16)) + 28|0);
    $21 = HEAP32[$9>>2]|0;
    HEAP32[$20>>2] = $21;
    $22 = HEAP32[$2>>2]|0;
    HEAP32[$16>>2] = 0;
    $23 = ((($16)) + 4|0);
    HEAP32[$23>>2] = 0;
    $24 = ((($16)) + 8|0);
    HEAP32[$24>>2] = $22;
    HEAP32[$11>>2] = $16;
    $25 = HEAP32[$10>>2]|0;
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0|0);
    if ($27) {
     $31 = $16;
    } else {
     $28 = $26;
     HEAP32[$10>>2] = $28;
     $$pre$i$i$i$i$i$i = HEAP32[$11>>2]|0;
     $31 = $$pre$i$i$i$i$i$i;
    }
    $29 = ((($10)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($30,$31);
    $32 = ((($10)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + 1)|0;
    HEAP32[$32>>2] = $34;
   }
   $35 = ((($3)) + 11|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = ($36<<24>>24)<(0);
   if (!($37)) {
    STACKTOP = sp;return;
   }
   $38 = HEAP32[$3>>2]|0;
   __ZdlPv($38);
   STACKTOP = sp;return;
  }
 } while(0);
 $39 = ___cxa_find_matching_catch_2()|0;
 $40 = tempRet0;
 $41 = ((($3)) + 11|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = ($42<<24>>24)<(0);
 if (!($43)) {
  ___resumeException($39|0);
  // unreachable;
 }
 $44 = HEAP32[$3>>2]|0;
 __ZdlPv($44);
 ___resumeException($39|0);
 // unreachable;
}
function __ZN14ClassRegistrarI8ListViewE7createTEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN6ObjectnwEj(408)|0);
 __THREW__ = 0;
 invoke_vi(748,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZdlPv($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  return ($0|0);
 }
 return (0)|0;
}
function __ZN8ListViewC2Ev($0) {
 $0 = $0|0;
 var $$0 = 0, $$02 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i3 = 0, $scevgep$i$i$i8 = 0, $scevgep4$i$i$i = 0;
 var $scevgep4$i$i$i4 = 0, $scevgep4$i$i$i9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __ZN4ViewC2Ev($0);
 HEAP32[$0>>2] = (6644);
 $2 = ((($0)) + 328|0);
 $3 = ((($0)) + 332|0);
 $4 = ((($0)) + 340|0);
 $5 = ((($0)) + 344|0);
 $6 = ((($0)) + 384|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 392|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 396|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 400|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 352|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
 HEAPF32[$10>>2] = 1.0;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 __THREW__ = 0;
 $11 = (invoke_ii(527,32)|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if ($13) {
   $30 = ___cxa_find_matching_catch_2()|0;
   $31 = tempRet0;
   $$0 = $31;$$02 = $30;
  } else {
   HEAP32[$1>>2] = $11;
   $14 = ((($1)) + 8|0);
   HEAP32[$14>>2] = -2147483616;
   $15 = ((($1)) + 4|0);
   HEAP32[$15>>2] = 30;
   dest=$11; src=22772; stop=dest+30|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $16 = ((($11)) + 30|0);
   HEAP8[$16>>0] = 0;
   __THREW__ = 0;
   $17 = (invoke_ii(733,($1|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    $32 = ___cxa_find_matching_catch_2()|0;
    $33 = tempRet0;
    $34 = ((($1)) + 11|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = ($35<<24>>24)<(0);
    if (!($36)) {
     $$0 = $33;$$02 = $32;
     break;
    }
    $37 = HEAP32[$1>>2]|0;
    __ZdlPv($37);
    $$0 = $33;$$02 = $32;
    break;
   }
   $20 = ((($0)) + 356|0);
   HEAP32[$20>>2] = $17;
   $21 = ((($1)) + 11|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = ($22<<24>>24)<(0);
   if (!($23)) {
    $25 = ((($0)) + 360|0);
    $26 = $25;
    $27 = $26;
    HEAP32[$27>>2] = -1;
    $28 = (($26) + 4)|0;
    $29 = $28;
    HEAP32[$29>>2] = -1;
    STACKTOP = sp;return;
   }
   $24 = HEAP32[$1>>2]|0;
   __ZdlPv($24);
   $25 = ((($0)) + 360|0);
   $26 = $25;
   $27 = $26;
   HEAP32[$27>>2] = -1;
   $28 = (($26) + 4)|0;
   $29 = $28;
   HEAP32[$29>>2] = -1;
   STACKTOP = sp;return;
  }
 } while(0);
 $38 = HEAP32[$7>>2]|0;
 $39 = ($38|0)==(0|0);
 if (!($39)) {
  $40 = HEAP32[$8>>2]|0;
  $41 = ($40|0)==($38|0);
  if (!($41)) {
   $scevgep$i$i$i8 = ((($40)) + -12|0);
   $42 = $scevgep$i$i$i8;
   $43 = $38;
   $44 = (($42) - ($43))|0;
   $45 = (($44>>>0) / 12)&-1;
   $46 = $45 ^ -1;
   $scevgep4$i$i$i9 = (($40) + (($46*12)|0)|0);
   HEAP32[$8>>2] = $scevgep4$i$i$i9;
  }
  __ZdlPv($38);
 }
 $47 = HEAP32[$6>>2]|0;
 $48 = ((($0)) + 368|0);
 $49 = ($47|0)==($48|0);
 if ($49) {
  $50 = HEAP32[$47>>2]|0;
  $51 = ((($50)) + 16|0);
  $52 = HEAP32[$51>>2]|0;
  FUNCTION_TABLE_vi[$52 & 1023]($47);
 } else {
  $53 = ($47|0)==(0|0);
  if (!($53)) {
   $54 = HEAP32[$47>>2]|0;
   $55 = ((($54)) + 20|0);
   $56 = HEAP32[$55>>2]|0;
   FUNCTION_TABLE_vi[$56 & 1023]($47);
  }
 }
 $57 = HEAP32[$4>>2]|0;
 $58 = ($57|0)==(0|0);
 if (!($58)) {
  $59 = HEAP32[$5>>2]|0;
  $60 = ($59|0)==($57|0);
  if (!($60)) {
   $scevgep$i$i$i3 = ((($59)) + -8|0);
   $61 = $scevgep$i$i$i3;
   $62 = $57;
   $63 = (($61) - ($62))|0;
   $64 = $63 >>> 3;
   $65 = $64 ^ -1;
   $scevgep4$i$i$i4 = (($59) + ($65<<3)|0);
   HEAP32[$5>>2] = $scevgep4$i$i$i4;
  }
  __ZdlPv($57);
 }
 $66 = HEAP32[$2>>2]|0;
 $67 = ($66|0)==(0|0);
 if ($67) {
  __ZN4ViewD2Ev($0);
  ___resumeException($$02|0);
  // unreachable;
 }
 $68 = HEAP32[$3>>2]|0;
 $69 = ($68|0)==($66|0);
 if (!($69)) {
  $scevgep$i$i$i = ((($68)) + -16|0);
  $70 = $scevgep$i$i$i;
  $71 = $66;
  $72 = (($70) - ($71))|0;
  $73 = $72 >>> 4;
  $74 = $73 ^ -1;
  $scevgep4$i$i$i = (($68) + ($74<<4)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i;
 }
 __ZdlPv($66);
 __ZN4ViewD2Ev($0);
 ___resumeException($$02|0);
 // unreachable;
}
function __ZN13NavigationBarD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4ViewD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN13NavigationBar13setBackgroundEP8RenderOp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((23513|0),(22813|0),35,(22861|0));
 // unreachable;
}
function __ZN13NavigationBar19setBackgroundColourEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$013 = 0, $$014 = 0, $$in = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 328|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($0)) + 324|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $10 = (__ZN6ObjectnwEj(72)|0);
   $11 = HEAP32[$0>>2]|0;
   $12 = ((($11)) + 48|0);
   $13 = HEAP32[$12>>2]|0;
   __THREW__ = 0;
   invoke_vii($13|0,($2|0),($0|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if (!($15)) {
    __THREW__ = 0;
    invoke_viiii(715,($10|0),($0|0),($2|0),($1|0));
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     $$in = $10;$$pre$phiZ2D = $0;
     break;
    }
   }
   $24 = ___cxa_find_matching_catch_2()|0;
   $25 = tempRet0;
   __ZdlPv($10);
   $$013 = $25;$$014 = $24;
   ___resumeException($$014|0);
   // unreachable;
  } else {
   $7 = (__ZN6ObjectnwEj(244)|0);
   __THREW__ = 0;
   invoke_vii(749,($7|0),($0|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $22 = ___cxa_find_matching_catch_2()|0;
    $23 = tempRet0;
    __ZdlPv($7);
    $$013 = $23;$$014 = $22;
    ___resumeException($$014|0);
    // unreachable;
   } else {
    $$in = $7;$$pre$phiZ2D = $0;
   }
  }
 } while(0);
 $18 = HEAP32[$$in>>2]|0;
 $19 = ((($18)) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$20 & 1023]($$in,$21);
 __ZN4View13setBackgroundEP8RenderOp($$pre$phiZ2D,$$in);
 STACKTOP = sp;return;
}
function __ZN13NavigationBar17addNavigationItemEP14NavigationItem($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 132|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($0,$6);
 $7 = ((($1)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = HEAP32[$0>>2]|0;
  $11 = ((($10)) + 132|0);
  $12 = HEAP32[$11>>2]|0;
  FUNCTION_TABLE_vii[$12 & 1023]($0,$8);
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = ((($13)) + 132|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($1)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 FUNCTION_TABLE_vii[$15 & 1023]($0,$17);
 return;
}
function __ZN13NavigationBar20removeNavigationItemEP14NavigationItem($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 144|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vi[$6 & 1023]($3);
 $7 = ((($1)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = HEAP32[$8>>2]|0;
  $11 = ((($10)) + 144|0);
  $12 = HEAP32[$11>>2]|0;
  FUNCTION_TABLE_vi[$12 & 1023]($8);
 }
 $13 = ((($1)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 144|0);
 $17 = HEAP32[$16>>2]|0;
 FUNCTION_TABLE_vi[$17 & 1023]($14);
 return;
}
function __ZN13NavigationBar14setBlurEnabledEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1&1;
 $3 = ((($0)) + 324|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($2|0)==($5|0);
 if ($6) {
  return;
 }
 $7 = $1&1;
 HEAP8[$3>>0] = $7;
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($8)) + 124|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 328|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$10 & 1023]($0,$12);
 return;
}
function __GLOBAL__sub_I_navigationbar_cpp() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 $1 = (__Znwj(16)|0);
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = -2147483632;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = 13;
 dest=$1; src=22891; stop=dest+13|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $4 = ((($1)) + 13|0);
 HEAP8[$4>>0] = 0;
 __THREW__ = 0;
 invoke_vii(750,(31711|0),($0|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $13 = ((($0)) + 11|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)<(0);
  if (!($15)) {
   ___resumeException($11|0);
   // unreachable;
  }
  $16 = HEAP32[$0>>2]|0;
  __ZdlPv($16);
  ___resumeException($11|0);
  // unreachable;
 } else {
  $7 = ((($0)) + 11|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)<(0);
  if (!($9)) {
   STACKTOP = sp;return;
  }
  $10 = HEAP32[$0>>2]|0;
  __ZdlPv($10);
  STACKTOP = sp;return;
 }
}
function __ZN14ClassRegistrarI13NavigationBarEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp;
 $4 = HEAP32[7778]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (__Znwj(12)|0);
  $7 = ((($6)) + 4|0);
  HEAP32[$7>>2] = 0;
  $8 = ((($6)) + 8|0);
  HEAP32[$8>>2] = 0;
  HEAP32[$6>>2] = $7;
  HEAP32[7778] = $6;
  $10 = $6;
 } else {
  $10 = $4;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 $9 = ((($3)) + 12|0);
 HEAP32[$9>>2] = (751);
 __THREW__ = 0;
 $11 = (invoke_iiii(535,($10|0),($2|0),($3|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if (!($13)) {
   $14 = HEAP32[$11>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    __THREW__ = 0;
    $16 = (invoke_ii(527,32)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     break;
    }
    $19 = ((($16)) + 16|0);
    ;HEAP32[$19>>2]=HEAP32[$3>>2]|0;HEAP32[$19+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$3+8>>2]|0;
    ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
    $20 = ((($16)) + 28|0);
    $21 = HEAP32[$9>>2]|0;
    HEAP32[$20>>2] = $21;
    $22 = HEAP32[$2>>2]|0;
    HEAP32[$16>>2] = 0;
    $23 = ((($16)) + 4|0);
    HEAP32[$23>>2] = 0;
    $24 = ((($16)) + 8|0);
    HEAP32[$24>>2] = $22;
    HEAP32[$11>>2] = $16;
    $25 = HEAP32[$10>>2]|0;
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0|0);
    if ($27) {
     $31 = $16;
    } else {
     $28 = $26;
     HEAP32[$10>>2] = $28;
     $$pre$i$i$i$i$i$i = HEAP32[$11>>2]|0;
     $31 = $$pre$i$i$i$i$i$i;
    }
    $29 = ((($10)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($30,$31);
    $32 = ((($10)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + 1)|0;
    HEAP32[$32>>2] = $34;
   }
   $35 = ((($3)) + 11|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = ($36<<24>>24)<(0);
   if (!($37)) {
    STACKTOP = sp;return;
   }
   $38 = HEAP32[$3>>2]|0;
   __ZdlPv($38);
   STACKTOP = sp;return;
  }
 } while(0);
 $39 = ___cxa_find_matching_catch_2()|0;
 $40 = tempRet0;
 $41 = ((($3)) + 11|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = ($42<<24>>24)<(0);
 if (!($43)) {
  ___resumeException($39|0);
  // unreachable;
 }
 $44 = HEAP32[$3>>2]|0;
 __ZdlPv($44);
 ___resumeException($39|0);
 // unreachable;
}
function __ZN14ClassRegistrarI13NavigationBarE7createTEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN6ObjectnwEj(336)|0);
 __THREW__ = 0;
 invoke_vi(752,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZdlPv($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  return ($0|0);
 }
 return (0)|0;
}
function __ZN13NavigationBarC2Ev($0) {
 $0 = $0|0;
 var $$0 = 0, $$06 = 0, $$1 = 0, $$17 = 0, $$3 = 0, $$39 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$4$0$$sroa_idx21 = 0, $$sroa$5$0$$sroa_idx23 = 0, $$sroa$6$0$$sroa_idx25 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy1 = sp + 80|0;
 $$byval_copy = sp + 64|0;
 $1 = sp + 48|0;
 $2 = sp + 32|0;
 $3 = sp + 16|0;
 $4 = sp;
 __ZN4ViewC2Ev($0);
 HEAP32[$0>>2] = (6940);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 __THREW__ = 0;
 $5 = (invoke_ii(527,32)|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $46 = ___cxa_find_matching_catch_2()|0;
   $47 = tempRet0;
   $$0 = $47;$$06 = $46;
  } else {
   HEAP32[$1>>2] = $5;
   $8 = ((($1)) + 8|0);
   HEAP32[$8>>2] = -2147483616;
   $9 = ((($1)) + 4|0);
   HEAP32[$9>>2] = 16;
   dest=$5; src=22905; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $10 = ((($5)) + 16|0);
   HEAP8[$10>>0] = 0;
   __THREW__ = 0;
   $11 = (+invoke_di(732,($1|0)));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $48 = ___cxa_find_matching_catch_2()|0;
    $49 = tempRet0;
    $50 = ((($1)) + 11|0);
    $51 = HEAP8[$50>>0]|0;
    $52 = ($51<<24>>24)<(0);
    if (!($52)) {
     $$0 = $49;$$06 = $48;
     break;
    }
    $53 = HEAP32[$1>>2]|0;
    __ZdlPv($53);
    $$0 = $49;$$06 = $48;
    break;
   }
   $14 = ((($1)) + 11|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = ($15<<24>>24)<(0);
   if ($16) {
    $17 = HEAP32[$1>>2]|0;
    __ZdlPv($17);
   }
   $18 = HEAP32[$0>>2]|0;
   $19 = ((($18)) + 60|0);
   $20 = HEAP32[$19>>2]|0;
   __THREW__ = 0;
   invoke_viiidd(540,($2|0),3,(0|0),1.0,0.0);
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   do {
    if (!($22)) {
     ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
     __THREW__ = 0;
     $23 = (invoke_ii(527,16)|0);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      $56 = ___cxa_find_matching_catch_2()|0;
      $57 = tempRet0;
      $$1 = $57;$$17 = $56;
     } else {
      HEAP32[$4>>2] = $23;
      $26 = ((($4)) + 8|0);
      HEAP32[$26>>2] = -2147483632;
      $27 = ((($4)) + 4|0);
      HEAP32[$27>>2] = 13;
      dest=$23; src=22922; stop=dest+13|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
      $28 = ((($23)) + 13|0);
      HEAP8[$28>>0] = 0;
      __THREW__ = 0;
      $29 = (+invoke_di(732,($4|0)));
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if (!($31)) {
       $32 = $11 + $29;
       __THREW__ = 0;
       invoke_viiidd(540,($3|0),1,(0|0),0.0,(+$32));
       $33 = __THREW__; __THREW__ = 0;
       $34 = $33&1;
       if (!($34)) {
        __THREW__ = 0;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
        ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$3+12>>2]|0;
        invoke_viii($20|0,($0|0),($$byval_copy|0),($$byval_copy1|0));
        $35 = __THREW__; __THREW__ = 0;
        $36 = $35&1;
        if (!($36)) {
         $37 = ((($4)) + 11|0);
         $38 = HEAP8[$37>>0]|0;
         $39 = ($38<<24>>24)<(0);
         if ($39) {
          $40 = HEAP32[$4>>2]|0;
          __ZdlPv($40);
         }
         $$sroa$0$0$$sroa_idx = ((($0)) + 212|0);
         HEAPF32[tempDoublePtr>>2]=0.0;HEAP8[$$sroa$0$0$$sroa_idx>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$$sroa$0$0$$sroa_idx+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$$sroa$0$0$$sroa_idx+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$$sroa$0$0$$sroa_idx+3>>0]=HEAP8[tempDoublePtr+3>>0];
         $$sroa$4$0$$sroa_idx21 = ((($0)) + 216|0);
         HEAPF32[tempDoublePtr>>2]=$11;HEAP8[$$sroa$4$0$$sroa_idx21>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$$sroa$4$0$$sroa_idx21+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$$sroa$4$0$$sroa_idx21+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$$sroa$4$0$$sroa_idx21+3>>0]=HEAP8[tempDoublePtr+3>>0];
         $$sroa$5$0$$sroa_idx23 = ((($0)) + 220|0);
         HEAPF32[tempDoublePtr>>2]=0.0;HEAP8[$$sroa$5$0$$sroa_idx23>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$$sroa$5$0$$sroa_idx23+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$$sroa$5$0$$sroa_idx23+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$$sroa$5$0$$sroa_idx23+3>>0]=HEAP8[tempDoublePtr+3>>0];
         $$sroa$6$0$$sroa_idx25 = ((($0)) + 224|0);
         HEAPF32[tempDoublePtr>>2]=0.0;HEAP8[$$sroa$6$0$$sroa_idx25>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$$sroa$6$0$$sroa_idx25+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$$sroa$6$0$$sroa_idx25+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$$sroa$6$0$$sroa_idx25+3>>0]=HEAP8[tempDoublePtr+3>>0];
         $41 = HEAP32[$0>>2]|0;
         $42 = ((($41)) + 124|0);
         $43 = HEAP32[$42>>2]|0;
         __THREW__ = 0;
         invoke_vii($43|0,($0|0),-1);
         $44 = __THREW__; __THREW__ = 0;
         $45 = $44&1;
         if ($45) {
          break;
         }
         STACKTOP = sp;return;
        }
       }
      }
      $58 = ___cxa_find_matching_catch_2()|0;
      $59 = tempRet0;
      $60 = ((($4)) + 11|0);
      $61 = HEAP8[$60>>0]|0;
      $62 = ($61<<24>>24)<(0);
      if ($62) {
       $63 = HEAP32[$4>>2]|0;
       __ZdlPv($63);
       $$1 = $59;$$17 = $58;
      } else {
       $$1 = $59;$$17 = $58;
      }
     }
     $$3 = $$1;$$39 = $$17;
     __ZN4ViewD2Ev($0);
     ___resumeException($$39|0);
     // unreachable;
    }
   } while(0);
   $54 = ___cxa_find_matching_catch_2()|0;
   $55 = tempRet0;
   $$3 = $55;$$39 = $54;
   __ZN4ViewD2Ev($0);
   ___resumeException($$39|0);
   // unreachable;
  }
 } while(0);
 $$3 = $$0;$$39 = $$06;
 __ZN4ViewD2Ev($0);
 ___resumeException($$39|0);
 // unreachable;
}
function __ZN9ScrollbarD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN9Scrollbar19computeScrollOffsetEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 48|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (__ZN3App13currentMillisEv(28952)|0);
 $5 = ((($0)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7|0)<($9|0);
 if (!($10)) {
  $62 = ((($0)) + 16|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($0)) + 28|0);
  HEAP32[$64>>2] = $63;
  HEAP8[$1>>0] = 1;
  $$0 = 1;
  return ($$0|0);
 }
 $11 = ((($0)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 switch ($12|0) {
 case 0:  {
  $13 = (+($7|0));
  $14 = ((($0)) + 40|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $13 * $15;
  $17 = $16 * 8.0;
  $18 = $17 < 1.0;
  if ($18) {
   $19 = -$17;
   $20 = (+Math_exp((+$19)));
   $21 = 1.0 - $20;
   $22 = $17 - $21;
   $$0$i = $22;
  } else {
   $23 = 1.0 - $17;
   $24 = (+Math_exp((+$23)));
   $25 = 1.0 - $24;
   $26 = $25 * 0.63212054967880249;
   $27 = $26 + 0.36787945032119751;
   $$0$i = $27;
  }
  $28 = ((($0)) + 12|0);
  $29 = +HEAPF32[$28>>2];
  $30 = ((($0)) + 44|0);
  $31 = +HEAPF32[$30>>2];
  $32 = $$0$i * $31;
  $33 = $29 + $32;
  $34 = ((($0)) + 28|0);
  HEAPF32[$34>>2] = $33;
  $$0 = 1;
  return ($$0|0);
  break;
 }
 case 1:  {
  $35 = (+($7|0));
  $36 = $35 / 1000.0;
  $37 = ((($0)) + 56|0);
  $38 = +HEAPF32[$37>>2];
  $39 = $36 * $38;
  $40 = ((($0)) + 60|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $36 * $41;
  $43 = $36 * $42;
  $44 = $43 * 0.5;
  $45 = $39 - $44;
  $46 = ((($0)) + 12|0);
  $47 = +HEAPF32[$46>>2];
  $48 = ((($0)) + 52|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $49 * $45;
  $51 = $47 + $50;
  $52 = ((($0)) + 28|0);
  $53 = ((($0)) + 24|0);
  $54 = +HEAPF32[$53>>2];
  $55 = (+_fminf($51,$54));
  $56 = ((($0)) + 20|0);
  $57 = +HEAPF32[$56>>2];
  $58 = (+_fmaxf($55,$57));
  HEAPF32[$52>>2] = $58;
  $59 = ((($0)) + 16|0);
  $60 = +HEAPF32[$59>>2];
  $61 = $58 == $60;
  if (!($61)) {
   $$0 = 1;
   return ($$0|0);
  }
  HEAP8[$1>>0] = 1;
  $$0 = 1;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = 1;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function __ZN9Scrollbar11startScrollEff($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_viddi[$5 & 511]($0,$1,$2,250);
 return;
}
function __ZN9Scrollbar11startScrollEffi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 48|0);
 HEAP8[$5>>0] = 0;
 $6 = ((($0)) + 36|0);
 HEAP32[$6>>2] = $3;
 $7 = (__ZN3App13currentMillisEv(28952)|0);
 $8 = ((($0)) + 32|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($0)) + 12|0);
 HEAPF32[$9>>2] = $1;
 $10 = $1 + $2;
 $11 = ((($0)) + 16|0);
 HEAPF32[$11>>2] = $10;
 $12 = ((($0)) + 44|0);
 HEAPF32[$12>>2] = $2;
 $13 = HEAP32[$6>>2]|0;
 $14 = (+($13|0));
 $15 = 1.0 / $14;
 $16 = ((($0)) + 40|0);
 HEAPF32[$16>>2] = $15;
 return;
}
function __ZN9Scrollbar5flingEffff($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = 1;
 $6 = ((($0)) + 48|0);
 HEAP8[$6>>0] = 0;
 $7 = $2 > 0.0;
 $8 = $2 < 0.0;
 $9 = (+($8<<31>>31));
 $10 = $7 ? 1.0 : $9;
 $11 = ((($0)) + 52|0);
 HEAPF32[$11>>2] = $10;
 $12 = (+_hypotf($2,$2));
 $13 = ((($0)) + 56|0);
 HEAPF32[$13>>2] = $12;
 $14 = $12 * 1000.0;
 $15 = ((($0)) + 60|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $14 / $16;
 $18 = (~~(($17)));
 $19 = ((($0)) + 36|0);
 HEAP32[$19>>2] = $18;
 $20 = (__ZN3App13currentMillisEv(28952)|0);
 $21 = ((($0)) + 32|0);
 HEAP32[$21>>2] = $20;
 $22 = ((($0)) + 12|0);
 HEAPF32[$22>>2] = $1;
 $23 = $12 * $12;
 $24 = +HEAPF32[$15>>2];
 $25 = $24 * 2.0;
 $26 = $23 / $25;
 $27 = ((($0)) + 20|0);
 HEAPF32[$27>>2] = $3;
 $28 = ((($0)) + 24|0);
 HEAPF32[$28>>2] = $4;
 $29 = +HEAPF32[$11>>2];
 $30 = $26 * $29;
 $31 = $30 + $1;
 $32 = ((($0)) + 16|0);
 $33 = (+_fminf($31,$4));
 $34 = (+_fmaxf($33,$3));
 HEAPF32[$32>>2] = $34;
 return;
}
function __ZN9ScrollbarC2EP4View($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 __ZN6ObjectC2Ev($0);
 HEAP32[$0>>2] = (7216);
 $3 = ((($0)) + 52|0);
 HEAPF32[$3>>2] = 1.0;
 $4 = ((($0)) + 48|0);
 HEAP8[$4>>0] = 1;
 $5 = ((($0)) + 60|0);
 HEAPF32[$5>>2] = 926.61065673828125;
 __THREW__ = 0;
 $6 = (invoke_ii(523,104)|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  __THREW__ = 0;
  invoke_viiidid(714,($6|0),($1|0),-11645362,0.0,0,2.5);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $61 = ___cxa_find_matching_catch_2()|0;
   $62 = tempRet0;
   __ZdlPv($6);
   $$0 = $62;$$04 = $61;
   ___resumeException($$04|0);
   // unreachable;
  }
  $11 = ((($0)) + 64|0);
  HEAP32[$11>>2] = $6;
  $12 = HEAP32[$1>>2]|0;
  $13 = ((($12)) + 160|0);
  $14 = HEAP32[$13>>2]|0;
  __THREW__ = 0;
  invoke_vii($14|0,($1|0),($6|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if (!($16)) {
   $17 = HEAP32[$11>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 243|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$20>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$20+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$20+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$20+3>>0];$21 = +HEAPF32[tempDoublePtr>>2];
   $22 = ((($19)) + 251|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$22>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$22+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$22+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$22+3>>0];$23 = +HEAPF32[tempDoublePtr>>2];
   $24 = $21 + $23;
   $25 = ((($19)) + 200|0);
   $26 = +HEAPF32[$25>>2];
   $27 = $26 - $24;
   $28 = ((($19)) + 119|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$28>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$28+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$28+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$28+3>>0];$29 = +HEAPF32[tempDoublePtr>>2];
   $30 = $29 - $24;
   $31 = $30 / $27;
   __THREW__ = 0;
   $32 = (+invoke_did(537,(28952|0),40.0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if (!($34)) {
    $35 = HEAP32[$19>>2]|0;
    $36 = ((($35)) + 48|0);
    $37 = HEAP32[$36>>2]|0;
    __THREW__ = 0;
    invoke_vii($37|0,($2|0),($19|0));
    $38 = __THREW__; __THREW__ = 0;
    $39 = $38&1;
    if (!($39)) {
     $40 = $30 * $31;
     $41 = (+_fmaxf($40,$32));
     $42 = ((($2)) + 8|0);
     $43 = +HEAPF32[$42>>2];
     $44 = $43 + -9.0;
     HEAPF32[$2>>2] = $44;
     HEAP8[tempDoublePtr>>0]=HEAP8[$20>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$20+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$20+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$20+3>>0];$45 = +HEAPF32[tempDoublePtr>>2];
     $46 = ((($19)) + 208|0);
     $47 = +HEAPF32[$46>>2];
     $48 = $31 * $47;
     $49 = $45 + $48;
     $50 = $47 + $49;
     $51 = ((($2)) + 4|0);
     HEAPF32[$51>>2] = $50;
     HEAPF32[$42>>2] = 5.0;
     $52 = ((($2)) + 12|0);
     HEAPF32[$52>>2] = $41;
     $53 = HEAP32[$11>>2]|0;
     $54 = HEAP32[$53>>2]|0;
     $55 = ((($54)) + 16|0);
     $56 = HEAP32[$55>>2]|0;
     __THREW__ = 0;
     invoke_vii($56|0,($53|0),($2|0));
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if (!($58)) {
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $59 = ___cxa_find_matching_catch_2()|0;
 $60 = tempRet0;
 $$0 = $60;$$04 = $59;
 ___resumeException($$04|0);
 // unreachable;
}
function __ZN9Scrollbar10updateRectEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 243|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$6>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$6+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$6+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$6+3>>0];$7 = +HEAPF32[tempDoublePtr>>2];
 $8 = ((($5)) + 251|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$8>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$8+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$8+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$8+3>>0];$9 = +HEAPF32[tempDoublePtr>>2];
 $10 = $7 + $9;
 $11 = ((($5)) + 200|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $12 - $10;
 $14 = ((($5)) + 119|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$14>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$14+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$14+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$14+3>>0];$15 = +HEAPF32[tempDoublePtr>>2];
 $16 = $15 - $10;
 $17 = $16 / $13;
 $18 = $16 * $17;
 $19 = (+__ZN3App2dpEf(28952,40.0));
 $20 = (+_fmaxf($18,$19));
 $21 = HEAP32[$5>>2]|0;
 $22 = ((($21)) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 FUNCTION_TABLE_vii[$23 & 1023]($1,$5);
 $24 = ((($1)) + 8|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $25 + -9.0;
 HEAPF32[$1>>2] = $26;
 HEAP8[tempDoublePtr>>0]=HEAP8[$6>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$6+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$6+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$6+3>>0];$27 = +HEAPF32[tempDoublePtr>>2];
 $28 = ((($5)) + 208|0);
 $29 = +HEAPF32[$28>>2];
 $30 = $17 * $29;
 $31 = $27 + $30;
 $32 = $29 + $31;
 $33 = ((($1)) + 4|0);
 HEAPF32[$33>>2] = $32;
 HEAPF32[$24>>2] = 5.0;
 $34 = ((($1)) + 12|0);
 HEAPF32[$34>>2] = $20;
 $35 = HEAP32[$2>>2]|0;
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 FUNCTION_TABLE_vii[$38 & 1023]($35,$1);
 STACKTOP = sp;return;
}
function __ZN9SearchBoxD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (7248);
 $1 = ((($0)) + 444|0);
 HEAP32[$1>>2] = (7576);
 $2 = ((($0)) + 488|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 472|0);
 $5 = ($3|0)==($4|0);
 if ($5) {
  $6 = HEAP32[$3>>2]|0;
  $7 = ((($6)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  FUNCTION_TABLE_vi[$8 & 1023]($3);
  __ZN8EditTextD2Ev($0);
  return;
 }
 $9 = ($3|0)==(0|0);
 if ($9) {
  __ZN8EditTextD2Ev($0);
  return;
 }
 $10 = HEAP32[$3>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vi[$12 & 1023]($3);
 __ZN8EditTextD2Ev($0);
 return;
}
function __ZN9SearchBoxD0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (7248);
 $1 = ((($0)) + 444|0);
 HEAP32[$1>>2] = (7576);
 $2 = ((($0)) + 488|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 472|0);
 $5 = ($3|0)==($4|0);
 if ($5) {
  $6 = HEAP32[$3>>2]|0;
  $7 = ((($6)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  FUNCTION_TABLE_vi[$8 & 1023]($3);
 } else {
  $9 = ($3|0)==(0|0);
  if (!($9)) {
   $10 = HEAP32[$3>>2]|0;
   $11 = ((($10)) + 20|0);
   $12 = HEAP32[$11>>2]|0;
   FUNCTION_TABLE_vi[$12 & 1023]($3);
  }
 }
 HEAP32[$0>>2] = (5400);
 HEAP32[$1>>2] = (5724);
 $13 = ((($0)) + 468|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  __THREW__ = 0;
  invoke_vi(525,($14|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $18 = ___cxa_find_matching_catch_3(0|0)|0;
   $19 = tempRet0;
   ___clang_call_terminate($18);
   // unreachable;
  }
 }
 $20 = ((($0)) + 464|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  __THREW__ = 0;
  invoke_vi(525,($21|0));
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $25 = ___cxa_find_matching_catch_3(0|0)|0;
   $26 = tempRet0;
   ___clang_call_terminate($25);
   // unreachable;
  }
 }
 $27 = ((($0)) + 460|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  __ZN5LabelD2Ev($0);
  __ZdlPv($0);
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($28|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $32 = ___cxa_find_matching_catch_3(0|0)|0;
  $33 = tempRet0;
  ___clang_call_terminate($32);
  // unreachable;
 } else {
  __ZN5LabelD2Ev($0);
  __ZdlPv($0);
  return;
 }
}
function __ZN9SearchBox10setPaddingE11_EDGEINSETS($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 $2 = (+__ZN3App2dpEf(28952,18.0));
 HEAP8[tempDoublePtr>>0]=HEAP8[$1>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1+3>>0];$3 = +HEAPF32[tempDoublePtr>>2];
 $4 = $2 + $3;
 HEAPF32[tempDoublePtr>>2]=$4;HEAP8[$1>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$1+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$1+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$1+3>>0]=HEAP8[tempDoublePtr+3>>0];
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$1+12>>2]|0;
 __ZN8EditText10setPaddingE11_EDGEINSETS($0,$$byval_copy);
 STACKTOP = sp;return;
}
function __ZN9SearchBox6layoutEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = sp + 8|0;
 $2 = sp;
 $3 = sp + 24|0;
 __ZN8EditText6layoutEv($0);
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vii[$6 & 1023]($1,$0);
 $7 = (+__ZN3App2dpEf(28952,12.0));
 $8 = (+__ZN3App2dpEf(28952,6.0));
 __Z10RECT_insetR4RECTff($1,$7,$8);
 $9 = ((($0)) + 496|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 FUNCTION_TABLE_vii[$13 & 1023]($10,$1);
 $14 = (+__ZN3App2dpEf(28952,16.0));
 $15 = (+__ZN3App2dpEf(28952,16.0));
 __Z9SIZE_Makeff($2,$14,$15);
 $16 = ((($0)) + 500|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = +HEAPF32[$1>>2];
 $22 = ((($1)) + 8|0);
 $23 = +HEAPF32[$22>>2];
 $24 = +HEAPF32[$2>>2];
 $25 = $23 - $24;
 $26 = $25 * 0.5;
 $27 = $21 + $26;
 $28 = ((($1)) + 4|0);
 $29 = +HEAPF32[$28>>2];
 $30 = ((($1)) + 12|0);
 $31 = +HEAPF32[$30>>2];
 $32 = ((($2)) + 4|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $31 - $33;
 $35 = $34 * 0.5;
 $36 = $29 + $35;
 __Z9RECT_Makeffff($3,$27,$36,$24,$33);
 FUNCTION_TABLE_vii[$20 & 1023]($17,$3);
 STACKTOP = sp;return;
}
function __ZN9SearchBox20becomeFirstResponderEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $2 = (__ZN8EditText20becomeFirstResponderEv($0)|0);
 if (!($2)) {
  STACKTOP = sp;return ($2|0);
 }
 $3 = (__ZN6ObjectnwEj(104)|0);
 dest=$3; stop=dest+104|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __THREW__ = 0;
 invoke_vi(753,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $26 = ___cxa_find_matching_catch_2()|0;
  $27 = tempRet0;
  __ZdlPv($3);
  ___resumeException($26|0);
  // unreachable;
 }
 HEAP32[$3>>2] = (3048);
 $6 = ((($3)) + 96|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($3)) + 64|0);
 HEAP32[$7>>2] = 597;
 $8 = $0;
 $9 = ((($3)) + 80|0);
 $10 = ((($1)) + 16|0);
 HEAP32[$1>>2] = (7612);
 $11 = ((($1)) + 4|0);
 HEAP32[$11>>2] = $8;
 HEAP32[$10>>2] = $1;
 __ZNSt3__28functionIFvfEE4swapERS2_($1,$9);
 $12 = HEAP32[$10>>2]|0;
 $13 = ($12|0)==($1|0);
 if ($13) {
  $14 = HEAP32[$12>>2]|0;
  $15 = ((($14)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  FUNCTION_TABLE_vi[$16 & 1023]($12);
 } else {
  $17 = ($12|0)==(0|0);
  if (!($17)) {
   $18 = HEAP32[$12>>2]|0;
   $19 = ((($18)) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_vi[$20 & 1023]($12);
  }
 }
 $21 = HEAP32[$3>>2]|0;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($0)) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 FUNCTION_TABLE_viii[$23 & 1023]($3,$25,250);
 STACKTOP = sp;return ($2|0);
}
function __ZN9SearchBox7setTextENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 __THREW__ = 0;
 invoke_vii(358,($0|0),($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  $18 = ((($3)) + 11|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = ($19<<24>>24)<(0);
  if (!($20)) {
   ___resumeException($16|0);
   // unreachable;
  }
  $21 = HEAP32[$3>>2]|0;
  __ZdlPv($21);
  ___resumeException($16|0);
  // unreachable;
 }
 $6 = ((($3)) + 11|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)<(0);
 if ($8) {
  $9 = HEAP32[$3>>2]|0;
  __ZdlPv($9);
 }
 $10 = ((($0)) + 488|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 HEAP32[$2>>2] = $0;
 $13 = HEAP32[$11>>2]|0;
 $14 = ((($13)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 FUNCTION_TABLE_viii[$15 & 1023]($11,$2,$1);
 STACKTOP = sp;return;
}
function __ZN9SearchBox28setSearchTextChangedDelegateENSt3__28functionIFvPS_RKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$phi$iZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 472|0);
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $7 = ((($2)) + 16|0);
   HEAP32[$7>>2] = 0;
   $$pre$phi$iZ2D = $7;
  } else {
   $8 = ($5|0)==($1|0);
   if ($8) {
    $9 = ((($2)) + 16|0);
    HEAP32[$9>>2] = $2;
    $10 = HEAP32[$5>>2]|0;
    $11 = ((($10)) + 12|0);
    $12 = HEAP32[$11>>2]|0;
    FUNCTION_TABLE_vii[$12 & 1023]($5,$2);
    $$pre$phi$iZ2D = $9;
    break;
   } else {
    $13 = HEAP32[$5>>2]|0;
    $14 = ((($13)) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (FUNCTION_TABLE_ii[$15 & 1023]($5)|0);
    $17 = ((($2)) + 16|0);
    HEAP32[$17>>2] = $16;
    $$pre$phi$iZ2D = $17;
    break;
   }
  }
 } while(0);
 __ZNSt3__28functionIFvP9SearchBoxRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEE4swapERSC_($2,$3);
 $18 = HEAP32[$$pre$phi$iZ2D>>2]|0;
 $19 = ($18|0)==($2|0);
 if ($19) {
  $20 = HEAP32[$18>>2]|0;
  $21 = ((($20)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  FUNCTION_TABLE_vi[$22 & 1023]($18);
  STACKTOP = sp;return;
 }
 $23 = ($18|0)==(0|0);
 if ($23) {
  STACKTOP = sp;return;
 }
 $24 = HEAP32[$18>>2]|0;
 $25 = ((($24)) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_vi[$26 & 1023]($18);
 STACKTOP = sp;return;
}
function __ZNSt3__28functionIFvP9SearchBoxRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEE4swapERSC_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ($1|0)==($0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($0|0);
 $7 = $5;
 if ($6) {
  $8 = ((($1)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==($1|0);
  if ($10) {
   $11 = HEAP32[$5>>2]|0;
   $12 = ((($11)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   __THREW__ = 0;
   invoke_vii($13|0,($5|0),($2|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $38 = ___cxa_find_matching_catch_3(0|0)|0;
    $39 = tempRet0;
    ___clang_call_terminate($38);
    // unreachable;
   }
   $16 = HEAP32[$4>>2]|0;
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($17)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_vi[$19 & 1023]($16);
   HEAP32[$4>>2] = 0;
   $20 = HEAP32[$8>>2]|0;
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($21)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   __THREW__ = 0;
   invoke_vii($23|0,($20|0),($0|0));
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $38 = ___cxa_find_matching_catch_3(0|0)|0;
    $39 = tempRet0;
    ___clang_call_terminate($38);
    // unreachable;
   }
   $26 = HEAP32[$8>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 16|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_vi[$29 & 1023]($26);
   HEAP32[$8>>2] = 0;
   HEAP32[$4>>2] = $0;
   $30 = HEAP32[$2>>2]|0;
   $31 = ((($30)) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   __THREW__ = 0;
   invoke_vii($32|0,($2|0),($1|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    $38 = ___cxa_find_matching_catch_3(0|0)|0;
    $39 = tempRet0;
    ___clang_call_terminate($38);
    // unreachable;
   }
   $35 = HEAP32[$2>>2]|0;
   $36 = ((($35)) + 16|0);
   $37 = HEAP32[$36>>2]|0;
   FUNCTION_TABLE_vi[$37 & 1023]($2);
   HEAP32[$8>>2] = $1;
   STACKTOP = sp;return;
  }
 }
 $40 = ($5|0)==($0|0);
 if ($40) {
  $41 = HEAP32[$5>>2]|0;
  $42 = ((($41)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  __THREW__ = 0;
  invoke_vii($43|0,($5|0),($1|0));
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if ($45) {
   $66 = ___cxa_find_matching_catch_3(0|0)|0;
   $67 = tempRet0;
   ___clang_call_terminate($66);
   // unreachable;
  }
  $46 = HEAP32[$4>>2]|0;
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($47)) + 16|0);
  $49 = HEAP32[$48>>2]|0;
  FUNCTION_TABLE_vi[$49 & 1023]($46);
  $50 = ((($1)) + 16|0);
  $51 = HEAP32[$50>>2]|0;
  HEAP32[$4>>2] = $51;
  HEAP32[$50>>2] = $1;
  STACKTOP = sp;return;
 }
 $52 = ((($1)) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)==($1|0);
 if (!($54)) {
  $65 = $53;
  HEAP32[$4>>2] = $65;
  HEAP32[$52>>2] = $7;
  STACKTOP = sp;return;
 }
 $55 = HEAP32[$53>>2]|0;
 $56 = ((($55)) + 12|0);
 $57 = HEAP32[$56>>2]|0;
 __THREW__ = 0;
 invoke_vii($57|0,($53|0),($0|0));
 $58 = __THREW__; __THREW__ = 0;
 $59 = $58&1;
 if ($59) {
  $66 = ___cxa_find_matching_catch_3(0|0)|0;
  $67 = tempRet0;
  ___clang_call_terminate($66);
  // unreachable;
 }
 $60 = HEAP32[$52>>2]|0;
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($61)) + 16|0);
 $63 = HEAP32[$62>>2]|0;
 FUNCTION_TABLE_vi[$63 & 1023]($60);
 $64 = HEAP32[$4>>2]|0;
 HEAP32[$52>>2] = $64;
 HEAP32[$4>>2] = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__210__function6__funcIZN9SearchBox20becomeFirstResponderEvE3__0NS_9allocatorIS3_EEFvfEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210__function6__funcIZN9SearchBox20becomeFirstResponderEvE3__0NS_9allocatorIS3_EEFvfEE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $2 = ((($0)) + 4|0);
 HEAP32[$1>>2] = (7612);
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 return ($1|0);
}
function __ZNKSt3__210__function6__funcIZN9SearchBox20becomeFirstResponderEvE3__0NS_9allocatorIS3_EEFvfEE7__cloneEPNS0_6__baseIS6_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 HEAP32[$1>>2] = (7612);
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 return;
}
function __ZNSt3__210__function6__funcIZN9SearchBox20becomeFirstResponderEvE3__0NS_9allocatorIS3_EEFvfEE7destroyEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__210__function6__funcIZN9SearchBox20becomeFirstResponderEvE3__0NS_9allocatorIS3_EEFvfEE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__210__function6__funcIZN9SearchBox20becomeFirstResponderEvE3__0NS_9allocatorIS3_EEFvfEEclEOf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx = 0, $$idx$val = 0, $$val = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0;
 var $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 24|0;
 $3 = sp;
 $4 = sp + 8|0;
 $$idx = ((($0)) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$val = +HEAPF32[$1>>2];
 $5 = (+__ZN3App2dpEf(28952,16.0));
 $6 = (+__ZN3App2dpEf(28952,16.0));
 __Z9SIZE_Makeff($3,$5,$6);
 $7 = ((($2)) + 8|0);
 $8 = $3;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = $7;
 $15 = $14;
 HEAP32[$15>>2] = $10;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $13;
 $18 = HEAP32[$$idx$val>>2]|0;
 $19 = ((($18)) + 52|0);
 $20 = HEAP32[$19>>2]|0;
 FUNCTION_TABLE_vii[$20 & 1023]($4,$$idx$val);
 $21 = (+__ZN3App2dpEf(28952,18.0));
 $22 = +HEAPF32[$4>>2];
 $23 = $22 - $21;
 HEAPF32[$4>>2] = $23;
 $24 = ((($4)) + 8|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $21 + $25;
 HEAPF32[$24>>2] = $26;
 $27 = ((($4)) + 4|0);
 $28 = +HEAPF32[$27>>2];
 $29 = ((($4)) + 12|0);
 $30 = +HEAPF32[$29>>2];
 $31 = (HEAP32[tempDoublePtr>>2]=$13,+HEAPF32[tempDoublePtr>>2]);
 $32 = $30 - $31;
 $33 = $32 * 0.5;
 $34 = $28 + $33;
 $35 = ((($2)) + 4|0);
 HEAPF32[$35>>2] = $34;
 $36 = (HEAP32[tempDoublePtr>>2]=$10,+HEAPF32[tempDoublePtr>>2]);
 $37 = $26 - $36;
 $38 = $37 * 0.5;
 $39 = $23 + $38;
 $40 = $23 - $39;
 $41 = $$val * $40;
 $42 = $39 + $41;
 HEAPF32[$2>>2] = $42;
 $43 = ((($$idx$val)) + 500|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$44>>2]|0;
 $46 = ((($45)) + 16|0);
 $47 = HEAP32[$46>>2]|0;
 FUNCTION_TABLE_vii[$47 & 1023]($44,$2);
 STACKTOP = sp;return;
}
function __ZNKSt3__210__function6__funcIZN9SearchBox20becomeFirstResponderEvE3__0NS_9allocatorIS3_EEFvfEE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(22947|0);
 $5 = ((($0)) + 4|0);
 $$0 = $4 ? $5 : 0;
 return ($$0|0);
}
function __ZNKSt3__210__function6__funcIZN9SearchBox20becomeFirstResponderEvE3__0NS_9allocatorIS3_EEFvfEE11target_typeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1632|0);
}
function __GLOBAL__sub_I_searchbox_cpp() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $1 = ((($0)) + 11|0);
 HEAP8[$1>>0] = 9;
 dest=$0; src=23094; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $2 = ((($0)) + 9|0);
 HEAP8[$2>>0] = 0;
 __THREW__ = 0;
 invoke_vii(754,(31712|0),($0|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  $10 = HEAP8[$1>>0]|0;
  $11 = ($10<<24>>24)<(0);
  if (!($11)) {
   ___resumeException($8|0);
   // unreachable;
  }
  $12 = HEAP32[$0>>2]|0;
  __ZdlPv($12);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $5 = HEAP8[$1>>0]|0;
  $6 = ($5<<24>>24)<(0);
  if (!($6)) {
   STACKTOP = sp;return;
  }
  $7 = HEAP32[$0>>2]|0;
  __ZdlPv($7);
  STACKTOP = sp;return;
 }
}
function __ZN14ClassRegistrarI9SearchBoxEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp;
 $4 = HEAP32[7778]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (__Znwj(12)|0);
  $7 = ((($6)) + 4|0);
  HEAP32[$7>>2] = 0;
  $8 = ((($6)) + 8|0);
  HEAP32[$8>>2] = 0;
  HEAP32[$6>>2] = $7;
  HEAP32[7778] = $6;
  $10 = $6;
 } else {
  $10 = $4;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 $9 = ((($3)) + 12|0);
 HEAP32[$9>>2] = (755);
 __THREW__ = 0;
 $11 = (invoke_iiii(535,($10|0),($2|0),($3|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if (!($13)) {
   $14 = HEAP32[$11>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    __THREW__ = 0;
    $16 = (invoke_ii(527,32)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     break;
    }
    $19 = ((($16)) + 16|0);
    ;HEAP32[$19>>2]=HEAP32[$3>>2]|0;HEAP32[$19+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$3+8>>2]|0;
    ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
    $20 = ((($16)) + 28|0);
    $21 = HEAP32[$9>>2]|0;
    HEAP32[$20>>2] = $21;
    $22 = HEAP32[$2>>2]|0;
    HEAP32[$16>>2] = 0;
    $23 = ((($16)) + 4|0);
    HEAP32[$23>>2] = 0;
    $24 = ((($16)) + 8|0);
    HEAP32[$24>>2] = $22;
    HEAP32[$11>>2] = $16;
    $25 = HEAP32[$10>>2]|0;
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0|0);
    if ($27) {
     $31 = $16;
    } else {
     $28 = $26;
     HEAP32[$10>>2] = $28;
     $$pre$i$i$i$i$i$i = HEAP32[$11>>2]|0;
     $31 = $$pre$i$i$i$i$i$i;
    }
    $29 = ((($10)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($30,$31);
    $32 = ((($10)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + 1)|0;
    HEAP32[$32>>2] = $34;
   }
   $35 = ((($3)) + 11|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = ($36<<24>>24)<(0);
   if (!($37)) {
    STACKTOP = sp;return;
   }
   $38 = HEAP32[$3>>2]|0;
   __ZdlPv($38);
   STACKTOP = sp;return;
  }
 } while(0);
 $39 = ___cxa_find_matching_catch_2()|0;
 $40 = tempRet0;
 $41 = ((($3)) + 11|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = ($42<<24>>24)<(0);
 if (!($43)) {
  ___resumeException($39|0);
  // unreachable;
 }
 $44 = HEAP32[$3>>2]|0;
 __ZdlPv($44);
 ___resumeException($39|0);
 // unreachable;
}
function __ZN14ClassRegistrarI9SearchBoxE7createTEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN6ObjectnwEj(504)|0);
 __THREW__ = 0;
 invoke_vi(756,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZdlPv($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  return ($0|0);
 }
 return (0)|0;
}
function __ZN9SearchBoxC2Ev($0) {
 $0 = $0|0;
 var $$0 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 33|0;
 $1 = sp + 32|0;
 $2 = sp;
 __ZN8EditTextC2Ev($0);
 HEAP32[$0>>2] = (7248);
 $3 = ((($0)) + 444|0);
 HEAP32[$3>>2] = (7576);
 $4 = ((($0)) + 488|0);
 HEAP32[$4>>2] = 0;
 __THREW__ = 0;
 $5 = (invoke_ii(523,104)|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   label = 17;
  } else {
   __THREW__ = 0;
   $8 = (+invoke_did(537,(28952|0),5.0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    __THREW__ = 0;
    invoke_viiidid(714,($5|0),($0|0),-1,0.0,0,(+$8));
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if (!($12)) {
     $13 = ((($0)) + 496|0);
     HEAP32[$13>>2] = $5;
     $14 = HEAP32[$0>>2]|0;
     $15 = ((($14)) + 160|0);
     $16 = HEAP32[$15>>2]|0;
     __THREW__ = 0;
     invoke_vii($16|0,($0|0),($5|0));
     $17 = __THREW__; __THREW__ = 0;
     $18 = $17&1;
     if ($18) {
      label = 17;
      break;
     }
     __THREW__ = 0;
     $19 = (invoke_ii(523,96)|0);
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if ($21) {
      label = 17;
      break;
     }
     __THREW__ = 0;
     invoke_viiii(724,($19|0),($0|0),(23104|0),-11184811);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      $70 = ___cxa_find_matching_catch_2()|0;
      $71 = tempRet0;
      __ZdlPv($19);
      $$0 = $71;$$02 = $70;
      break;
     }
     $24 = ((($0)) + 500|0);
     HEAP32[$24>>2] = $19;
     $25 = HEAP32[$0>>2]|0;
     $26 = ((($25)) + 160|0);
     $27 = HEAP32[$26>>2]|0;
     __THREW__ = 0;
     invoke_vii($27|0,($0|0),($19|0));
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if ($29) {
      label = 17;
      break;
     }
     $30 = HEAP32[$0>>2]|0;
     $31 = ((($30)) + 124|0);
     $32 = HEAP32[$31>>2]|0;
     __THREW__ = 0;
     invoke_vii($32|0,($0|0),-3355444);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if ($34) {
      label = 17;
      break;
     }
     $35 = HEAP32[$0>>2]|0;
     $36 = ((($35)) + 88|0);
     $37 = HEAP32[$36>>2]|0;
     HEAP8[$1>>0] = 32;
     __THREW__ = 0;
     ;HEAP8[$$byval_copy>>0]=HEAP8[$1>>0]|0;
     invoke_vii($37|0,($0|0),($$byval_copy|0));
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if ($39) {
      label = 17;
      break;
     }
     $40 = HEAP32[$0>>2]|0;
     $41 = ((($40)) + 56|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (+invoke_did(537,(28952|0),16.0));
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 17;
      break;
     }
     __THREW__ = 0;
     $46 = (+invoke_did(537,(28952|0),2.0));
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     if ($48) {
      label = 17;
      break;
     }
     __THREW__ = 0;
     $49 = (+invoke_did(537,(28952|0),16.0));
     $50 = __THREW__; __THREW__ = 0;
     $51 = $50&1;
     if ($51) {
      label = 17;
      break;
     }
     __THREW__ = 0;
     $52 = (+invoke_did(537,(28952|0),2.0));
     $53 = __THREW__; __THREW__ = 0;
     $54 = $53&1;
     if ($54) {
      label = 17;
      break;
     }
     HEAPF32[$2>>2] = $43;
     $55 = ((($2)) + 4|0);
     HEAPF32[$55>>2] = $46;
     $56 = ((($2)) + 8|0);
     HEAPF32[$56>>2] = $49;
     $57 = ((($2)) + 12|0);
     HEAPF32[$57>>2] = $52;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$2+12>>2]|0;
     invoke_vii($42|0,($0|0),($$byval_copy1|0));
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 17;
      break;
     }
     $60 = ((($0)) + 458|0);
     HEAP8[$60>>0] = 1;
     $61 = HEAP32[$0>>2]|0;
     $62 = ((($61)) + 268|0);
     $63 = HEAP32[$62>>2]|0;
     __THREW__ = 0;
     invoke_vii($63|0,($0|0),-16777216);
     $64 = __THREW__; __THREW__ = 0;
     $65 = $64&1;
     if ($65) {
      label = 17;
      break;
     }
     STACKTOP = sp;return;
    }
   }
   $68 = ___cxa_find_matching_catch_2()|0;
   $69 = tempRet0;
   __ZdlPv($5);
   $$0 = $69;$$02 = $68;
  }
 } while(0);
 if ((label|0) == 17) {
  $66 = ___cxa_find_matching_catch_2()|0;
  $67 = tempRet0;
  $$0 = $67;$$02 = $66;
 }
 $72 = HEAP32[$4>>2]|0;
 $73 = ((($0)) + 472|0);
 $74 = ($72|0)==($73|0);
 if ($74) {
  $75 = HEAP32[$72>>2]|0;
  $76 = ((($75)) + 16|0);
  $77 = HEAP32[$76>>2]|0;
  FUNCTION_TABLE_vi[$77 & 1023]($72);
 } else {
  $78 = ($72|0)==(0|0);
  if (!($78)) {
   $79 = HEAP32[$72>>2]|0;
   $80 = ((($79)) + 20|0);
   $81 = HEAP32[$80>>2]|0;
   FUNCTION_TABLE_vi[$81 & 1023]($72);
  }
 }
 HEAP32[$0>>2] = (5400);
 HEAP32[$3>>2] = (5724);
 $82 = ((($0)) + 468|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($83|0)==(0|0);
 if (!($84)) {
  __THREW__ = 0;
  invoke_vi(525,($83|0));
  $85 = __THREW__; __THREW__ = 0;
  $86 = $85&1;
  if ($86) {
   $87 = ___cxa_find_matching_catch_3(0|0)|0;
   $88 = tempRet0;
   ___clang_call_terminate($87);
   // unreachable;
  }
 }
 $89 = ((($0)) + 464|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ($90|0)==(0|0);
 if (!($91)) {
  __THREW__ = 0;
  invoke_vi(525,($90|0));
  $92 = __THREW__; __THREW__ = 0;
  $93 = $92&1;
  if ($93) {
   $94 = ___cxa_find_matching_catch_3(0|0)|0;
   $95 = tempRet0;
   ___clang_call_terminate($94);
   // unreachable;
  }
 }
 $96 = ((($0)) + 460|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ($97|0)==(0|0);
 if ($98) {
  __ZN5LabelD2Ev($0);
  ___resumeException($$02|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(525,($97|0));
 $99 = __THREW__; __THREW__ = 0;
 $100 = $99&1;
 if ($100) {
  $101 = ___cxa_find_matching_catch_3(0|0)|0;
  $102 = tempRet0;
  ___clang_call_terminate($101);
  // unreachable;
 } else {
  __ZN5LabelD2Ev($0);
  ___resumeException($$02|0);
  // unreachable;
 }
}
function __ZN16SegmentedControlD2Ev($0) {
 $0 = $0|0;
 var $$pre$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (7656);
 $1 = ((($0)) + 376|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 360|0);
 $4 = ($2|0)==($3|0);
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_vi[$7 & 1023]($2);
 } else {
  $8 = ($2|0)==(0|0);
  if (!($8)) {
   $9 = HEAP32[$2>>2]|0;
   $10 = ((($9)) + 20|0);
   $11 = HEAP32[$10>>2]|0;
   FUNCTION_TABLE_vi[$11 & 1023]($2);
  }
 }
 $12 = ((($0)) + 328|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  __ZN4ViewD2Ev($0);
  return;
 }
 $15 = ((($0)) + 332|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==($13|0);
 do {
  if ($17) {
   $36 = $13;
  } else {
   $19 = $16;
   while(1) {
    $18 = ((($19)) + -24|0);
    HEAP32[$15>>2] = $18;
    $20 = ((($19)) + -4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(0|0);
    if (!($22)) {
     __THREW__ = 0;
     invoke_vi(525,($21|0));
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if ($24) {
      label = 9;
      break;
     }
    }
    $27 = ((($19)) + -8|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)==(0|0);
    if (!($29)) {
     __THREW__ = 0;
     invoke_vi(525,($28|0));
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if ($33) {
      label = 13;
      break;
     }
    }
    $30 = HEAP32[$15>>2]|0;
    $31 = ($30|0)==($13|0);
    if ($31) {
     label = 14;
     break;
    } else {
     $19 = $30;
    }
   }
   if ((label|0) == 9) {
    $25 = ___cxa_find_matching_catch_3(0|0)|0;
    $26 = tempRet0;
    ___clang_call_terminate($25);
    // unreachable;
   }
   else if ((label|0) == 13) {
    $34 = ___cxa_find_matching_catch_3(0|0)|0;
    $35 = tempRet0;
    ___clang_call_terminate($34);
    // unreachable;
   }
   else if ((label|0) == 14) {
    $$pre$i = HEAP32[$12>>2]|0;
    $36 = $$pre$i;
    break;
   }
  }
 } while(0);
 __ZdlPv($36);
 __ZN4ViewD2Ev($0);
 return;
}
function __ZN16SegmentedControlD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN16SegmentedControlD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN16SegmentedControl15updateRenderOpsEv($0) {
 $0 = $0|0;
 var $$09 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast = 0, $tmpcast$byval_copy = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp;
 $1 = ((($0)) + 328|0);
 $2 = ((($0)) + 332|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $$09 = 0;$7 = $4;
 while(1) {
  $6 = $7;
  $8 = (((($6) + (($$09*24)|0)|0)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $tmpcast = (($6) + (($$09*24)|0)|0);
  ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$tmpcast>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$tmpcast+4>>2]|0;HEAP32[$tmpcast$byval_copy+8>>2]=HEAP32[$tmpcast+8>>2]|0;HEAP32[$tmpcast$byval_copy+12>>2]=HEAP32[$tmpcast+12>>2]|0;
  __ZN12TextRenderer6layoutE4RECT($9,$tmpcast$byval_copy);
  $10 = HEAP32[$8>>2]|0;
  __ZN12TextRenderer15updateRenderOpsEP4View($10,$0);
  $11 = (($$09) + 1)|0;
  $12 = HEAP32[$2>>2]|0;
  $13 = HEAP32[$1>>2]|0;
  $14 = (($12) - ($13))|0;
  $15 = (($14|0) / 24)&-1;
  $16 = ($11>>>0)<($15>>>0);
  if ($16) {
   $$09 = $11;$7 = $13;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN16SegmentedControl28onEffectiveTintColourChangedEv($0) {
 $0 = $0|0;
 var $$sroa$033$057 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4View28onEffectiveTintColourChangedEv($0);
 $1 = ((($0)) + 328|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 332|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if ($5) {
  return;
 }
 $6 = ((($0)) + 320|0);
 $7 = ((($0)) + 340|0);
 $$sroa$033$057 = $2;
 while(1) {
  $8 = ((($$sroa$033$057)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   __ZN6Object6retainEv($9);
  }
  $11 = ((($$sroa$033$057)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   __THREW__ = 0;
   invoke_vi(526,($12|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    label = 8;
    break;
   }
  }
  $22 = HEAP32[$9>>2]|0;
  $23 = ((($22)) + 44|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$6>>2]|0;
  __THREW__ = 0;
  invoke_vii($24|0,($9|0),($25|0));
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  if ($27) {
   label = 23;
   break;
  }
  $28 = HEAP32[$7>>2]|0;
  $29 = ($28|0)==(0);
  if ($29) {
   $30 = HEAP32[$6>>2]|0;
   $31 = $30;
  } else {
   $31 = $28;
  }
  __THREW__ = 0;
  invoke_vii(741,($12|0),($31|0));
  $32 = __THREW__; __THREW__ = 0;
  $33 = $32&1;
  if ($33) {
   label = 23;
   break;
  }
  if (!($13)) {
   __THREW__ = 0;
   invoke_vi(525,($12|0));
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if ($35) {
    label = 18;
    break;
   }
  }
  if (!($10)) {
   __THREW__ = 0;
   invoke_vi(525,($9|0));
   $38 = __THREW__; __THREW__ = 0;
   $39 = $38&1;
   if ($39) {
    label = 21;
    break;
   }
  }
  $42 = ((($$sroa$033$057)) + 24|0);
  $43 = ($42|0)==($4|0);
  if ($43) {
   label = 3;
   break;
  } else {
   $$sroa$033$057 = $42;
  }
 }
 if ((label|0) == 3) {
  return;
 }
 else if ((label|0) == 8) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  if ($10) {
   ___resumeException($16|0);
   // unreachable;
  }
  __THREW__ = 0;
  invoke_vi(525,($9|0));
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   $20 = ___cxa_find_matching_catch_3(0|0)|0;
   $21 = tempRet0;
   ___clang_call_terminate($20);
   // unreachable;
  } else {
   ___resumeException($16|0);
   // unreachable;
  }
 }
 else if ((label|0) == 18) {
  $36 = ___cxa_find_matching_catch_3(0|0)|0;
  $37 = tempRet0;
  ___clang_call_terminate($36);
  // unreachable;
 }
 else if ((label|0) == 21) {
  $40 = ___cxa_find_matching_catch_3(0|0)|0;
  $41 = tempRet0;
  ___clang_call_terminate($40);
  // unreachable;
 }
 else if ((label|0) == 23) {
  $44 = ___cxa_find_matching_catch_2()|0;
  $45 = tempRet0;
  if (!($13)) {
   __THREW__ = 0;
   invoke_vi(525,($12|0));
   $46 = __THREW__; __THREW__ = 0;
   $47 = $46&1;
   if ($47) {
    $48 = ___cxa_find_matching_catch_3(0|0)|0;
    $49 = tempRet0;
    ___clang_call_terminate($48);
    // unreachable;
   }
  }
  if ($10) {
   ___resumeException($44|0);
   // unreachable;
  }
  __THREW__ = 0;
  invoke_vi(525,($9|0));
  $50 = __THREW__; __THREW__ = 0;
  $51 = $50&1;
  if ($51) {
   $52 = ___cxa_find_matching_catch_3(0|0)|0;
   $53 = tempRet0;
   ___clang_call_terminate($52);
   // unreachable;
  } else {
   ___resumeException($44|0);
   // unreachable;
  }
 }
}
function __ZN16SegmentedControl7measureEff($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4View7measureEff($0,$1,$2);
 $3 = ((($0)) + 119|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$3>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$3+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$3+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$3+3>>0];$4 = +HEAPF32[tempDoublePtr>>2];
 $5 = (~~(($4)));
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  return;
 }
 $8 = $4 + 1.0;
 HEAPF32[tempDoublePtr>>2]=$8;HEAP8[$3>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$3+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$3+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$3+3>>0]=HEAP8[tempDoublePtr+3>>0];
 return;
}
function __ZN16SegmentedControl6layoutEv($0) {
 $0 = $0|0;
 var $$01819 = 0, $$020 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4View6layoutEv($0);
 $1 = ((($0)) + 328|0);
 $2 = ((($0)) + 332|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  $7 = ((($0)) + 106|0);
  HEAP8[$7>>0] = 1;
  return;
 }
 $6 = ((($0)) + 348|0);
 $$01819 = 0;$$020 = 0.0;$9 = $4;
 while(1) {
  $8 = $9;
  $10 = (($8) + (($$01819*24)|0)|0);
  HEAPF32[tempDoublePtr>>2]=$$020;HEAP8[$10>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$10+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$10+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$10+3>>0]=HEAP8[tempDoublePtr+3>>0];
  $11 = (((($8) + (($$01819*24)|0)|0)) + 4|0);
  HEAPF32[tempDoublePtr>>2]=0.0;HEAP8[$11>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$11+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$11+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$11+3>>0]=HEAP8[tempDoublePtr+3>>0];
  $12 = (((($8) + (($$01819*24)|0)|0)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  FUNCTION_TABLE_vii[$16 & 1023]($13,$10);
  $17 = (((($8) + (($$01819*24)|0)|0)) + 8|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$17>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$17+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$17+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$17+3>>0];$18 = +HEAPF32[tempDoublePtr>>2];
  $19 = +HEAPF32[$6>>2];
  $20 = $18 - $19;
  $21 = $$020 + $20;
  $22 = (($$01819) + 1)|0;
  $23 = HEAP32[$2>>2]|0;
  $24 = HEAP32[$1>>2]|0;
  $25 = (($23) - ($24))|0;
  $26 = (($25|0) / 24)&-1;
  $27 = ($22>>>0)<($26>>>0);
  if ($27) {
   $$01819 = $22;$$020 = $21;$9 = $24;
  } else {
   break;
  }
 }
 $7 = ((($0)) + 106|0);
 HEAP8[$7>>0] = 1;
 return;
}
function __ZN16SegmentedControl17updateContentSizeEff($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $$019 = 0, $$lcssa = 0, $$sroa_idx13 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 196|0);
 HEAPF32[$3>>2] = 0.0;
 $4 = ((($0)) + 200|0);
 HEAPF32[$4>>2] = 0.0;
 $5 = ((($0)) + 328|0);
 $6 = ((($0)) + 332|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$5>>2]|0;
 $9 = (($7) - ($8))|0;
 $10 = (($9|0) / 24)&-1;
 $11 = ($9|0)==(0);
 if ($11) {
  $$lcssa = $10;$18 = 0.0;
  $12 = (($$lcssa) + -1)|0;
  $13 = (+($12>>>0));
  $14 = ((($0)) + 348|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $13 * $15;
  $17 = $18 - $16;
  HEAPF32[$3>>2] = $17;
  return;
 }
 $$019 = 0;$20 = $8;
 while(1) {
  $19 = $20;
  $21 = (((($19) + (($$019*24)|0)|0)) + 20|0);
  $22 = HEAP32[$21>>2]|0;
  __ZN12TextRenderer7measureEv($22);
  $23 = HEAP32[$21>>2]|0;
  $24 = ((($23)) + 42|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$24>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$24+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$24+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$24+3>>0];$25 = +HEAPF32[tempDoublePtr>>2];
  $$sroa_idx13 = ((($23)) + 46|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa_idx13>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa_idx13+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa_idx13+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa_idx13+3>>0];$26 = +HEAPF32[tempDoublePtr>>2];
  $27 = (+__ZN3App2dpEf(28952,8.0));
  $28 = $25 + $27;
  $29 = (+__ZN3App2dpEf(28952,8.0));
  $30 = $28 + $29;
  $31 = (((($19) + (($$019*24)|0)|0)) + 8|0);
  HEAPF32[$31>>2] = $30;
  $32 = (+__ZN3App2dpEf(28952,4.0));
  $33 = $26 + $32;
  $34 = (+__ZN3App2dpEf(28952,4.0));
  $35 = $33 + $34;
  $36 = (((($19) + (($$019*24)|0)|0)) + 12|0);
  HEAPF32[$36>>2] = $35;
  $37 = +HEAPF32[$31>>2];
  $38 = +HEAPF32[$3>>2];
  $39 = $37 + $38;
  HEAPF32[$3>>2] = $39;
  $40 = +HEAPF32[$4>>2];
  $41 = +HEAPF32[$36>>2];
  $42 = $40 < $41;
  $43 = $42 ? $36 : $4;
  $44 = HEAP32[$43>>2]|0;
  HEAP32[$4>>2] = $44;
  $45 = (($$019) + 1)|0;
  $46 = HEAP32[$6>>2]|0;
  $47 = HEAP32[$5>>2]|0;
  $48 = (($46) - ($47))|0;
  $49 = (($48|0) / 24)&-1;
  $50 = ($45>>>0)<($49>>>0);
  if ($50) {
   $$019 = $45;$20 = $47;
  } else {
   $$lcssa = $49;$18 = $39;
   break;
  }
 }
 $12 = (($$lcssa) + -1)|0;
 $13 = (+($12>>>0));
 $14 = ((($0)) + 348|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $13 * $15;
 $17 = $18 - $16;
 HEAPF32[$3>>2] = $17;
 return;
}
function __ZN16SegmentedControl12onTouchEventEii6_POINT($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$018 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $4 = ((($0)) + 352|0);
  HEAP32[$4>>2] = -1;
  $5 = ((($0)) + 328|0);
  $6 = ((($0)) + 332|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$5>>2]|0;
  $9 = ($7|0)==($8|0);
  if ($9) {
   return 1;
  } else {
   $$018 = 0;$11 = $8;
  }
  while(1) {
   $10 = $11;
   $12 = (($10) + (($$018*24)|0)|0);
   $13 = (__ZN4RECT8containsERK6_POINT($12,$3)|0);
   if ($13) {
    break;
   }
   $17 = (($$018) + 1)|0;
   $18 = HEAP32[$6>>2]|0;
   $19 = HEAP32[$5>>2]|0;
   $20 = (($18) - ($19))|0;
   $21 = (($20|0) / 24)&-1;
   $22 = ($17>>>0)<($21>>>0);
   if ($22) {
    $$018 = $17;$11 = $19;
   } else {
    label = 17;
    break;
   }
  }
  if ((label|0) == 17) {
   return 1;
  }
  $14 = HEAP32[$0>>2]|0;
  $15 = ((($14)) + 280|0);
  $16 = HEAP32[$15>>2]|0;
  FUNCTION_TABLE_vii[$16 & 1023]($0,$$018);
  return 1;
  break;
 }
 case 2:  {
  $23 = ((($0)) + 352|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)>(-1);
  if (!($25)) {
   return 1;
  }
  $26 = ((($0)) + 328|0);
  $27 = ((($0)) + 332|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$26>>2]|0;
  $30 = (($28) - ($29))|0;
  $31 = (($30|0) / 24)&-1;
  $32 = ($31>>>0)>($24>>>0);
  if (!($32)) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv($26);
   // unreachable;
  }
  $33 = $29;
  $34 = (($33) + (($24*24)|0)|0);
  $35 = (__ZN4RECT8containsERK6_POINT($34,$3)|0);
  if ($35) {
   $36 = HEAP32[$0>>2]|0;
   $37 = ((($36)) + 272|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_vii[$38 & 1023]($0,$39);
   $40 = HEAP32[$23>>2]|0;
   $41 = ((($0)) + 356|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($40|0)==($42|0);
   if (!($43)) {
    $44 = ($42|0)>(-1);
    do {
     if ($44) {
      $45 = HEAP32[$27>>2]|0;
      $46 = HEAP32[$26>>2]|0;
      $47 = (($45) - ($46))|0;
      $48 = (($47|0) / 24)&-1;
      $49 = ($48>>>0)>($42>>>0);
      if ($49) {
       $50 = HEAP32[$0>>2]|0;
       $51 = ((($50)) + 180|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = $46;
       $54 = (($53) + (($42*24)|0)|0);
       FUNCTION_TABLE_vii[$52 & 1023]($0,$54);
       $$pre = HEAP32[$23>>2]|0;
       $58 = $$pre;
       break;
      } else {
       __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv($26);
       // unreachable;
      }
     } else {
      $58 = $40;
     }
    } while(0);
    $55 = HEAP32[$0>>2]|0;
    $56 = ((($55)) + 276|0);
    $57 = HEAP32[$56>>2]|0;
    FUNCTION_TABLE_vii[$57 & 1023]($0,$58);
   }
  }
  $59 = HEAP32[$0>>2]|0;
  $60 = ((($59)) + 280|0);
  $61 = HEAP32[$60>>2]|0;
  FUNCTION_TABLE_vii[$61 & 1023]($0,-1);
  return 1;
  break;
 }
 default: {
  return 1;
 }
 }
 return (0)|0;
}
function __ZN16SegmentedControl10addSegmentERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$08 = 0, $$2 = 0, $$210 = 0, $$byval_copy = 0, $$pre = 0, $$pre19 = 0, $$sink = 0.0, $$sink2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 33|0;
 $2 = sp + 8|0;
 $3 = sp + 32|0;
 $4 = sp;
 $5 = ((($2)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($2)) + 20|0);
 HEAP32[$6>>2] = 0;
 __THREW__ = 0;
 $7 = (invoke_ii(523,112)|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   label = 14;
  } else {
   __THREW__ = 0;
   invoke_vi(737,($7|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $46 = ___cxa_find_matching_catch_2()|0;
    $47 = tempRet0;
    __ZdlPv($7);
    $$2 = $46;$$210 = $47;
    break;
   }
   $12 = ($7|0)==(0|0);
   if ($12) {
    $17 = 0;
   } else {
    HEAP32[$6>>2] = $7;
    __THREW__ = 0;
    invoke_vi(526,($7|0));
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if ($14) {
     label = 14;
     break;
    }
    $$pre = HEAP32[$6>>2]|0;
    $17 = $$pre;
   }
   $15 = ((($0)) + 324|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   invoke_vii(740,($17|0),($16|0));
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    label = 14;
   } else {
    __THREW__ = 0;
    invoke_vii(757,($17|0),($1|0));
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     label = 14;
    } else {
     HEAP8[$3>>0] = 34;
     __THREW__ = 0;
     ;HEAP8[$$byval_copy>>0]=HEAP8[$3>>0]|0;
     invoke_vii(742,($17|0),($$byval_copy|0));
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      label = 14;
     } else {
      $24 = ((($0)) + 340|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($25|0)==(0);
      if ($26) {
       $27 = ((($0)) + 320|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = $28;
      } else {
       $29 = $25;
      }
      __THREW__ = 0;
      invoke_vii(741,($17|0),($29|0));
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       $48 = ___cxa_find_matching_catch_2()|0;
       $49 = tempRet0;
       $$2 = $48;$$210 = $49;
       break;
      }
      $32 = $4;
      $33 = $32;
      HEAP32[$33>>2] = 0;
      $34 = (($32) + 4)|0;
      $35 = $34;
      HEAP32[$35>>2] = 0;
      $36 = ((($0)) + 328|0);
      $37 = ((($0)) + 332|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = HEAP32[$36>>2]|0;
      $40 = ($38|0)==($39|0);
      if ($40) {
       __THREW__ = 0;
       $41 = (+invoke_did(537,(28952|0),4.0));
       $42 = __THREW__; __THREW__ = 0;
       $43 = $42&1;
       if ($43) {
        label = 17;
       } else {
        $$sink = $41;$$sink2 = 0;
        label = 20;
       }
      } else {
       __THREW__ = 0;
       $52 = (+invoke_did(537,(28952|0),4.0));
       $53 = __THREW__; __THREW__ = 0;
       $54 = $53&1;
       if ($54) {
        label = 17;
       } else {
        $$sink = $52;$$sink2 = 1;
        label = 20;
       }
      }
      L22: do {
       if ((label|0) == 20) {
        $55 = (($4) + ($$sink2<<2)|0);
        HEAPF32[$55>>2] = $$sink;
        __THREW__ = 0;
        $56 = (invoke_ii(523,104)|0);
        $57 = __THREW__; __THREW__ = 0;
        $58 = $57&1;
        if ($58) {
         label = 17;
        } else {
         $59 = ((($0)) + 348|0);
         $60 = +HEAPF32[$59>>2];
         $61 = ((($0)) + 320|0);
         $62 = HEAP32[$61>>2]|0;
         __THREW__ = 0;
         invoke_viiidii(758,($56|0),($0|0),0,(+$60),($62|0),($4|0));
         $63 = __THREW__; __THREW__ = 0;
         $64 = $63&1;
         if ($64) {
          $122 = ___cxa_find_matching_catch_2()|0;
          $123 = tempRet0;
          __ZdlPv($56);
          $$0 = $122;$$08 = $123;
          break;
         }
         $65 = HEAP32[$5>>2]|0;
         $66 = ($65|0)==($56|0);
         if ($66) {
          $76 = $56;
         } else {
          $67 = ($65|0)==(0|0);
          if (!($67)) {
           __THREW__ = 0;
           invoke_vi(525,($65|0));
           $68 = __THREW__; __THREW__ = 0;
           $69 = $68&1;
           if ($69) {
            label = 17;
            break;
           }
          }
          HEAP32[$5>>2] = $56;
          $70 = ($56|0)==(0|0);
          if ($70) {
           $76 = $56;
          } else {
           __THREW__ = 0;
           invoke_vi(526,($56|0));
           $71 = __THREW__; __THREW__ = 0;
           $72 = $71&1;
           if ($72) {
            label = 17;
            break;
           }
           $$pre19 = HEAP32[$5>>2]|0;
           $76 = $$pre19;
          }
         }
         $73 = HEAP32[$0>>2]|0;
         $74 = ((($73)) + 160|0);
         $75 = HEAP32[$74>>2]|0;
         __THREW__ = 0;
         invoke_vii($75|0,($0|0),($76|0));
         $77 = __THREW__; __THREW__ = 0;
         $78 = $77&1;
         if ($78) {
          label = 17;
         } else {
          $79 = HEAP32[$37>>2]|0;
          $80 = ((($0)) + 336|0);
          $81 = HEAP32[$80>>2]|0;
          $82 = ($79|0)==($81|0);
          if ($82) {
           __THREW__ = 0;
           invoke_vii(759,($36|0),($2|0));
           $103 = __THREW__; __THREW__ = 0;
           $104 = $103&1;
           if ($104) {
            label = 17;
            break;
           }
          } else {
           ;HEAP32[$79>>2]=HEAP32[$2>>2]|0;HEAP32[$79+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$79+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$79+12>>2]=HEAP32[$2+12>>2]|0;
           $83 = ((($79)) + 16|0);
           $84 = HEAP32[$5>>2]|0;
           HEAP32[$83>>2] = $84;
           $85 = ($84|0)==(0|0);
           if (!($85)) {
            __THREW__ = 0;
            invoke_vi(526,($84|0));
            $86 = __THREW__; __THREW__ = 0;
            $87 = $86&1;
            if ($87) {
             label = 17;
             break;
            }
           }
           $88 = ((($79)) + 20|0);
           $89 = HEAP32[$6>>2]|0;
           HEAP32[$88>>2] = $89;
           $90 = ($89|0)==(0|0);
           do {
            if (!($90)) {
             __THREW__ = 0;
             invoke_vi(526,($89|0));
             $91 = __THREW__; __THREW__ = 0;
             $92 = $91&1;
             if (!($92)) {
              break;
             }
             $93 = ___cxa_find_matching_catch_2()|0;
             $94 = tempRet0;
             $95 = HEAP32[$83>>2]|0;
             $96 = ($95|0)==(0|0);
             if ($96) {
              $eh$lpad$body$index3Z2D = $94;$eh$lpad$body$indexZ2D = $93;
              label = 18;
              break L22;
             }
             __THREW__ = 0;
             invoke_vi(525,($95|0));
             $97 = __THREW__; __THREW__ = 0;
             $98 = $97&1;
             if (!($98)) {
              $eh$lpad$body$index3Z2D = $94;$eh$lpad$body$indexZ2D = $93;
              label = 18;
              break L22;
             }
             $99 = ___cxa_find_matching_catch_3(0|0)|0;
             $100 = tempRet0;
             ___clang_call_terminate($99);
             // unreachable;
            }
           } while(0);
           $101 = HEAP32[$37>>2]|0;
           $102 = ((($101)) + 24|0);
           HEAP32[$37>>2] = $102;
          }
          $105 = HEAP32[$0>>2]|0;
          $106 = ((($105)) + 80|0);
          $107 = HEAP32[$106>>2]|0;
          __THREW__ = 0;
          invoke_vi($107|0,($0|0));
          $108 = __THREW__; __THREW__ = 0;
          $109 = $108&1;
          if ($109) {
           label = 17;
          } else {
           $110 = HEAP32[$6>>2]|0;
           $111 = ($110|0)==(0|0);
           if (!($111)) {
            __THREW__ = 0;
            invoke_vi(525,($110|0));
            $112 = __THREW__; __THREW__ = 0;
            $113 = $112&1;
            if ($113) {
             $114 = ___cxa_find_matching_catch_3(0|0)|0;
             $115 = tempRet0;
             ___clang_call_terminate($114);
             // unreachable;
            }
           }
           $116 = HEAP32[$5>>2]|0;
           $117 = ($116|0)==(0|0);
           if ($117) {
            STACKTOP = sp;return;
           }
           __THREW__ = 0;
           invoke_vi(525,($116|0));
           $118 = __THREW__; __THREW__ = 0;
           $119 = $118&1;
           if ($119) {
            $120 = ___cxa_find_matching_catch_3(0|0)|0;
            $121 = tempRet0;
            ___clang_call_terminate($120);
            // unreachable;
           } else {
            STACKTOP = sp;return;
           }
          }
         }
        }
       }
      } while(0);
      if ((label|0) == 17) {
       $50 = ___cxa_find_matching_catch_2()|0;
       $51 = tempRet0;
       $eh$lpad$body$index3Z2D = $51;$eh$lpad$body$indexZ2D = $50;
       label = 18;
      }
      if ((label|0) == 18) {
       $$0 = $eh$lpad$body$indexZ2D;$$08 = $eh$lpad$body$index3Z2D;
      }
      $$2 = $$0;$$210 = $$08;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  $44 = ___cxa_find_matching_catch_2()|0;
  $45 = tempRet0;
  $$2 = $44;$$210 = $45;
 }
 $124 = HEAP32[$6>>2]|0;
 $125 = ($124|0)==(0|0);
 if (!($125)) {
  __THREW__ = 0;
  invoke_vi(525,($124|0));
  $126 = __THREW__; __THREW__ = 0;
  $127 = $126&1;
  if ($127) {
   $128 = ___cxa_find_matching_catch_3(0|0)|0;
   $129 = tempRet0;
   ___clang_call_terminate($128);
   // unreachable;
  }
 }
 $130 = HEAP32[$5>>2]|0;
 $131 = ($130|0)==(0|0);
 if ($131) {
  ___resumeException($$2|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(525,($130|0));
 $132 = __THREW__; __THREW__ = 0;
 $133 = $132&1;
 if ($133) {
  $134 = ___cxa_find_matching_catch_3(0|0)|0;
  $135 = tempRet0;
  ___clang_call_terminate($134);
  // unreachable;
 } else {
  ___resumeException($$2|0);
  // unreachable;
 }
}
function __ZN16SegmentedControl13setTextColourEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 340|0);
 HEAP32[$2>>2] = $1;
 $3 = ($1|0)==(0);
 if ($3) {
  $4 = ((($0)) + 320|0);
  $5 = HEAP32[$4>>2]|0;
  $15 = $5;
 } else {
  $15 = $1;
 }
 $6 = ((($0)) + 328|0);
 $7 = ((($0)) + 332|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$6>>2]|0;
 $10 = ($8|0)==($9|0);
 if ($10) {
  return;
 } else {
  $$011 = 0;$12 = $9;
 }
 while(1) {
  $11 = $12;
  $13 = (((($11) + (($$011*24)|0)|0)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  __ZN12TextRenderer16setDefaultColourEj($14,$15);
  $16 = (($$011) + 1)|0;
  $17 = HEAP32[$7>>2]|0;
  $18 = HEAP32[$6>>2]|0;
  $19 = (($17) - ($18))|0;
  $20 = (($19|0) / 24)&-1;
  $21 = ($16>>>0)<($20>>>0);
  if ($21) {
   $$011 = $16;$12 = $18;
  } else {
   break;
  }
 }
 return;
}
function __ZN16SegmentedControl21setSelectedTextColourEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 344|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 356|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if (!($5)) {
  return;
 }
 $6 = ((($0)) + 328|0);
 $7 = ((($0)) + 332|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$6>>2]|0;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 24)&-1;
 $12 = ($11>>>0)>($4>>>0);
 if (!($12)) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv($6);
  // unreachable;
 }
 $13 = $9;
 $14 = (((($13) + (($4*24)|0)|0)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 __ZN12TextRenderer16setDefaultColourEj($15,$1);
 return;
}
function __ZN16SegmentedControl26setSegmentSelectedDelegateENSt3__28functionIFviEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$phi$iZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 360|0);
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $7 = ((($2)) + 16|0);
   HEAP32[$7>>2] = 0;
   $$pre$phi$iZ2D = $7;
  } else {
   $8 = ($5|0)==($1|0);
   if ($8) {
    $9 = ((($2)) + 16|0);
    HEAP32[$9>>2] = $2;
    $10 = HEAP32[$5>>2]|0;
    $11 = ((($10)) + 12|0);
    $12 = HEAP32[$11>>2]|0;
    FUNCTION_TABLE_vii[$12 & 1023]($5,$2);
    $$pre$phi$iZ2D = $9;
    break;
   } else {
    $13 = HEAP32[$5>>2]|0;
    $14 = ((($13)) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (FUNCTION_TABLE_ii[$15 & 1023]($5)|0);
    $17 = ((($2)) + 16|0);
    HEAP32[$17>>2] = $16;
    $$pre$phi$iZ2D = $17;
    break;
   }
  }
 } while(0);
 __ZNSt3__28functionIFviEE4swapERS2_($2,$3);
 $18 = HEAP32[$$pre$phi$iZ2D>>2]|0;
 $19 = ($18|0)==($2|0);
 if ($19) {
  $20 = HEAP32[$18>>2]|0;
  $21 = ((($20)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  FUNCTION_TABLE_vi[$22 & 1023]($18);
  STACKTOP = sp;return;
 }
 $23 = ($18|0)==(0|0);
 if ($23) {
  STACKTOP = sp;return;
 }
 $24 = HEAP32[$18>>2]|0;
 $25 = ((($24)) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_vi[$26 & 1023]($18);
 STACKTOP = sp;return;
}
function __ZN16SegmentedControl12onSegmentTapEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 376|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 HEAP32[$2>>2] = $1;
 $6 = HEAP32[$4>>2]|0;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vii[$8 & 1023]($4,$2);
 STACKTOP = sp;return;
}
function __ZN16SegmentedControl18setSelectedSegmentEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 356|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if ($4) {
  $53 = HEAP32[$0>>2]|0;
  $54 = ((($53)) + 80|0);
  $55 = HEAP32[$54>>2]|0;
  FUNCTION_TABLE_vi[$55 & 1023]($0);
  return;
 }
 $5 = ($3|0)>(-1);
 if ($5) {
  $6 = ((($0)) + 328|0);
  $7 = ((($0)) + 332|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$6>>2]|0;
  $10 = (($8) - ($9))|0;
  $11 = (($10|0) / 24)&-1;
  $12 = ($11>>>0)>($3>>>0);
  if (!($12)) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv($6);
   // unreachable;
  }
  $13 = $9;
  $14 = (((($13) + (($3*24)|0)|0)) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if (!($16)) {
   $17 = ((($0)) + 340|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0);
   if ($19) {
    $20 = ((($0)) + 320|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21;
   } else {
    $22 = $18;
   }
   __ZN12TextRenderer16setDefaultColourEj($15,$22);
   $23 = (((($13) + (($3*24)|0)|0)) + 16|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($25)) + 40|0);
   $27 = HEAP32[$26>>2]|0;
   FUNCTION_TABLE_vii[$27 & 1023]($24,0);
  }
 }
 HEAP32[$2>>2] = $1;
 $28 = HEAP32[$0>>2]|0;
 $29 = ((($28)) + 272|0);
 $30 = HEAP32[$29>>2]|0;
 FUNCTION_TABLE_vii[$30 & 1023]($0,$1);
 $31 = HEAP32[$2>>2]|0;
 $32 = ($31|0)>(-1);
 if (!($32)) {
  $53 = HEAP32[$0>>2]|0;
  $54 = ((($53)) + 80|0);
  $55 = HEAP32[$54>>2]|0;
  FUNCTION_TABLE_vi[$55 & 1023]($0);
  return;
 }
 $33 = ((($0)) + 328|0);
 $34 = ((($0)) + 332|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$33>>2]|0;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 24)&-1;
 $39 = ($38>>>0)>($31>>>0);
 if (!($39)) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv($33);
  // unreachable;
 }
 $40 = $36;
 $41 = (((($40) + (($31*24)|0)|0)) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(0|0);
 if ($43) {
  $53 = HEAP32[$0>>2]|0;
  $54 = ((($53)) + 80|0);
  $55 = HEAP32[$54>>2]|0;
  FUNCTION_TABLE_vi[$55 & 1023]($0);
  return;
 }
 $44 = ((($0)) + 344|0);
 $45 = HEAP32[$44>>2]|0;
 __ZN12TextRenderer16setDefaultColourEj($42,$45);
 $46 = (((($40) + (($31*24)|0)|0)) + 16|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($48)) + 40|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($0)) + 320|0);
 $52 = HEAP32[$51>>2]|0;
 FUNCTION_TABLE_vii[$50 & 1023]($47,$52);
 $53 = HEAP32[$0>>2]|0;
 $54 = ((($53)) + 80|0);
 $55 = HEAP32[$54>>2]|0;
 FUNCTION_TABLE_vi[$55 & 1023]($0);
 return;
}
function __ZN16SegmentedControl15setPressedIndexEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 352|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(-1);
 if ($4) {
  $5 = ((($0)) + 328|0);
  $6 = ((($0)) + 332|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$5>>2]|0;
  $9 = (($7) - ($8))|0;
  $10 = (($9|0) / 24)&-1;
  $11 = ($10>>>0)>($3>>>0);
  if (!($11)) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv($5);
   // unreachable;
  }
  $12 = $8;
  $13 = (((($12) + (($3*24)|0)|0)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 40|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($0)) + 356|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($3|0)==($19|0);
  if ($20) {
   $21 = ((($0)) + 320|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $22;
  } else {
   $23 = 0;
  }
  FUNCTION_TABLE_vii[$17 & 1023]($14,$23);
  $24 = HEAP32[$0>>2]|0;
  $25 = ((($24)) + 180|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($12) + (($3*24)|0)|0);
  FUNCTION_TABLE_vii[$26 & 1023]($0,$27);
 }
 HEAP32[$2>>2] = $1;
 $28 = ($1|0)>(-1);
 if (!($28)) {
  return;
 }
 $29 = ((($0)) + 328|0);
 $30 = ((($0)) + 332|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$29>>2]|0;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 24)&-1;
 $35 = ($34>>>0)>($1>>>0);
 if (!($35)) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv($29);
  // unreachable;
 }
 $36 = $32;
 $37 = (((($36) + (($1*24)|0)|0)) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 40|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($0)) + 320|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 & 16777215;
 $45 = $44 | -1073741824;
 FUNCTION_TABLE_vii[$41 & 1023]($38,$45);
 $46 = HEAP32[$0>>2]|0;
 $47 = ((($46)) + 180|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($36) + (($1*24)|0)|0);
 FUNCTION_TABLE_vii[$48 & 1023]($0,$49);
 return;
}
function __ZNSt3__28functionIFviEE4swapERS2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ($1|0)==($0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($0|0);
 $7 = $5;
 if ($6) {
  $8 = ((($1)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==($1|0);
  if ($10) {
   $11 = HEAP32[$5>>2]|0;
   $12 = ((($11)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   __THREW__ = 0;
   invoke_vii($13|0,($5|0),($2|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $38 = ___cxa_find_matching_catch_3(0|0)|0;
    $39 = tempRet0;
    ___clang_call_terminate($38);
    // unreachable;
   }
   $16 = HEAP32[$4>>2]|0;
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($17)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_vi[$19 & 1023]($16);
   HEAP32[$4>>2] = 0;
   $20 = HEAP32[$8>>2]|0;
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($21)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   __THREW__ = 0;
   invoke_vii($23|0,($20|0),($0|0));
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $38 = ___cxa_find_matching_catch_3(0|0)|0;
    $39 = tempRet0;
    ___clang_call_terminate($38);
    // unreachable;
   }
   $26 = HEAP32[$8>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 16|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_vi[$29 & 1023]($26);
   HEAP32[$8>>2] = 0;
   HEAP32[$4>>2] = $0;
   $30 = HEAP32[$2>>2]|0;
   $31 = ((($30)) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   __THREW__ = 0;
   invoke_vii($32|0,($2|0),($1|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    $38 = ___cxa_find_matching_catch_3(0|0)|0;
    $39 = tempRet0;
    ___clang_call_terminate($38);
    // unreachable;
   }
   $35 = HEAP32[$2>>2]|0;
   $36 = ((($35)) + 16|0);
   $37 = HEAP32[$36>>2]|0;
   FUNCTION_TABLE_vi[$37 & 1023]($2);
   HEAP32[$8>>2] = $1;
   STACKTOP = sp;return;
  }
 }
 $40 = ($5|0)==($0|0);
 if ($40) {
  $41 = HEAP32[$5>>2]|0;
  $42 = ((($41)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  __THREW__ = 0;
  invoke_vii($43|0,($5|0),($1|0));
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if ($45) {
   $66 = ___cxa_find_matching_catch_3(0|0)|0;
   $67 = tempRet0;
   ___clang_call_terminate($66);
   // unreachable;
  }
  $46 = HEAP32[$4>>2]|0;
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($47)) + 16|0);
  $49 = HEAP32[$48>>2]|0;
  FUNCTION_TABLE_vi[$49 & 1023]($46);
  $50 = ((($1)) + 16|0);
  $51 = HEAP32[$50>>2]|0;
  HEAP32[$4>>2] = $51;
  HEAP32[$50>>2] = $1;
  STACKTOP = sp;return;
 }
 $52 = ((($1)) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)==($1|0);
 if (!($54)) {
  $65 = $53;
  HEAP32[$4>>2] = $65;
  HEAP32[$52>>2] = $7;
  STACKTOP = sp;return;
 }
 $55 = HEAP32[$53>>2]|0;
 $56 = ((($55)) + 12|0);
 $57 = HEAP32[$56>>2]|0;
 __THREW__ = 0;
 invoke_vii($57|0,($53|0),($0|0));
 $58 = __THREW__; __THREW__ = 0;
 $59 = $58&1;
 if ($59) {
  $66 = ___cxa_find_matching_catch_3(0|0)|0;
  $67 = tempRet0;
  ___clang_call_terminate($66);
  // unreachable;
 }
 $60 = HEAP32[$52>>2]|0;
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($61)) + 16|0);
 $63 = HEAP32[$62>>2]|0;
 FUNCTION_TABLE_vi[$63 & 1023]($60);
 $64 = HEAP32[$4>>2]|0;
 HEAP32[$52>>2] = $64;
 HEAP32[$4>>2] = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIN16SegmentedControl7SegmentENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = (($6|0) / 24)&-1;
 $8 = (($7) + 1)|0;
 $9 = ($8>>>0)>(178956970);
 if ($9) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $10 = ((($0)) + 8|0);
 $11 = ((($0)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) - ($5))|0;
 $14 = (($13|0) / 24)&-1;
 $15 = ($14>>>0)<(89478485);
 $16 = $14 << 1;
 $17 = ($16>>>0)<($8>>>0);
 $$sroa$speculated$i = $17 ? $8 : $16;
 $$sroa$speculated$$i = $15 ? $$sroa$speculated$i : 178956970;
 $18 = ((($2)) + 12|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($2)) + 16|0);
 HEAP32[$19>>2] = $10;
 $20 = ($$sroa$speculated$$i|0)==(0);
 do {
  if ($20) {
   $29 = 0;
  } else {
   $21 = ($$sroa$speculated$$i>>>0)>(178956970);
   if (!($21)) {
    $27 = ($$sroa$speculated$$i*24)|0;
    $28 = (__Znwj($27)|0);
    $29 = $28;
    break;
   }
   $22 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(568,($22|0),(23604|0));
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    $25 = ___cxa_find_matching_catch_2()|0;
    $26 = tempRet0;
    ___cxa_free_exception(($22|0));
    ___resumeException($25|0);
    // unreachable;
   } else {
    HEAP32[$22>>2] = (9544);
    ___cxa_throw(($22|0),(1992|0),(506|0));
    // unreachable;
   }
  }
 } while(0);
 HEAP32[$2>>2] = $29;
 $30 = (($29) + (($7*24)|0)|0);
 $31 = ((($2)) + 8|0);
 HEAP32[$31>>2] = $30;
 $32 = ((($2)) + 4|0);
 HEAP32[$32>>2] = $30;
 $33 = (($29) + (($$sroa$speculated$$i*24)|0)|0);
 $34 = ((($2)) + 12|0);
 HEAP32[$34>>2] = $33;
 ;HEAP32[$30>>2]=HEAP32[$1>>2]|0;HEAP32[$30+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$30+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$30+12>>2]=HEAP32[$1+12>>2]|0;
 $35 = (((($29) + (($7*24)|0)|0)) + 16|0);
 $36 = ((($1)) + 16|0);
 $37 = HEAP32[$36>>2]|0;
 HEAP32[$35>>2] = $37;
 $38 = ($37|0)==(0|0);
 if ($38) {
  label = 11;
 } else {
  __THREW__ = 0;
  invoke_vi(526,($37|0));
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   label = 28;
  } else {
   label = 11;
  }
 }
 do {
  if ((label|0) == 11) {
   $41 = (((($29) + (($7*24)|0)|0)) + 20|0);
   $42 = ((($1)) + 20|0);
   $43 = HEAP32[$42>>2]|0;
   HEAP32[$41>>2] = $43;
   $44 = ($43|0)==(0|0);
   if (!($44)) {
    __THREW__ = 0;
    invoke_vi(526,($43|0));
    $45 = __THREW__; __THREW__ = 0;
    $46 = $45&1;
    if ($46) {
     $47 = ___cxa_find_matching_catch_2()|0;
     $48 = tempRet0;
     $49 = HEAP32[$35>>2]|0;
     $50 = ($49|0)==(0|0);
     if ($50) {
      $eh$lpad$body$index3Z2D = $48;$eh$lpad$body$indexZ2D = $47;
      break;
     }
     __THREW__ = 0;
     invoke_vi(525,($49|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if (!($52)) {
      $eh$lpad$body$index3Z2D = $48;$eh$lpad$body$indexZ2D = $47;
      break;
     }
     $53 = ___cxa_find_matching_catch_3(0|0)|0;
     $54 = tempRet0;
     ___clang_call_terminate($53);
     // unreachable;
    }
   }
   $55 = HEAP32[$31>>2]|0;
   $56 = ((($55)) + 24|0);
   HEAP32[$31>>2] = $56;
   __THREW__ = 0;
   invoke_vii(760,($0|0),($2|0));
   $57 = __THREW__; __THREW__ = 0;
   $58 = $57&1;
   if ($58) {
    label = 28;
   } else {
    $59 = HEAP32[$32>>2]|0;
    $60 = HEAP32[$31>>2]|0;
    $61 = ($60|0)==($59|0);
    L24: do {
     if (!($61)) {
      $63 = $60;
      while(1) {
       $62 = ((($63)) + -24|0);
       HEAP32[$31>>2] = $62;
       $64 = ((($63)) + -4|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = ($65|0)==(0|0);
       if (!($66)) {
        __THREW__ = 0;
        invoke_vi(525,($65|0));
        $67 = __THREW__; __THREW__ = 0;
        $68 = $67&1;
        if ($68) {
         label = 20;
         break;
        }
       }
       $71 = ((($63)) + -8|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = ($72|0)==(0|0);
       if (!($73)) {
        __THREW__ = 0;
        invoke_vi(525,($72|0));
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if ($77) {
         label = 24;
         break;
        }
       }
       $74 = HEAP32[$31>>2]|0;
       $75 = ($74|0)==($59|0);
       if ($75) {
        break L24;
       } else {
        $63 = $74;
       }
      }
      if ((label|0) == 20) {
       $69 = ___cxa_find_matching_catch_3(0|0)|0;
       $70 = tempRet0;
       ___clang_call_terminate($69);
       // unreachable;
      }
      else if ((label|0) == 24) {
       $78 = ___cxa_find_matching_catch_3(0|0)|0;
       $79 = tempRet0;
       ___clang_call_terminate($78);
       // unreachable;
      }
     }
    } while(0);
    $80 = HEAP32[$2>>2]|0;
    $81 = ($80|0)==(0|0);
    if ($81) {
     STACKTOP = sp;return;
    }
    __ZdlPv($80);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 28) {
  $82 = ___cxa_find_matching_catch_2()|0;
  $83 = tempRet0;
  $eh$lpad$body$index3Z2D = $83;$eh$lpad$body$indexZ2D = $82;
 }
 $84 = HEAP32[$32>>2]|0;
 $85 = HEAP32[$31>>2]|0;
 $86 = ($85|0)==($84|0);
 L44: do {
  if (!($86)) {
   $88 = $85;
   while(1) {
    $87 = ((($88)) + -24|0);
    HEAP32[$31>>2] = $87;
    $89 = ((($88)) + -4|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ($90|0)==(0|0);
    if (!($91)) {
     __THREW__ = 0;
     invoke_vi(525,($90|0));
     $92 = __THREW__; __THREW__ = 0;
     $93 = $92&1;
     if ($93) {
      label = 32;
      break;
     }
    }
    $96 = ((($88)) + -8|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if (!($98)) {
     __THREW__ = 0;
     invoke_vi(525,($97|0));
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 36;
      break;
     }
    }
    $99 = HEAP32[$31>>2]|0;
    $100 = ($99|0)==($84|0);
    if ($100) {
     break L44;
    } else {
     $88 = $99;
    }
   }
   if ((label|0) == 32) {
    $94 = ___cxa_find_matching_catch_3(0|0)|0;
    $95 = tempRet0;
    ___clang_call_terminate($94);
    // unreachable;
   }
   else if ((label|0) == 36) {
    $103 = ___cxa_find_matching_catch_3(0|0)|0;
    $104 = tempRet0;
    ___clang_call_terminate($103);
    // unreachable;
   }
  }
 } while(0);
 $105 = HEAP32[$2>>2]|0;
 $106 = ($105|0)==(0|0);
 if ($106) {
  ___resumeException($eh$lpad$body$indexZ2D|0);
  // unreachable;
 }
 __ZdlPv($105);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZNSt3__26vectorIN16SegmentedControl7SegmentENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$06$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi13Z2D = 0, $$pre$phiZ2D = 0, $$pre10 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = ($4|0)==($2|0);
 do {
  if ($6) {
   $7 = $2;
   $$pre10 = HEAP32[$5>>2]|0;
   $$pre$phi13Z2D = $5;$$pre$phiZ2D = $0;$33 = $$pre10;$34 = $7;
  } else {
   $$pre$i = HEAP32[$5>>2]|0;
   $$06$i = $4;$9 = $$pre$i;
   while(1) {
    $8 = ((($9)) + -24|0);
    $10 = ((($$06$i)) + -24|0);
    ;HEAP32[$8>>2]=HEAP32[$10>>2]|0;HEAP32[$8+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[$10+12>>2]|0;
    $11 = ((($9)) + -8|0);
    $12 = ((($$06$i)) + -8|0);
    $13 = HEAP32[$12>>2]|0;
    HEAP32[$11>>2] = $13;
    $14 = ($13|0)==(0|0);
    if (!($14)) {
     __ZN6Object6retainEv($13);
    }
    $15 = ((($9)) + -4|0);
    $16 = ((($$06$i)) + -4|0);
    $17 = HEAP32[$16>>2]|0;
    HEAP32[$15>>2] = $17;
    $18 = ($17|0)==(0|0);
    if (!($18)) {
     __THREW__ = 0;
     invoke_vi(526,($17|0));
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if ($20) {
      break;
     }
    }
    $29 = HEAP32[$5>>2]|0;
    $30 = ((($29)) + -24|0);
    HEAP32[$5>>2] = $30;
    $31 = ($10|0)==($2|0);
    if ($31) {
     label = 13;
     break;
    } else {
     $$06$i = $10;$9 = $30;
    }
   }
   if ((label|0) == 13) {
    $32 = $30;
    $$pre = HEAP32[$0>>2]|0;
    $$pre$phi13Z2D = $5;$$pre$phiZ2D = $0;$33 = $32;$34 = $$pre;
    break;
   }
   $21 = ___cxa_find_matching_catch_2()|0;
   $22 = tempRet0;
   $23 = HEAP32[$11>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    ___resumeException($21|0);
    // unreachable;
   }
   __THREW__ = 0;
   invoke_vi(525,($23|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    $27 = ___cxa_find_matching_catch_3(0|0)|0;
    $28 = tempRet0;
    ___clang_call_terminate($27);
    // unreachable;
   } else {
    ___resumeException($21|0);
    // unreachable;
   }
  }
 } while(0);
 HEAP32[$$pre$phiZ2D>>2] = $33;
 HEAP32[$$pre$phi13Z2D>>2] = $34;
 $35 = ((($1)) + 8|0);
 $36 = HEAP32[$3>>2]|0;
 $37 = HEAP32[$35>>2]|0;
 HEAP32[$3>>2] = $37;
 HEAP32[$35>>2] = $36;
 $38 = ((($0)) + 8|0);
 $39 = ((($1)) + 12|0);
 $40 = HEAP32[$38>>2]|0;
 $41 = HEAP32[$39>>2]|0;
 HEAP32[$38>>2] = $41;
 HEAP32[$39>>2] = $40;
 $42 = HEAP32[$$pre$phi13Z2D>>2]|0;
 HEAP32[$1>>2] = $42;
 return;
}
function __GLOBAL__sub_I_segmentedcontrol_cpp() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 $1 = (__Znwj(32)|0);
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = -2147483616;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = 16;
 dest=$1; src=23141; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $4 = ((($1)) + 16|0);
 HEAP8[$4>>0] = 0;
 __THREW__ = 0;
 invoke_vii(761,(31713|0),($0|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $13 = ((($0)) + 11|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)<(0);
  if (!($15)) {
   ___resumeException($11|0);
   // unreachable;
  }
  $16 = HEAP32[$0>>2]|0;
  __ZdlPv($16);
  ___resumeException($11|0);
  // unreachable;
 } else {
  $7 = ((($0)) + 11|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)<(0);
  if (!($9)) {
   STACKTOP = sp;return;
  }
  $10 = HEAP32[$0>>2]|0;
  __ZdlPv($10);
  STACKTOP = sp;return;
 }
}
function __ZN14ClassRegistrarI16SegmentedControlEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp;
 $4 = HEAP32[7778]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (__Znwj(12)|0);
  $7 = ((($6)) + 4|0);
  HEAP32[$7>>2] = 0;
  $8 = ((($6)) + 8|0);
  HEAP32[$8>>2] = 0;
  HEAP32[$6>>2] = $7;
  HEAP32[7778] = $6;
  $10 = $6;
 } else {
  $10 = $4;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 $9 = ((($3)) + 12|0);
 HEAP32[$9>>2] = (762);
 __THREW__ = 0;
 $11 = (invoke_iiii(535,($10|0),($2|0),($3|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if (!($13)) {
   $14 = HEAP32[$11>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    __THREW__ = 0;
    $16 = (invoke_ii(527,32)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     break;
    }
    $19 = ((($16)) + 16|0);
    ;HEAP32[$19>>2]=HEAP32[$3>>2]|0;HEAP32[$19+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$3+8>>2]|0;
    ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
    $20 = ((($16)) + 28|0);
    $21 = HEAP32[$9>>2]|0;
    HEAP32[$20>>2] = $21;
    $22 = HEAP32[$2>>2]|0;
    HEAP32[$16>>2] = 0;
    $23 = ((($16)) + 4|0);
    HEAP32[$23>>2] = 0;
    $24 = ((($16)) + 8|0);
    HEAP32[$24>>2] = $22;
    HEAP32[$11>>2] = $16;
    $25 = HEAP32[$10>>2]|0;
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0|0);
    if ($27) {
     $31 = $16;
    } else {
     $28 = $26;
     HEAP32[$10>>2] = $28;
     $$pre$i$i$i$i$i$i = HEAP32[$11>>2]|0;
     $31 = $$pre$i$i$i$i$i$i;
    }
    $29 = ((($10)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($30,$31);
    $32 = ((($10)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + 1)|0;
    HEAP32[$32>>2] = $34;
   }
   $35 = ((($3)) + 11|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = ($36<<24>>24)<(0);
   if (!($37)) {
    STACKTOP = sp;return;
   }
   $38 = HEAP32[$3>>2]|0;
   __ZdlPv($38);
   STACKTOP = sp;return;
  }
 } while(0);
 $39 = ___cxa_find_matching_catch_2()|0;
 $40 = tempRet0;
 $41 = ((($3)) + 11|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = ($42<<24>>24)<(0);
 if (!($43)) {
  ___resumeException($39|0);
  // unreachable;
 }
 $44 = HEAP32[$3>>2]|0;
 __ZdlPv($44);
 ___resumeException($39|0);
 // unreachable;
}
function __ZN14ClassRegistrarI16SegmentedControlE7createTEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN6ObjectnwEj(384)|0);
 __THREW__ = 0;
 invoke_vi(763,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZdlPv($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  return ($0|0);
 }
 return (0)|0;
}
function __ZN16SegmentedControlC2Ev($0) {
 $0 = $0|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$13 = 0, $$2 = 0, $$24 = 0, $$pre$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 12|0;
 $2 = sp;
 __ZN4ViewC2Ev($0);
 HEAP32[$0>>2] = (7656);
 $3 = ((($0)) + 328|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 332|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 336|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 376|0);
 HEAP32[$6>>2] = 0;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 __THREW__ = 0;
 $7 = (invoke_ii(527,32)|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $38 = ___cxa_find_matching_catch_2()|0;
   $39 = tempRet0;
   $$0 = $39;$$02 = $38;
   label = 13;
  } else {
   HEAP32[$1>>2] = $7;
   $10 = ((($1)) + 8|0);
   HEAP32[$10>>2] = -2147483616;
   $11 = ((($1)) + 4|0);
   HEAP32[$11>>2] = 16;
   dest=$7; src=23158; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $12 = ((($7)) + 16|0);
   HEAP8[$12>>0] = 0;
   __THREW__ = 0;
   $13 = (invoke_ii(764,($1|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $40 = ___cxa_find_matching_catch_2()|0;
    $41 = tempRet0;
    $42 = ((($1)) + 11|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = ($43<<24>>24)<(0);
    if (!($44)) {
     $$0 = $41;$$02 = $40;
     label = 13;
     break;
    }
    $45 = HEAP32[$1>>2]|0;
    __ZdlPv($45);
    $$0 = $41;$$02 = $40;
    label = 13;
    break;
   }
   $16 = ((($0)) + 324|0);
   HEAP32[$16>>2] = $13;
   $17 = ((($1)) + 11|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = ($18<<24>>24)<(0);
   if ($19) {
    $20 = HEAP32[$1>>2]|0;
    __ZdlPv($20);
   }
   ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
   __THREW__ = 0;
   $21 = (invoke_ii(527,32)|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   do {
    if ($23) {
     $46 = ___cxa_find_matching_catch_2()|0;
     $47 = tempRet0;
     $$1 = $47;$$13 = $46;
    } else {
     HEAP32[$2>>2] = $21;
     $24 = ((($2)) + 8|0);
     HEAP32[$24>>2] = -2147483616;
     $25 = ((($2)) + 4|0);
     HEAP32[$25>>2] = 29;
     dest=$21; src=23175; stop=dest+29|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
     $26 = ((($21)) + 29|0);
     HEAP8[$26>>0] = 0;
     __THREW__ = 0;
     $27 = (+invoke_di(732,($2|0)));
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if ($29) {
      $48 = ___cxa_find_matching_catch_2()|0;
      $49 = tempRet0;
      $50 = ((($2)) + 11|0);
      $51 = HEAP8[$50>>0]|0;
      $52 = ($51<<24>>24)<(0);
      if (!($52)) {
       $$1 = $49;$$13 = $48;
       break;
      }
      $53 = HEAP32[$2>>2]|0;
      __ZdlPv($53);
      $$1 = $49;$$13 = $48;
      break;
     }
     $30 = ((($0)) + 348|0);
     HEAPF32[$30>>2] = $27;
     $31 = ((($2)) + 11|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)<(0);
     if (!($33)) {
      $35 = ((($0)) + 352|0);
      HEAP32[$35>>2] = -1;
      $36 = ((($0)) + 356|0);
      HEAP32[$36>>2] = -1;
      $37 = ((($0)) + 344|0);
      HEAP32[$37>>2] = -16777216;
      STACKTOP = sp;return;
     }
     $34 = HEAP32[$2>>2]|0;
     __ZdlPv($34);
     $35 = ((($0)) + 352|0);
     HEAP32[$35>>2] = -1;
     $36 = ((($0)) + 356|0);
     HEAP32[$36>>2] = -1;
     $37 = ((($0)) + 344|0);
     HEAP32[$37>>2] = -16777216;
     STACKTOP = sp;return;
    }
   } while(0);
   $$2 = $$1;$$24 = $$13;
  }
 } while(0);
 if ((label|0) == 13) {
  $$2 = $$0;$$24 = $$02;
 }
 $54 = HEAP32[$6>>2]|0;
 $55 = ((($0)) + 360|0);
 $56 = ($54|0)==($55|0);
 if ($56) {
  $57 = HEAP32[$54>>2]|0;
  $58 = ((($57)) + 16|0);
  $59 = HEAP32[$58>>2]|0;
  FUNCTION_TABLE_vi[$59 & 1023]($54);
 } else {
  $60 = ($54|0)==(0|0);
  if (!($60)) {
   $61 = HEAP32[$54>>2]|0;
   $62 = ((($61)) + 20|0);
   $63 = HEAP32[$62>>2]|0;
   FUNCTION_TABLE_vi[$63 & 1023]($54);
  }
 }
 $64 = HEAP32[$3>>2]|0;
 $65 = ($64|0)==(0|0);
 if ($65) {
  __ZN4ViewD2Ev($0);
  ___resumeException($$24|0);
  // unreachable;
 }
 $66 = HEAP32[$4>>2]|0;
 $67 = ($66|0)==($64|0);
 do {
  if ($67) {
   $86 = $64;
  } else {
   $69 = $66;
   while(1) {
    $68 = ((($69)) + -24|0);
    HEAP32[$4>>2] = $68;
    $70 = ((($69)) + -4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0|0);
    if (!($72)) {
     __THREW__ = 0;
     invoke_vi(525,($71|0));
     $73 = __THREW__; __THREW__ = 0;
     $74 = $73&1;
     if ($74) {
      label = 26;
      break;
     }
    }
    $77 = ((($69)) + -8|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($78|0)==(0|0);
    if (!($79)) {
     __THREW__ = 0;
     invoke_vi(525,($78|0));
     $82 = __THREW__; __THREW__ = 0;
     $83 = $82&1;
     if ($83) {
      label = 30;
      break;
     }
    }
    $80 = HEAP32[$4>>2]|0;
    $81 = ($80|0)==($64|0);
    if ($81) {
     label = 31;
     break;
    } else {
     $69 = $80;
    }
   }
   if ((label|0) == 26) {
    $75 = ___cxa_find_matching_catch_3(0|0)|0;
    $76 = tempRet0;
    ___clang_call_terminate($75);
    // unreachable;
   }
   else if ((label|0) == 30) {
    $84 = ___cxa_find_matching_catch_3(0|0)|0;
    $85 = tempRet0;
    ___clang_call_terminate($84);
    // unreachable;
   }
   else if ((label|0) == 31) {
    $$pre$i = HEAP32[$3>>2]|0;
    $86 = $$pre$i;
    break;
   }
  }
 } while(0);
 __ZdlPv($86);
 __ZN4ViewD2Ev($0);
 ___resumeException($$24|0);
 // unreachable;
}
function __ZN4ViewD2Ev($0) {
 $0 = $0|0;
 var $$023$i$i = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i4 = 0, $$pre$i6 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (7948);
 $1 = ((($0)) + 296|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 280|0);
 $4 = ($2|0)==($3|0);
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_vi[$7 & 1023]($2);
 } else {
  $8 = ($2|0)==(0|0);
  if (!($8)) {
   $9 = HEAP32[$2>>2]|0;
   $10 = ((($9)) + 20|0);
   $11 = HEAP32[$10>>2]|0;
   FUNCTION_TABLE_vi[$11 & 1023]($2);
  }
 }
 $12 = ((($0)) + 272|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  __THREW__ = 0;
  invoke_vi(525,($13|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  }
 }
 $19 = ((($0)) + 268|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if (!($21)) {
  __THREW__ = 0;
  invoke_vi(525,($20|0));
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if ($23) {
   $24 = ___cxa_find_matching_catch_3(0|0)|0;
   $25 = tempRet0;
   ___clang_call_terminate($24);
   // unreachable;
  }
 }
 $26 = ((($0)) + 260|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  __THREW__ = 0;
  invoke_vi(525,($27|0));
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if ($30) {
   $31 = ___cxa_find_matching_catch_3(0|0)|0;
   $32 = tempRet0;
   ___clang_call_terminate($31);
   // unreachable;
  }
 }
 $33 = ((($0)) + 256|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0|0);
 if (!($35)) {
  __THREW__ = 0;
  invoke_vi(525,($34|0));
  $36 = __THREW__; __THREW__ = 0;
  $37 = $36&1;
  if ($37) {
   $38 = ___cxa_find_matching_catch_3(0|0)|0;
   $39 = tempRet0;
   ___clang_call_terminate($38);
   // unreachable;
  }
 }
 $40 = ((($0)) + 100|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)==(0|0);
 if (!($42)) {
  __THREW__ = 0;
  invoke_vi(525,($41|0));
  $43 = __THREW__; __THREW__ = 0;
  $44 = $43&1;
  if ($44) {
   $45 = ___cxa_find_matching_catch_3(0|0)|0;
   $46 = tempRet0;
   ___clang_call_terminate($45);
   // unreachable;
  }
 }
 $47 = ((($0)) + 88|0);
 $48 = ((($0)) + 96|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(0);
 L26: do {
  if (!($50)) {
   $51 = ((($0)) + 92|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = HEAP32[$47>>2]|0;
   $54 = ((($53)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = HEAP32[$52>>2]|0;
   $57 = ((($56)) + 4|0);
   HEAP32[$57>>2] = $55;
   $58 = HEAP32[$54>>2]|0;
   HEAP32[$58>>2] = $56;
   HEAP32[$48>>2] = 0;
   $59 = ($52|0)==($47|0);
   if (!($59)) {
    $$023$i$i = $52;
    while(1) {
     $60 = ((($$023$i$i)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ((($$023$i$i)) + 8|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ($63|0)==(0|0);
     if (!($64)) {
      __THREW__ = 0;
      invoke_vi(525,($63|0));
      $65 = __THREW__; __THREW__ = 0;
      $66 = $65&1;
      if ($66) {
       break;
      }
     }
     __ZdlPv($$023$i$i);
     $69 = ($61|0)==($47|0);
     if ($69) {
      break L26;
     } else {
      $$023$i$i = $61;
     }
    }
    $67 = ___cxa_find_matching_catch_3(0|0)|0;
    $68 = tempRet0;
    ___clang_call_terminate($67);
    // unreachable;
   }
  }
 } while(0);
 $70 = ((($0)) + 84|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71|0)==(0|0);
 if (!($72)) {
  __THREW__ = 0;
  invoke_vi(525,($71|0));
  $73 = __THREW__; __THREW__ = 0;
  $74 = $73&1;
  if ($74) {
   $75 = ___cxa_find_matching_catch_3(0|0)|0;
   $76 = tempRet0;
   ___clang_call_terminate($75);
   // unreachable;
  }
 }
 $77 = ((($0)) + 80|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($78|0)==(0|0);
 if (!($79)) {
  __THREW__ = 0;
  invoke_vi(525,($78|0));
  $80 = __THREW__; __THREW__ = 0;
  $81 = $80&1;
  if ($81) {
   $82 = ___cxa_find_matching_catch_3(0|0)|0;
   $83 = tempRet0;
   ___clang_call_terminate($82);
   // unreachable;
  }
 }
 $84 = ((($0)) + 76|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($85|0)==(0|0);
 if (!($86)) {
  __THREW__ = 0;
  invoke_vi(525,($85|0));
  $87 = __THREW__; __THREW__ = 0;
  $88 = $87&1;
  if ($88) {
   $89 = ___cxa_find_matching_catch_3(0|0)|0;
   $90 = tempRet0;
   ___clang_call_terminate($89);
   // unreachable;
  }
 }
 $91 = ((($0)) + 60|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($92|0)==(0|0);
 if (!($93)) {
  $94 = ((($0)) + 64|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ($95|0)==($92|0);
  do {
   if ($96) {
    $107 = $92;
   } else {
    $98 = $95;
    while(1) {
     $97 = ((($98)) + -8|0);
     HEAP32[$94>>2] = $97;
     $99 = HEAP32[$97>>2]|0;
     $100 = ($99|0)==(0|0);
     if ($100) {
      $102 = $97;
     } else {
      __THREW__ = 0;
      invoke_vi(525,($99|0));
      $103 = __THREW__; __THREW__ = 0;
      $104 = $103&1;
      if ($104) {
       label = 41;
       break;
      }
      $$pre$i$i$i = HEAP32[$94>>2]|0;
      $102 = $$pre$i$i$i;
     }
     $101 = ($102|0)==($92|0);
     if ($101) {
      label = 42;
      break;
     } else {
      $98 = $102;
     }
    }
    if ((label|0) == 41) {
     $105 = ___cxa_find_matching_catch_3(0|0)|0;
     $106 = tempRet0;
     ___clang_call_terminate($105);
     // unreachable;
    }
    else if ((label|0) == 42) {
     $$pre$i = HEAP32[$91>>2]|0;
     $107 = $$pre$i;
     break;
    }
   }
  } while(0);
  __ZdlPv($107);
 }
 $108 = ((($0)) + 56|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ($109|0)==(0|0);
 if (!($110)) {
  __THREW__ = 0;
  invoke_vi(525,($109|0));
  $111 = __THREW__; __THREW__ = 0;
  $112 = $111&1;
  if ($112) {
   $113 = ___cxa_find_matching_catch_3(0|0)|0;
   $114 = tempRet0;
   ___clang_call_terminate($113);
   // unreachable;
  }
 }
 $115 = ((($0)) + 28|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ($116|0)==(0|0);
 if (!($117)) {
  $118 = ((($0)) + 32|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ($119|0)==($116|0);
  do {
   if ($120) {
    $131 = $116;
   } else {
    $122 = $119;
    while(1) {
     $121 = ((($122)) + -4|0);
     HEAP32[$118>>2] = $121;
     $123 = HEAP32[$121>>2]|0;
     $124 = ($123|0)==(0|0);
     if ($124) {
      $126 = $121;
     } else {
      __THREW__ = 0;
      invoke_vi(525,($123|0));
      $127 = __THREW__; __THREW__ = 0;
      $128 = $127&1;
      if ($128) {
       label = 53;
       break;
      }
      $$pre$i$i$i4 = HEAP32[$118>>2]|0;
      $126 = $$pre$i$i$i4;
     }
     $125 = ($126|0)==($116|0);
     if ($125) {
      label = 54;
      break;
     } else {
      $122 = $126;
     }
    }
    if ((label|0) == 53) {
     $129 = ___cxa_find_matching_catch_3(0|0)|0;
     $130 = tempRet0;
     ___clang_call_terminate($129);
     // unreachable;
    }
    else if ((label|0) == 54) {
     $$pre$i6 = HEAP32[$115>>2]|0;
     $131 = $$pre$i6;
     break;
    }
   }
  } while(0);
  __ZdlPv($131);
 }
 $132 = ((($0)) + 8|0);
 $133 = ((($132)) + 11|0);
 $134 = HEAP8[$133>>0]|0;
 $135 = ($134<<24>>24)<(0);
 if (!($135)) {
  return;
 }
 $136 = HEAP32[$132>>2]|0;
 __ZdlPv($136);
 return;
}
function __ZN4ViewD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4ViewD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN4View20setUsePrivateSurfaceEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1&1;
 $3 = ((($0)) + 104|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($2|0)==($5|0);
 if ($6) {
  return;
 }
 $7 = $1&1;
 HEAP8[$3>>0] = $7;
 $8 = ((($0)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  return;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 FUNCTION_TABLE_vii[$13 & 1023]($0,1);
 $14 = HEAP32[$0>>2]|0;
 $15 = ((($14)) + 176|0);
 $16 = HEAP32[$15>>2]|0;
 FUNCTION_TABLE_vi[$16 & 1023]($0);
 return;
}
function __ZN4View20updatePrivateSurfaceEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  ___assert_fail((24272|0),(23289|0),512,(24282|0));
  // unreachable;
 }
 $5 = ((($0)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $9 = ((($0)) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 24|0);
  $13 = $11;
 } else {
  $8 = ((($6)) + 100|0);
  $13 = $8;
 }
 $12 = HEAP32[$13>>2]|0;
 $14 = ($12|0)==(0|0);
 if (!($14)) {
  HEAP32[$2>>2] = $12;
  __ZN6Object6retainEv($12);
 }
 $15 = ((($0)) + 104|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)==(0);
 if (!($17)) {
  $18 = (__ZN6ObjectnwEj(204)|0);
  __THREW__ = 0;
  invoke_vii(765,($18|0),($0|0));
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   $26 = ___cxa_find_matching_catch_2()|0;
   $27 = tempRet0;
   __ZdlPv($18);
   $$0 = $27;$$06 = $26;
   ___resumeException($$06|0);
   // unreachable;
  }
  $21 = HEAP32[$2>>2]|0;
  $22 = ($21|0)==($18|0);
  if (!($22)) {
   $23 = ($21|0)==(0|0);
   if (!($23)) {
    __ZN6Object7releaseEv($21);
   }
   HEAP32[$2>>2] = $18;
   $24 = ($18|0)==(0|0);
   if (!($24)) {
    __ZN6Object6retainEv($18);
   }
  }
  $25 = ((($0)) + 105|0);
  HEAP8[$25>>0] = 1;
 }
 if (!($1)) {
  return;
 }
 $28 = ((($0)) + 28|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($0)) + 32|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($29|0)==($31|0);
 if ($32) {
  return;
 } else {
  $34 = $29;
 }
 while(1) {
  $33 = HEAP32[$34>>2]|0;
  $35 = ($33|0)==(0|0);
  if (!($35)) {
   __ZN6Object6retainEv($33);
  }
  $36 = HEAP32[$33>>2]|0;
  $37 = ((($36)) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  __THREW__ = 0;
  invoke_vii($38|0,($33|0),1);
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   label = 25;
   break;
  }
  __THREW__ = 0;
  invoke_vi(525,($33|0));
  $41 = __THREW__; __THREW__ = 0;
  $42 = $41&1;
  if ($42) {
   label = 23;
   break;
  }
  $45 = ((($34)) + 4|0);
  $46 = HEAP32[$30>>2]|0;
  $47 = ($45|0)==($46|0);
  if ($47) {
   label = 28;
   break;
  } else {
   $34 = $45;
  }
 }
 if ((label|0) == 23) {
  $43 = ___cxa_find_matching_catch_3(0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 }
 else if ((label|0) == 25) {
  $48 = ___cxa_find_matching_catch_2()|0;
  $49 = tempRet0;
  __THREW__ = 0;
  invoke_vi(525,($33|0));
  $50 = __THREW__; __THREW__ = 0;
  $51 = $50&1;
  if ($51) {
   $52 = ___cxa_find_matching_catch_3(0|0)|0;
   $53 = tempRet0;
   ___clang_call_terminate($52);
   // unreachable;
  }
  $$0 = $49;$$06 = $48;
  ___resumeException($$06|0);
  // unreachable;
 }
 else if ((label|0) == 28) {
  return;
 }
}
function __ZN4View15updateRenderOpsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((23513|0),(23289|0),189,(24256|0));
 // unreachable;
}
function __ZN4View19scrollStartFadeAnimEf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$pre = 0, $$pre4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 268|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (__ZN6ObjectnwEj(104)|0);
  dest=$6; stop=dest+104|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  __THREW__ = 0;
  invoke_vi(753,($6|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $27 = ___cxa_find_matching_catch_2()|0;
   $28 = tempRet0;
   __ZdlPv($6);
   ___resumeException($27|0);
   // unreachable;
  }
  HEAP32[$6>>2] = (3048);
  $9 = ((($6)) + 96|0);
  HEAP32[$9>>2] = 0;
  $10 = HEAP32[$3>>2]|0;
  $11 = ($10|0)==($6|0);
  if ($11) {
   $15 = $6;
  } else {
   $12 = ($10|0)==(0|0);
   if (!($12)) {
    __ZN6Object7releaseEv($10);
   }
   HEAP32[$3>>2] = $6;
   __ZN6Object6retainEv($6);
   $$pre = HEAP32[$3>>2]|0;
   $15 = $$pre;
  }
  $13 = $0;
  $14 = ((($15)) + 80|0);
  $16 = ((($2)) + 16|0);
  HEAP32[$2>>2] = (8300);
  $17 = ((($2)) + 4|0);
  HEAP32[$17>>2] = $13;
  HEAP32[$16>>2] = $2;
  __ZNSt3__28functionIFvfEE4swapERS2_($2,$14);
  $18 = HEAP32[$16>>2]|0;
  $19 = ($18|0)==($2|0);
  if ($19) {
   $20 = HEAP32[$18>>2]|0;
   $21 = ((($20)) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   FUNCTION_TABLE_vi[$22 & 1023]($18);
  } else {
   $23 = ($18|0)==(0|0);
   if (!($23)) {
    $24 = HEAP32[$18>>2]|0;
    $25 = ((($24)) + 20|0);
    $26 = HEAP32[$25>>2]|0;
    FUNCTION_TABLE_vi[$26 & 1023]($18);
   }
  }
  $$pre4 = HEAP32[$3>>2]|0;
  $30 = $$pre4;
 } else {
  $30 = $4;
 }
 $29 = HEAP32[$30>>2]|0;
 $31 = ((($29)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 FUNCTION_TABLE_vi[$32 & 1023]($30);
 $33 = ((($0)) + 264|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$3>>2]|0;
 $36 = ((($35)) + 68|0);
 HEAP32[$36>>2] = $34;
 $37 = ((($35)) + 72|0);
 HEAPF32[$37>>2] = $1;
 $38 = ((($0)) + 20|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0|0);
 if ($40) {
  STACKTOP = sp;return;
 }
 $41 = HEAP32[$35>>2]|0;
 $42 = ((($41)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 FUNCTION_TABLE_viii[$43 & 1023]($35,$39,300);
 STACKTOP = sp;return;
}
function __ZN4View16setContentOffsetE6_POINT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 204|0);
 $3 = (__ZN6_POINT6equalsERS_($1,$2)|0);
 if (!($3)) {
  $4 = $1;
  $5 = $4;
  $6 = HEAPU8[$5>>0]|(HEAPU8[$5+1>>0]<<8)|(HEAPU8[$5+2>>0]<<16)|(HEAPU8[$5+3>>0]<<24);
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAPU8[$8>>0]|(HEAPU8[$8+1>>0]<<8)|(HEAPU8[$8+2>>0]<<16)|(HEAPU8[$8+3>>0]<<24);
  $10 = $2;
  $11 = $10;
  HEAP8[$11>>0]=$6&255;HEAP8[$11+1>>0]=($6>>8)&255;HEAP8[$11+2>>0]=($6>>16)&255;HEAP8[$11+3>>0]=$6>>24;
  $12 = (($10) + 4)|0;
  $13 = $12;
  HEAP8[$13>>0]=$9&255;HEAP8[$13+1>>0]=($9>>8)&255;HEAP8[$13+2>>0]=($9>>16)&255;HEAP8[$13+3>>0]=$9>>24;
  $14 = HEAP32[$0>>2]|0;
  $15 = ((($14)) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  FUNCTION_TABLE_vi[$16 & 1023]($0);
 }
 $17 = ((($0)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  return;
 }
 $20 = HEAP32[$18>>2]|0;
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 FUNCTION_TABLE_vi[$22 & 1023]($18);
 return;
}
function __ZN4View15setScrollInsetsE11_EDGEINSETS($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 239|0);
 dest=$2; src=$1; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 68|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($0);
 return;
}
function __ZN4View16updateScrollbarsEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$011 = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi23Z2D = 0, $$pre$phi24Z2D = 0, $$pre20 = 0, $$pre21 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0.0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $2 = ((($0)) + 200|0);
 $3 = +HEAPF32[$2>>2];
 $4 = ((($0)) + 243|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$4>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$4+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$4+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$4+3>>0];$5 = +HEAPF32[tempDoublePtr>>2];
 $6 = ((($0)) + 251|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$6>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$6+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$6+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$6+3>>0];$7 = +HEAPF32[tempDoublePtr>>2];
 $8 = $5 + $7;
 $9 = $3 - $8;
 $10 = ((($0)) + 196|0);
 $11 = +HEAPF32[$10>>2];
 $12 = ((($0)) + 239|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$12>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$12+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$12+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$12+3>>0];$13 = +HEAPF32[tempDoublePtr>>2];
 $14 = ((($0)) + 247|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$14>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$14+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$14+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$14+3>>0];$15 = +HEAPF32[tempDoublePtr>>2];
 $16 = $13 + $15;
 $17 = $11 - $16;
 $18 = $9 > 0.0;
 if ($18) {
  $19 = ((($0)) + 119|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$19>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$19+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$19+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$19+3>>0];$20 = +HEAPF32[tempDoublePtr>>2];
  $21 = $20 < $9;
  if ($21) {
   $22 = ((($0)) + 256|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $25 = (__ZN6ObjectnwEj(68)|0);
    __THREW__ = 0;
    invoke_vii(766,($25|0),($0|0));
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     $32 = ___cxa_find_matching_catch_2()|0;
     $33 = tempRet0;
     __ZdlPv($25);
     $$0 = $33;$$011 = $32;
     ___resumeException($$011|0);
     // unreachable;
    }
    $28 = HEAP32[$22>>2]|0;
    $29 = ($28|0)==($25|0);
    if ($29) {
     $34 = $25;
    } else {
     $30 = ($28|0)==(0|0);
     if (!($30)) {
      __ZN6Object7releaseEv($28);
     }
     HEAP32[$22>>2] = $25;
     $31 = ($25|0)==(0|0);
     if ($31) {
      $34 = $25;
     } else {
      __ZN6Object6retainEv($25);
      $$pre = HEAP32[$22>>2]|0;
      $34 = $$pre;
     }
    }
   } else {
    $34 = $23;
   }
   __ZN9Scrollbar10updateRectEv($34);
  } else {
   label = 12;
  }
 } else {
  label = 12;
 }
 if ((label|0) == 12) {
  $35 = ((($0)) + 256|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(0|0);
  if (!($37)) {
   $38 = HEAP32[$0>>2]|0;
   $39 = ((($38)) + 168|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($36)) + 64|0);
   $42 = HEAP32[$41>>2]|0;
   FUNCTION_TABLE_vii[$40 & 1023]($0,$42);
   $43 = HEAP32[$35>>2]|0;
   $44 = ($43|0)==(0|0);
   if (!($44)) {
    __ZN6Object7releaseEv($43);
    HEAP32[$35>>2] = 0;
   }
  }
 }
 $45 = $17 > 0.0;
 if ($45) {
  $46 = ((($0)) + 115|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$46>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$46+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$46+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$46+3>>0];$47 = +HEAPF32[tempDoublePtr>>2];
  $48 = (~~(($17)));
  $49 = (+($48|0));
  $50 = $47 < $49;
  if ($50) {
   $51 = ((($0)) + 260|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52|0)==(0|0);
   if ($53) {
    $54 = (__ZN6ObjectnwEj(68)|0);
    __THREW__ = 0;
    invoke_vii(766,($54|0),($0|0));
    $55 = __THREW__; __THREW__ = 0;
    $56 = $55&1;
    if ($56) {
     $61 = ___cxa_find_matching_catch_2()|0;
     $62 = tempRet0;
     __ZdlPv($54);
     $$0 = $62;$$011 = $61;
     ___resumeException($$011|0);
     // unreachable;
    }
    $57 = HEAP32[$51>>2]|0;
    $58 = ($57|0)==($54|0);
    if ($58) {
     $73 = $54;
    } else {
     $59 = ($57|0)==(0|0);
     if (!($59)) {
      __ZN6Object7releaseEv($57);
     }
     HEAP32[$51>>2] = $54;
     $60 = ($54|0)==(0|0);
     if ($60) {
      $73 = $54;
     } else {
      __ZN6Object6retainEv($54);
      $$pre20 = HEAP32[$51>>2]|0;
      $73 = $$pre20;
     }
    }
   } else {
    $73 = $52;
   }
   __ZN9Scrollbar10updateRectEv($73);
   $$pre21 = HEAP32[$51>>2]|0;
   $phitmp = ($$pre21|0)==(0|0);
   if ($phitmp) {
    $$pre$phi24Z2D = $51;
    label = 29;
   } else {
    $$pre$phi23Z2D = $51;
    label = 30;
   }
  } else {
   label = 25;
  }
 } else {
  label = 25;
 }
 if ((label|0) == 25) {
  $63 = ((($0)) + 260|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)==(0|0);
  if ($65) {
   $$pre$phi24Z2D = $63;
   label = 29;
  } else {
   $66 = HEAP32[$0>>2]|0;
   $67 = ((($66)) + 168|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ((($64)) + 64|0);
   $70 = HEAP32[$69>>2]|0;
   FUNCTION_TABLE_vii[$68 & 1023]($0,$70);
   $71 = HEAP32[$63>>2]|0;
   $72 = ($71|0)==(0|0);
   if ($72) {
    $$pre$phi24Z2D = $63;
    label = 29;
   } else {
    __ZN6Object7releaseEv($71);
    HEAP32[$63>>2] = 0;
    $$pre$phi24Z2D = $63;
    label = 29;
   }
  }
 }
 if ((label|0) == 29) {
  $74 = ((($0)) + 256|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($75|0)==(0|0);
  if ($76) {
   $$pre$phi22Z2D = $$pre$phi24Z2D;
  } else {
   $$pre$phi23Z2D = $$pre$phi24Z2D;
   label = 30;
  }
 }
 do {
  if ((label|0) == 30) {
   $77 = ((($0)) + 264|0);
   $78 = +HEAPF32[$77>>2];
   $79 = $78 < 1.0;
   if ($79) {
    $80 = ((($0)) + 268|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ($81|0)==(0|0);
    if (!($82)) {
     $83 = ((($81)) + 72|0);
     $84 = +HEAPF32[$83>>2];
     $85 = $84 != 1.0;
     if (!($85)) {
      $$pre$phi22Z2D = $$pre$phi23Z2D;
      break;
     }
    }
    $86 = HEAP32[$0>>2]|0;
    $87 = ((($86)) + 20|0);
    $88 = HEAP32[$87>>2]|0;
    FUNCTION_TABLE_vid[$88 & 1023]($0,1.0);
    $$pre$phi22Z2D = $$pre$phi23Z2D;
   } else {
    $$pre$phi22Z2D = $$pre$phi23Z2D;
   }
  }
 } while(0);
 $89 = ((($0)) + 256|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ($90|0)==(0|0);
 if ($91) {
  $92 = HEAP32[$$pre$phi22Z2D>>2]|0;
  $93 = ($92|0)==(0|0);
  if ($93) {
   STACKTOP = sp;return;
  }
 }
 $94 = ((($0)) + 272|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ($95|0)==(0|0);
 if (!($96)) {
  $97 = HEAP32[$95>>2]|0;
  $98 = ((($97)) + 8|0);
  $99 = HEAP32[$98>>2]|0;
  FUNCTION_TABLE_vi[$99 & 1023]($95);
 }
 $100 = $0;
 $101 = ((($1)) + 16|0);
 HEAP32[$1>>2] = (8256);
 $102 = ((($1)) + 4|0);
 HEAP32[$102>>2] = $100;
 HEAP32[$101>>2] = $1;
 __THREW__ = 0;
 $103 = (invoke_iiii(532,($1|0),500,0)|0);
 $104 = __THREW__; __THREW__ = 0;
 $105 = $104&1;
 do {
  if (!($105)) {
   $106 = HEAP32[$94>>2]|0;
   $107 = ($106|0)==($103|0);
   if (!($107)) {
    $108 = ($106|0)==(0|0);
    if (!($108)) {
     __THREW__ = 0;
     invoke_vi(525,($106|0));
     $109 = __THREW__; __THREW__ = 0;
     $110 = $109&1;
     if ($110) {
      break;
     }
    }
    HEAP32[$94>>2] = $103;
    $111 = ($103|0)==(0|0);
    if (!($111)) {
     __THREW__ = 0;
     invoke_vi(526,($103|0));
     $112 = __THREW__; __THREW__ = 0;
     $113 = $112&1;
     if ($113) {
      break;
     }
    }
   }
   $114 = HEAP32[$101>>2]|0;
   $115 = ($114|0)==($1|0);
   if ($115) {
    $116 = HEAP32[$114>>2]|0;
    $117 = ((($116)) + 16|0);
    $118 = HEAP32[$117>>2]|0;
    FUNCTION_TABLE_vi[$118 & 1023]($114);
   } else {
    $119 = ($114|0)==(0|0);
    if (!($119)) {
     $120 = HEAP32[$114>>2]|0;
     $121 = ((($120)) + 20|0);
     $122 = HEAP32[$121>>2]|0;
     FUNCTION_TABLE_vi[$122 & 1023]($114);
    }
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $123 = ___cxa_find_matching_catch_2()|0;
 $124 = tempRet0;
 $125 = HEAP32[$101>>2]|0;
 $126 = ($125|0)==($1|0);
 if ($126) {
  $127 = HEAP32[$125>>2]|0;
  $128 = ((($127)) + 16|0);
  $129 = HEAP32[$128>>2]|0;
  FUNCTION_TABLE_vi[$129 & 1023]($125);
 } else {
  $130 = ($125|0)==(0|0);
  if (!($130)) {
   $131 = HEAP32[$125>>2]|0;
   $132 = ((($131)) + 20|0);
   $133 = HEAP32[$132>>2]|0;
   FUNCTION_TABLE_vi[$133 & 1023]($125);
  }
 }
 $$0 = $124;$$011 = $123;
 ___resumeException($$011|0);
 // unreachable;
}
function __ZN4View20updateEffectiveAlphaEv($0) {
 $0 = $0|0;
 var $$pre = 0.0, $$sroa$015$0$$sroa$015$0$1635 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $9 = 1.0;
 } else {
  $4 = ((($2)) + 316|0);
  $5 = +HEAPF32[$4>>2];
  $9 = $5;
 }
 $6 = ((($0)) + 308|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $9 * $7;
 $10 = ((($0)) + 316|0);
 HEAPF32[$10>>2] = $8;
 $11 = ((($0)) + 92|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 88|0);
 $14 = $12;
 $15 = ($14|0)==($13|0);
 if (!($15)) {
  $16 = $12;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 36|0);
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_vid[$21 & 1023]($18,$8);
  $22 = ((($14)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23;
  $25 = ($24|0)==($13|0);
  if (!($25)) {
   $32 = $23;$39 = $24;
   while(1) {
    $$pre = +HEAPF32[$10>>2];
    $31 = $32;
    $33 = ((($31)) + 8|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = HEAP32[$34>>2]|0;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    FUNCTION_TABLE_vid[$37 & 1023]($34,$$pre);
    $38 = ((($39)) + 4|0);
    $40 = HEAP32[$38>>2]|0;
    $41 = $40;
    $42 = ($41|0)==($13|0);
    if ($42) {
     break;
    } else {
     $32 = $40;$39 = $41;
    }
   }
  }
 }
 $26 = ((($0)) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($0)) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($27|0)==($29|0);
 if ($30) {
  return;
 } else {
  $$sroa$015$0$$sroa$015$0$1635 = $27;
 }
 while(1) {
  $43 = HEAP32[$$sroa$015$0$$sroa$015$0$1635>>2]|0;
  $44 = HEAP32[$43>>2]|0;
  $45 = ((($44)) + 36|0);
  $46 = HEAP32[$45>>2]|0;
  FUNCTION_TABLE_vi[$46 & 1023]($43);
  $47 = ((($$sroa$015$0$$sroa$015$0$1635)) + 4|0);
  $48 = HEAP32[$28>>2]|0;
  $49 = ($47|0)==($48|0);
  if ($49) {
   break;
  } else {
   $$sroa$015$0$$sroa$015$0$1635 = $47;
  }
 }
 return;
}
function __ZN4View19updateEffectiveTintEv($0) {
 $0 = $0|0;
 var $$ = 0, $$sroa$011$0$$sroa$011$0$1220 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $9 = 0;
 } else {
  $4 = ((($2)) + 320|0);
  $5 = HEAP32[$4>>2]|0;
  $9 = $5;
 }
 $6 = ((($0)) + 312|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 $$ = $8 ? $9 : $7;
 $10 = ((($0)) + 320|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($$|0)==($11|0);
 if (!($12)) {
  HEAP32[$10>>2] = $$;
  $13 = HEAP32[$0>>2]|0;
  $14 = ((($13)) + 44|0);
  $15 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_vi[$15 & 1023]($0);
 }
 $16 = ((($0)) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($0)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($17|0)==($19|0);
 if ($20) {
  return;
 } else {
  $$sroa$011$0$$sroa$011$0$1220 = $17;
 }
 while(1) {
  $21 = HEAP32[$$sroa$011$0$$sroa$011$0$1220>>2]|0;
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 40|0);
  $24 = HEAP32[$23>>2]|0;
  FUNCTION_TABLE_vi[$24 & 1023]($21);
  $25 = ((($$sroa$011$0$$sroa$011$0$1220)) + 4|0);
  $26 = HEAP32[$18>>2]|0;
  $27 = ($25|0)==($26|0);
  if ($27) {
   break;
  } else {
   $$sroa$011$0$$sroa$011$0$1220 = $25;
  }
 }
 return;
}
function __ZN4View28onEffectiveTintColourChangedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN4View9getBoundsEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 115|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$2>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$2+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$2+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$2+3>>0];$3 = +HEAPF32[tempDoublePtr>>2];
 $4 = ((($1)) + 119|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$4>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$4+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$4+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$4+3>>0];$5 = +HEAPF32[tempDoublePtr>>2];
 __Z9RECT_Makeffff($0,0.0,0.0,$3,$5);
 return;
}
function __ZN4View20getBoundsWithPaddingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 212|0);
 $3 = +HEAPF32[$2>>2];
 $4 = ((($1)) + 216|0);
 $5 = +HEAPF32[$4>>2];
 $6 = ((($1)) + 115|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$6>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$6+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$6+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$6+3>>0];$7 = +HEAPF32[tempDoublePtr>>2];
 $8 = ((($1)) + 220|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $3 + $9;
 $11 = $7 - $10;
 $12 = ((($1)) + 119|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$12>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$12+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$12+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$12+3>>0];$13 = +HEAPF32[tempDoublePtr>>2];
 $14 = ((($1)) + 224|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $5 + $15;
 $17 = $13 - $16;
 __Z9RECT_Makeffff($0,$3,$5,$11,$17);
 return;
}
function __ZN4View10setPaddingE11_EDGEINSETS($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 212|0);
 dest=$2; src=$1; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 68|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($0);
 return;
}
function __ZN4View15setMeasureSpecsE12_MEASURESPECS0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 132|0);
 ;HEAP32[$3>>2]=HEAP32[$1>>2]|0;HEAP32[$3+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$1+12>>2]|0;
 $4 = ((($0)) + 148|0);
 ;HEAP32[$4>>2]=HEAP32[$2>>2]|0;HEAP32[$4+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$2+12>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 68|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 1023]($0);
 return;
}
function __ZN4View13setAlignSpecsE10_ALIGNSPECS0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 164|0);
 ;HEAP32[$3>>2]=HEAP32[$1>>2]|0;HEAP32[$3+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$1+12>>2]|0;
 $4 = ((($0)) + 180|0);
 ;HEAP32[$4>>2]=HEAP32[$2>>2]|0;HEAP32[$4+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$2+12>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 68|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 1023]($0);
 return;
}
function __ZN4View14setNeedsLayoutEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vi[$6 & 1023]($2);
 return;
}
function __ZN4View7measureEff($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $$041$lcssa = 0.0, $$04144 = 0.0, $$042$lcssa = 0.0, $$04243 = 0.0, $$045 = 0, $$phi$trans$insert = 0, $$pre = 0.0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0;
 var $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0;
 var $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0;
 var $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0, $not$ = 0, $not$50 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 228|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($6)) + 84|0);
  $8 = HEAP32[$7>>2]|0;
  FUNCTION_TABLE_vidd[$8 & 1023]($0,$1,$2);
  HEAP8[$3>>0] = 1;
 }
 $9 = ((($0)) + 132|0);
 $10 = HEAP32[$9>>2]|0;
 switch ($10|0) {
 case 2:  {
  $11 = ((($0)) + 196|0);
  $12 = +HEAPF32[$11>>2];
  $13 = ((($0)) + 212|0);
  $14 = +HEAPF32[$13>>2];
  $15 = $12 + $14;
  $16 = ((($0)) + 220|0);
  $17 = +HEAPF32[$16>>2];
  $18 = $15 + $17;
  $19 = ((($0)) + 115|0);
  HEAPF32[tempDoublePtr>>2]=$18;HEAP8[$19>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$19+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$19+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$19+3>>0]=HEAP8[tempDoublePtr+3>>0];
  break;
 }
 case 1:  {
  $20 = ((($0)) + 144|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($0)) + 115|0);
  HEAP8[$22>>0]=$21&255;HEAP8[$22+1>>0]=($21>>8)&255;HEAP8[$22+2>>0]=($21>>16)&255;HEAP8[$22+3>>0]=$21>>24;
  break;
 }
 case 3:  {
  $23 = ((($0)) + 136|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if ($25) {
   $31 = $1;
  } else {
   $26 = ((($24)) + 115|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$26>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$26+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$26+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$26+3>>0];$27 = +HEAPF32[tempDoublePtr>>2];
   $31 = $27;
  }
  $28 = ((($0)) + 140|0);
  $29 = +HEAPF32[$28>>2];
  $30 = $31 * $29;
  $32 = ((($0)) + 115|0);
  $33 = ((($0)) + 144|0);
  $34 = +HEAPF32[$33>>2];
  $35 = $30 + $34;
  HEAPF32[tempDoublePtr>>2]=$35;HEAP8[$32>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$32+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$32+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$32+3>>0]=HEAP8[tempDoublePtr+3>>0];
  break;
 }
 default: {
 }
 }
 $36 = ((($0)) + 148|0);
 $37 = HEAP32[$36>>2]|0;
 switch ($37|0) {
 case 2:  {
  $38 = ((($0)) + 200|0);
  $39 = +HEAPF32[$38>>2];
  $40 = ((($0)) + 216|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $39 + $41;
  $43 = ((($0)) + 224|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $42 + $44;
  $46 = ((($0)) + 119|0);
  HEAPF32[tempDoublePtr>>2]=$45;HEAP8[$46>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$46+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$46+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$46+3>>0]=HEAP8[tempDoublePtr+3>>0];
  break;
 }
 case 1:  {
  $47 = ((($0)) + 160|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($0)) + 119|0);
  HEAP8[$49>>0]=$48&255;HEAP8[$49+1>>0]=($48>>8)&255;HEAP8[$49+2>>0]=($48>>16)&255;HEAP8[$49+3>>0]=$48>>24;
  break;
 }
 case 3:  {
  $50 = ((($0)) + 152|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)==(0|0);
  if ($52) {
   $58 = $2;
  } else {
   $53 = ((($51)) + 119|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$53>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$53+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$53+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$53+3>>0];$54 = +HEAPF32[tempDoublePtr>>2];
   $58 = $54;
  }
  $55 = ((($0)) + 156|0);
  $56 = +HEAPF32[$55>>2];
  $57 = $58 * $56;
  $59 = ((($0)) + 119|0);
  $60 = ((($0)) + 160|0);
  $61 = +HEAPF32[$60>>2];
  $62 = $57 + $61;
  HEAPF32[tempDoublePtr>>2]=$62;HEAP8[$59>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$59+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$59+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$59+3>>0]=HEAP8[tempDoublePtr+3>>0];
  break;
 }
 default: {
 }
 }
 $63 = ($10|0)==(4);
 if ($63) {
  $64 = ((($0)) + 119|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$64>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$64+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$64+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$64+3>>0];$65 = +HEAPF32[tempDoublePtr>>2];
  $66 = ((($0)) + 140|0);
  $67 = +HEAPF32[$66>>2];
  $68 = $65 * $67;
  $69 = ((($0)) + 115|0);
  HEAPF32[tempDoublePtr>>2]=$68;HEAP8[$69>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$69+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$69+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$69+3>>0]=HEAP8[tempDoublePtr+3>>0];
 } else {
  $70 = ($37|0)==(4);
  if ($70) {
   $71 = ((($0)) + 115|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$71>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$71+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$71+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$71+3>>0];$72 = +HEAPF32[tempDoublePtr>>2];
   $73 = ((($0)) + 156|0);
   $74 = +HEAPF32[$73>>2];
   $75 = $72 * $74;
   $76 = ((($0)) + 119|0);
   HEAPF32[tempDoublePtr>>2]=$75;HEAP8[$76>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$76+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$76+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$76+3>>0]=HEAP8[tempDoublePtr+3>>0];
  }
 }
 $77 = ((($0)) + 196|0);
 $78 = +HEAPF32[$77>>2];
 $79 = ($10|0)==(2);
 $not$ = $78 <= 0.0;
 $80 = $79 & $not$;
 $81 = ((($0)) + 200|0);
 $82 = +HEAPF32[$81>>2];
 $83 = ($37|0)==(2);
 $not$50 = $82 <= 0.0;
 $84 = $83 & $not$50;
 if ($80) {
  $95 = $1;
 } else {
  $85 = ((($0)) + 115|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$85>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$85+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$85+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$85+3>>0];$86 = +HEAPF32[tempDoublePtr>>2];
  $95 = $86;
 }
 if ($84) {
  $102 = $2;
 } else {
  $87 = ((($0)) + 119|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$87>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$87+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$87+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$87+3>>0];$88 = +HEAPF32[tempDoublePtr>>2];
  $102 = $88;
 }
 $89 = ((($0)) + 212|0);
 $90 = +HEAPF32[$89>>2];
 $91 = ((($0)) + 220|0);
 $92 = +HEAPF32[$91>>2];
 $93 = $90 + $92;
 $94 = $95 - $93;
 $96 = ((($0)) + 216|0);
 $97 = +HEAPF32[$96>>2];
 $98 = ((($0)) + 224|0);
 $99 = +HEAPF32[$98>>2];
 $100 = $97 + $99;
 $101 = $102 - $100;
 $103 = ((($0)) + 28|0);
 $104 = ((($0)) + 32|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = HEAP32[$103>>2]|0;
 $107 = ($105|0)==($106|0);
 if ($107) {
  $$041$lcssa = 0.0;$$042$lcssa = 0.0;
 } else {
  $$04144 = 0.0;$$04243 = 0.0;$$045 = 0;$109 = $106;
  while(1) {
   $108 = $109;
   $110 = (($108) + ($$045<<2)|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = HEAP32[$111>>2]|0;
   $113 = ((($112)) + 72|0);
   $114 = HEAP32[$113>>2]|0;
   FUNCTION_TABLE_vidd[$114 & 1023]($111,$94,$101);
   $115 = ((($111)) + 115|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$115>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$115+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$115+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$115+3>>0];$116 = +HEAPF32[tempDoublePtr>>2];
   $117 = (+_fmaxf($$04243,$116));
   $118 = ((($111)) + 119|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$118>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$118+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$118+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$118+3>>0];$119 = +HEAPF32[tempDoublePtr>>2];
   $120 = (+_fmaxf($$04144,$119));
   $121 = (($$045) + 1)|0;
   $122 = HEAP32[$104>>2]|0;
   $123 = HEAP32[$103>>2]|0;
   $124 = (($122) - ($123))|0;
   $125 = $124 >> 2;
   $126 = ($121>>>0)<($125>>>0);
   if ($126) {
    $$04144 = $120;$$04243 = $117;$$045 = $121;$109 = $123;
   } else {
    $$041$lcssa = $120;$$042$lcssa = $117;
    break;
   }
  }
 }
 if ($80) {
  $127 = +HEAPF32[$89>>2];
  $128 = $$042$lcssa + $127;
  $129 = +HEAPF32[$91>>2];
  $130 = $128 + $129;
  $131 = ((($0)) + 115|0);
  HEAPF32[tempDoublePtr>>2]=$130;HEAP8[$131>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$131+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$131+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$131+3>>0]=HEAP8[tempDoublePtr+3>>0];
 }
 if ($84) {
  $132 = +HEAPF32[$98>>2];
  $133 = $$041$lcssa + $132;
  $134 = +HEAPF32[$96>>2];
  $135 = $133 + $134;
  $136 = ((($0)) + 119|0);
  HEAPF32[tempDoublePtr>>2]=$135;HEAP8[$136>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$136+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$136+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$136+3>>0]=HEAP8[tempDoublePtr+3>>0];
  $$pre$phiZ2D = $136;$140 = $135;
  $137 = ((($0)) + 115|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$137>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$137+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$137+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$137+3>>0];$138 = +HEAPF32[tempDoublePtr>>2];
  $139 = (+Math_floor((+$138)));
  HEAPF32[tempDoublePtr>>2]=$139;HEAP8[$137>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$137+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$137+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$137+3>>0]=HEAP8[tempDoublePtr+3>>0];
  $141 = (+Math_floor((+$140)));
  HEAPF32[tempDoublePtr>>2]=$141;HEAP8[$$pre$phiZ2D>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$$pre$phiZ2D+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$$pre$phiZ2D+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$$pre$phiZ2D+3>>0]=HEAP8[tempDoublePtr+3>>0];
  return;
 } else {
  $$phi$trans$insert = ((($0)) + 119|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$$phi$trans$insert>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$phi$trans$insert+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$phi$trans$insert+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$phi$trans$insert+3>>0];$$pre = +HEAPF32[tempDoublePtr>>2];
  $$pre$phiZ2D = $$phi$trans$insert;$140 = $$pre;
  $137 = ((($0)) + 115|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$137>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$137+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$137+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$137+3>>0];$138 = +HEAPF32[tempDoublePtr>>2];
  $139 = (+Math_floor((+$138)));
  HEAPF32[tempDoublePtr>>2]=$139;HEAP8[$137>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$137+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$137+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$137+3>>0]=HEAP8[tempDoublePtr+3>>0];
  $141 = (+Math_floor((+$140)));
  HEAPF32[tempDoublePtr>>2]=$141;HEAP8[$$pre$phiZ2D>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$$pre$phiZ2D+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$$pre$phiZ2D+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$$pre$phiZ2D+3>>0]=HEAP8[tempDoublePtr+3>>0];
  return;
 }
}
function __ZN4View6layoutEv($0) {
 $0 = $0|0;
 var $$0 = 0.0, $$04864 = 0, $$049 = 0.0, $$050 = 0.0, $$051 = 0.0, $$in = 0, $$in52 = 0, $$ph = 0.0, $$phi$trans$insert = 0, $$pre = 0.0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $magicptr = 0, $magicptr53 = 0, $or$cond$i = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $3 = ((($0)) + 164|0);
 $4 = HEAP32[$3>>2]|0;
 $magicptr = $4;
 switch ($magicptr|0) {
 case -1:  {
  $12 = 0;
  break;
 }
 case 0:  {
  $5 = ((($0)) + 24|0);
  $6 = HEAP32[$5>>2]|0;
  $12 = $6;
  break;
 }
 default: {
  $12 = $4;
 }
 }
 $7 = ((($0)) + 180|0);
 $8 = HEAP32[$7>>2]|0;
 $magicptr53 = $8;
 switch ($magicptr53|0) {
 case -1:  {
  $18 = 0;
  break;
 }
 case 0:  {
  $9 = ((($0)) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $18 = $10;
  break;
 }
 default: {
  $18 = $8;
 }
 }
 $11 = ($12|0)!=(0|0);
 $13 = ((($12)) + 115|0);
 $14 = HEAP32[(28960)>>2]|0;
 $15 = ((($14)) + 36|0);
 $$in = $11 ? $13 : $15;
 HEAP8[tempDoublePtr>>0]=HEAP8[$$in>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$in+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$in+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$in+3>>0];$16 = +HEAPF32[tempDoublePtr>>2];
 $17 = ($18|0)!=(0|0);
 $19 = ((($18)) + 119|0);
 $20 = ((($14)) + 40|0);
 $$in52 = $17 ? $19 : $20;
 HEAP8[tempDoublePtr>>0]=HEAP8[$$in52>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$in52+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$in52+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$in52+3>>0];$21 = +HEAPF32[tempDoublePtr>>2];
 do {
  if ($11) {
   $22 = ((($0)) + 24|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($12|0)==($23|0);
   if ($24) {
    $25 = ((($12)) + 212|0);
    $26 = +HEAPF32[$25>>2];
    $27 = ((($12)) + 220|0);
    $28 = +HEAPF32[$27>>2];
    $29 = $26 + $28;
    $30 = $16 - $29;
    $$050 = $30;$$051 = $26;
    break;
   }
   $31 = ((($12)) + 24|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==($23|0);
   if (!($33)) {
    __ZN3App3logEPKcz(28952,23945,$vararg_buffer);
   }
   $34 = ((($12)) + 107|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$34>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$34+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$34+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$34+3>>0];$35 = +HEAPF32[tempDoublePtr>>2];
   $$050 = $16;$$051 = $35;
  } else {
   $$050 = $16;$$051 = 0.0;
  }
 } while(0);
 do {
  if ($17) {
   $36 = ((($0)) + 24|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($18|0)==($37|0);
   if ($38) {
    $39 = ((($18)) + 216|0);
    $40 = +HEAPF32[$39>>2];
    $41 = ((($18)) + 224|0);
    $42 = +HEAPF32[$41>>2];
    $43 = $40 + $42;
    $44 = $21 - $43;
    $$0 = $40;$$049 = $44;
    break;
   }
   $45 = ((($18)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($37|0);
   if (!($47)) {
    __ZN3App3logEPKcz(28952,23945,$vararg_buffer1);
   }
   $48 = ((($18)) + 111|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$48>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$48+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$48+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$48+3>>0];$49 = +HEAPF32[tempDoublePtr>>2];
   $$0 = $49;$$049 = $21;
  } else {
   $$0 = 0.0;$$049 = $21;
  }
 } while(0);
 if ($11) {
  $50 = ((($0)) + 168|0);
  $51 = +HEAPF32[$50>>2];
  $52 = $$050 * $51;
  $53 = $$051 + $52;
  $54 = ((($0)) + 172|0);
  $55 = +HEAPF32[$54>>2];
  $56 = ((($0)) + 115|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$56>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$56+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$56+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$56+3>>0];$57 = +HEAPF32[tempDoublePtr>>2];
  $58 = $55 * $57;
  $59 = $53 + $58;
  $60 = ((($0)) + 176|0);
  $61 = +HEAPF32[$60>>2];
  $62 = $61 + $59;
  $63 = (+Math_floor((+$62)));
  $126 = $63;
 } else {
  $126 = 0.0;
 }
 if ($17) {
  $64 = ((($0)) + 184|0);
  $65 = +HEAPF32[$64>>2];
  $66 = $$049 * $65;
  $67 = $$0 + $66;
  $68 = ((($0)) + 188|0);
  $69 = +HEAPF32[$68>>2];
  $70 = ((($0)) + 119|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$70>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$70+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$70+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$70+3>>0];$71 = +HEAPF32[tempDoublePtr>>2];
  $72 = $69 * $71;
  $73 = $67 + $72;
  $74 = (+Math_floor((+$73)));
  $75 = ((($0)) + 192|0);
  $76 = +HEAPF32[$75>>2];
  $77 = $74 + $76;
  if ($11) {
   $$ph = $126;
  } else {
   $78 = ((($0)) + 107|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$78>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$78+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$78+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$78+3>>0];$79 = +HEAPF32[tempDoublePtr>>2];
   $$ph = $79;
  }
  $$phi$trans$insert = ((($0)) + 111|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$$phi$trans$insert>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$phi$trans$insert+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$phi$trans$insert+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$phi$trans$insert+3>>0];$$pre = +HEAPF32[tempDoublePtr>>2];
  $$pre$phiZ2D = $$phi$trans$insert;$85 = $$ph;$87 = $77;$88 = $$pre;
  label = 27;
 } else {
  if ($11) {
   $80 = ((($0)) + 111|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$80>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$80+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$80+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$80+3>>0];$81 = +HEAPF32[tempDoublePtr>>2];
   $$pre$phiZ2D = $80;$85 = $126;$87 = $81;$88 = $81;
   label = 27;
  }
 }
 if ((label|0) == 27) {
  $82 = ((($0)) + 107|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$82>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$82+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$82+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$82+3>>0];$83 = +HEAPF32[tempDoublePtr>>2];
  $84 = $85 - $83;
  HEAPF32[$1>>2] = $84;
  $86 = $87 - $88;
  $89 = ((($1)) + 4|0);
  HEAPF32[$89>>2] = $86;
  $90 = $84 != 0.0;
  $91 = $86 != 0.0;
  $or$cond$i = $90 | $91;
  if ($or$cond$i) {
   HEAPF32[tempDoublePtr>>2]=$85;HEAP8[$82>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$82+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$82+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$82+3>>0]=HEAP8[tempDoublePtr+3>>0];
   HEAPF32[tempDoublePtr>>2]=$87;HEAP8[$$pre$phiZ2D>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$$pre$phiZ2D+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$$pre$phiZ2D+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$$pre$phiZ2D+3>>0]=HEAP8[tempDoublePtr+3>>0];
   __ZN4View19adjustSurfaceOriginERK6_POINT($0,$1);
  }
 }
 $92 = ((($0)) + 56|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ($93|0)==(0|0);
 if (!($94)) {
  $95 = HEAP32[$93>>2]|0;
  $96 = ((($95)) + 16|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ((($0)) + 115|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$98>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$98+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$98+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$98+3>>0];$99 = +HEAPF32[tempDoublePtr>>2];
  $100 = ((($0)) + 119|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$100>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$100+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$100+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$100+3>>0];$101 = +HEAPF32[tempDoublePtr>>2];
  __Z9RECT_Makeffff($2,0.0,0.0,$99,$101);
  FUNCTION_TABLE_vii[$97 & 1023]($93,$2);
 }
 $102 = ((($0)) + 28|0);
 $103 = ((($0)) + 32|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = HEAP32[$102>>2]|0;
 $106 = ($104|0)==($105|0);
 if ($106) {
  $107 = HEAP32[$0>>2]|0;
  $108 = ((($107)) + 32|0);
  $109 = HEAP32[$108>>2]|0;
  FUNCTION_TABLE_vi[$109 & 1023]($0);
  $110 = HEAP32[$0>>2]|0;
  $111 = ((($110)) + 176|0);
  $112 = HEAP32[$111>>2]|0;
  FUNCTION_TABLE_vi[$112 & 1023]($0);
  STACKTOP = sp;return;
 } else {
  $$04864 = 0;$114 = $105;
 }
 while(1) {
  $113 = $114;
  $115 = (($113) + ($$04864<<2)|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = HEAP32[$116>>2]|0;
  $118 = ((($117)) + 76|0);
  $119 = HEAP32[$118>>2]|0;
  FUNCTION_TABLE_vi[$119 & 1023]($116);
  $120 = (($$04864) + 1)|0;
  $121 = HEAP32[$103>>2]|0;
  $122 = HEAP32[$102>>2]|0;
  $123 = (($121) - ($122))|0;
  $124 = $123 >> 2;
  $125 = ($120>>>0)<($124>>>0);
  if ($125) {
   $$04864 = $120;$114 = $122;
  } else {
   break;
  }
 }
 $107 = HEAP32[$0>>2]|0;
 $108 = ((($107)) + 32|0);
 $109 = HEAP32[$108>>2]|0;
 FUNCTION_TABLE_vi[$109 & 1023]($0);
 $110 = HEAP32[$0>>2]|0;
 $111 = ((($110)) + 176|0);
 $112 = HEAP32[$111>>2]|0;
 FUNCTION_TABLE_vi[$112 & 1023]($0);
 STACKTOP = sp;return;
}
function __ZN4View21invalidateContentSizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 228|0);
 HEAP8[$1>>0] = 0;
 $2 = ((($0)) + 132|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(2);
 $5 = HEAP32[$0>>2]|0;
 if (!($4)) {
  $6 = ((($0)) + 148|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(2);
  if (!($8)) {
   $11 = ((($5)) + 176|0);
   $12 = HEAP32[$11>>2]|0;
   FUNCTION_TABLE_vi[$12 & 1023]($0);
   return;
  }
 }
 $9 = ((($5)) + 68|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 1023]($0);
 return;
}
function __ZN4View17updateContentSizeEff($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN4View10setGravityE7GRAVITY($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 229|0);
 $3 = HEAP8[$1>>0]|0;
 HEAP8[$2>>0] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vi[$6 & 1023]($0);
 return;
}
function __ZN4View16mapPointToWindowE6_POINT($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$06 = 0, $$promoted = 0.0, $$promoted7 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 $6 = ($1|0)==(0|0);
 $or$cond = $5 | $6;
 if ($or$cond) {
  $19 = $2;
  $20 = $19;
  $21 = HEAPU8[$20>>0]|(HEAPU8[$20+1>>0]<<8)|(HEAPU8[$20+2>>0]<<16)|(HEAPU8[$20+3>>0]<<24);
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAPU8[$23>>0]|(HEAPU8[$23+1>>0]<<8)|(HEAPU8[$23+2>>0]<<16)|(HEAPU8[$23+3>>0]<<24);
  $25 = $0;
  $26 = $25;
  HEAP32[$26>>2] = $21;
  $27 = (($25) + 4)|0;
  $28 = $27;
  HEAP32[$28>>2] = $24;
  return;
 }
 $7 = ((($2)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$2>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$2+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$2+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$2+3>>0];$$promoted = +HEAPF32[tempDoublePtr>>2];
 HEAP8[tempDoublePtr>>0]=HEAP8[$7>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$7+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$7+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$7+3>>0];$$promoted7 = +HEAPF32[tempDoublePtr>>2];
 $$06 = $1;$11 = $$promoted;$15 = $$promoted7;
 while(1) {
  $8 = ((($$06)) + 107|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$8>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$8+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$8+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$8+3>>0];$9 = +HEAPF32[tempDoublePtr>>2];
  $10 = $9 + $11;
  $12 = ((($$06)) + 111|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$12>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$12+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$12+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$12+3>>0];$13 = +HEAPF32[tempDoublePtr>>2];
  $14 = $13 + $15;
  $16 = ((($$06)) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   break;
  } else {
   $$06 = $17;$11 = $10;$15 = $14;
  }
 }
 HEAPF32[tempDoublePtr>>2]=$10;HEAP8[$2>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$2+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$2+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$2+3>>0]=HEAP8[tempDoublePtr+3>>0];
 HEAPF32[tempDoublePtr>>2]=$14;HEAP8[$7>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$7+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$7+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$7+3>>0]=HEAP8[tempDoublePtr+3>>0];
 $19 = $2;
 $20 = $19;
 $21 = HEAPU8[$20>>0]|(HEAPU8[$20+1>>0]<<8)|(HEAPU8[$20+2>>0]<<16)|(HEAPU8[$20+3>>0]<<24);
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAPU8[$23>>0]|(HEAPU8[$23+1>>0]<<8)|(HEAPU8[$23+2>>0]<<16)|(HEAPU8[$23+3>>0]<<24);
 $25 = $0;
 $26 = $25;
 HEAP32[$26>>2] = $21;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = $24;
 return;
}
function __ZN4View22subviewContainingPointE6_POINT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$014 = 0, $$01416 = 0, $$0141720 = 0, $$113 = 0, $$pre = 0, $$pre19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 28|0);
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = ($6|0)>(0);
 if (!($7)) {
  $$113 = 0;
  return ($$113|0);
 }
 $8 = $6 >>> 2;
 $$01416 = (($8) + -1)|0;
 $9 = (($4) - ($5))|0;
 $10 = $9 >> 2;
 $11 = ($10>>>0)>($$01416>>>0);
 if ($11) {
  $$0141720 = $$01416;$13 = $5;
 } else {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv($2);
  // unreachable;
 }
 while(1) {
  $12 = $13;
  $14 = (($12) + ($$0141720<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0);
  if ($18) {
   $23 = ((($15)) + 107|0);
   $24 = (__Z13RECT_containsR4RECTR6_POINT($23,$1)|0);
   if ($24) {
    $$113 = $15;
    label = 8;
    break;
   }
  }
  $$014 = (($$0141720) + -1)|0;
  $19 = ($$014|0)>(-1);
  if (!($19)) {
   $$113 = 0;
   label = 8;
   break;
  }
  $$pre = HEAP32[$3>>2]|0;
  $$pre19 = HEAP32[$2>>2]|0;
  $20 = (($$pre) - ($$pre19))|0;
  $21 = $20 >> 2;
  $22 = ($21>>>0)>($$014>>>0);
  if ($22) {
   $$0141720 = $$014;$13 = $$pre19;
  } else {
   label = 3;
   break;
  }
 }
 if ((label|0) == 3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv($2);
  // unreachable;
 }
 else if ((label|0) == 8) {
  return ($$113|0);
 }
 return (0)|0;
}
function __ZN4View29indexOfSubviewContainingPointE6_POINT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$014 = 0, $$01416 = 0, $$0141720 = 0, $$113 = 0, $$pre = 0, $$pre19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 28|0);
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = ($6|0)>(0);
 if (!($7)) {
  $$113 = -1;
  return ($$113|0);
 }
 $8 = $6 >>> 2;
 $$01416 = (($8) + -1)|0;
 $9 = (($4) - ($5))|0;
 $10 = $9 >> 2;
 $11 = ($10>>>0)>($$01416>>>0);
 if ($11) {
  $$0141720 = $$01416;$13 = $5;
 } else {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv($2);
  // unreachable;
 }
 while(1) {
  $12 = $13;
  $14 = (($12) + ($$0141720<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0);
  if ($18) {
   $23 = ((($15)) + 107|0);
   $24 = (__Z13RECT_containsR4RECTR6_POINT($23,$1)|0);
   if ($24) {
    $$113 = $$0141720;
    label = 8;
    break;
   }
  }
  $$014 = (($$0141720) + -1)|0;
  $19 = ($$014|0)>(-1);
  if (!($19)) {
   $$113 = -1;
   label = 8;
   break;
  }
  $$pre = HEAP32[$3>>2]|0;
  $$pre19 = HEAP32[$2>>2]|0;
  $20 = (($$pre) - ($$pre19))|0;
  $21 = $20 >> 2;
  $22 = ($21>>>0)>($$014>>>0);
  if ($22) {
   $$0141720 = $$014;$13 = $$pre19;
  } else {
   label = 3;
   break;
  }
 }
 if ((label|0) == 3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv($2);
  // unreachable;
 }
 else if ((label|0) == 8) {
  return ($$113|0);
 }
 return (0)|0;
}
function __ZN4View13setVisibilityEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if ($4) {
  return;
 }
 $5 = ($3|0)==(2);
 $6 = ($1|0)!=(2);
 $or$cond = $6 & $5;
 if ($or$cond) {
  label = 4;
 } else {
  $7 = ($3|0)!=(2);
  $8 = ($1|0)==(2);
  $or$cond3 = $8 & $7;
  if ($or$cond3) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $9 = HEAP32[$0>>2]|0;
  $10 = ((($9)) + 68|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_vi[$11 & 1023]($0);
 }
 HEAP32[$2>>2] = $1;
 $12 = ($1|0)==(0);
 if (!($12)) {
  $22 = ((($0)) + 20|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  if ($24) {
   return;
  }
  $25 = HEAP32[$0>>2]|0;
  $26 = ((($25)) + 112|0);
  $27 = HEAP32[$26>>2]|0;
  FUNCTION_TABLE_vi[$27 & 1023]($0);
  return;
 }
 $13 = ((($0)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  return;
 }
 $16 = ((($14)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  return;
 }
 $19 = HEAP32[$0>>2]|0;
 $20 = ((($19)) + 108|0);
 $21 = HEAP32[$20>>2]|0;
 FUNCTION_TABLE_vii[$21 & 1023]($0,$17);
 return;
}
function __ZN4View14attachToWindowEP6Window($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$016$0$$sroa$016$0$28 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = $1;
 $7 = ((($0)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $31 = ((($0)) + 107|0);
  $32 = ((($0)) + 123|0);
  $33 = $31;
  $34 = $33;
  $35 = HEAPU8[$34>>0]|(HEAPU8[$34+1>>0]<<8)|(HEAPU8[$34+2>>0]<<16)|(HEAPU8[$34+3>>0]<<24);
  $36 = (($33) + 4)|0;
  $37 = $36;
  $38 = HEAPU8[$37>>0]|(HEAPU8[$37+1>>0]<<8)|(HEAPU8[$37+2>>0]<<16)|(HEAPU8[$37+3>>0]<<24);
  $39 = $32;
  $40 = $39;
  HEAP8[$40>>0]=$35&255;HEAP8[$40+1>>0]=($35>>8)&255;HEAP8[$40+2>>0]=($35>>16)&255;HEAP8[$40+3>>0]=$35>>24;
  $41 = (($39) + 4)|0;
  $42 = $41;
  HEAP8[$42>>0]=$38&255;HEAP8[$42+1>>0]=($38>>8)&255;HEAP8[$42+2>>0]=($38>>16)&255;HEAP8[$42+3>>0]=$38>>24;
 } else {
  $10 = ((($8)) + 123|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$10>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$10+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$10+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$10+3>>0];$11 = +HEAPF32[tempDoublePtr>>2];
  $12 = ((($0)) + 107|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$12>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$12+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$12+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$12+3>>0];$13 = +HEAPF32[tempDoublePtr>>2];
  $14 = $11 + $13;
  $15 = ((($8)) + 127|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$15>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$15+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$15+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$15+3>>0];$16 = +HEAPF32[tempDoublePtr>>2];
  $17 = ((($0)) + 111|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$17>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$17+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$17+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$17+3>>0];$18 = +HEAPF32[tempDoublePtr>>2];
  $19 = $16 + $18;
  __Z10POINT_Makeff($2,$14,$19);
  $20 = ((($0)) + 123|0);
  $21 = $2;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = $20;
  $28 = $27;
  HEAP8[$28>>0]=$23&255;HEAP8[$28+1>>0]=($23>>8)&255;HEAP8[$28+2>>0]=($23>>16)&255;HEAP8[$28+3>>0]=$23>>24;
  $29 = (($27) + 4)|0;
  $30 = $29;
  HEAP8[$30>>0]=$26&255;HEAP8[$30+1>>0]=($26>>8)&255;HEAP8[$30+2>>0]=($26>>16)&255;HEAP8[$30+3>>0]=$26>>24;
 }
 $43 = HEAP32[$0>>2]|0;
 $44 = ((($43)) + 12|0);
 $45 = HEAP32[$44>>2]|0;
 FUNCTION_TABLE_vii[$45 & 1023]($0,0);
 $46 = HEAP32[$0>>2]|0;
 $47 = ((($46)) + 36|0);
 $48 = HEAP32[$47>>2]|0;
 FUNCTION_TABLE_vi[$48 & 1023]($0);
 $49 = HEAP32[$0>>2]|0;
 $50 = ((($49)) + 40|0);
 $51 = HEAP32[$50>>2]|0;
 FUNCTION_TABLE_vi[$51 & 1023]($0);
 $52 = ((($0)) + 100|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)==(0|0);
 if (!($54)) {
  __ZN7Surface13attachViewOpsEP4View($53,$0);
 }
 $55 = ((($0)) + 28|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($0)) + 32|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($56|0)==($58|0);
 if ($59) {
  STACKTOP = sp;return;
 } else {
  $$sroa$016$0$$sroa$016$0$28 = $56;
 }
 while(1) {
  $60 = HEAP32[$$sroa$016$0$$sroa$016$0$28>>2]|0;
  $61 = ($60|0)==(0|0);
  if (!($61)) {
   __ZN6Object6retainEv($60);
  }
  $62 = ((($60)) + 48|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)==(0);
  if ($64) {
   $65 = HEAP32[$60>>2]|0;
   $66 = ((($65)) + 108|0);
   $67 = HEAP32[$66>>2]|0;
   __THREW__ = 0;
   invoke_vii($67|0,($60|0),($1|0));
   $68 = __THREW__; __THREW__ = 0;
   $69 = $68&1;
   if ($69) {
    label = 12;
    break;
   }
  }
  __THREW__ = 0;
  invoke_vi(525,($60|0));
  $76 = __THREW__; __THREW__ = 0;
  $77 = $76&1;
  if ($77) {
   label = 16;
   break;
  }
  $80 = ((($$sroa$016$0$$sroa$016$0$28)) + 4|0);
  $81 = HEAP32[$57>>2]|0;
  $82 = ($80|0)==($81|0);
  if ($82) {
   label = 18;
   break;
  } else {
   $$sroa$016$0$$sroa$016$0$28 = $80;
  }
 }
 if ((label|0) == 12) {
  $70 = ___cxa_find_matching_catch_2()|0;
  $71 = tempRet0;
  __THREW__ = 0;
  invoke_vi(525,($60|0));
  $72 = __THREW__; __THREW__ = 0;
  $73 = $72&1;
  if ($73) {
   $74 = ___cxa_find_matching_catch_3(0|0)|0;
   $75 = tempRet0;
   ___clang_call_terminate($74);
   // unreachable;
  } else {
   ___resumeException($70|0);
   // unreachable;
  }
 }
 else if ((label|0) == 16) {
  $78 = ___cxa_find_matching_catch_3(0|0)|0;
  $79 = tempRet0;
  ___clang_call_terminate($78);
  // unreachable;
 }
 else if ((label|0) == 18) {
  STACKTOP = sp;return;
 }
}
function __ZN4View16detachFromWindowEv($0) {
 $0 = $0|0;
 var $$pr = 0, $$sroa$014$0$$sroa$014$0$26 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 268|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = HEAP32[$5>>2]|0;
  $8 = ((($7)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_vi[$9 & 1023]($5);
  $10 = HEAP32[$4>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   __ZN6Object7releaseEv($10);
   HEAP32[$4>>2] = 0;
  }
 }
 $12 = ((($0)) + 272|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $15 = HEAP32[$13>>2]|0;
  $16 = ((($15)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vi[$17 & 1023]($13);
  $18 = HEAP32[$12>>2]|0;
  $19 = ($18|0)==(0|0);
  if (!($19)) {
   __ZN6Object7releaseEv($18);
   HEAP32[$12>>2] = 0;
  }
 }
 $20 = ((($0)) + 100|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  __ZN7Surface13detachViewOpsEP4View($21,$0);
 }
 $23 = ((($0)) + 28|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($0)) + 32|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($24|0)==($26|0);
 L15: do {
  if (!($27)) {
   $$sroa$014$0$$sroa$014$0$26 = $24;
   while(1) {
    $31 = HEAP32[$$sroa$014$0$$sroa$014$0$26>>2]|0;
    $32 = ($31|0)==(0|0);
    if (!($32)) {
     __ZN6Object6retainEv($31);
    }
    $33 = HEAP32[$31>>2]|0;
    $34 = ((($33)) + 112|0);
    $35 = HEAP32[$34>>2]|0;
    __THREW__ = 0;
    invoke_vi($35|0,($31|0));
    $36 = __THREW__; __THREW__ = 0;
    $37 = $36&1;
    if ($37) {
     break;
    }
    __THREW__ = 0;
    invoke_vi(525,($31|0));
    $38 = __THREW__; __THREW__ = 0;
    $39 = $38&1;
    if ($39) {
     label = 16;
     break;
    }
    $42 = ((($$sroa$014$0$$sroa$014$0$26)) + 4|0);
    $43 = HEAP32[$25>>2]|0;
    $44 = ($42|0)==($43|0);
    if ($44) {
     break L15;
    } else {
     $$sroa$014$0$$sroa$014$0$26 = $42;
    }
   }
   if ((label|0) == 16) {
    $40 = ___cxa_find_matching_catch_3(0|0)|0;
    $41 = tempRet0;
    ___clang_call_terminate($40);
    // unreachable;
   }
   $45 = ___cxa_find_matching_catch_2()|0;
   $46 = tempRet0;
   __THREW__ = 0;
   invoke_vi(525,($31|0));
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if ($48) {
    $49 = ___cxa_find_matching_catch_3(0|0)|0;
    $50 = tempRet0;
    ___clang_call_terminate($49);
    // unreachable;
   } else {
    ___resumeException($45|0);
    // unreachable;
   }
  }
 } while(0);
 $28 = ((($0)) + 104|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = ($29<<24>>24)==(0);
 if ($30) {
  label = 23;
 } else {
  $51 = HEAP32[$20>>2]|0;
  $52 = ((($51)) + 196|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)==(0|0);
  if ($54) {
   $56 = $51;
  } else {
   __ZN6Object7releaseEv($53);
   HEAP32[$52>>2] = 0;
   label = 23;
  }
 }
 if ((label|0) == 23) {
  $$pr = HEAP32[$20>>2]|0;
  $56 = $$pr;
 }
 $55 = ($56|0)==(0|0);
 if (!($55)) {
  __ZN6Object7releaseEv($56);
  HEAP32[$20>>2] = 0;
 }
 HEAP32[$1>>2] = 0;
 $57 = ((($0)) + 84|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)==(0|0);
 if (!($59)) {
  __ZN6Object7releaseEv($58);
  HEAP32[$57>>2] = 0;
 }
 $60 = ((($0)) + 80|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)==(0|0);
 if ($62) {
  return;
 }
 __ZN6Object7releaseEv($61);
 HEAP32[$60>>2] = 0;
 return;
}
function __ZN4View13setBackgroundEP8RenderOp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $2 = sp;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 120|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP16[$2>>1] = 0;
 $6 = ((($2)) + 2|0);
 HEAP16[$6>>1] = 0;
 ;HEAP16[$$byval_copy>>1]=HEAP16[$2>>1]|0;HEAP16[$$byval_copy+2>>1]=HEAP16[$2+2>>1]|0;
 FUNCTION_TABLE_viii[$5 & 1023]($0,$1,$$byval_copy);
 STACKTOP = sp;return;
}
function __ZN4View13setBackgroundEP8RenderOp8STATESET($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 64|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 L1: do {
  if (!($8)) {
   $9 = HEAP16[$2>>1]|0;
   $10 = ((($2)) + 2|0);
   $11 = HEAP16[$10>>1]|0;
   $13 = $5;
   while(1) {
    $12 = ((($13)) + 4|0);
    $14 = HEAP16[$12>>1]|0;
    $15 = ($14<<16>>16)==($9<<16>>16);
    if ($15) {
     $16 = ((($13)) + 6|0);
     $17 = HEAP16[$16>>1]|0;
     $18 = ($17<<16>>16)==($11<<16>>16);
     if ($18) {
      break;
     }
    }
    $23 = ((($13)) + 8|0);
    $24 = ($23|0)==($7|0);
    if ($24) {
     break L1;
    } else {
     $13 = $23;
    }
   }
   $19 = HEAP32[$13>>2]|0;
   $20 = ($19|0)==($1|0);
   if (!($20)) {
    $21 = ($19|0)==(0|0);
    if (!($21)) {
     __ZN6Object7releaseEv($19);
    }
    HEAP32[$13>>2] = $1;
    $22 = ($1|0)==(0|0);
    if (!($22)) {
     __ZN6Object6retainEv($1);
    }
   }
   $phitmp = ($19|0)==(0|0);
   if (!($phitmp)) {
    $54 = HEAP32[$0>>2]|0;
    $55 = ((($54)) + 128|0);
    $56 = HEAP32[$55>>2]|0;
    FUNCTION_TABLE_vi[$56 & 1023]($0);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $25 = HEAPU16[$2>>1]|(HEAPU16[$2+2>>1]<<16);
 HEAP32[$3>>2] = $1;
 $26 = ($1|0)==(0|0);
 if (!($26)) {
  __ZN6Object6retainEv($1);
 }
 $27 = ((($3)) + 4|0);
 HEAP32[$27>>2] = $25;
 $28 = HEAP32[$6>>2]|0;
 $29 = ((($0)) + 68|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($28>>>0)<($30>>>0);
 do {
  if ($31) {
   HEAP32[$28>>2] = $1;
   if (!($26)) {
    __THREW__ = 0;
    invoke_vi(526,($1|0));
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 23;
     break;
    }
   }
   $34 = ((($28)) + 4|0);
   $35 = HEAP32[$27>>2]|0;
   HEAP32[$34>>2] = $35;
   $36 = HEAP32[$6>>2]|0;
   $37 = ((($36)) + 8|0);
   HEAP32[$6>>2] = $37;
   label = 19;
  } else {
   __THREW__ = 0;
   invoke_vii(767,($4|0),($3|0));
   $38 = __THREW__; __THREW__ = 0;
   $39 = $38&1;
   if ($39) {
    label = 23;
   } else {
    label = 19;
   }
  }
 } while(0);
 if ((label|0) == 19) {
  $40 = HEAP32[$3>>2]|0;
  $41 = ($40|0)==(0|0);
  if (!($41)) {
   __THREW__ = 0;
   invoke_vi(525,($40|0));
   $42 = __THREW__; __THREW__ = 0;
   $43 = $42&1;
   if ($43) {
    $44 = ___cxa_find_matching_catch_3(0|0)|0;
    $45 = tempRet0;
    ___clang_call_terminate($44);
    // unreachable;
   }
  }
  $54 = HEAP32[$0>>2]|0;
  $55 = ((($54)) + 128|0);
  $56 = HEAP32[$55>>2]|0;
  FUNCTION_TABLE_vi[$56 & 1023]($0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 23) {
  $46 = ___cxa_find_matching_catch_2()|0;
  $47 = tempRet0;
  $48 = HEAP32[$3>>2]|0;
  $49 = ($48|0)==(0|0);
  if ($49) {
   ___resumeException($46|0);
   // unreachable;
  }
  __THREW__ = 0;
  invoke_vi(525,($48|0));
  $50 = __THREW__; __THREW__ = 0;
  $51 = $50&1;
  if ($51) {
   $52 = ___cxa_find_matching_catch_3(0|0)|0;
   $53 = tempRet0;
   ___clang_call_terminate($52);
   // unreachable;
  } else {
   ___resumeException($46|0);
   // unreachable;
  }
 }
}
function __ZN4View19setBackgroundColourEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lpad$phi4$index = 0, $lpad$phi4$index2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 116|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN6ObjectnwEj(72)|0);
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($7)) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 __THREW__ = 0;
 invoke_vii($9|0,($2|0),($0|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  __THREW__ = 0;
  invoke_viiii(715,($6|0),($0|0),($2|0),($1|0));
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if (!($13)) {
   __THREW__ = 0;
   invoke_vii($5|0,($0|0),($6|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if (!($15)) {
    STACKTOP = sp;return;
   }
   $16 = ___cxa_find_matching_catch_2()|0;
   $17 = tempRet0;
   $lpad$phi4$index = $16;$lpad$phi4$index2 = $17;
   ___resumeException($lpad$phi4$index|0);
   // unreachable;
  }
 }
 $18 = ___cxa_find_matching_catch_2()|0;
 $19 = tempRet0;
 __ZdlPv($6);
 $lpad$phi4$index = $18;$lpad$phi4$index2 = $19;
 ___resumeException($lpad$phi4$index|0);
 // unreachable;
}
function __ZN4View18updateBackgroundOpEv($0) {
 $0 = $0|0;
 var $$$0 = 0, $$$014 = 0, $$0$lcssa = 0, $$01428 = 0, $$029 = 0, $$2 = 0, $$216 = 0, $$pr = 0, $$pre = 0, $$sroa$022$027 = 0, $$sroa$5$4$extract$trunc = 0, $$sroa$5$6$extract$shift = 0, $$sroa$5$6$extract$trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 L1: do {
  if ($6) {
   $$0$lcssa = 0;
  } else {
   $7 = ((($0)) + 44|0);
   $$01428 = -1;$$029 = 0;$$sroa$022$027 = $3;
   while(1) {
    $11 = HEAP32[$$sroa$022$027>>2]|0;
    $12 = ($11|0)==(0|0);
    if (!($12)) {
     __ZN6Object6retainEv($11);
    }
    $13 = ((($$sroa$022$027)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP16[$7>>1]|0;
    $$sroa$5$4$extract$trunc = $14&65535;
    $16 = $15 & $$sroa$5$4$extract$trunc;
    $$sroa$5$6$extract$shift = $14 >>> 16;
    $$sroa$5$6$extract$trunc = $$sroa$5$6$extract$shift&65535;
    $17 = ($16<<16>>16)==($$sroa$5$6$extract$trunc<<16>>16);
    if ($17) {
     $18 = $14 & 65535;
     $19 = (_llvm_ctpop_i32(($18|0))|0);
     $20 = ($19|0)>($$01428|0);
     $$$014 = $20 ? $19 : $$01428;
     $$$0 = $20 ? $11 : $$029;
     $$2 = $$$0;$$216 = $$$014;
    } else {
     $$2 = $$029;$$216 = $$01428;
    }
    if (!($12)) {
     __THREW__ = 0;
     invoke_vi(525,($11|0));
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if ($22) {
      break;
     }
    }
    $25 = ((($$sroa$022$027)) + 8|0);
    $26 = ($25|0)==($5|0);
    if ($26) {
     $$0$lcssa = $$2;
     break L1;
    } else {
     $$01428 = $$216;$$029 = $$2;$$sroa$022$027 = $25;
    }
   }
   $23 = ___cxa_find_matching_catch_3(0|0)|0;
   $24 = tempRet0;
   ___clang_call_terminate($23);
   // unreachable;
  }
 } while(0);
 $8 = ((($0)) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($$0$lcssa|0)==($9|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $27 = ($9|0)==(0|0);
 if ($27) {
  $32 = 0;
 } else {
  $28 = HEAP32[$0>>2]|0;
  $29 = ((($28)) + 168|0);
  $30 = HEAP32[$29>>2]|0;
  FUNCTION_TABLE_vii[$30 & 1023]($0,$9);
  $$pre = HEAP32[$8>>2]|0;
  $32 = $$pre;
 }
 $31 = ($32|0)==($$0$lcssa|0);
 do {
  if ($31) {
   $36 = $$0$lcssa;
  } else {
   $33 = ($32|0)==(0|0);
   if (!($33)) {
    __ZN6Object7releaseEv($32);
   }
   HEAP32[$8>>2] = $$0$lcssa;
   $34 = ($$0$lcssa|0)==(0|0);
   if ($34) {
    STACKTOP = sp;return;
   } else {
    __ZN6Object6retainEv($$0$lcssa);
    $$pr = HEAP32[$8>>2]|0;
    $36 = $$pr;
    break;
   }
  }
 } while(0);
 $35 = ($36|0)==(0|0);
 if ($35) {
  STACKTOP = sp;return;
 }
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 16|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$0>>2]|0;
 $41 = ((($40)) + 48|0);
 $42 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_vii[$42 & 1023]($1,$0);
 FUNCTION_TABLE_vii[$39 & 1023]($36,$1);
 $43 = HEAP32[$0>>2]|0;
 $44 = ((($43)) + 164|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_viii[$45 & 1023]($0,$46,1);
 STACKTOP = sp;return;
}
function __ZN4View10addSubviewEPS_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 136|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 28|0);
 $6 = ((($0)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$5>>2]|0;
 $9 = (($7) - ($8))|0;
 $10 = $9 >> 2;
 FUNCTION_TABLE_viii[$4 & 1023]($0,$1,$10);
 return;
}
function __ZN4View13insertSubviewEPS_i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$028$lcssa = 0, $$028$ph = 0, $$029 = 0, $$031 = 0, $$1 = 0, $$2 = 0, $$233 = 0, $$byval_copy = 0, $$pre = 0, $$sink = 0, $$sink34 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = ($2|0)>(0);
 L1: do {
  if ($5) {
   $6 = ((($0)) + 28|0);
   $$pre = HEAP32[$6>>2]|0;
   $$sink = $2;$$sink34 = $6;$11 = $$pre;
   while(1) {
    $7 = (($$sink) + -1)|0;
    $8 = ((($$sink34)) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (($9) - ($11))|0;
    $12 = $10 >> 2;
    $13 = ($12>>>0)>($7>>>0);
    if (!($13)) {
     break;
    }
    $14 = $11;
    $15 = (($14) + ($7<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 28|0);
    $18 = ((($16)) + 32|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = HEAP32[$17>>2]|0;
    $21 = (($19) - ($20))|0;
    $22 = $21 >> 2;
    $23 = ($22|0)==(0);
    if ($23) {
     $$1 = $16;
     break L1;
    } else {
     $$sink = $22;$$sink34 = $17;$11 = $20;
    }
   }
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv($$sink34);
   // unreachable;
  } else {
   $$1 = $0;
  }
 } while(0);
 $24 = ((($$1)) + 84|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if (!($26)) {
  __ZN6Object6retainEv($25);
 }
 $27 = ((($1)) + 80|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==($$1|0);
 do {
  if ($29) {
   label = 13;
  } else {
   $30 = ($28|0)==(0|0);
   if (!($30)) {
    __THREW__ = 0;
    invoke_vi(525,($28|0));
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     label = 20;
     break;
    }
   }
   HEAP32[$27>>2] = $$1;
   $33 = ($$1|0)==(0|0);
   if ($33) {
    label = 13;
   } else {
    __THREW__ = 0;
    invoke_vi(526,($$1|0));
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     label = 20;
    } else {
     label = 13;
    }
   }
  }
 } while(0);
 L17: do {
  if ((label|0) == 13) {
   $36 = HEAP32[$24>>2]|0;
   $37 = ($36|0)==($1|0);
   if ($37) {
    $$028$ph = $1;
   } else {
    $38 = ($36|0)==(0|0);
    if (!($38)) {
     __THREW__ = 0;
     invoke_vi(525,($36|0));
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if ($40) {
      label = 20;
      break;
     }
    }
    HEAP32[$24>>2] = $1;
    $41 = ($1|0)==(0|0);
    if ($41) {
     $$028$ph = 0;
    } else {
     __THREW__ = 0;
     invoke_vi(526,($1|0));
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 20;
      break;
     } else {
      $$028$ph = $1;
     }
    }
   }
   $44 = ((($$028$ph)) + 28|0);
   $45 = ((($$028$ph)) + 32|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = HEAP32[$44>>2]|0;
   $48 = (($46) - ($47))|0;
   $49 = $48 >> 2;
   $50 = ($49|0)==(0);
   if ($50) {
    $$028$lcssa = $$028$ph;
   } else {
    $52 = $49;$54 = $47;
    while(1) {
     $51 = (($52) + -1)|0;
     $53 = $54;
     $55 = (($53) + ($51<<2)|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ((($56)) + 28|0);
     $58 = ((($56)) + 32|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = HEAP32[$57>>2]|0;
     $61 = (($59) - ($60))|0;
     $62 = $61 >> 2;
     $63 = ($62|0)==(0);
     if ($63) {
      $$028$lcssa = $56;
      break;
     } else {
      $52 = $62;$54 = $60;
     }
    }
   }
   $68 = ((($$028$lcssa)) + 84|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69|0)==(0|0);
   L30: do {
    if ($70) {
     if (!($26)) {
      HEAP32[$68>>2] = $25;
      __THREW__ = 0;
      invoke_vi(526,($25|0));
      $72 = __THREW__; __THREW__ = 0;
      $73 = $72&1;
      if ($73) {
       break;
      }
      $74 = ((($25)) + 80|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = ($75|0)==($$028$lcssa|0);
      if (!($76)) {
       $77 = ($75|0)==(0|0);
       if (!($77)) {
        __THREW__ = 0;
        invoke_vi(525,($75|0));
        $78 = __THREW__; __THREW__ = 0;
        $79 = $78&1;
        if ($79) {
         break;
        }
       }
       HEAP32[$74>>2] = $$028$lcssa;
       __THREW__ = 0;
       invoke_vi(526,($$028$lcssa|0));
       $80 = __THREW__; __THREW__ = 0;
       $81 = $80&1;
       if ($81) {
        break;
       }
      }
     }
     $82 = ((($0)) + 28|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = (($83) + ($2<<2)|0);
     $85 = $84;
     HEAP32[$3>>2] = $85;
     HEAP32[$4>>2] = $1;
     $86 = ($1|0)==(0|0);
     if ($86) {
      label = 32;
     } else {
      __THREW__ = 0;
      invoke_vi(526,($1|0));
      $87 = __THREW__; __THREW__ = 0;
      $88 = $87&1;
      if ($88) {
       $111 = ___cxa_find_matching_catch_2()|0;
       $112 = tempRet0;
       $$029 = $112;$$031 = $111;
      } else {
       label = 32;
      }
     }
     do {
      if ((label|0) == 32) {
       __THREW__ = 0;
       ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
       (invoke_iiii(768,($82|0),($$byval_copy|0),($4|0))|0);
       $89 = __THREW__; __THREW__ = 0;
       $90 = $89&1;
       if ($90) {
        $113 = ___cxa_find_matching_catch_2()|0;
        $114 = tempRet0;
        $115 = HEAP32[$4>>2]|0;
        $116 = ($115|0)==(0|0);
        if ($116) {
         $$029 = $114;$$031 = $113;
         break;
        }
        __THREW__ = 0;
        invoke_vi(525,($115|0));
        $117 = __THREW__; __THREW__ = 0;
        $118 = $117&1;
        if (!($118)) {
         $$029 = $114;$$031 = $113;
         break;
        }
        $119 = ___cxa_find_matching_catch_3(0|0)|0;
        $120 = tempRet0;
        ___clang_call_terminate($119);
        // unreachable;
       }
       $91 = HEAP32[$4>>2]|0;
       $92 = ($91|0)==(0|0);
       if (!($92)) {
        __THREW__ = 0;
        invoke_vi(525,($91|0));
        $93 = __THREW__; __THREW__ = 0;
        $94 = $93&1;
        if ($94) {
         $95 = ___cxa_find_matching_catch_3(0|0)|0;
         $96 = tempRet0;
         ___clang_call_terminate($95);
         // unreachable;
        }
       }
       $97 = ((($1)) + 24|0);
       HEAP32[$97>>2] = $0;
       $98 = ((($0)) + 20|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = ($99|0)==(0|0);
       if (!($100)) {
        $101 = HEAP32[$1>>2]|0;
        $102 = ((($101)) + 108|0);
        $103 = HEAP32[$102>>2]|0;
        __THREW__ = 0;
        invoke_vii($103|0,($1|0),($99|0));
        $104 = __THREW__; __THREW__ = 0;
        $105 = $104&1;
        if ($105) {
         break L30;
        }
        $106 = HEAP32[$1>>2]|0;
        $107 = ((($106)) + 68|0);
        $108 = HEAP32[$107>>2]|0;
        __THREW__ = 0;
        invoke_vi($108|0,($1|0));
        $109 = __THREW__; __THREW__ = 0;
        $110 = $109&1;
        if ($110) {
         break L30;
        }
       }
       if ($26) {
        STACKTOP = sp;return;
       }
       __THREW__ = 0;
       invoke_vi(525,($25|0));
       $121 = __THREW__; __THREW__ = 0;
       $122 = $121&1;
       if ($122) {
        $123 = ___cxa_find_matching_catch_3(0|0)|0;
        $124 = tempRet0;
        ___clang_call_terminate($123);
        // unreachable;
       } else {
        STACKTOP = sp;return;
       }
      }
     } while(0);
     $$2 = $$029;$$233 = $$031;
     break L17;
    } else {
     __THREW__ = 0;
     invoke_viiii(561,(23909|0),(23289|0),658,(23931|0));
     $71 = __THREW__; __THREW__ = 0;
    }
   } while(0);
   $66 = ___cxa_find_matching_catch_2()|0;
   $67 = tempRet0;
   $$2 = $67;$$233 = $66;
  }
 } while(0);
 if ((label|0) == 20) {
  $64 = ___cxa_find_matching_catch_2()|0;
  $65 = tempRet0;
  $$2 = $65;$$233 = $64;
 }
 if ($26) {
  ___resumeException($$233|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(525,($25|0));
 $125 = __THREW__; __THREW__ = 0;
 $126 = $125&1;
 if ($126) {
  $127 = ___cxa_find_matching_catch_3(0|0)|0;
  $128 = tempRet0;
  ___clang_call_terminate($127);
  // unreachable;
 } else {
  ___resumeException($$233|0);
  // unreachable;
 }
}
function __ZN4View13removeSubviewEPS_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$0$lcssa$i$i10$i = 0, $$078$i$i$i = 0, $$09$i$i$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  ___assert_fail((23834|0),(23289|0),685,(23859|0));
  // unreachable;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 148|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iii[$7 & 1023]($0,$1)|0);
 $9 = ($8|0)>(-1);
 if (!($9)) {
  ___assert_fail((23873|0),(23289|0),687,(23859|0));
  // unreachable;
 }
 $10 = ($8|0)==(0);
 if ($10) {
  $18 = ((($1)) + 80|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==($0|0);
  if (!($20)) {
   ___assert_fail((23878|0),(23289|0),690,(23859|0));
   // unreachable;
  }
 }
 $11 = ((($1)) + 28|0);
 $12 = ((($1)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$11>>2]|0;
 $15 = (($13) - ($14))|0;
 $16 = $15 >> 2;
 $17 = ($16|0)==(0);
 if ($17) {
  $$0$lcssa = $1;
 } else {
  $22 = $16;$24 = $14;
  while(1) {
   $21 = (($22) + -1)|0;
   $23 = $24;
   $25 = (($23) + ($21<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 28|0);
   $28 = ((($26)) + 32|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP32[$27>>2]|0;
   $31 = (($29) - ($30))|0;
   $32 = $31 >> 2;
   $33 = ($32|0)==(0);
   if ($33) {
    $$0$lcssa = $26;
    break;
   } else {
    $22 = $32;$24 = $30;
   }
  }
 }
 $34 = ((($1)) + 80|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0|0);
 $$pre = ((($$0$lcssa)) + 84|0);
 if (!($36)) {
  $37 = HEAP32[$$pre>>2]|0;
  $38 = ((($35)) + 84|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==($37|0);
  if (!($40)) {
   $41 = ($39|0)==(0|0);
   if (!($41)) {
    __ZN6Object7releaseEv($39);
   }
   HEAP32[$38>>2] = $37;
   $42 = ($37|0)==(0|0);
   if (!($42)) {
    __ZN6Object6retainEv($37);
   }
  }
 }
 $43 = HEAP32[$$pre>>2]|0;
 $44 = ($43|0)==(0|0);
 if (!($44)) {
  $45 = HEAP32[$34>>2]|0;
  $46 = ((($43)) + 80|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==($45|0);
  if (!($48)) {
   $49 = ($47|0)==(0|0);
   if (!($49)) {
    __ZN6Object7releaseEv($47);
   }
   HEAP32[$46>>2] = $45;
   $50 = ($45|0)==(0|0);
   if (!($50)) {
    __ZN6Object6retainEv($45);
   }
  }
 }
 $51 = ((($0)) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)==(0|0);
 if (!($53)) {
  $54 = HEAP32[$1>>2]|0;
  $55 = ((($54)) + 112|0);
  $56 = HEAP32[$55>>2]|0;
  FUNCTION_TABLE_vi[$56 & 1023]($1);
 }
 $57 = ((($0)) + 28|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($58) + ($8<<2)|0);
 $60 = ((($59)) + 4|0);
 $61 = ((($0)) + 32|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($60|0)==($62|0);
 if ($63) {
  $$0$lcssa$i$i10$i = $59;$83 = $60;
 } else {
  $$078$i$i$i = $60;$$09$i$i$i = $59;
  while(1) {
   $64 = HEAP32[$$078$i$i$i>>2]|0;
   $65 = HEAP32[$$09$i$i$i>>2]|0;
   $66 = ($65|0)==($64|0);
   if (!($66)) {
    $67 = ($65|0)==(0|0);
    if (!($67)) {
     __ZN6Object7releaseEv($65);
    }
    HEAP32[$$09$i$i$i>>2] = $64;
    $68 = ($64|0)==(0|0);
    if (!($68)) {
     __ZN6Object6retainEv($64);
    }
   }
   $69 = ((($$078$i$i$i)) + 4|0);
   $70 = ((($$09$i$i$i)) + 4|0);
   $71 = ($69|0)==($62|0);
   if ($71) {
    break;
   } else {
    $$078$i$i$i = $69;$$09$i$i$i = $70;
   }
  }
  $$pre$i = HEAP32[$61>>2]|0;
  $72 = ($$pre$i|0)==($70|0);
  if ($72) {
   return;
  } else {
   $$0$lcssa$i$i10$i = $70;$83 = $$pre$i;
  }
 }
 $74 = $83;
 while(1) {
  $73 = ((($74)) + -4|0);
  HEAP32[$61>>2] = $73;
  $75 = HEAP32[$73>>2]|0;
  $76 = ($75|0)==(0|0);
  if ($76) {
   $78 = $73;
  } else {
   __THREW__ = 0;
   invoke_vi(525,($75|0));
   $79 = __THREW__; __THREW__ = 0;
   $80 = $79&1;
   if ($80) {
    label = 37;
    break;
   }
   $$pre$i$i$i = HEAP32[$61>>2]|0;
   $78 = $$pre$i$i$i;
  }
  $77 = ($78|0)==($$0$lcssa$i$i10$i|0);
  if ($77) {
   label = 38;
   break;
  } else {
   $74 = $78;
  }
 }
 if ((label|0) == 37) {
  $81 = ___cxa_find_matching_catch_3(0|0)|0;
  $82 = tempRet0;
  ___clang_call_terminate($81);
  // unreachable;
 }
 else if ((label|0) == 38) {
  return;
 }
}
function __ZN4View16removeFromParentEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 140|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vii[$6 & 1023]($2,$0);
 return;
}
function __ZN4View14indexOfSubviewEPS_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0821 = 0, $$sroa$012$0$$sroa$012$0$1322 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  $12 = -1;
  return ($12|0);
 } else {
  $$0821 = 0;$$sroa$012$0$$sroa$012$0$1322 = $3;
 }
 while(1) {
  $7 = HEAP32[$$sroa$012$0$$sroa$012$0$1322>>2]|0;
  $8 = ($7|0)==($1|0);
  if ($8) {
   $12 = $$0821;
   label = 4;
   break;
  }
  $9 = (($$0821) + 1)|0;
  $10 = ((($$sroa$012$0$$sroa$012$0$1322)) + 4|0);
  $11 = ($10|0)==($5|0);
  if ($11) {
   $12 = -1;
   label = 4;
   break;
  } else {
   $$0821 = $9;$$sroa$012$0$$sroa$012$0$1322 = $10;
  }
 }
 if ((label|0) == 4) {
  return ($12|0);
 }
 return (0)|0;
}
function __ZN4View30removeSubviewsNotInVisibleAreaEv($0) {
 $0 = $0|0;
 var $$022 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 28|0);
 $2 = ((($0)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  return;
 }
 $6 = ((($0)) + 208|0);
 $7 = ((($0)) + 119|0);
 $$022 = 0;$9 = $4;
 while(1) {
  $8 = $9;
  $10 = (($8) + ($$022<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   __ZN6Object6retainEv($11);
  }
  $13 = ((($11)) + 107|0);
  __THREW__ = 0;
  $14 = (+invoke_di(615,($13|0)));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   label = 11;
   break;
  }
  $17 = +HEAPF32[$6>>2];
  $18 = $14 < $17;
  if ($18) {
   label = 10;
  } else {
   __THREW__ = 0;
   $19 = (+invoke_di(613,($13|0)));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    label = 11;
    break;
   }
   HEAP8[tempDoublePtr>>0]=HEAP8[$7>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$7+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$7+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$7+3>>0];$22 = +HEAPF32[tempDoublePtr>>2];
   $23 = +HEAPF32[$6>>2];
   $24 = $22 + $23;
   $25 = !($19 >= $24);
   if ($25) {
    $$1 = $$022;
   } else {
    label = 10;
   }
  }
  if ((label|0) == 10) {
   label = 0;
   $26 = (($$022) + -1)|0;
   $27 = HEAP32[$0>>2]|0;
   $28 = ((($27)) + 140|0);
   $29 = HEAP32[$28>>2]|0;
   __THREW__ = 0;
   invoke_vii($29|0,($0|0),($11|0));
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    label = 11;
    break;
   } else {
    $$1 = $26;
   }
  }
  if (!($12)) {
   __THREW__ = 0;
   invoke_vi(525,($11|0));
   $38 = __THREW__; __THREW__ = 0;
   $39 = $38&1;
   if ($39) {
    label = 17;
    break;
   }
  }
  $42 = (($$1) + 1)|0;
  $43 = HEAP32[$2>>2]|0;
  $44 = HEAP32[$1>>2]|0;
  $45 = (($43) - ($44))|0;
  $46 = $45 >> 2;
  $47 = ($42>>>0)<($46>>>0);
  if ($47) {
   $$022 = $42;$9 = $44;
  } else {
   label = 3;
   break;
  }
 }
 if ((label|0) == 3) {
  return;
 }
 else if ((label|0) == 11) {
  $32 = ___cxa_find_matching_catch_2()|0;
  $33 = tempRet0;
  if ($12) {
   ___resumeException($32|0);
   // unreachable;
  }
  __THREW__ = 0;
  invoke_vi(525,($11|0));
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if ($35) {
   $36 = ___cxa_find_matching_catch_3(0|0)|0;
   $37 = tempRet0;
   ___clang_call_terminate($36);
   // unreachable;
  } else {
   ___resumeException($32|0);
   // unreachable;
  }
 }
 else if ((label|0) == 17) {
  $40 = ___cxa_find_matching_catch_3(0|0)|0;
  $41 = tempRet0;
  ___clang_call_terminate($40);
  // unreachable;
 }
}
function __ZN4View12findViewByIdERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02026$i115 = 0, $$02026$i37111 = 0, $$02125$i116 = 0, $$02125$i38112 = 0, $$027 = 0, $$027$i114 = 0, $$027$i36110 = 0, $$083 = 0, $$1 = 0, $$431 = 0, $$pre = 0, $$pre96 = 0, $$pre97 = 0, $$pre98 = 0, $$sroa$051$077 = 0, $$sroa$062$082 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $cond2 = 0, $phitmp$i = 0, $phitmp$i35 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $4&255;
 $9 = $5 ? $7 : $8;
 $10 = ((($2)) + 11|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)<(0);
 $13 = ((($0)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $11&255;
 $16 = $12 ? $14 : $15;
 $17 = ($9|0)==($16|0);
 L1: do {
  if ($17) {
   $18 = HEAP32[$1>>2]|0;
   $19 = $5 ? $18 : $1;
   $20 = HEAP32[$2>>2]|0;
   $21 = $12 ? $20 : $2;
   $22 = ($9|0)==(0);
   if ($5) {
    if ($22) {
     $$431 = $0;
     return ($$431|0);
    }
    $33 = (_memcmp($19,$21,$9)|0);
    $phitmp$i = ($33|0)==(0);
    if ($phitmp$i) {
     $$431 = $0;
    } else {
     break;
    }
    return ($$431|0);
   }
   if ($22) {
    $$431 = $0;
    return ($$431|0);
   }
   $23 = $18;
   $24 = $23&255;
   $25 = HEAP8[$21>>0]|0;
   $26 = ($24<<24>>24)==($25<<24>>24);
   if ($26) {
    $$02026$i115 = $1;$$02125$i116 = $8;$$027$i114 = $21;
    while(1) {
     $27 = (($$02125$i116) + -1)|0;
     $28 = ((($$02026$i115)) + 1|0);
     $29 = ($27|0)==(0);
     if ($29) {
      $$431 = $0;
      break;
     }
     $30 = ((($$027$i114)) + 1|0);
     $$pre = HEAP8[$28>>0]|0;
     $31 = HEAP8[$30>>0]|0;
     $32 = ($$pre<<24>>24)==($31<<24>>24);
     if ($32) {
      $$02026$i115 = $28;$$02125$i116 = $27;$$027$i114 = $30;
     } else {
      break L1;
     }
    }
    return ($$431|0);
   }
  }
 } while(0);
 $34 = ((($0)) + 28|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($0)) + 32|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35|0)==($37|0);
 if ($38) {
  $$431 = 0;
  return ($$431|0);
 }
 $$083 = 0;$$sroa$062$082 = $35;
 while(1) {
  $41 = HEAP32[$$sroa$062$082>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   __ZN6Object6retainEv($41);
  }
  $43 = ((($41)) + 8|0);
  $44 = ((($43)) + 11|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = ($45<<24>>24)<(0);
  $47 = ((($41)) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $45&255;
  $50 = $46 ? $48 : $49;
  $51 = HEAP8[$3>>0]|0;
  $52 = ($51<<24>>24)<(0);
  $53 = HEAP32[$6>>2]|0;
  $54 = $51&255;
  $55 = $52 ? $53 : $54;
  $56 = ($50|0)==($55|0);
  L26: do {
   if ($56) {
    $57 = HEAP32[$43>>2]|0;
    $58 = $46 ? $57 : $43;
    $59 = HEAP32[$1>>2]|0;
    $60 = $52 ? $59 : $1;
    $61 = ($50|0)==(0);
    L28: do {
     if ($46) {
      if (!($61)) {
       $72 = (_memcmp($58,$60,$50)|0);
       $phitmp$i35 = ($72|0)==(0);
       if (!($phitmp$i35)) {
        $$027 = 0;$$1 = $$083;
        break L26;
       }
      }
     } else {
      if (!($61)) {
       $62 = $57;
       $63 = $62&255;
       $64 = HEAP8[$60>>0]|0;
       $65 = ($63<<24>>24)==($64<<24>>24);
       if ($65) {
        $$02026$i37111 = $43;$$02125$i38112 = $49;$$027$i36110 = $60;
       } else {
        $$027 = 0;$$1 = $$083;
        break L26;
       }
       while(1) {
        $66 = (($$02125$i38112) + -1)|0;
        $67 = ((($$02026$i37111)) + 1|0);
        $68 = ($66|0)==(0);
        if ($68) {
         break L28;
        }
        $69 = ((($$027$i36110)) + 1|0);
        $$pre96 = HEAP8[$67>>0]|0;
        $70 = HEAP8[$69>>0]|0;
        $71 = ($$pre96<<24>>24)==($70<<24>>24);
        if ($71) {
         $$02026$i37111 = $67;$$02125$i38112 = $66;$$027$i36110 = $69;
        } else {
         $$027 = 0;$$1 = $$083;
         break L26;
        }
       }
      }
     }
    } while(0);
    $$027 = 1;$$1 = $41;
   } else {
    $$027 = 0;$$1 = $$083;
   }
  } while(0);
  if (!($42)) {
   __THREW__ = 0;
   invoke_vi(525,($41|0));
   $73 = __THREW__; __THREW__ = 0;
   $74 = $73&1;
   if ($74) {
    label = 25;
    break;
   }
  }
  $cond2 = ($$027|0)==(0);
  $40 = ((($$sroa$062$082)) + 4|0);
  if (!($cond2)) {
   $$431 = $$1;
   label = 38;
   break;
  }
  $39 = ($40|0)==($37|0);
  if ($39) {
   label = 27;
   break;
  } else {
   $$083 = $$1;$$sroa$062$082 = $40;
  }
 }
 if ((label|0) == 25) {
  $75 = ___cxa_find_matching_catch_3(0|0)|0;
  $76 = tempRet0;
  ___clang_call_terminate($75);
  // unreachable;
 }
 else if ((label|0) == 27) {
  $$pre97 = HEAP32[$34>>2]|0;
  $$pre98 = HEAP32[$36>>2]|0;
  $77 = ($$pre97|0)==($$pre98|0);
  if ($77) {
   $$431 = 0;
   return ($$431|0);
  } else {
   $$sroa$051$077 = $$pre97;
  }
  while(1) {
   $80 = HEAP32[$$sroa$051$077>>2]|0;
   $81 = ($80|0)==(0|0);
   if (!($81)) {
    __ZN6Object6retainEv($80);
   }
   $82 = HEAP32[$80>>2]|0;
   $83 = ((($82)) + 156|0);
   $84 = HEAP32[$83>>2]|0;
   __THREW__ = 0;
   $85 = (invoke_iii($84|0,($80|0),($1|0))|0);
   $86 = __THREW__; __THREW__ = 0;
   $87 = $86&1;
   if ($87) {
    label = 35;
    break;
   }
   __THREW__ = 0;
   invoke_vi(525,($80|0));
   $88 = __THREW__; __THREW__ = 0;
   $89 = $88&1;
   if ($89) {
    label = 33;
    break;
   }
   $92 = ($85|0)==(0|0);
   $79 = ((($$sroa$051$077)) + 4|0);
   if (!($92)) {
    $$431 = $85;
    label = 38;
    break;
   }
   $78 = ($79|0)==($$pre98|0);
   if ($78) {
    $$431 = 0;
    label = 38;
    break;
   } else {
    $$sroa$051$077 = $79;
   }
  }
  if ((label|0) == 33) {
   $90 = ___cxa_find_matching_catch_3(0|0)|0;
   $91 = tempRet0;
   ___clang_call_terminate($90);
   // unreachable;
  }
  else if ((label|0) == 35) {
   $93 = ___cxa_find_matching_catch_2()|0;
   $94 = tempRet0;
   __THREW__ = 0;
   invoke_vi(525,($80|0));
   $95 = __THREW__; __THREW__ = 0;
   $96 = $95&1;
   if ($96) {
    $97 = ___cxa_find_matching_catch_3(0|0)|0;
    $98 = tempRet0;
    ___clang_call_terminate($97);
    // unreachable;
   } else {
    ___resumeException($93|0);
    // unreachable;
   }
  }
  else if ((label|0) == 38) {
   return ($$431|0);
  }
 }
 else if ((label|0) == 38) {
  return ($$431|0);
 }
 return (0)|0;
}
function __ZN4View11addRenderOpEP8RenderOp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 164|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viii[$4 & 1023]($0,$1,0);
 return;
}
function __ZN4View11addRenderOpEP8RenderOpb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre$phiZ2D = 0, $$sink = 0, $$sroa$0$0$$sroa_idx = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body20$index2Z2D = 0, $eh$lpad$body20$indexZ2D = 0, $eh$lpad$body21$index7Z2D = 0, $eh$lpad$body21$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ($2) {
  $3 = ((($0)) + 92|0);
  $4 = HEAP32[$3>>2]|0;
  $$sink = $4;
 } else {
  $5 = ((($0)) + 88|0);
  $$sink = $5;
 }
 $6 = ($1|0)==(0|0);
 if (!($6)) {
  __ZN6Object6retainEv($1);
 }
 __THREW__ = 0;
 $7 = (invoke_ii(527,12)|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $28 = ___cxa_find_matching_catch_2()|0;
   $29 = tempRet0;
   if ($6) {
    $eh$lpad$body21$index7Z2D = $29;$eh$lpad$body21$indexZ2D = $28;
    ___resumeException($eh$lpad$body21$indexZ2D|0);
    // unreachable;
   } else {
    $$pre$phiZ2D = $1;$eh$lpad$body20$index2Z2D = $29;$eh$lpad$body20$indexZ2D = $28;
    break;
   }
  } else {
   HEAP32[$7>>2] = 0;
   $10 = ((($7)) + 8|0);
   HEAP32[$10>>2] = $1;
   if (!($6)) {
    __THREW__ = 0;
    invoke_vi(526,($1|0));
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if ($12) {
     $13 = ___cxa_find_matching_catch_2()|0;
     $14 = tempRet0;
     __ZdlPv($7);
     $$pre$phiZ2D = $1;$eh$lpad$body20$index2Z2D = $14;$eh$lpad$body20$indexZ2D = $13;
     break;
    }
   }
   $15 = HEAP32[$$sink>>2]|0;
   $16 = ((($15)) + 4|0);
   HEAP32[$16>>2] = $7;
   HEAP32[$7>>2] = $15;
   HEAP32[$$sink>>2] = $7;
   $17 = ((($7)) + 4|0);
   HEAP32[$17>>2] = $$sink;
   $18 = ((($0)) + 96|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + 1)|0;
   HEAP32[$18>>2] = $20;
   $$sroa$0$0$$sroa_idx = ((($1)) + 32|0);
   HEAP32[$$sroa$0$0$$sroa_idx>>2] = $7;
   if (!($6)) {
    __THREW__ = 0;
    invoke_vi(525,($1|0));
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     $23 = ___cxa_find_matching_catch_3(0|0)|0;
     $24 = tempRet0;
     ___clang_call_terminate($23);
     // unreachable;
    }
   }
   $25 = ((($0)) + 100|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0|0);
   if ($27) {
    return;
   }
   __ZN7Surface11addRenderOpEP8RenderOp($26,$1);
   return;
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(525,($$pre$phiZ2D|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $32 = ___cxa_find_matching_catch_3(0|0)|0;
  $33 = tempRet0;
  ___clang_call_terminate($32);
  // unreachable;
 } else {
  $eh$lpad$body21$index7Z2D = $eh$lpad$body20$index2Z2D;$eh$lpad$body21$indexZ2D = $eh$lpad$body20$indexZ2D;
  ___resumeException($eh$lpad$body21$indexZ2D|0);
  // unreachable;
 }
}
function __ZN4View14removeRenderOpEP8RenderOp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  __ZN7Surface14removeRenderOpEP8RenderOp($3,$1);
 }
 $5 = ((($1)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$6>>2]|0;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = HEAP32[$7>>2]|0;
 HEAP32[$11>>2] = $9;
 $12 = ((($0)) + 96|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + -1)|0;
 HEAP32[$12>>2] = $14;
 $15 = ((($6)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  __ZdlPv($6);
  return;
 }
 __THREW__ = 0;
 invoke_vi(525,($16|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch_3(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 } else {
  __ZdlPv($6);
  return;
 }
}
function __ZN4View13setTintColourEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 312|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if ($4) {
  return;
 }
 HEAP32[$2>>2] = $1;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 1023]($0);
 return;
}
function __ZN4View18setNeedsFullRedrawEv($0) {
 $0 = $0|0;
 var $$020 = 0, $$sroa$012$0$$sroa$012$0$$sroa$0$0$copyload$i19 = 0, $$sroa$012$0$$sroa$012$0$22 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 105|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  HEAP8[$4>>0] = 1;
  $7 = ((($0)) + 92|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($0)) + 88|0);
  $10 = $8;
  $11 = ($10|0)==($9|0);
  if (!($11)) {
   $$sroa$012$0$$sroa$012$0$$sroa$0$0$copyload$i19 = $10;$$sroa$012$0$$sroa$012$0$22 = $8;
   while(1) {
    $17 = $$sroa$012$0$$sroa$012$0$22;
    $18 = ((($17)) + 8|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($19)) + 57|0);
    HEAP8[$20>>0] = 1;
    $21 = ((($$sroa$012$0$$sroa$012$0$$sroa$0$0$copyload$i19)) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $22;
    $24 = ($23|0)==($9|0);
    if ($24) {
     break;
    } else {
     $$sroa$012$0$$sroa$012$0$$sroa$0$0$copyload$i19 = $23;$$sroa$012$0$$sroa$012$0$22 = $22;
    }
   }
  }
  $12 = ((($0)) + 28|0);
  $13 = ((($0)) + 32|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$12>>2]|0;
  $16 = ($14|0)==($15|0);
  if (!($16)) {
   $$020 = 0;$29 = $15;
   while(1) {
    $28 = $29;
    $30 = (($28) + ($$020<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = HEAP32[$31>>2]|0;
    $33 = ((($32)) + 176|0);
    $34 = HEAP32[$33>>2]|0;
    FUNCTION_TABLE_vi[$34 & 1023]($31);
    $35 = (($$020) + 1)|0;
    $36 = HEAP32[$13>>2]|0;
    $37 = HEAP32[$12>>2]|0;
    $38 = (($36) - ($37))|0;
    $39 = $38 >> 2;
    $40 = ($35>>>0)<($39>>>0);
    if ($40) {
     $$020 = $35;$29 = $37;
    } else {
     break;
    }
   }
  }
  $25 = ((($0)) + 24|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(0|0);
  if (!($27)) {
   $41 = ((($0)) + 72|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = ($42<<24>>24)==(0);
   if ($43) {
    $44 = HEAP32[$26>>2]|0;
    $45 = ((($44)) + 180|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($0)) + 107|0);
    FUNCTION_TABLE_vii[$46 & 1023]($26,$47);
   }
  }
 }
 $48 = HEAP32[$1>>2]|0;
 $49 = ((($48)) + 77|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = ($50<<24>>24)==(0);
 if (!($51)) {
  return;
 }
 $52 = HEAP32[$48>>2]|0;
 $53 = ((($52)) + 24|0);
 $54 = HEAP32[$53>>2]|0;
 FUNCTION_TABLE_vi[$54 & 1023]($48);
 return;
}
function __ZN4View14invalidateRectERK4RECT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$sroa$011$0$$sroa$011$0$$sroa$0$0$copyload$i18 = 0, $$sroa$011$0$$sroa$011$0$1220 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0;
 var $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = ((($5)) + 192|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  $10 = HEAP32[$0>>2]|0;
  $11 = ((($10)) + 176|0);
  $12 = HEAP32[$11>>2]|0;
  FUNCTION_TABLE_vi[$12 & 1023]($0);
  STACKTOP = sp;return;
 }
 $13 = ((($0)) + 105|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)==(0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 dest=$2; src=$1; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $16 = ((($0)) + 104|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  $19 = ((($0)) + 123|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$19>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$19+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$19+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$19+3>>0];$20 = +HEAPF32[tempDoublePtr>>2];
  $21 = +HEAPF32[$2>>2];
  $22 = $20 + $21;
  HEAPF32[$2>>2] = $22;
  $23 = ((($0)) + 127|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$23>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$23+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$23+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$23+3>>0];$24 = +HEAPF32[tempDoublePtr>>2];
  $25 = ((($2)) + 4|0);
  $26 = +HEAPF32[$25>>2];
  $27 = $24 + $26;
  HEAPF32[$25>>2] = $27;
 }
 $28 = ((($5)) + 16|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$2+12>>2]|0;
 __ZN6REGION7addRectE4RECT($28,$$byval_copy);
 $29 = ((($0)) + 92|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($0)) + 88|0);
 $32 = $30;
 $33 = ($32|0)==($31|0);
 if (!($33)) {
  $$sroa$011$0$$sroa$011$0$$sroa$0$0$copyload$i18 = $32;$$sroa$011$0$$sroa$011$0$1220 = $30;
  while(1) {
   $37 = $$sroa$011$0$$sroa$011$0$1220;
   $38 = ((($37)) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($39)) + 12|0);
   $41 = (__ZNK4RECT10intersectsERKS_($2,$40)|0);
   if ($41) {
    $42 = ((($39)) + 57|0);
    HEAP8[$42>>0] = 1;
   }
   $43 = ((($$sroa$011$0$$sroa$011$0$$sroa$0$0$copyload$i18)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44;
   $46 = ($45|0)==($31|0);
   if ($46) {
    break;
   } else {
    $$sroa$011$0$$sroa$011$0$$sroa$0$0$copyload$i18 = $45;$$sroa$011$0$$sroa$011$0$1220 = $44;
   }
  }
 }
 $34 = ((($0)) + 24|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0|0);
 if (!($36)) {
  $47 = ((($0)) + 72|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = ($48<<24>>24)==(0);
  if ($49) {
   dest=$3; src=$1; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $50 = ((($0)) + 107|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$50>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$50+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$50+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$50+3>>0];$51 = +HEAPF32[tempDoublePtr>>2];
   $52 = +HEAPF32[$3>>2];
   $53 = $51 + $52;
   HEAPF32[$3>>2] = $53;
   $54 = ((($0)) + 111|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$54>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$54+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$54+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$54+3>>0];$55 = +HEAPF32[tempDoublePtr>>2];
   $56 = ((($3)) + 4|0);
   $57 = +HEAPF32[$56>>2];
   $58 = $55 + $57;
   HEAPF32[$56>>2] = $58;
   $59 = HEAP32[$35>>2]|0;
   $60 = ((($59)) + 180|0);
   $61 = HEAP32[$60>>2]|0;
   FUNCTION_TABLE_vii[$61 & 1023]($35,$3);
  }
 }
 STACKTOP = sp;return;
}
function __ZN4View8setStateE8STATESET($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $2 = sp;
 $3 = ((($0)) + 44|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = HEAP16[$1>>1]|0;
 $6 = $5 & $4;
 $7 = $5 ^ -1;
 $8 = $4 & $7;
 $9 = ((($1)) + 2|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $8 | $10;
 $12 = ($6<<16>>16)==($11<<16>>16);
 if ($12) {
  STACKTOP = sp;return;
 }
 HEAP16[$3>>1] = $11;
 $13 = HEAP32[$0>>2]|0;
 $14 = ((($13)) + 188|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $11 ^ $6;
 HEAP16[$2>>1] = $16;
 $17 = ((($2)) + 2|0);
 HEAP16[$17>>1] = $11;
 ;HEAP16[$$byval_copy>>1]=HEAP16[$2>>1]|0;HEAP16[$$byval_copy+2>>1]=HEAP16[$2+2>>1]|0;
 FUNCTION_TABLE_vii[$15 & 1023]($0,$$byval_copy);
 $18 = HEAP32[$0>>2]|0;
 $19 = ((($18)) + 176|0);
 $20 = HEAP32[$19>>2]|0;
 FUNCTION_TABLE_vi[$20 & 1023]($0);
 STACKTOP = sp;return;
}
function __ZN4View14onStateChangedE8STATESET($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 128|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vi[$4 & 1023]($0);
 return;
}
function __ZN4View9isPressedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 44|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2 & 16;
 $4 = ($3<<16>>16)!=(0);
 return ($4|0);
}
function __ZN4View10setPressedEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $2 = sp;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 184|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP16[$2>>1] = 16;
 $6 = ((($2)) + 2|0);
 $7 = $1 ? 16 : 0;
 HEAP16[$6>>1] = $7;
 ;HEAP16[$$byval_copy>>1]=HEAP16[$2>>1]|0;HEAP16[$$byval_copy+2>>1]=HEAP16[$2+2>>1]|0;
 FUNCTION_TABLE_vii[$5 & 1023]($0,$$byval_copy);
 STACKTOP = sp;return;
}
function __ZN4View10setEnabledEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $2 = sp;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 184|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP16[$2>>1] = 1;
 $6 = ((($2)) + 2|0);
 $not$ = $1 ^ 1;
 $7 = $not$&1;
 HEAP16[$6>>1] = $7;
 ;HEAP16[$$byval_copy>>1]=HEAP16[$2>>1]|0;HEAP16[$$byval_copy+2>>1]=HEAP16[$2+2>>1]|0;
 FUNCTION_TABLE_vii[$5 & 1023]($0,$$byval_copy);
 STACKTOP = sp;return;
}
function __ZN4View11isTouchableEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $11 = 0;
  return ($11|0);
 }
 $4 = ((($0)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $11 = 0;
  return ($11|0);
 }
 $7 = ((($0)) + 44|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 & 1;
 $10 = ($9<<16>>16)==(0);
 $11 = $10;
 return ($11|0);
}
function __ZN4View7hitTestE6_POINTPS0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$031 = 0, $$031$in = 0, $$4 = 0, $$byval_copy = 0, $$sroa$0$0$copyload = 0.0, $$sroa$7$0$$sroa_idx18 = 0, $$sroa$7$0$$sroa_idx19 = 0, $$sroa$7$0$$sroa_idx21 = 0, $$sroa$7$0$copyload = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $3 = sp;
 $4 = ((($0)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $7 = ((($0)) + 107|0);
 $8 = (__Z13RECT_containsR4RECTR6_POINT($7,$1)|0);
 if (!($8)) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 HEAP8[tempDoublePtr>>0]=HEAP8[$1>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1+3>>0];$$sroa$0$0$copyload = +HEAPF32[tempDoublePtr>>2];
 $$sroa$7$0$$sroa_idx18 = ((($1)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$7$0$$sroa_idx18>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$7$0$$sroa_idx18+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$7$0$$sroa_idx18+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$7$0$$sroa_idx18+3>>0];$$sroa$7$0$copyload = +HEAPF32[tempDoublePtr>>2];
 HEAP8[tempDoublePtr>>0]=HEAP8[$7>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$7+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$7+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$7+3>>0];$9 = +HEAPF32[tempDoublePtr>>2];
 $10 = $$sroa$0$0$copyload - $9;
 $11 = ((($0)) + 111|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$11>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$11+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$11+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$11+3>>0];$12 = +HEAPF32[tempDoublePtr>>2];
 $13 = $$sroa$7$0$copyload - $12;
 $14 = ((($0)) + 28|0);
 $15 = ((($0)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$14>>2]|0;
 $18 = (($16) - ($17))|0;
 $19 = $18 >> 2;
 $$sroa$7$0$$sroa_idx19 = ((($3)) + 4|0);
 $$031$in = $19;
 while(1) {
  $$031 = (($$031$in) + -1)|0;
  $20 = ($$031$in|0)>(0);
  if (!($20)) {
   label = 8;
   break;
  }
  $21 = HEAP32[$15>>2]|0;
  $22 = HEAP32[$14>>2]|0;
  $23 = (($21) - ($22))|0;
  $24 = $23 >> 2;
  $25 = ($24>>>0)>($$031>>>0);
  if (!($25)) {
   label = 6;
   break;
  }
  $26 = $22;
  $27 = (($26) + ($$031<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 208|0);
  $31 = HEAP32[$30>>2]|0;
  HEAPF32[$3>>2] = $10;
  HEAPF32[$$sroa$7$0$$sroa_idx19>>2] = $13;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
  $32 = (FUNCTION_TABLE_iiii[$31 & 1023]($28,$$byval_copy,$2)|0);
  $33 = ($32|0)==(0|0);
  if ($33) {
   $$031$in = $$031;
  } else {
   $$4 = $32;
   label = 10;
   break;
  }
 }
 if ((label|0) == 6) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv($14);
  // unreachable;
 }
 else if ((label|0) == 8) {
  $34 = ($2|0)==(0|0);
  if ($34) {
   $$4 = $0;
   STACKTOP = sp;return ($$4|0);
  }
  HEAPF32[tempDoublePtr>>2]=$10;HEAP8[$2>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$2+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$2+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$2+3>>0]=HEAP8[tempDoublePtr+3>>0];
  $$sroa$7$0$$sroa_idx21 = ((($2)) + 4|0);
  HEAPF32[tempDoublePtr>>2]=$13;HEAP8[$$sroa$7$0$$sroa_idx21>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$$sroa$7$0$$sroa_idx21+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$$sroa$7$0$$sroa_idx21+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$$sroa$7$0$$sroa_idx21+3>>0]=HEAP8[tempDoublePtr+3>>0];
  $$4 = $0;
  STACKTOP = sp;return ($$4|0);
 }
 else if ((label|0) == 10) {
  STACKTOP = sp;return ($$4|0);
 }
 return (0)|0;
}
function __ZN4View18dispatchInputEventEiil6_POINT($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$011 = 0, $$016 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $tmpcast$byval_copy = 0, $tmpcast12$byval_copy = 0, $tmpcast13$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $tmpcast12$byval_copy = sp + 48|0;
 $tmpcast13$byval_copy = sp + 40|0;
 $tmpcast$byval_copy = sp + 32|0;
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 8|0;
 $8 = sp;
 $9 = ((($0)) + 44|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 & 1;
 $12 = ($11<<16>>16)==(0);
 if (!($12)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = ((($13)) + 208|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $4;
 $17 = $16;
 $18 = HEAPU8[$17>>0]|(HEAPU8[$17+1>>0]<<8)|(HEAPU8[$17+2>>0]<<16)|(HEAPU8[$17+3>>0]<<24);
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAPU8[$20>>0]|(HEAPU8[$20+1>>0]<<8)|(HEAPU8[$20+2>>0]<<16)|(HEAPU8[$20+3>>0]<<24);
 $22 = $6;
 $23 = $22;
 HEAP32[$23>>2] = $18;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $21;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$6>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$6+4>>2]|0;
 $26 = (FUNCTION_TABLE_iiii[$15 & 1023]($0,$tmpcast$byval_copy,$5)|0);
 $27 = ($26|0)==(0|0);
 L4: do {
  if ($27) {
   label = 6;
  } else {
   $28 = ((($5)) + 4|0);
   $$016 = $26;
   while(1) {
    $29 = HEAP32[$$016>>2]|0;
    $30 = ((($29)) + 216|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $5;
    $33 = $32;
    $34 = HEAP32[$33>>2]|0;
    $35 = (($32) + 4)|0;
    $36 = $35;
    $37 = HEAP32[$36>>2]|0;
    $38 = $7;
    $39 = $38;
    HEAP32[$39>>2] = $34;
    $40 = (($38) + 4)|0;
    $41 = $40;
    HEAP32[$41>>2] = $37;
    ;HEAP32[$tmpcast13$byval_copy>>2]=HEAP32[$7>>2]|0;HEAP32[$tmpcast13$byval_copy+4>>2]=HEAP32[$7+4>>2]|0;
    $42 = (FUNCTION_TABLE_iiiii[$31 & 1023]($$016,$1,$2,$tmpcast13$byval_copy)|0);
    if ($42) {
     $$011 = $$016;
     break L4;
    }
    $43 = ((($$016)) + 107|0);
    HEAP8[tempDoublePtr>>0]=HEAP8[$43>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$43+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$43+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$43+3>>0];$44 = +HEAPF32[tempDoublePtr>>2];
    $45 = +HEAPF32[$5>>2];
    $46 = $44 + $45;
    HEAPF32[$5>>2] = $46;
    $47 = ((($$016)) + 111|0);
    HEAP8[tempDoublePtr>>0]=HEAP8[$47>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$47+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$47+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$47+3>>0];$48 = +HEAPF32[tempDoublePtr>>2];
    $49 = +HEAPF32[$28>>2];
    $50 = $48 + $49;
    HEAPF32[$28>>2] = $50;
    $51 = ((($$016)) + 24|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52|0)==(0|0);
    if ($53) {
     label = 6;
     break;
    } else {
     $$016 = $52;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $54 = HEAP32[$0>>2]|0;
  $55 = ((($54)) + 216|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $8;
  $58 = $57;
  HEAP32[$58>>2] = $18;
  $59 = (($57) + 4)|0;
  $60 = $59;
  HEAP32[$60>>2] = $21;
  ;HEAP32[$tmpcast12$byval_copy>>2]=HEAP32[$8>>2]|0;HEAP32[$tmpcast12$byval_copy+4>>2]=HEAP32[$8+4>>2]|0;
  $61 = (FUNCTION_TABLE_iiiii[$56 & 1023]($0,$1,$2,$tmpcast12$byval_copy)|0);
  $$ = $61 ? $0 : 0;
  $$011 = $$;
 }
 $$1 = $$011;
 STACKTOP = sp;return ($$1|0);
}
function __ZN4View12onTouchEventEii6_POINT($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0;
 var $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $tmpcast9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 24|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $tmpcast9 = sp;
 $7 = sp + 32|0;
 switch ($1|0) {
 case 0:  {
  $8 = ((($0)) + 231|0);
  $9 = $3;
  $10 = $9;
  $11 = HEAPU8[$10>>0]|(HEAPU8[$10+1>>0]<<8)|(HEAPU8[$10+2>>0]<<16)|(HEAPU8[$10+3>>0]<<24);
  $12 = (($9) + 4)|0;
  $13 = $12;
  $14 = HEAPU8[$13>>0]|(HEAPU8[$13+1>>0]<<8)|(HEAPU8[$13+2>>0]<<16)|(HEAPU8[$13+3>>0]<<24);
  $15 = $8;
  $16 = $15;
  HEAP8[$16>>0]=$11&255;HEAP8[$16+1>>0]=($11>>8)&255;HEAP8[$16+2>>0]=($11>>16)&255;HEAP8[$16+3>>0]=$11>>24;
  $17 = (($15) + 4)|0;
  $18 = $17;
  HEAP8[$18>>0]=$14&255;HEAP8[$18+1>>0]=($14>>8)&255;HEAP8[$18+2>>0]=($14>>16)&255;HEAP8[$18+3>>0]=$14>>24;
  $19 = ((($0)) + 230|0);
  HEAP8[$19>>0] = 0;
  $20 = ((($0)) + 256|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $23 = ((($21)) + 48|0);
   HEAP8[$23>>0] = 1;
  }
  break;
 }
 case 1:  {
  $24 = ((($0)) + 256|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)==(0|0);
  if (!($26)) {
   $27 = ((($3)) + 4|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$27>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$27+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$27+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$27+3>>0];$28 = +HEAPF32[tempDoublePtr>>2];
   $29 = ((($0)) + 235|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$29>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$29+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$29+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$29+3>>0];$30 = +HEAPF32[tempDoublePtr>>2];
   $31 = $28 - $30;
   $32 = HEAP32[$0>>2]|0;
   $33 = ((($32)) + 24|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($0)) + 204|0);
   $36 = +HEAPF32[$35>>2];
   $37 = ((($0)) + 208|0);
   $38 = +HEAPF32[$37>>2];
   $39 = $38 - $31;
   __Z10POINT_Makeff($7,$36,$39);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$7+4>>2]|0;
   FUNCTION_TABLE_vii[$34 & 1023]($0,$$byval_copy);
  }
  $40 = ((($0)) + 231|0);
  $41 = $3;
  $42 = $41;
  $43 = HEAPU8[$42>>0]|(HEAPU8[$42+1>>0]<<8)|(HEAPU8[$42+2>>0]<<16)|(HEAPU8[$42+3>>0]<<24);
  $44 = (($41) + 4)|0;
  $45 = $44;
  $46 = HEAPU8[$45>>0]|(HEAPU8[$45+1>>0]<<8)|(HEAPU8[$45+2>>0]<<16)|(HEAPU8[$45+3>>0]<<24);
  $47 = $40;
  $48 = $47;
  HEAP8[$48>>0]=$43&255;HEAP8[$48+1>>0]=($43>>8)&255;HEAP8[$48+2>>0]=($43>>16)&255;HEAP8[$48+3>>0]=$43>>24;
  $49 = (($47) + 4)|0;
  $50 = $49;
  HEAP8[$50>>0]=$46&255;HEAP8[$50+1>>0]=($46>>8)&255;HEAP8[$50+2>>0]=($46>>16)&255;HEAP8[$50+3>>0]=$46>>24;
  break;
 }
 case 4:  {
  $51 = ((($0)) + 230|0);
  HEAP8[$51>>0] = 1;
  break;
 }
 case 8:  {
  $52 = ((($0)) + 256|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)==(0|0);
  if (!($54)) {
   $55 = HEAP32[$53>>2]|0;
   $56 = ((($55)) + 20|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($0)) + 208|0);
   $59 = +HEAPF32[$58>>2];
   $60 = ((($3)) + 4|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$60>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$60+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$60+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$60+3>>0];$61 = +HEAPF32[tempDoublePtr>>2];
   $62 = -$61;
   $63 = ((($0)) + 200|0);
   $64 = +HEAPF32[$63>>2];
   $65 = ((($0)) + 119|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$65>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$65+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$65+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$65+3>>0];$66 = +HEAPF32[tempDoublePtr>>2];
   $67 = $64 - $66;
   FUNCTION_TABLE_vidddd[$57 & 1023]($53,$59,$62,0.0,$67);
   $68 = HEAP32[$0>>2]|0;
   $69 = ((($68)) + 176|0);
   $70 = HEAP32[$69>>2]|0;
   FUNCTION_TABLE_vi[$70 & 1023]($0);
  }
  break;
 }
 default: {
 }
 }
 $71 = ((($0)) + 296|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($72|0)==(0|0);
 if (!($73)) {
  $74 = $3;
  $75 = $74;
  $76 = HEAPU8[$75>>0]|(HEAPU8[$75+1>>0]<<8)|(HEAPU8[$75+2>>0]<<16)|(HEAPU8[$75+3>>0]<<24);
  $77 = (($74) + 4)|0;
  $78 = $77;
  $79 = HEAPU8[$78>>0]|(HEAPU8[$78+1>>0]<<8)|(HEAPU8[$78+2>>0]<<16)|(HEAPU8[$78+3>>0]<<24);
  $80 = $tmpcast9;
  $81 = $80;
  HEAP32[$81>>2] = $76;
  $82 = (($80) + 4)|0;
  $83 = $82;
  HEAP32[$83>>2] = $79;
  HEAP32[$4>>2] = $0;
  HEAP32[$5>>2] = $1;
  HEAP32[$6>>2] = $2;
  $84 = HEAP32[$72>>2]|0;
  $85 = ((($84)) + 24|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (FUNCTION_TABLE_iiiiii[$86 & 1023]($72,$4,$5,$6,$tmpcast9)|0);
  if ($87) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZN4View23getKeyboardInputHandlerEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN4View20becomeFirstResponderEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 1023]($2,$0)|0);
 $$0 = $7;
 return ($$0|0);
}
function __ZN4View16isFirstResponderEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($2)) + 80|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($0|0);
 $$0 = $6;
 return ($$0|0);
}
function __ZN4View20resignFirstResponderEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 228|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($0)|0);
 if (!($4)) {
  return;
 }
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 (FUNCTION_TABLE_iii[$9 & 1023]($6,0)|0);
 return;
}
function __ZN4View12animateAlphaEff($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = ((($0)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = HEAP32[$5>>2]|0;
  $8 = ((($7)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_vi[$9 & 1023]($5);
  $10 = HEAP32[$4>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   __ZN6Object7releaseEv($10);
   HEAP32[$4>>2] = 0;
  }
 }
 $12 = !($2 <= 0.0);
 if (!($12)) {
  $13 = ((($0)) + 308|0);
  HEAPF32[$13>>2] = $1;
  STACKTOP = sp;return;
 }
 $14 = ((($0)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = (__ZN6ObjectnwEj(80)|0);
 __THREW__ = 0;
 invoke_viid(769,($17|0),($0|0),(+$1));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $44 = ___cxa_find_matching_catch_2()|0;
  $45 = tempRet0;
  __ZdlPv($17);
  ___resumeException($44|0);
  // unreachable;
 }
 $20 = HEAP32[$4>>2]|0;
 $21 = ($20|0)==($17|0);
 if ($21) {
  $26 = $17;
 } else {
  $22 = ($20|0)==(0|0);
  if (!($22)) {
   __ZN6Object7releaseEv($20);
  }
  HEAP32[$4>>2] = $17;
  $23 = ($17|0)==(0|0);
  if ($23) {
   $26 = $17;
  } else {
   __ZN6Object6retainEv($17);
   $$pre = HEAP32[$4>>2]|0;
   $26 = $$pre;
  }
 }
 $24 = $0;
 $25 = ((($26)) + 16|0);
 $27 = ((($3)) + 16|0);
 HEAP32[$3>>2] = (8212);
 $28 = ((($3)) + 4|0);
 HEAP32[$28>>2] = $24;
 HEAP32[$27>>2] = $3;
 __ZNSt3__28functionIFvP9AnimationEE4swapERS4_($3,$25);
 $29 = HEAP32[$27>>2]|0;
 $30 = ($29|0)==($3|0);
 if ($30) {
  $31 = HEAP32[$29>>2]|0;
  $32 = ((($31)) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  FUNCTION_TABLE_vi[$33 & 1023]($29);
 } else {
  $34 = ($29|0)==(0|0);
  if (!($34)) {
   $35 = HEAP32[$29>>2]|0;
   $36 = ((($35)) + 20|0);
   $37 = HEAP32[$36>>2]|0;
   FUNCTION_TABLE_vi[$37 & 1023]($29);
  }
 }
 $38 = HEAP32[$4>>2]|0;
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = HEAP32[$14>>2]|0;
 $43 = (~~(($2)));
 FUNCTION_TABLE_viii[$41 & 1023]($38,$42,$43);
 STACKTOP = sp;return;
}
function __ZN4View16setAnimTranslateE6_POINT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[tempDoublePtr>>0]=HEAP8[$1>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1+3>>0];$2 = +HEAPF32[tempDoublePtr>>2];
 $3 = $2 == 0.0;
 $4 = ((($0)) + 304|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($3) {
  $7 = ((($1)) + 4|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$7>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$7+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$7+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$7+3>>0];$8 = +HEAPF32[tempDoublePtr>>2];
  $9 = $8 == 0.0;
  if ($9) {
   if ($6) {
    __ZdlPv($5);
    HEAP32[$4>>2] = 0;
   }
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  if ($6) {
   $18 = $5;
  } else {
   $10 = (__Znwj(128)|0);
   $11 = ((($10)) + 60|0);
   HEAPF32[$11>>2] = 1.0;
   $12 = ((($10)) + 40|0);
   HEAPF32[$12>>2] = 1.0;
   $13 = ((($10)) + 20|0);
   HEAPF32[$13>>2] = 1.0;
   HEAPF32[$10>>2] = 1.0;
   $14 = ((($10)) + 44|0);
   $15 = ((($10)) + 24|0);
   $16 = ((($10)) + 4|0);
   ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;HEAP32[$16+12>>2]=0|0;
   ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;HEAP32[$15+12>>2]=0|0;
   ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;HEAP32[$14+12>>2]=0|0;
   HEAP32[$4>>2] = $10;
   $18 = $10;
  }
  $17 = ((($18)) + 60|0);
  HEAPF32[$17>>2] = 1.0;
  $19 = ((($18)) + 40|0);
  HEAPF32[$19>>2] = 1.0;
  $20 = ((($18)) + 20|0);
  HEAPF32[$20>>2] = 1.0;
  HEAPF32[$18>>2] = 1.0;
  $21 = ((($18)) + 44|0);
  $22 = ((($18)) + 24|0);
  $23 = ((($18)) + 4|0);
  ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;HEAP32[$23+12>>2]=0|0;
  ;HEAP32[$22>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;HEAP32[$22+12>>2]=0|0;
  ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;HEAP32[$21+12>>2]=0|0;
  $24 = HEAP32[$4>>2]|0;
  HEAP8[tempDoublePtr>>0]=HEAP8[$1>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1+3>>0];$25 = +HEAPF32[tempDoublePtr>>2];
  $26 = ((($1)) + 4|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$26>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$26+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$26+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$26+3>>0];$27 = +HEAPF32[tempDoublePtr>>2];
  (__ZN7Matrix49translateEfff($24,$25,$27,0.0)|0);
 }
 $28 = ((($0)) + 104|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = ($29<<24>>24)==(0);
 if (!($30)) {
  $31 = HEAP32[$0>>2]|0;
  $32 = ((($31)) + 176|0);
  $33 = HEAP32[$32>>2]|0;
  FUNCTION_TABLE_vi[$33 & 1023]($0);
 }
 $34 = ((($0)) + 20|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 77|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = ($37<<24>>24)==(0);
 if (!($38)) {
  return;
 }
 $39 = HEAP32[$35>>2]|0;
 $40 = ((($39)) + 24|0);
 $41 = HEAP32[$40>>2]|0;
 FUNCTION_TABLE_vi[$41 & 1023]($35);
 return;
}
function __ZN4View16applyStyleValuesERKNSt3__26vectorINS0_4pairINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP10StyleValueEENS6_ISB_EEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $$sroa$010$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = ((($2)) + 12|0);
 $8 = ((($2)) + 11|0);
 $9 = ((($0)) + 24|0);
 $$sroa$010$015 = $3;
 while(1) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($2,$$sroa$010$015);
  $10 = ((($$sroa$010$015)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$7>>2] = $11;
  $12 = HEAP32[$0>>2]|0;
  $13 = ((($12)) + 248|0);
  $14 = HEAP32[$13>>2]|0;
  $$cast = $11;
  __THREW__ = 0;
  $15 = (invoke_iiii($14|0,($0|0),($2|0),($$cast|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   break;
  }
  if (!($15)) {
   $18 = HEAP32[$9>>2]|0;
   $19 = ($18|0)==(0|0);
   if (!($19)) {
    $20 = HEAP32[$18>>2]|0;
    $21 = ((($20)) + 252|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[$7>>2]|0;
    __THREW__ = 0;
    $24 = (invoke_iiiii($22|0,($18|0),($2|0),($23|0),($0|0))|0);
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if ($26) {
     break;
    }
    if (!($24)) {
     $27 = HEAP8[$8>>0]|0;
     $28 = ($27<<24>>24)<(0);
     $29 = HEAP32[$2>>2]|0;
     $30 = $28 ? $29 : $2;
     __THREW__ = 0;
     HEAP32[$vararg_buffer>>2] = $30;
     invoke_viii(545,(28952|0),(23672|0),($vararg_buffer|0));
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      break;
     }
    }
   }
  }
  $38 = HEAP8[$8>>0]|0;
  $39 = ($38<<24>>24)<(0);
  if ($39) {
   $40 = HEAP32[$2>>2]|0;
   __ZdlPv($40);
  }
  $41 = ((($$sroa$010$015)) + 16|0);
  $42 = ($41|0)==($5|0);
  if ($42) {
   label = 3;
   break;
  } else {
   $$sroa$010$015 = $41;
  }
 }
 if ((label|0) == 3) {
  STACKTOP = sp;return;
 }
 $33 = ___cxa_find_matching_catch_2()|0;
 $34 = tempRet0;
 $35 = HEAP8[$8>>0]|0;
 $36 = ($35<<24>>24)<(0);
 if (!($36)) {
  ___resumeException($33|0);
  // unreachable;
 }
 $37 = HEAP32[$2>>2]|0;
 __ZdlPv($37);
 ___resumeException($33|0);
 // unreachable;
}
function __ZN4View15applyStyleValueERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP10StyleValue($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$044 = 0, $$045 = 0, $$2 = 0, $$247 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$cast = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i56 = 0, $$pre$i58 = 0, $$pre100 = 0, $$pre101 = 0, $$pre102 = 0, $$pre103 = 0, $$pre104 = 0, $$pre105 = 0;
 var $$pre106 = 0, $$pre107 = 0, $$pre108 = 0, $$pre109 = 0, $$pre110 = 0, $$pre111 = 0, $$pre112 = 0, $$pre93 = 0, $$pre94 = 0, $$pre95 = 0, $$pre96 = 0, $$pre97 = 0, $$pre98 = 0, $$pre99 = 0, $$sroa$083$092 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $$byval_copy2 = sp + 192|0;
 $$byval_copy1 = sp + 176|0;
 $$byval_copy = sp + 160|0;
 $3 = sp + 144|0;
 $4 = sp + 128|0;
 $5 = sp + 112|0;
 $6 = sp + 96|0;
 $7 = sp + 80|0;
 $8 = sp + 64|0;
 $9 = sp + 48|0;
 $10 = sp + 32|0;
 $11 = sp + 16|0;
 $12 = sp;
 $13 = ((($1)) + 11|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)<(0);
 $16 = ((($1)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $14&255;
 $19 = $15 ? $17 : $18;
 $20 = ($19|0)==(2);
 do {
  if ($20) {
   __THREW__ = 0;
   $21 = (invoke_iiiiii(546,($1|0),0,-1,(23205|0),2)|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $24 = ___cxa_find_matching_catch_3(0|0)|0;
    $25 = tempRet0;
    ___clang_call_terminate($24);
    // unreachable;
   }
   $26 = ($21|0)==(0);
   if (!($26)) {
    $$pre = HEAP8[$13>>0]|0;
    $$pre93 = HEAP32[$16>>2]|0;
    $30 = $$pre;$33 = $$pre93;
    break;
   }
   $27 = ((($2)) + 8|0);
   $28 = ((($0)) + 8|0);
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($28,$27)|0);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $30 = $14;$33 = $17;
  }
 } while(0);
 $29 = ($30<<24>>24)<(0);
 $31 = $30&255;
 $32 = $29 ? $33 : $31;
 $34 = ($32|0)==(5);
 do {
  if ($34) {
   __THREW__ = 0;
   $35 = (invoke_iiiiii(546,($1|0),0,-1,(23208|0),5)|0);
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if ($37) {
    $38 = ___cxa_find_matching_catch_3(0|0)|0;
    $39 = tempRet0;
    ___clang_call_terminate($38);
    // unreachable;
   }
   $40 = ($35|0)==(0);
   if (!($40)) {
    $$pre94 = HEAP8[$13>>0]|0;
    $$pre95 = HEAP32[$16>>2]|0;
    $127 = $$pre94;$130 = $$pre95;
    break;
   }
   HEAP32[$3>>2] = 0;
   $41 = ((($3)) + 4|0);
   HEAP32[$41>>2] = 0;
   $42 = ((($3)) + 8|0);
   HEAP32[$42>>2] = 0;
   $43 = ((($2)) + 28|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($44)) + 20|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($44)) + 24|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($46|0)==($48|0);
   L19: do {
    if ($49) {
     label = 14;
    } else {
     $50 = ((($4)) + 12|0);
     $51 = ((($5)) + 12|0);
     $52 = ((($3)) + 8|0);
     $53 = ((($5)) + 11|0);
     $54 = ((($4)) + 11|0);
     $$sroa$083$092 = $46;
     while(1) {
      __THREW__ = 0;
      invoke_vii(566,($4|0),($$sroa$083$092|0));
      $62 = __THREW__; __THREW__ = 0;
      $63 = $62&1;
      if ($63) {
       label = 27;
       break;
      }
      $64 = ((($$sroa$083$092)) + 12|0);
      $65 = HEAP32[$64>>2]|0;
      HEAP32[$50>>2] = $65;
      $$cast = $65;
      __THREW__ = 0;
      $66 = (invoke_ii(569,($$cast|0))|0);
      $67 = __THREW__; __THREW__ = 0;
      $68 = $67&1;
      if ($68) {
       label = 28;
       break;
      }
      __THREW__ = 0;
      invoke_vii(566,($5|0),($4|0));
      $69 = __THREW__; __THREW__ = 0;
      $70 = $69&1;
      if ($70) {
       label = 28;
       break;
      }
      $71 = $66;
      HEAP32[$51>>2] = $71;
      $72 = HEAP32[$41>>2]|0;
      $73 = HEAP32[$52>>2]|0;
      $74 = ($72>>>0)<($73>>>0);
      if ($74) {
       ;HEAP32[$72>>2]=HEAP32[$5>>2]|0;HEAP32[$72+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$72+8>>2]=HEAP32[$5+8>>2]|0;
       ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
       $75 = ((($72)) + 12|0);
       $76 = HEAP32[$51>>2]|0;
       HEAP32[$75>>2] = $76;
       $77 = HEAP32[$41>>2]|0;
       $78 = ((($77)) + 16|0);
       HEAP32[$41>>2] = $78;
      } else {
       __THREW__ = 0;
       invoke_vii(770,($3|0),($5|0));
       $79 = __THREW__; __THREW__ = 0;
       $80 = $79&1;
       if ($80) {
        label = 29;
        break;
       }
       $$pre112 = HEAP8[$53>>0]|0;
       $81 = ($$pre112<<24>>24)<(0);
       if ($81) {
        $82 = HEAP32[$5>>2]|0;
        __ZdlPv($82);
       }
      }
      $83 = HEAP8[$54>>0]|0;
      $84 = ($83<<24>>24)<(0);
      if ($84) {
       $85 = HEAP32[$4>>2]|0;
       __ZdlPv($85);
      }
      $86 = ((($$sroa$083$092)) + 16|0);
      $87 = ($86|0)==($48|0);
      if ($87) {
       label = 14;
       break L19;
      } else {
       $$sroa$083$092 = $86;
      }
     }
     if ((label|0) == 27) {
      $88 = ___cxa_find_matching_catch_2()|0;
      $89 = tempRet0;
      $$2 = $88;$$247 = $89;
      break;
     }
     else if ((label|0) == 28) {
      $90 = ___cxa_find_matching_catch_2()|0;
      $91 = tempRet0;
      $$044 = $90;$$045 = $91;
     }
     else if ((label|0) == 29) {
      $92 = ___cxa_find_matching_catch_2()|0;
      $93 = tempRet0;
      $94 = HEAP8[$53>>0]|0;
      $95 = ($94<<24>>24)<(0);
      if ($95) {
       $96 = HEAP32[$5>>2]|0;
       __ZdlPv($96);
       $$044 = $92;$$045 = $93;
      } else {
       $$044 = $92;$$045 = $93;
      }
     }
     $97 = HEAP8[$54>>0]|0;
     $98 = ($97<<24>>24)<(0);
     if ($98) {
      $99 = HEAP32[$4>>2]|0;
      __ZdlPv($99);
     }
     $$2 = $$044;$$247 = $$045;
    }
   } while(0);
   do {
    if ((label|0) == 14) {
     $55 = HEAP32[$0>>2]|0;
     $56 = ((($55)) + 244|0);
     $57 = HEAP32[$56>>2]|0;
     __THREW__ = 0;
     invoke_vii($57|0,($0|0),($3|0));
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      $60 = ___cxa_find_matching_catch_2()|0;
      $61 = tempRet0;
      $$2 = $60;$$247 = $61;
      break;
     }
     $100 = HEAP32[$3>>2]|0;
     $101 = ($100|0)==(0|0);
     if (!($101)) {
      $102 = HEAP32[$41>>2]|0;
      $103 = ($102|0)==($100|0);
      if ($103) {
       $112 = $100;
      } else {
       $105 = $102;
       while(1) {
        $104 = ((($105)) + -16|0);
        HEAP32[$41>>2] = $104;
        $106 = ((($104)) + 11|0);
        $107 = HEAP8[$106>>0]|0;
        $108 = ($107<<24>>24)<(0);
        if ($108) {
         $111 = HEAP32[$104>>2]|0;
         __ZdlPv($111);
         $$pre$i$i$i = HEAP32[$41>>2]|0;
         $110 = $$pre$i$i$i;
        } else {
         $110 = $104;
        }
        $109 = ($110|0)==($100|0);
        if ($109) {
         break;
        } else {
         $105 = $110;
        }
       }
       $$pre$i = HEAP32[$3>>2]|0;
       $112 = $$pre$i;
      }
      __ZdlPv($112);
     }
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   $113 = HEAP32[$3>>2]|0;
   $114 = ($113|0)==(0|0);
   if ($114) {
    ___resumeException($$2|0);
    // unreachable;
   }
   $115 = HEAP32[$41>>2]|0;
   $116 = ($115|0)==($113|0);
   if ($116) {
    $125 = $113;
   } else {
    $118 = $115;
    while(1) {
     $117 = ((($118)) + -16|0);
     HEAP32[$41>>2] = $117;
     $119 = ((($117)) + 11|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = ($120<<24>>24)<(0);
     if ($121) {
      $124 = HEAP32[$117>>2]|0;
      __ZdlPv($124);
      $$pre$i$i$i56 = HEAP32[$41>>2]|0;
      $123 = $$pre$i$i$i56;
     } else {
      $123 = $117;
     }
     $122 = ($123|0)==($113|0);
     if ($122) {
      break;
     } else {
      $118 = $123;
     }
    }
    $$pre$i58 = HEAP32[$3>>2]|0;
    $125 = $$pre$i58;
   }
   __ZdlPv($125);
   ___resumeException($$2|0);
   // unreachable;
  } else {
   $127 = $30;$130 = $33;
  }
 } while(0);
 $126 = ($127<<24>>24)<(0);
 $128 = $127&255;
 $129 = $126 ? $130 : $128;
 $131 = ($129|0)==(6);
 do {
  if ($131) {
   __THREW__ = 0;
   $132 = (invoke_iiiiii(546,($1|0),0,-1,(23214|0),6)|0);
   $133 = __THREW__; __THREW__ = 0;
   $134 = $133&1;
   if ($134) {
    $135 = ___cxa_find_matching_catch_3(0|0)|0;
    $136 = tempRet0;
    ___clang_call_terminate($135);
    // unreachable;
   }
   $137 = ($132|0)==(0);
   if (!($137)) {
    $$pre96 = HEAP8[$13>>0]|0;
    $$pre97 = HEAP32[$16>>2]|0;
    $140 = $$pre96;$143 = $$pre97;
    break;
   }
   __Z26measurespecFromResourceValP10StyleValue($6,$2);
   $138 = ((($0)) + 148|0);
   ;HEAP32[$138>>2]=HEAP32[$6>>2]|0;HEAP32[$138+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$138+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$138+12>>2]=HEAP32[$6+12>>2]|0;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $140 = $127;$143 = $130;
  }
 } while(0);
 $139 = ($140<<24>>24)<(0);
 $141 = $140&255;
 $142 = $139 ? $143 : $141;
 $144 = ($142|0)==(5);
 do {
  if ($144) {
   __THREW__ = 0;
   $145 = (invoke_iiiiii(546,($1|0),0,-1,(23221|0),5)|0);
   $146 = __THREW__; __THREW__ = 0;
   $147 = $146&1;
   if ($147) {
    $148 = ___cxa_find_matching_catch_3(0|0)|0;
    $149 = tempRet0;
    ___clang_call_terminate($148);
    // unreachable;
   }
   $150 = ($145|0)==(0);
   if (!($150)) {
    $$pre98 = HEAP8[$13>>0]|0;
    $$pre99 = HEAP32[$16>>2]|0;
    $153 = $$pre98;$156 = $$pre99;
    break;
   }
   __Z26measurespecFromResourceValP10StyleValue($7,$2);
   $151 = ((($0)) + 132|0);
   ;HEAP32[$151>>2]=HEAP32[$7>>2]|0;HEAP32[$151+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$151+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$151+12>>2]=HEAP32[$7+12>>2]|0;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $153 = $140;$156 = $143;
  }
 } while(0);
 $152 = ($153<<24>>24)<(0);
 $154 = $153&255;
 $155 = $152 ? $156 : $154;
 $157 = ($155|0)==(6);
 do {
  if ($157) {
   __THREW__ = 0;
   $158 = (invoke_iiiiii(546,($1|0),0,-1,(23227|0),6)|0);
   $159 = __THREW__; __THREW__ = 0;
   $160 = $159&1;
   if ($160) {
    $161 = ___cxa_find_matching_catch_3(0|0)|0;
    $162 = tempRet0;
    ___clang_call_terminate($161);
    // unreachable;
   }
   $163 = ($158|0)==(0);
   if (!($163)) {
    $$pre100 = HEAP8[$13>>0]|0;
    $$pre101 = HEAP32[$16>>2]|0;
    $166 = $$pre100;$169 = $$pre101;
    break;
   }
   __Z24alignspecFromResourceValP10StyleValueP4View($8,$2,$0);
   $164 = ((($0)) + 164|0);
   ;HEAP32[$164>>2]=HEAP32[$8>>2]|0;HEAP32[$164+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$164+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$164+12>>2]=HEAP32[$8+12>>2]|0;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $166 = $153;$169 = $156;
  }
 } while(0);
 $165 = ($166<<24>>24)<(0);
 $167 = $166&255;
 $168 = $165 ? $169 : $167;
 $170 = ($168|0)==(6);
 do {
  if ($170) {
   __THREW__ = 0;
   $171 = (invoke_iiiiii(546,($1|0),0,-1,(23234|0),6)|0);
   $172 = __THREW__; __THREW__ = 0;
   $173 = $172&1;
   if ($173) {
    $174 = ___cxa_find_matching_catch_3(0|0)|0;
    $175 = tempRet0;
    ___clang_call_terminate($174);
    // unreachable;
   }
   $176 = ($171|0)==(0);
   if (!($176)) {
    $$pre102 = HEAP8[$13>>0]|0;
    $$pre103 = HEAP32[$16>>2]|0;
    $179 = $$pre102;$182 = $$pre103;
    break;
   }
   __Z24alignspecFromResourceValP10StyleValueP4View($9,$2,$0);
   $177 = ((($0)) + 180|0);
   ;HEAP32[$177>>2]=HEAP32[$9>>2]|0;HEAP32[$177+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$177+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$177+12>>2]=HEAP32[$9+12>>2]|0;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $179 = $166;$182 = $169;
  }
 } while(0);
 $178 = ($179<<24>>24)<(0);
 $180 = $179&255;
 $181 = $178 ? $182 : $180;
 $183 = ($181|0)==(10);
 do {
  if ($183) {
   __THREW__ = 0;
   $184 = (invoke_iiiiii(546,($1|0),0,-1,(23241|0),10)|0);
   $185 = __THREW__; __THREW__ = 0;
   $186 = $185&1;
   if ($186) {
    $187 = ___cxa_find_matching_catch_3(0|0)|0;
    $188 = tempRet0;
    ___clang_call_terminate($187);
    // unreachable;
   }
   $189 = ($184|0)==(0);
   if (!($189)) {
    $$pre104 = HEAP8[$13>>0]|0;
    $$pre105 = HEAP32[$16>>2]|0;
    $198 = $$pre104;$201 = $$pre105;
    break;
   }
   $190 = HEAP32[$2>>2]|0;
   $191 = ($190|0)==(2);
   if (!($191)) {
    ___assert_fail((23252|0),(23289|0),140,(23328|0));
    // unreachable;
   }
   $192 = HEAP32[$0>>2]|0;
   $193 = ((($192)) + 124|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = ((($2)) + 24|0);
   $196 = HEAP32[$195>>2]|0;
   FUNCTION_TABLE_vii[$194 & 1023]($0,$196);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $198 = $179;$201 = $182;
  }
 } while(0);
 $197 = ($198<<24>>24)<(0);
 $199 = $198&255;
 $200 = $197 ? $201 : $199;
 $202 = ($200|0)==(7);
 do {
  if ($202) {
   __THREW__ = 0;
   $203 = (invoke_iiiiii(546,($1|0),0,-1,(23344|0),7)|0);
   $204 = __THREW__; __THREW__ = 0;
   $205 = $204&1;
   if ($205) {
    $206 = ___cxa_find_matching_catch_3(0|0)|0;
    $207 = tempRet0;
    ___clang_call_terminate($206);
    // unreachable;
   }
   $208 = ($203|0)==(0);
   if (!($208)) {
    $$pre106 = HEAP8[$13>>0]|0;
    $$pre107 = HEAP32[$16>>2]|0;
    $217 = $$pre106;$220 = $$pre107;
    break;
   }
   $209 = (+__ZN10StyleValue10getAsFloatEv($2));
   $210 = HEAP32[$0>>2]|0;
   $211 = ((($210)) + 56|0);
   $212 = HEAP32[$211>>2]|0;
   HEAPF32[$10>>2] = $209;
   $213 = ((($10)) + 4|0);
   HEAPF32[$213>>2] = $209;
   $214 = ((($10)) + 8|0);
   HEAPF32[$214>>2] = $209;
   $215 = ((($10)) + 12|0);
   HEAPF32[$215>>2] = $209;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$10+12>>2]|0;
   FUNCTION_TABLE_vii[$212 & 1023]($0,$$byval_copy);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $217 = $198;$220 = $201;
  }
 } while(0);
 $216 = ($217<<24>>24)<(0);
 $218 = $217&255;
 $219 = $216 ? $220 : $218;
 $221 = ($219|0)==(11);
 do {
  if ($221) {
   __THREW__ = 0;
   $222 = (invoke_iiiiii(546,($1|0),0,-1,(23352|0),11)|0);
   $223 = __THREW__; __THREW__ = 0;
   $224 = $223&1;
   if ($224) {
    $225 = ___cxa_find_matching_catch_3(0|0)|0;
    $226 = tempRet0;
    ___clang_call_terminate($225);
    // unreachable;
   }
   $227 = ($222|0)==(0);
   if (!($227)) {
    $$pre108 = HEAP8[$13>>0]|0;
    $$pre109 = HEAP32[$16>>2]|0;
    $240 = $$pre108;$243 = $$pre109;
    break;
   }
   $228 = (+__ZN10StyleValue10getAsFloatEv($2));
   $229 = HEAP32[$0>>2]|0;
   $230 = ((($229)) + 56|0);
   $231 = HEAP32[$230>>2]|0;
   $232 = ((($0)) + 216|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = ((($0)) + 224|0);
   $235 = HEAP32[$234>>2]|0;
   HEAPF32[$11>>2] = $228;
   $236 = ((($11)) + 4|0);
   HEAP32[$236>>2] = $233;
   $237 = ((($11)) + 8|0);
   HEAPF32[$237>>2] = $228;
   $238 = ((($11)) + 12|0);
   HEAP32[$238>>2] = $235;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$11+12>>2]|0;
   FUNCTION_TABLE_vii[$231 & 1023]($0,$$byval_copy1);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $240 = $217;$243 = $220;
  }
 } while(0);
 $239 = ($240<<24>>24)<(0);
 $241 = $240&255;
 $242 = $239 ? $243 : $241;
 $244 = ($242|0)==(11);
 do {
  if ($244) {
   __THREW__ = 0;
   $245 = (invoke_iiiiii(546,($1|0),0,-1,(23364|0),11)|0);
   $246 = __THREW__; __THREW__ = 0;
   $247 = $246&1;
   if ($247) {
    $248 = ___cxa_find_matching_catch_3(0|0)|0;
    $249 = tempRet0;
    ___clang_call_terminate($248);
    // unreachable;
   }
   $250 = ($245|0)==(0);
   if (!($250)) {
    $$pre110 = HEAP8[$13>>0]|0;
    $$pre111 = HEAP32[$16>>2]|0;
    $263 = $$pre110;$266 = $$pre111;
    break;
   }
   $251 = (+__ZN10StyleValue10getAsFloatEv($2));
   $252 = HEAP32[$0>>2]|0;
   $253 = ((($252)) + 56|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = ((($0)) + 212|0);
   $256 = HEAP32[$255>>2]|0;
   $257 = ((($0)) + 220|0);
   $258 = HEAP32[$257>>2]|0;
   HEAP32[$12>>2] = $256;
   $259 = ((($12)) + 4|0);
   HEAPF32[$259>>2] = $251;
   $260 = ((($12)) + 8|0);
   HEAP32[$260>>2] = $258;
   $261 = ((($12)) + 12|0);
   HEAPF32[$261>>2] = $251;
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[$12+12>>2]|0;
   FUNCTION_TABLE_vii[$254 & 1023]($0,$$byval_copy2);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $263 = $240;$266 = $243;
  }
 } while(0);
 $262 = ($263<<24>>24)<(0);
 $264 = $263&255;
 $265 = $262 ? $266 : $264;
 $267 = ($265|0)==(4);
 if (!($267)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 __THREW__ = 0;
 $268 = (invoke_iiiiii(546,($1|0),0,-1,(23376|0),4)|0);
 $269 = __THREW__; __THREW__ = 0;
 $270 = $269&1;
 if ($270) {
  $271 = ___cxa_find_matching_catch_3(0|0)|0;
  $272 = tempRet0;
  ___clang_call_terminate($271);
  // unreachable;
 }
 $273 = ($268|0)==(0);
 if (!($273)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $274 = HEAP32[$0>>2]|0;
 $275 = ((($274)) + 172|0);
 $276 = HEAP32[$275>>2]|0;
 $277 = ((($2)) + 24|0);
 $278 = HEAP32[$277>>2]|0;
 FUNCTION_TABLE_vii[$276 & 1023]($0,$278);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __ZN4View24applyStyleValueFromChildERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP10StyleValuePS_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10StyleValueEENS5_ISA_EEE21__push_back_slow_pathISA_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$06$i$i = 0, $$pre = 0, $$pre$i = 0, $$sroa$7$0 = 0, $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 4;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>(268435455);
 if ($8) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($4))|0;
 $12 = $11 >> 4;
 $13 = ($12>>>0)<(134217727);
 $14 = $11 >> 3;
 $15 = ($14>>>0)<($7>>>0);
 $$sroa$speculated$i = $15 ? $7 : $14;
 $$sroa$speculated$$i = $13 ? $$sroa$speculated$i : 268435455;
 $16 = ($$sroa$speculated$$i|0)==(0);
 do {
  if ($16) {
   $26 = 0;
  } else {
   $17 = ($$sroa$speculated$$i>>>0)>(268435455);
   if (!($17)) {
    $23 = $$sroa$speculated$$i << 4;
    $24 = (__Znwj($23)|0);
    $26 = $24;
    break;
   }
   $18 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(568,($18|0),(23604|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $21 = ___cxa_find_matching_catch_2()|0;
    $22 = tempRet0;
    ___cxa_free_exception(($18|0));
    ___resumeException($21|0);
    // unreachable;
   } else {
    HEAP32[$18>>2] = (9544);
    ___cxa_throw(($18|0),(1992|0),(506|0));
    // unreachable;
   }
  }
 } while(0);
 $25 = (($26) + ($6<<4)|0);
 $27 = $25;
 $28 = (($26) + ($$sroa$speculated$$i<<4)|0);
 $29 = $28;
 ;HEAP32[$25>>2]=HEAP32[$1>>2]|0;HEAP32[$25+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$25+8>>2]=HEAP32[$1+8>>2]|0;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $30 = (((($26) + ($6<<4)|0)) + 12|0);
 $31 = ((($1)) + 12|0);
 $32 = HEAP32[$31>>2]|0;
 HEAP32[$30>>2] = $32;
 $33 = ((($25)) + 16|0);
 $34 = $33;
 $35 = HEAP32[$0>>2]|0;
 $36 = HEAP32[$2>>2]|0;
 $37 = ($36|0)==($35|0);
 if ($37) {
  $38 = $35;
  $49 = $27;$51 = $38;$53 = $35;
 } else {
  $$06$i$i = $36;$$sroa$7$0 = $27;$40 = $25;
  while(1) {
   $39 = ((($40)) + -16|0);
   $41 = ((($$06$i$i)) + -16|0);
   ;HEAP32[$39>>2]=HEAP32[$41>>2]|0;HEAP32[$39+4>>2]=HEAP32[$41+4>>2]|0;HEAP32[$39+8>>2]=HEAP32[$41+8>>2]|0;
   ;HEAP32[$41>>2]=0|0;HEAP32[$41+4>>2]=0|0;HEAP32[$41+8>>2]=0|0;
   $42 = ((($40)) + -4|0);
   $43 = ((($$06$i$i)) + -4|0);
   $44 = HEAP32[$43>>2]|0;
   HEAP32[$42>>2] = $44;
   $45 = $$sroa$7$0;
   $46 = ((($45)) + -16|0);
   $47 = $46;
   $48 = ($41|0)==($35|0);
   if ($48) {
    break;
   } else {
    $$06$i$i = $41;$$sroa$7$0 = $47;$40 = $46;
   }
  }
  $$pre$i = HEAP32[$0>>2]|0;
  $$pre = HEAP32[$2>>2]|0;
  $49 = $47;$51 = $$pre$i;$53 = $$pre;
 }
 HEAP32[$0>>2] = $49;
 HEAP32[$2>>2] = $34;
 HEAP32[$9>>2] = $29;
 $50 = $51;
 $52 = ($53|0)==($50|0);
 if (!($52)) {
  $55 = $53;
  while(1) {
   $54 = ((($55)) + -16|0);
   $56 = ((($54)) + 11|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = ($57<<24>>24)<(0);
   if ($58) {
    $60 = HEAP32[$54>>2]|0;
    __ZdlPv($60);
   }
   $59 = ($54|0)==($50|0);
   if ($59) {
    break;
   } else {
    $55 = $54;
   }
  }
 }
 $61 = ($51|0)==(0);
 if ($61) {
  return;
 }
 $62 = $51;
 __ZdlPv($62);
 return;
}
function __Z26measurespecFromResourceValP10StyleValue($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $$pre21 = 0, $$pre22 = 0, $$pre23 = 0, $$sink = 0.0, $$sink16 = 0.0, $$sink19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = HEAP32[$1>>2]|0;
 L1: do {
  switch ($3|0) {
  case 1: case 2:  {
   $4 = (+__ZN10StyleValue10getAsFloatEv($1));
   $$sink = $4;$$sink16 = 0.0;$$sink19 = 1;
   break;
  }
  case 0:  {
   $5 = ((($1)) + 8|0);
   $6 = ((($5)) + 11|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)<(0);
   $9 = ((($1)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $7&255;
   $12 = $8 ? $10 : $11;
   $13 = ($12|0)==(12);
   if ($13) {
    __THREW__ = 0;
    $14 = (invoke_iiiiii(546,($5|0),0,-1,(23558|0),12)|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if ($16) {
     $17 = ___cxa_find_matching_catch_3(0|0)|0;
     $18 = tempRet0;
     ___clang_call_terminate($17);
     // unreachable;
    }
    $19 = ($14|0)==(0);
    if ($19) {
     $$sink = 0.0;$$sink16 = 1.0;$$sink19 = 2;
     break L1;
    }
    $$pre = HEAP8[$6>>0]|0;
    $$pre21 = HEAP32[$9>>2]|0;
    $21 = $$pre;$24 = $$pre21;
   } else {
    $21 = $7;$24 = $10;
   }
   $20 = ($21<<24>>24)<(0);
   $22 = $21&255;
   $23 = $20 ? $24 : $22;
   $25 = ($23|0)==(11);
   if ($25) {
    __THREW__ = 0;
    $26 = (invoke_iiiiii(546,($5|0),0,-1,(23571|0),11)|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     $29 = ___cxa_find_matching_catch_3(0|0)|0;
     $30 = tempRet0;
     ___clang_call_terminate($29);
     // unreachable;
    }
    $31 = ($26|0)==(0);
    if ($31) {
     $$sink = 0.0;$$sink16 = 1.0;$$sink19 = 3;
     break L1;
    }
    $$pre22 = HEAP8[$6>>0]|0;
    $$pre23 = HEAP32[$9>>2]|0;
    $33 = $$pre22;$36 = $$pre23;
   } else {
    $33 = $21;$36 = $24;
   }
   $32 = ($33<<24>>24)<(0);
   $34 = $33&255;
   $35 = $32 ? $36 : $34;
   $37 = ($35|0)==(12);
   do {
    if ($37) {
     __THREW__ = 0;
     $38 = (invoke_iiiiii(546,($5|0),0,-1,(23583|0),12)|0);
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if ($40) {
      $41 = ___cxa_find_matching_catch_3(0|0)|0;
      $42 = tempRet0;
      ___clang_call_terminate($41);
      // unreachable;
     } else {
      $43 = ($38|0)==(0);
      if ($43) {
       $$sink = 0.0;$$sink16 = 1.0;$$sink19 = 3;
       break L1;
      } else {
       break;
      }
     }
    }
   } while(0);
   $44 = ((($2)) + 8|0);
   HEAP32[$44>>2] = 0;
   $45 = ((($2)) + 11|0);
   HEAP8[$45>>0] = 7;
   ;HEAP8[$2>>0]=HEAP8[23596>>0]|0;HEAP8[$2+1>>0]=HEAP8[23596+1>>0]|0;HEAP8[$2+2>>0]=HEAP8[23596+2>>0]|0;HEAP8[$2+3>>0]=HEAP8[23596+3>>0]|0;HEAP8[$2+4>>0]=HEAP8[23596+4>>0]|0;HEAP8[$2+5>>0]=HEAP8[23596+5>>0]|0;HEAP8[$2+6>>0]=HEAP8[23596+6>>0]|0;
   $46 = ((($2)) + 7|0);
   HEAP8[$46>>0] = 0;
   __THREW__ = 0;
   $47 = (invoke_iiii(560,($5|0),($2|0),1)|0);
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   if ($49) {
    $55 = ___cxa_find_matching_catch_2()|0;
    $56 = tempRet0;
    $57 = HEAP8[$45>>0]|0;
    $58 = ($57<<24>>24)<(0);
    if (!($58)) {
     ___resumeException($55|0);
     // unreachable;
    }
    $59 = HEAP32[$2>>2]|0;
    __ZdlPv($59);
    ___resumeException($55|0);
    // unreachable;
   }
   $50 = HEAP8[$45>>0]|0;
   $51 = ($50<<24>>24)<(0);
   if ($51) {
    $52 = HEAP32[$2>>2]|0;
    __ZdlPv($52);
   }
   if ($47) {
    $53 = (+__Z17stringParseDoubleRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($5));
    $54 = $53;
    $$sink = 0.0;$$sink16 = $54;$$sink19 = 4;
    break L1;
   } else {
    ___assert_fail((23513|0),(23289|0),71,(23531|0));
    // unreachable;
   }
   break;
  }
  default: {
   ___assert_fail((23381|0),(23289|0),64,(23531|0));
   // unreachable;
  }
  }
 } while(0);
 HEAP32[$0>>2] = $$sink19;
 $60 = ((($0)) + 4|0);
 HEAP32[$60>>2] = 0;
 $61 = ((($0)) + 8|0);
 HEAPF32[$61>>2] = $$sink16;
 $62 = ((($0)) + 12|0);
 HEAPF32[$62>>2] = $$sink;
 STACKTOP = sp;return;
}
function __Z24alignspecFromResourceValP10StyleValueP4View($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$3 = 0, $$37 = 0, $$4 = 0, $$48 = 0, $$5 = 0, $$59 = 0, $$pre = 0, $$pre168 = 0, $$pre169 = 0, $$pre170 = 0, $$pre171 = 0, $$pre172 = 0, $$pre173 = 0, $$pre174 = 0, $$pre175 = 0, $$pre176 = 0, $$pre177 = 0, $$pre178 = 0, $$pre179 = 0, $$pre180 = 0;
 var $$pre181 = 0, $$pre182 = 0, $$pre183 = 0, $$pre184 = 0, $$pre185 = 0, $$sink = 0.0, $$sink167 = 0.0, $$sroa$4147$0$$sroa_idx148 = 0, $$sroa$5150$0$$sroa_idx151 = 0, $$sroa$6153$0$$sroa_idx154 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0.0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = sp + 84|0;
 $4 = sp + 72|0;
 $5 = sp + 60|0;
 $6 = sp + 48|0;
 $7 = sp + 36|0;
 $8 = sp + 24|0;
 $9 = sp + 12|0;
 $10 = sp;
 $11 = HEAP32[$1>>2]|0;
 $12 = ($11|0)==(0);
 if (!($12)) {
  ___assert_fail((23381|0),(23289|0),76,(23421|0));
  // unreachable;
 }
 $13 = ((($1)) + 8|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$13);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
 $14 = ((($5)) + 11|0);
 HEAP8[$14>>0] = 1;
 HEAP8[$5>>0] = 40;
 $15 = ((($5)) + 1|0);
 HEAP8[$15>>0] = 0;
 __THREW__ = 0;
 invoke_viiii(686,($4|0),($3|0),($5|0),1);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $33 = ___cxa_find_matching_catch_2()|0;
  $34 = tempRet0;
  $35 = HEAP8[$14>>0]|0;
  $36 = ($35<<24>>24)<(0);
  if ($36) {
   $37 = HEAP32[$5>>2]|0;
   __ZdlPv($37);
  }
  $$5 = $34;$$59 = $33;
 } else {
  $18 = HEAP8[$14>>0]|0;
  $19 = ($18<<24>>24)<(0);
  if ($19) {
   $20 = HEAP32[$5>>2]|0;
   __ZdlPv($20);
  }
  $21 = ((($4)) + 11|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = ($22<<24>>24)<(0);
  $24 = ((($4)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $22&255;
  $27 = $23 ? $25 : $26;
  $28 = ($27|0)==(0);
  do {
   if ($28) {
    __THREW__ = 0;
    (invoke_iii(563,($4|0),($3|0))|0);
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     label = 12;
    } else {
     __THREW__ = 0;
     (invoke_iii(587,($3|0),(31714|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      label = 12;
     } else {
      label = 25;
     }
    }
   } else {
    ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
    $40 = ((($7)) + 11|0);
    HEAP8[$40>>0] = 1;
    HEAP8[$7>>0] = 41;
    $41 = ((($7)) + 1|0);
    HEAP8[$41>>0] = 0;
    __THREW__ = 0;
    invoke_viiii(686,($6|0),($3|0),($7|0),1);
    $42 = __THREW__; __THREW__ = 0;
    $43 = $42&1;
    if ($43) {
     $55 = ___cxa_find_matching_catch_2()|0;
     $56 = tempRet0;
     $57 = HEAP8[$40>>0]|0;
     $58 = ($57<<24>>24)<(0);
     if ($58) {
      $59 = HEAP32[$7>>2]|0;
      __ZdlPv($59);
     }
     $$4 = $56;$$48 = $55;
     break;
    }
    $44 = ((($3)) + 11|0);
    $45 = HEAP8[$44>>0]|0;
    $46 = ($45<<24>>24)<(0);
    if ($46) {
     $47 = HEAP32[$3>>2]|0;
     HEAP8[$47>>0] = 0;
     $48 = ((($3)) + 4|0);
     HEAP32[$48>>2] = 0;
    } else {
     HEAP8[$3>>0] = 0;
     HEAP8[$44>>0] = 0;
    }
    __THREW__ = 0;
    invoke_vii(550,($3|0),0);
    $49 = __THREW__; __THREW__ = 0;
    $50 = $49&1;
    if ($50) {
     $51 = ___cxa_find_matching_catch_3(0|0)|0;
     $52 = tempRet0;
     ___clang_call_terminate($51);
     // unreachable;
    }
    ;HEAP32[$3>>2]=HEAP32[$6>>2]|0;HEAP32[$3+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$6+8>>2]|0;
    ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
    $$pre = HEAP8[$40>>0]|0;
    $53 = ($$pre<<24>>24)<(0);
    if ($53) {
     $54 = HEAP32[$7>>2]|0;
     __ZdlPv($54);
    }
    label = 25;
   }
  } while(0);
  L33: do {
   if ((label|0) == 25) {
    $60 = HEAP8[$21>>0]|0;
    $61 = ($60<<24>>24)<(0);
    $62 = HEAP32[$24>>2]|0;
    $63 = $60&255;
    $64 = $61 ? $62 : $63;
    $65 = ($64|0)==(6);
    if ($65) {
     __THREW__ = 0;
     $66 = (invoke_iiiiii(546,($4|0),0,-1,(23446|0),6)|0);
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      $69 = ___cxa_find_matching_catch_3(0|0)|0;
      $70 = tempRet0;
      ___clang_call_terminate($69);
      // unreachable;
     }
     $71 = ($66|0)==(0);
     if ($71) {
      $$sink = -0.5;$$sink167 = 0.5;
     } else {
      $$pre168 = HEAP8[$21>>0]|0;
      $$pre169 = HEAP32[$24>>2]|0;
      $73 = $$pre168;$76 = $$pre169;
      label = 30;
     }
    } else {
     $73 = $60;$76 = $62;
     label = 30;
    }
    L41: do {
     if ((label|0) == 30) {
      $72 = ($73<<24>>24)<(0);
      $74 = $73&255;
      $75 = $72 ? $76 : $74;
      $77 = ($75|0)==(6);
      if ($77) {
       __THREW__ = 0;
       $78 = (invoke_iiiiii(546,($4|0),0,-1,(23453|0),6)|0);
       $79 = __THREW__; __THREW__ = 0;
       $80 = $79&1;
       if ($80) {
        $81 = ___cxa_find_matching_catch_3(0|0)|0;
        $82 = tempRet0;
        ___clang_call_terminate($81);
        // unreachable;
       }
       $83 = ($78|0)==(0);
       if ($83) {
        $$sink = -0.5;$$sink167 = 0.5;
        break;
       }
       $$pre170 = HEAP8[$21>>0]|0;
       $$pre171 = HEAP32[$24>>2]|0;
       $85 = $$pre170;$88 = $$pre171;
      } else {
       $85 = $73;$88 = $76;
      }
      $84 = ($85<<24>>24)<(0);
      $86 = $85&255;
      $87 = $84 ? $88 : $86;
      $89 = ($87|0)==(4);
      if ($89) {
       __THREW__ = 0;
       $90 = (invoke_iiiiii(546,($4|0),0,-1,(23460|0),4)|0);
       $91 = __THREW__; __THREW__ = 0;
       $92 = $91&1;
       if ($92) {
        $93 = ___cxa_find_matching_catch_3(0|0)|0;
        $94 = tempRet0;
        ___clang_call_terminate($93);
        // unreachable;
       }
       $95 = ($90|0)==(0);
       if ($95) {
        $$sink = 0.0;$$sink167 = 0.0;
        break;
       }
       $$pre172 = HEAP8[$21>>0]|0;
       $$pre173 = HEAP32[$24>>2]|0;
       $100 = $$pre173;$97 = $$pre172;
      } else {
       $100 = $88;$97 = $85;
      }
      $96 = ($97<<24>>24)<(0);
      $98 = $97&255;
      $99 = $96 ? $100 : $98;
      $101 = ($99|0)==(5);
      if ($101) {
       __THREW__ = 0;
       $102 = (invoke_iiiiii(546,($4|0),0,-1,(23465|0),5)|0);
       $103 = __THREW__; __THREW__ = 0;
       $104 = $103&1;
       if ($104) {
        $105 = ___cxa_find_matching_catch_3(0|0)|0;
        $106 = tempRet0;
        ___clang_call_terminate($105);
        // unreachable;
       }
       $107 = ($102|0)==(0);
       if ($107) {
        $$sink = -1.0;$$sink167 = 1.0;
        break;
       }
       $$pre174 = HEAP8[$21>>0]|0;
       $$pre175 = HEAP32[$24>>2]|0;
       $109 = $$pre174;$112 = $$pre175;
      } else {
       $109 = $97;$112 = $100;
      }
      $108 = ($109<<24>>24)<(0);
      $110 = $109&255;
      $111 = $108 ? $112 : $110;
      $113 = ($111|0)==(3);
      if ($113) {
       __THREW__ = 0;
       $114 = (invoke_iiiiii(546,($4|0),0,-1,(23471|0),3)|0);
       $115 = __THREW__; __THREW__ = 0;
       $116 = $115&1;
       if ($116) {
        $117 = ___cxa_find_matching_catch_3(0|0)|0;
        $118 = tempRet0;
        ___clang_call_terminate($117);
        // unreachable;
       }
       $119 = ($114|0)==(0);
       if ($119) {
        $$sink = 0.0;$$sink167 = 0.0;
        break;
       }
       $$pre176 = HEAP8[$21>>0]|0;
       $$pre177 = HEAP32[$24>>2]|0;
       $121 = $$pre176;$124 = $$pre177;
      } else {
       $121 = $109;$124 = $112;
      }
      $120 = ($121<<24>>24)<(0);
      $122 = $121&255;
      $123 = $120 ? $124 : $122;
      $125 = ($123|0)==(6);
      if ($125) {
       __THREW__ = 0;
       $126 = (invoke_iiiiii(546,($4|0),0,-1,(23475|0),6)|0);
       $127 = __THREW__; __THREW__ = 0;
       $128 = $127&1;
       if ($128) {
        $129 = ___cxa_find_matching_catch_3(0|0)|0;
        $130 = tempRet0;
        ___clang_call_terminate($129);
        // unreachable;
       }
       $131 = ($126|0)==(0);
       if ($131) {
        $$sink = -1.0;$$sink167 = 1.0;
        break;
       }
       $$pre178 = HEAP8[$21>>0]|0;
       $$pre179 = HEAP32[$24>>2]|0;
       $133 = $$pre178;$136 = $$pre179;
      } else {
       $133 = $121;$136 = $124;
      }
      $132 = ($133<<24>>24)<(0);
      $134 = $133&255;
      $135 = $132 ? $136 : $134;
      $137 = ($135|0)==(8);
      if ($137) {
       __THREW__ = 0;
       $138 = (invoke_iiiiii(546,($4|0),0,-1,(23482|0),8)|0);
       $139 = __THREW__; __THREW__ = 0;
       $140 = $139&1;
       if ($140) {
        $141 = ___cxa_find_matching_catch_3(0|0)|0;
        $142 = tempRet0;
        ___clang_call_terminate($141);
        // unreachable;
       }
       $143 = ($138|0)==(0);
       if ($143) {
        $$sink = -1.0;$$sink167 = 1.0;
        break;
       }
       $$pre180 = HEAP8[$21>>0]|0;
       $$pre181 = HEAP32[$24>>2]|0;
       $145 = $$pre180;$148 = $$pre181;
      } else {
       $145 = $133;$148 = $136;
      }
      $144 = ($145<<24>>24)<(0);
      $146 = $145&255;
      $147 = $144 ? $148 : $146;
      $149 = ($147|0)==(9);
      if ($149) {
       __THREW__ = 0;
       $150 = (invoke_iiiiii(546,($4|0),0,-1,(23491|0),9)|0);
       $151 = __THREW__; __THREW__ = 0;
       $152 = $151&1;
       if ($152) {
        $153 = ___cxa_find_matching_catch_3(0|0)|0;
        $154 = tempRet0;
        ___clang_call_terminate($153);
        // unreachable;
       }
       $155 = ($150|0)==(0);
       if ($155) {
        $$sink = 0.0;$$sink167 = 1.0;
        break;
       }
       $$pre182 = HEAP8[$21>>0]|0;
       $$pre183 = HEAP32[$24>>2]|0;
       $157 = $$pre182;$160 = $$pre183;
      } else {
       $157 = $145;$160 = $148;
      }
      $156 = ($157<<24>>24)<(0);
      $158 = $157&255;
      $159 = $156 ? $160 : $158;
      $161 = ($159|0)==(5);
      if ($161) {
       __THREW__ = 0;
       $162 = (invoke_iiiiii(546,($4|0),0,-1,(23501|0),5)|0);
       $163 = __THREW__; __THREW__ = 0;
       $164 = $163&1;
       if ($164) {
        $165 = ___cxa_find_matching_catch_3(0|0)|0;
        $166 = tempRet0;
        ___clang_call_terminate($165);
        // unreachable;
       }
       $167 = ($162|0)==(0);
       if ($167) {
        $$sink = -1.0;$$sink167 = 1.0;
        break;
       }
       $$pre184 = HEAP8[$21>>0]|0;
       $$pre185 = HEAP32[$24>>2]|0;
       $169 = $$pre184;$172 = $$pre185;
      } else {
       $169 = $157;$172 = $160;
      }
      $168 = ($169<<24>>24)<(0);
      $170 = $169&255;
      $171 = $168 ? $172 : $170;
      $173 = ($171|0)==(5);
      do {
       if ($173) {
        __THREW__ = 0;
        $174 = (invoke_iiiiii(546,($4|0),0,-1,(23507|0),5)|0);
        $175 = __THREW__; __THREW__ = 0;
        $176 = $175&1;
        if ($176) {
         $177 = ___cxa_find_matching_catch_3(0|0)|0;
         $178 = tempRet0;
         ___clang_call_terminate($177);
         // unreachable;
        } else {
         $179 = ($174|0)==(0);
         if ($179) {
          $$sink = 0.0;$$sink167 = 1.0;
          break L41;
         } else {
          break;
         }
        }
       }
      } while(0);
      __THREW__ = 0;
      invoke_viiii(561,(23513|0),(23289|0),96,(23421|0));
      $180 = __THREW__; __THREW__ = 0;
      label = 12;
      break L33;
     }
    } while(0);
    HEAP32[$0>>2] = 0;
    $$sroa$4147$0$$sroa_idx148 = ((($0)) + 4|0);
    HEAPF32[$$sroa$4147$0$$sroa_idx148>>2] = $$sink167;
    $$sroa$5150$0$$sroa_idx151 = ((($0)) + 8|0);
    HEAPF32[$$sroa$5150$0$$sroa_idx151>>2] = $$sink;
    $$sroa$6153$0$$sroa_idx154 = ((($0)) + 12|0);
    HEAPF32[$$sroa$6153$0$$sroa_idx154>>2] = 0.0;
    $181 = ((($3)) + 11|0);
    $182 = HEAP8[$181>>0]|0;
    $183 = ($182<<24>>24)<(0);
    $184 = ((($3)) + 4|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = $182&255;
    $187 = $183 ? $185 : $186;
    $188 = ($187|0)==(0);
    L106: do {
     if (!($188)) {
      ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
      $189 = ((($9)) + 11|0);
      HEAP8[$189>>0] = 1;
      HEAP8[$9>>0] = 44;
      $190 = ((($9)) + 1|0);
      HEAP8[$190>>0] = 0;
      __THREW__ = 0;
      invoke_viiii(686,($8|0),($3|0),($9|0),1);
      $191 = __THREW__; __THREW__ = 0;
      $192 = $191&1;
      if ($192) {
       $208 = ___cxa_find_matching_catch_2()|0;
       $209 = tempRet0;
       $210 = HEAP8[$189>>0]|0;
       $211 = ($210<<24>>24)<(0);
       if ($211) {
        $212 = HEAP32[$9>>2]|0;
        __ZdlPv($212);
       }
       $$4 = $209;$$48 = $208;
       break L33;
      }
      $193 = HEAP8[$189>>0]|0;
      $194 = ($193<<24>>24)<(0);
      if ($194) {
       $195 = HEAP32[$9>>2]|0;
       __ZdlPv($195);
      }
      $196 = ((($8)) + 11|0);
      $197 = HEAP8[$196>>0]|0;
      $198 = ($197<<24>>24)<(0);
      $199 = ((($8)) + 4|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = $197&255;
      $202 = $198 ? $200 : $201;
      $203 = ($202|0)==(0);
      if ($203) {
       __THREW__ = 0;
       (invoke_iii(563,($8|0),($3|0))|0);
       $204 = __THREW__; __THREW__ = 0;
       $205 = $204&1;
       if ($205) {
        label = 85;
       } else {
        __THREW__ = 0;
        (invoke_iii(587,($3|0),(31714|0))|0);
        $206 = __THREW__; __THREW__ = 0;
        $207 = $206&1;
        if ($207) {
         label = 85;
        } else {
         label = 86;
        }
       }
      } else {
       label = 86;
      }
      L120: do {
       if ((label|0) == 86) {
        $215 = ((($2)) + 24|0);
        $216 = HEAP32[$215>>2]|0;
        $217 = HEAP32[$216>>2]|0;
        $218 = ((($217)) + 156|0);
        $219 = HEAP32[$218>>2]|0;
        __THREW__ = 0;
        $220 = (invoke_iii($219|0,($216|0),($8|0))|0);
        $221 = __THREW__; __THREW__ = 0;
        $222 = $221&1;
        if ($222) {
         label = 85;
        } else {
         HEAP32[$0>>2] = $220;
         $223 = ($220|0)==(0|0);
         if ($223) {
          __THREW__ = 0;
          invoke_viiii(561,(23519|0),(23289|0),105,(23421|0));
          $224 = __THREW__; __THREW__ = 0;
          label = 85;
          break;
         }
         __THREW__ = 0;
         invoke_vi(771,($3|0));
         $225 = __THREW__; __THREW__ = 0;
         $226 = $225&1;
         if ($226) {
          label = 85;
         } else {
          $227 = HEAP8[$181>>0]|0;
          $228 = ($227<<24>>24)<(0);
          $229 = HEAP32[$184>>2]|0;
          $230 = $227&255;
          $231 = $228 ? $229 : $230;
          $232 = ($231|0)==(0);
          do {
           if (!($232)) {
            __THREW__ = 0;
            invoke_vii(566,($10|0),($3|0));
            $233 = __THREW__; __THREW__ = 0;
            $234 = $233&1;
            if ($234) {
             label = 85;
             break L120;
            }
            __THREW__ = 0;
            $235 = (+invoke_di(772,($10|0)));
            $236 = __THREW__; __THREW__ = 0;
            $237 = $236&1;
            if ($237) {
             $242 = ___cxa_find_matching_catch_2()|0;
             $243 = tempRet0;
             $244 = ((($10)) + 11|0);
             $245 = HEAP8[$244>>0]|0;
             $246 = ($245<<24>>24)<(0);
             if (!($246)) {
              $$3 = $243;$$37 = $242;
              break L120;
             }
             $247 = HEAP32[$10>>2]|0;
             __ZdlPv($247);
             $$3 = $243;$$37 = $242;
             break L120;
            } else {
             HEAPF32[$$sroa$6153$0$$sroa_idx154>>2] = $235;
             $238 = ((($10)) + 11|0);
             $239 = HEAP8[$238>>0]|0;
             $240 = ($239<<24>>24)<(0);
             if (!($240)) {
              break;
             }
             $241 = HEAP32[$10>>2]|0;
             __ZdlPv($241);
             break;
            }
           }
          } while(0);
          $248 = HEAP8[$196>>0]|0;
          $249 = ($248<<24>>24)<(0);
          if ($249) {
           $250 = HEAP32[$8>>2]|0;
           __ZdlPv($250);
          }
          break L106;
         }
        }
       }
      } while(0);
      if ((label|0) == 85) {
       $213 = ___cxa_find_matching_catch_2()|0;
       $214 = tempRet0;
       $$3 = $214;$$37 = $213;
      }
      $251 = HEAP8[$196>>0]|0;
      $252 = ($251<<24>>24)<(0);
      if ($252) {
       $253 = HEAP32[$8>>2]|0;
       __ZdlPv($253);
      }
      $$4 = $$3;$$48 = $$37;
      break L33;
     }
    } while(0);
    $254 = HEAP8[$21>>0]|0;
    $255 = ($254<<24>>24)<(0);
    if ($255) {
     $256 = HEAP32[$4>>2]|0;
     __ZdlPv($256);
    }
    $257 = HEAP8[$181>>0]|0;
    $258 = ($257<<24>>24)<(0);
    if (!($258)) {
     STACKTOP = sp;return;
    }
    $259 = HEAP32[$3>>2]|0;
    __ZdlPv($259);
    STACKTOP = sp;return;
   }
  } while(0);
  if ((label|0) == 12) {
   $38 = ___cxa_find_matching_catch_2()|0;
   $39 = tempRet0;
   $$4 = $39;$$48 = $38;
  }
  $260 = HEAP8[$21>>0]|0;
  $261 = ($260<<24>>24)<(0);
  if ($261) {
   $262 = HEAP32[$4>>2]|0;
   __ZdlPv($262);
  }
  $$5 = $$4;$$59 = $$48;
 }
 $263 = ((($3)) + 11|0);
 $264 = HEAP8[$263>>0]|0;
 $265 = ($264<<24>>24)<(0);
 if (!($265)) {
  ___resumeException($$59|0);
  // unreachable;
 }
 $266 = HEAP32[$3>>2]|0;
 __ZdlPv($266);
 ___resumeException($$59|0);
 // unreachable;
}
function __ZNSt3__210__function6__funcIZN4View12animateAlphaEffE3__2NS_9allocatorIS3_EEFvP9AnimationEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210__function6__funcIZN4View12animateAlphaEffE3__2NS_9allocatorIS3_EEFvP9AnimationEE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $2 = ((($0)) + 4|0);
 HEAP32[$1>>2] = (8212);
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 return ($1|0);
}
function __ZNKSt3__210__function6__funcIZN4View12animateAlphaEffE3__2NS_9allocatorIS3_EEFvP9AnimationEE7__cloneEPNS0_6__baseIS8_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 HEAP32[$1>>2] = (8212);
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 return;
}
function __ZNSt3__210__function6__funcIZN4View12animateAlphaEffE3__2NS_9allocatorIS3_EEFvP9AnimationEE7destroyEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__210__function6__funcIZN4View12animateAlphaEffE3__2NS_9allocatorIS3_EEFvP9AnimationEE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__210__function6__funcIZN4View12animateAlphaEffE3__2NS_9allocatorIS3_EEFvP9AnimationEEclEOS7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx = 0, $$idx$val = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx = ((($0)) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $2 = ((($$idx$val)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return;
 }
 __ZN6Object7releaseEv($3);
 HEAP32[$2>>2] = 0;
 return;
}
function __ZNKSt3__210__function6__funcIZN4View12animateAlphaEffE3__2NS_9allocatorIS3_EEFvP9AnimationEE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(23712|0);
 $5 = ((($0)) + 4|0);
 $$0 = $4 ? $5 : 0;
 return ($$0|0);
}
function __ZNKSt3__210__function6__funcIZN4View12animateAlphaEffE3__2NS_9allocatorIS3_EEFvP9AnimationEE11target_typeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1688|0);
}
function __ZNSt3__26vectorI6ObjPtrI4ViewENS_9allocatorIS3_EEE6insertENS_11__wrap_iterIPKS3_EEOS3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$017$i = 0, $$056$i$i$i = 0, $$06$i$i = 0, $$07$i$i = 0, $$07$i$i$i = 0, $$in$i = 0, $$pr = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i20 = 0, $$pre$i25 = 0, $$pre$phi$iZ2D = 0, $$pre31 = 0, $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = $4;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($6) - ($5))|0;
 $8 = $7 >> 2;
 $9 = (($4) + ($8<<2)|0);
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)<($13>>>0);
 $15 = $11;
 $16 = $13;
 if ($14) {
  $17 = ($9|0)==($11|0);
  if ($17) {
   $18 = HEAP32[$2>>2]|0;
   HEAP32[$9>>2] = $18;
   $19 = ($18|0)==(0|0);
   if ($19) {
    $21 = $9;
   } else {
    __ZN6Object6retainEv($18);
    $$pre31 = HEAP32[$10>>2]|0;
    $21 = $$pre31;
   }
   $20 = ((($21)) + 4|0);
   HEAP32[$10>>2] = $20;
   $$0 = $9;
   STACKTOP = sp;return ($$0|0);
  }
  $22 = ((($9)) + 4|0);
  $23 = $22;
  $24 = (($15) - ($23))|0;
  $25 = $24 >> 2;
  $26 = (($9) + ($25<<2)|0);
  $27 = ($26>>>0)<($11>>>0);
  if ($27) {
   $$017$i = $26;$38 = $11;
   while(1) {
    $37 = HEAP32[$$017$i>>2]|0;
    HEAP32[$38>>2] = $37;
    $39 = ($37|0)==(0|0);
    if ($39) {
     $42 = $38;
    } else {
     __ZN6Object6retainEv($37);
     $$pre$i25 = HEAP32[$10>>2]|0;
     $42 = $$pre$i25;
    }
    $40 = ((($$017$i)) + 4|0);
    $41 = ((($42)) + 4|0);
    HEAP32[$10>>2] = $41;
    $43 = ($40>>>0)<($11>>>0);
    if ($43) {
     $$017$i = $40;$38 = $41;
    } else {
     break;
    }
   }
  }
  $28 = ($25|0)==(0);
  if (!($28)) {
   $$056$i$i$i = $26;$$07$i$i$i = $11;
   while(1) {
    $29 = ((($$056$i$i$i)) + -4|0);
    $30 = ((($$07$i$i$i)) + -4|0);
    $31 = HEAP32[$29>>2]|0;
    $32 = HEAP32[$30>>2]|0;
    $33 = ($32|0)==($31|0);
    if (!($33)) {
     $35 = ($32|0)==(0|0);
     if (!($35)) {
      __ZN6Object7releaseEv($32);
     }
     HEAP32[$30>>2] = $31;
     $36 = ($31|0)==(0|0);
     if (!($36)) {
      __ZN6Object6retainEv($31);
     }
    }
    $34 = ($29|0)==($9|0);
    if ($34) {
     break;
    } else {
     $$056$i$i$i = $29;$$07$i$i$i = $30;
    }
   }
  }
  $44 = HEAP32[$2>>2]|0;
  $45 = HEAP32[$9>>2]|0;
  $46 = ($45|0)==($44|0);
  if ($46) {
   $$0 = $9;
   STACKTOP = sp;return ($$0|0);
  }
  $47 = ($45|0)==(0|0);
  if (!($47)) {
   __ZN6Object7releaseEv($45);
  }
  HEAP32[$9>>2] = $44;
  $48 = ($44|0)==(0|0);
  if ($48) {
   $$0 = $9;
   STACKTOP = sp;return ($$0|0);
  }
  __ZN6Object6retainEv($44);
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = (($15) - ($5))|0;
 $50 = $49 >> 2;
 $51 = (($50) + 1)|0;
 $52 = ($51>>>0)>(1073741823);
 if ($52) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $53 = ((($0)) + 8|0);
 $54 = (($16) - ($5))|0;
 $55 = $54 >> 2;
 $56 = ($55>>>0)<(536870911);
 $57 = $54 >> 1;
 $58 = ($57>>>0)<($51>>>0);
 $$sroa$speculated$i = $58 ? $51 : $57;
 $$sroa$speculated$$i = $56 ? $$sroa$speculated$i : 1073741823;
 $59 = $7 >> 2;
 $60 = ((($3)) + 12|0);
 HEAP32[$60>>2] = 0;
 $61 = ((($3)) + 16|0);
 HEAP32[$61>>2] = $53;
 $62 = ($$sroa$speculated$$i|0)==(0);
 do {
  if ($62) {
   $71 = 0;
  } else {
   $63 = ($$sroa$speculated$$i>>>0)>(1073741823);
   if (!($63)) {
    $69 = $$sroa$speculated$$i << 2;
    $70 = (__Znwj($69)|0);
    $71 = $70;
    break;
   }
   $64 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(568,($64|0),(23604|0));
   $65 = __THREW__; __THREW__ = 0;
   $66 = $65&1;
   if ($66) {
    $67 = ___cxa_find_matching_catch_2()|0;
    $68 = tempRet0;
    ___cxa_free_exception(($64|0));
    ___resumeException($67|0);
    // unreachable;
   } else {
    HEAP32[$64>>2] = (9544);
    ___cxa_throw(($64|0),(1992|0),(506|0));
    // unreachable;
   }
  }
 } while(0);
 HEAP32[$3>>2] = $71;
 $72 = (($71) + ($59<<2)|0);
 $73 = ((($3)) + 8|0);
 HEAP32[$73>>2] = $72;
 $74 = ((($3)) + 4|0);
 HEAP32[$74>>2] = $72;
 $75 = (($71) + ($$sroa$speculated$$i<<2)|0);
 $76 = ((($3)) + 12|0);
 HEAP32[$76>>2] = $75;
 __THREW__ = 0;
 invoke_vii(773,($3|0),($2|0));
 $77 = __THREW__; __THREW__ = 0;
 $78 = $77&1;
 L51: do {
  if (!($78)) {
   $79 = HEAP32[$74>>2]|0;
   $80 = HEAP32[$0>>2]|0;
   $81 = ($80|0)==($9|0);
   if ($81) {
    $$in$i = $79;
   } else {
    $$06$i$i = $9;$84 = $79;
    while(1) {
     $82 = ((($$06$i$i)) + -4|0);
     $83 = ((($84)) + -4|0);
     $85 = HEAP32[$82>>2]|0;
     HEAP32[$83>>2] = $85;
     $86 = ($85|0)==(0|0);
     if (!($86)) {
      __THREW__ = 0;
      invoke_vi(526,($85|0));
      $87 = __THREW__; __THREW__ = 0;
      $88 = $87&1;
      if ($88) {
       break L51;
      }
     }
     $89 = HEAP32[$74>>2]|0;
     $90 = ((($89)) + -4|0);
     HEAP32[$74>>2] = $90;
     $91 = ($82|0)==($80|0);
     if ($91) {
      $$in$i = $90;
      break;
     } else {
      $$06$i$i = $82;$84 = $90;
     }
    }
   }
   $92 = HEAP32[$10>>2]|0;
   $93 = ($92|0)==($9|0);
   if ($93) {
    $94 = $92;
    $95 = $$in$i;
    $$pre$phi$iZ2D = $74;$106 = $95;$108 = $94;
   } else {
    $$pre$i$i = HEAP32[$73>>2]|0;
    $$07$i$i = $9;$97 = $$pre$i$i;
    while(1) {
     $96 = HEAP32[$$07$i$i>>2]|0;
     HEAP32[$97>>2] = $96;
     $98 = ($96|0)==(0|0);
     if (!($98)) {
      __THREW__ = 0;
      invoke_vi(526,($96|0));
      $99 = __THREW__; __THREW__ = 0;
      $100 = $99&1;
      if ($100) {
       break L51;
      }
     }
     $101 = ((($$07$i$i)) + 4|0);
     $102 = HEAP32[$73>>2]|0;
     $103 = ((($102)) + 4|0);
     HEAP32[$73>>2] = $103;
     $104 = ($101|0)==($92|0);
     if ($104) {
      break;
     } else {
      $$07$i$i = $101;$97 = $103;
     }
    }
    $$pre$i = HEAP32[$74>>2]|0;
    $$pre = HEAP32[$10>>2]|0;
    $$pre$phi$iZ2D = $74;$106 = $$pre$i;$108 = $$pre;
   }
   $105 = HEAP32[$0>>2]|0;
   HEAP32[$0>>2] = $106;
   HEAP32[$$pre$phi$iZ2D>>2] = $105;
   $107 = HEAP32[$73>>2]|0;
   HEAP32[$10>>2] = $107;
   HEAP32[$73>>2] = $108;
   $109 = HEAP32[$12>>2]|0;
   $110 = HEAP32[$76>>2]|0;
   HEAP32[$12>>2] = $110;
   HEAP32[$76>>2] = $109;
   $111 = HEAP32[$$pre$phi$iZ2D>>2]|0;
   HEAP32[$3>>2] = $111;
   $112 = HEAP32[$74>>2]|0;
   $113 = $108;
   $114 = ($113|0)==($112|0);
   $115 = $111;
   do {
    if ($114) {
     $127 = $115;
    } else {
     $117 = $113;
     while(1) {
      $116 = ((($117)) + -4|0);
      HEAP32[$73>>2] = $116;
      $118 = HEAP32[$116>>2]|0;
      $119 = ($118|0)==(0|0);
      if ($119) {
       $121 = $116;
      } else {
       __THREW__ = 0;
       invoke_vi(525,($118|0));
       $122 = __THREW__; __THREW__ = 0;
       $123 = $122&1;
       if ($123) {
        label = 47;
        break;
       }
       $$pre$i$i$i$i20 = HEAP32[$73>>2]|0;
       $121 = $$pre$i$i$i$i20;
      }
      $120 = ($121|0)==($112|0);
      if ($120) {
       label = 48;
       break;
      } else {
       $117 = $121;
      }
     }
     if ((label|0) == 47) {
      $124 = ___cxa_find_matching_catch_3(0|0)|0;
      $125 = tempRet0;
      ___clang_call_terminate($124);
      // unreachable;
     }
     else if ((label|0) == 48) {
      $$pr = HEAP32[$3>>2]|0;
      $127 = $$pr;
      break;
     }
    }
   } while(0);
   $126 = ($127|0)==(0|0);
   if (!($126)) {
    __ZdlPv($127);
   }
   $$0 = $79;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $128 = ___cxa_find_matching_catch_2()|0;
 $129 = tempRet0;
 $130 = HEAP32[$74>>2]|0;
 $131 = HEAP32[$73>>2]|0;
 $132 = ($131|0)==($130|0);
 L86: do {
  if (!($132)) {
   $134 = $131;
   while(1) {
    $133 = ((($134)) + -4|0);
    HEAP32[$73>>2] = $133;
    $135 = HEAP32[$133>>2]|0;
    $136 = ($135|0)==(0|0);
    if ($136) {
     $138 = $133;
    } else {
     __THREW__ = 0;
     invoke_vi(525,($135|0));
     $139 = __THREW__; __THREW__ = 0;
     $140 = $139&1;
     if ($140) {
      break;
     }
     $$pre$i$i$i$i = HEAP32[$73>>2]|0;
     $138 = $$pre$i$i$i$i;
    }
    $137 = ($138|0)==($130|0);
    if ($137) {
     break L86;
    } else {
     $134 = $138;
    }
   }
   $141 = ___cxa_find_matching_catch_3(0|0)|0;
   $142 = tempRet0;
   ___clang_call_terminate($141);
   // unreachable;
  }
 } while(0);
 $143 = HEAP32[$3>>2]|0;
 $144 = ($143|0)==(0|0);
 if ($144) {
  ___resumeException($128|0);
  // unreachable;
 }
 __ZdlPv($143);
 ___resumeException($128|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__214__split_bufferI6ObjPtrI4ViewERNS_9allocatorIS3_EEE9push_backEOS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa$i$i = 0, $$078$i$i = 0, $$09$i$i = 0, $$pre = 0, $$pre51 = 0, $$pre52 = 0, $$pre53 = 0, $$pre54 = 0, $$sroa$13$0 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 $7 = $5;
 do {
  if ($6) {
   $8 = ((($0)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = HEAP32[$0>>2]|0;
   $11 = ($9>>>0)>($10>>>0);
   $12 = $10;
   if ($11) {
    $13 = $9;
    $14 = (($13) - ($12))|0;
    $15 = $14 >> 2;
    $16 = (($15) + 1)|0;
    $17 = (($16|0) / -2)&-1;
    $18 = (($9) + ($17<<2)|0);
    $19 = ($9|0)==($3|0);
    if ($19) {
     $$0$lcssa$i$i = $18;$29 = $3;
    } else {
     $$078$i$i = $9;$$09$i$i = $18;
     while(1) {
      $20 = HEAP32[$$078$i$i>>2]|0;
      $21 = HEAP32[$$09$i$i>>2]|0;
      $22 = ($21|0)==($20|0);
      if (!($22)) {
       $23 = ($21|0)==(0|0);
       if (!($23)) {
        __ZN6Object7releaseEv($21);
       }
       HEAP32[$$09$i$i>>2] = $20;
       $24 = ($20|0)==(0|0);
       if (!($24)) {
        __ZN6Object6retainEv($20);
       }
      }
      $25 = ((($$078$i$i)) + 4|0);
      $26 = ((($$09$i$i)) + 4|0);
      $27 = ($25|0)==($3|0);
      if ($27) {
       break;
      } else {
       $$078$i$i = $25;$$09$i$i = $26;
      }
     }
     $$pre53 = HEAP32[$8>>2]|0;
     $$0$lcssa$i$i = $26;$29 = $$pre53;
    }
    HEAP32[$2>>2] = $$0$lcssa$i$i;
    $28 = (($29) + ($17<<2)|0);
    HEAP32[$8>>2] = $28;
    break;
   }
   $30 = (($7) - ($12))|0;
   $31 = $30 >> 1;
   $32 = ($31|0)==(0);
   $$sroa$speculated = $32 ? 1 : $31;
   $33 = ($$sroa$speculated>>>0)>(1073741823);
   if ($33) {
    $34 = (___cxa_allocate_exception(8)|0);
    __THREW__ = 0;
    invoke_vii(568,($34|0),(23604|0));
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     $37 = ___cxa_find_matching_catch_2()|0;
     $38 = tempRet0;
     ___cxa_free_exception(($34|0));
     ___resumeException($37|0);
     // unreachable;
    } else {
     HEAP32[$34>>2] = (9544);
     ___cxa_throw(($34|0),(1992|0),(506|0));
     // unreachable;
    }
   }
   $39 = $$sroa$speculated >>> 2;
   $40 = $$sroa$speculated << 2;
   $41 = (__Znwj($40)|0);
   $42 = $41;
   $43 = (($41) + ($39<<2)|0);
   $44 = $43;
   $45 = (($41) + ($$sroa$speculated<<2)|0);
   $46 = $45;
   $47 = ($9|0)==($3|0);
   L24: do {
    if ($47) {
     HEAP32[$0>>2] = $42;
     HEAP32[$8>>2] = $44;
     HEAP32[$2>>2] = $44;
     HEAP32[$4>>2] = $46;
     $71 = $10;
    } else {
     $$sroa$13$0 = $44;$49 = $9;$50 = $43;
     while(1) {
      $48 = HEAP32[$49>>2]|0;
      HEAP32[$50>>2] = $48;
      $51 = ($48|0)==(0|0);
      if ($51) {
       $56 = $50;
      } else {
       __THREW__ = 0;
       invoke_vi(526,($48|0));
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if ($53) {
        break;
       }
       $54 = $$sroa$13$0;
       $56 = $54;
      }
      $55 = ((($56)) + 4|0);
      $57 = $55;
      $58 = ((($49)) + 4|0);
      $59 = ($58|0)==($3|0);
      if ($59) {
       label = 22;
       break;
      } else {
       $$sroa$13$0 = $57;$49 = $58;$50 = $55;
      }
     }
     if ((label|0) == 22) {
      $$pre = HEAP32[$0>>2]|0;
      $$pre51 = HEAP32[$8>>2]|0;
      $$pre52 = HEAP32[$2>>2]|0;
      HEAP32[$0>>2] = $42;
      HEAP32[$8>>2] = $44;
      HEAP32[$2>>2] = $57;
      HEAP32[$4>>2] = $46;
      $60 = ($$pre52|0)==($$pre51|0);
      if ($60) {
       $71 = $$pre;
       break;
      } else {
       $62 = $$pre52;
      }
      while(1) {
       $61 = ((($62)) + -4|0);
       $63 = HEAP32[$61>>2]|0;
       $64 = ($63|0)==(0|0);
       if (!($64)) {
        __THREW__ = 0;
        invoke_vi(525,($63|0));
        $66 = __THREW__; __THREW__ = 0;
        $67 = $66&1;
        if ($67) {
         break;
        }
       }
       $65 = ($61|0)==($$pre51|0);
       if ($65) {
        $71 = $$pre;
        break L24;
       } else {
        $62 = $61;
       }
      }
      $68 = ___cxa_find_matching_catch_3(0|0)|0;
      $69 = tempRet0;
      ___clang_call_terminate($68);
      // unreachable;
     }
     $72 = ___cxa_find_matching_catch_2()|0;
     $73 = tempRet0;
     $74 = $$sroa$13$0;
     $75 = ($74|0)==($43|0);
     if ($75) {
      __ZdlPv($41);
      ___resumeException($72|0);
      // unreachable;
     } else {
      $77 = $74;
     }
     while(1) {
      $76 = ((($77)) + -4|0);
      $78 = HEAP32[$76>>2]|0;
      $79 = ($78|0)==(0|0);
      if (!($79)) {
       __THREW__ = 0;
       invoke_vi(525,($78|0));
       $81 = __THREW__; __THREW__ = 0;
       $82 = $81&1;
       if ($82) {
        label = 33;
        break;
       }
      }
      $80 = ($76|0)==($43|0);
      if ($80) {
       label = 34;
       break;
      } else {
       $77 = $76;
      }
     }
     if ((label|0) == 33) {
      $83 = ___cxa_find_matching_catch_3(0|0)|0;
      $84 = tempRet0;
      ___clang_call_terminate($83);
      // unreachable;
     }
     else if ((label|0) == 34) {
      __ZdlPv($41);
      ___resumeException($72|0);
      // unreachable;
     }
    }
   } while(0);
   $70 = ($71|0)==(0|0);
   if (!($70)) {
    __ZdlPv($71);
   }
  }
 } while(0);
 $85 = HEAP32[$2>>2]|0;
 $86 = HEAP32[$1>>2]|0;
 HEAP32[$85>>2] = $86;
 $87 = ($86|0)==(0|0);
 if ($87) {
  $89 = $85;
  $88 = ((($89)) + 4|0);
  HEAP32[$2>>2] = $88;
  return;
 }
 __ZN6Object6retainEv($86);
 $$pre54 = HEAP32[$2>>2]|0;
 $89 = $$pre54;
 $88 = ((($89)) + 4|0);
 HEAP32[$2>>2] = $88;
 return;
}
function __ZNSt3__26vectorINS_4pairI6ObjPtrI8RenderOpE8STATESETEENS_9allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$06$i$i = 0, $$pre = 0, $$pre$i = 0, $$pre41 = 0, $$pre42 = 0, $$sroa$16$0 = 0, $$sroa$7$0 = 0, $$sroa$7$1 = 0, $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 3;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>(536870911);
 $9 = $4;
 $10 = $3;
 if ($8) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $11 = ((($0)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) - ($4))|0;
 $14 = $13 >> 3;
 $15 = ($14>>>0)<(268435455);
 $16 = $13 >> 2;
 $17 = ($16>>>0)<($7>>>0);
 $$sroa$speculated$i = $17 ? $7 : $16;
 $$sroa$speculated$$i = $15 ? $$sroa$speculated$i : 536870911;
 $18 = ($$sroa$speculated$$i|0)==(0);
 do {
  if ($18) {
   $28 = 0;$90 = 0;
  } else {
   $19 = ($$sroa$speculated$$i>>>0)>(536870911);
   if (!($19)) {
    $25 = $$sroa$speculated$$i << 3;
    $26 = (__Znwj($25)|0);
    $28 = $26;$90 = $26;
    break;
   }
   $20 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(568,($20|0),(23604|0));
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    $23 = ___cxa_find_matching_catch_2()|0;
    $24 = tempRet0;
    ___cxa_free_exception(($20|0));
    ___resumeException($23|0);
    // unreachable;
   } else {
    HEAP32[$20>>2] = (9544);
    ___cxa_throw(($20|0),(1992|0),(506|0));
    // unreachable;
   }
  }
 } while(0);
 $27 = (($28) + ($6<<3)|0);
 $29 = $27;
 $30 = (($28) + ($$sroa$speculated$$i<<3)|0);
 $31 = $30;
 $32 = HEAP32[$1>>2]|0;
 HEAP32[$27>>2] = $32;
 $33 = ($32|0)==(0|0);
 if ($33) {
  $42 = $10;$43 = $9;
  label = 12;
 } else {
  __THREW__ = 0;
  invoke_vi(526,($32|0));
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if ($35) {
   $$sroa$16$0 = $29;$$sroa$7$1 = $29;
  } else {
   $$pre = HEAP32[$0>>2]|0;
   $$pre41 = HEAP32[$2>>2]|0;
   $42 = $$pre41;$43 = $$pre;
   label = 12;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $36 = (((($28) + ($6<<3)|0)) + 4|0);
   $37 = ((($1)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   HEAP32[$36>>2] = $38;
   $39 = ((($27)) + 8|0);
   $40 = $39;
   $41 = ($42|0)==($43|0);
   if ($41) {
    $44 = $42;
    $59 = $29;$61 = $44;$63 = $42;
   } else {
    $$06$i$i = $42;$$sroa$7$0 = $29;$47 = $27;
    while(1) {
     $45 = ((($$06$i$i)) + -8|0);
     $46 = ((($47)) + -8|0);
     $48 = HEAP32[$45>>2]|0;
     HEAP32[$46>>2] = $48;
     $49 = ($48|0)==(0|0);
     if (!($49)) {
      __THREW__ = 0;
      invoke_vi(526,($48|0));
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      if ($51) {
       $$sroa$16$0 = $40;$$sroa$7$1 = $$sroa$7$0;
       break L16;
      }
     }
     $52 = ((($47)) + -4|0);
     $53 = ((($$06$i$i)) + -4|0);
     $54 = HEAP32[$53>>2]|0;
     HEAP32[$52>>2] = $54;
     $55 = $$sroa$7$0;
     $56 = ((($55)) + -8|0);
     $57 = $56;
     $58 = ($45|0)==($43|0);
     if ($58) {
      break;
     } else {
      $$06$i$i = $45;$$sroa$7$0 = $57;$47 = $56;
     }
    }
    $$pre$i = HEAP32[$0>>2]|0;
    $$pre42 = HEAP32[$2>>2]|0;
    $59 = $57;$61 = $$pre$i;$63 = $$pre42;
   }
   HEAP32[$0>>2] = $59;
   HEAP32[$2>>2] = $40;
   HEAP32[$11>>2] = $31;
   $60 = $61;
   $62 = ($63|0)==($60|0);
   L27: do {
    if (!($62)) {
     $65 = $63;
     while(1) {
      $64 = ((($65)) + -8|0);
      $66 = HEAP32[$64>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       __THREW__ = 0;
       invoke_vi(525,($66|0));
       $69 = __THREW__; __THREW__ = 0;
       $70 = $69&1;
       if ($70) {
        break;
       }
      }
      $68 = ($64|0)==($60|0);
      if ($68) {
       break L27;
      } else {
       $65 = $64;
      }
     }
     $71 = ___cxa_find_matching_catch_3(0|0)|0;
     $72 = tempRet0;
     ___clang_call_terminate($71);
     // unreachable;
    }
   } while(0);
   $73 = ($61|0)==(0);
   if ($73) {
    return;
   }
   $74 = $61;
   __ZdlPv($74);
   return;
  }
 } while(0);
 $75 = ___cxa_find_matching_catch_2()|0;
 $76 = tempRet0;
 $77 = $$sroa$7$1;
 $78 = $$sroa$16$0;
 $79 = ($78|0)==($77|0);
 L40: do {
  if (!($79)) {
   $81 = $78;
   while(1) {
    $80 = ((($81)) + -8|0);
    $82 = HEAP32[$80>>2]|0;
    $83 = ($82|0)==(0|0);
    if (!($83)) {
     __THREW__ = 0;
     invoke_vi(525,($82|0));
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     if ($86) {
      break;
     }
    }
    $84 = ($80|0)==($77|0);
    if ($84) {
     break L40;
    } else {
     $81 = $80;
    }
   }
   $87 = ___cxa_find_matching_catch_3(0|0)|0;
   $88 = tempRet0;
   ___clang_call_terminate($87);
   // unreachable;
  }
 } while(0);
 $89 = ($28|0)==(0|0);
 if ($89) {
  ___resumeException($75|0);
  // unreachable;
 }
 __ZdlPv($90);
 ___resumeException($75|0);
 // unreachable;
}
function __ZN4View19adjustSurfaceOriginERK6_POINT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $$sroa$014$0$$sroa$014$0$1539 = 0, $$sroa$029$0 = 0, $$sroa$029$042 = 0, $$sroa$029$043 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 123|0);
 (__ZN6_POINTpLERKS_($2,$1)|0);
 $3 = ((($0)) + 104|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if (!($5)) {
  $6 = ((($0)) + 100|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   return;
  }
  $9 = ((($7)) + 196|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   return;
  }
  $12 = ((($10)) + 100|0);
  HEAP8[$12>>0] = 1;
  return;
 }
 $13 = ((($0)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  $16 = ((($0)) + 92|0);
  $17 = ((($0)) + 88|0);
  $$sroa$029$042 = HEAP32[$16>>2]|0;
  $18 = $$sroa$029$042;
  $19 = ($18|0)==($17|0);
  do {
   if ($19) {
    $21 = $14;
   } else {
    $$sroa$029$043 = $$sroa$029$042;$35 = $18;
    while(1) {
     $24 = $$sroa$029$043;
     $25 = ((($24)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==(0|0);
     if (!($27)) {
      __ZN6Object6retainEv($26);
     }
     __THREW__ = 0;
     invoke_vi(774,($26|0));
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if ($29) {
      label = 16;
      break;
     }
     if (!($27)) {
      __THREW__ = 0;
      invoke_vi(525,($26|0));
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 14;
       break;
      }
     }
     $34 = ((($35)) + 4|0);
     $$sroa$029$0 = HEAP32[$34>>2]|0;
     $36 = $$sroa$029$0;
     $37 = ($36|0)==($17|0);
     if ($37) {
      label = 7;
      break;
     } else {
      $$sroa$029$043 = $$sroa$029$0;$35 = $36;
     }
    }
    if ((label|0) == 7) {
     $$pre = HEAP32[$13>>2]|0;
     $21 = $$pre;
     break;
    }
    else if ((label|0) == 14) {
     $32 = ___cxa_find_matching_catch_3(0|0)|0;
     $33 = tempRet0;
     ___clang_call_terminate($32);
     // unreachable;
    }
    else if ((label|0) == 16) {
     $38 = ___cxa_find_matching_catch_2()|0;
     $39 = tempRet0;
     if ($27) {
      ___resumeException($38|0);
      // unreachable;
     }
     __THREW__ = 0;
     invoke_vi(525,($26|0));
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if ($41) {
      $42 = ___cxa_find_matching_catch_3(0|0)|0;
      $43 = tempRet0;
      ___clang_call_terminate($42);
      // unreachable;
     } else {
      ___resumeException($38|0);
      // unreachable;
     }
    }
   }
  } while(0);
  $20 = HEAP32[$21>>2]|0;
  $22 = ((($20)) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  FUNCTION_TABLE_vi[$23 & 1023]($21);
 }
 $44 = ((($0)) + 28|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ((($0)) + 32|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($45|0)==($47|0);
 if ($48) {
  return;
 } else {
  $$sroa$014$0$$sroa$014$0$1539 = $45;
 }
 while(1) {
  $49 = HEAP32[$$sroa$014$0$$sroa$014$0$1539>>2]|0;
  __ZN4View19adjustSurfaceOriginERK6_POINT($49,$1);
  $50 = ((($$sroa$014$0$$sroa$014$0$1539)) + 4|0);
  $51 = HEAP32[$46>>2]|0;
  $52 = ($50|0)==($51|0);
  if ($52) {
   break;
  } else {
   $$sroa$014$0$$sroa$014$0$1539 = $50;
  }
 }
 return;
}
function __ZNSt3__210__function6__funcIZN4View16updateScrollbarsEvE3__1NS_9allocatorIS3_EEFvvEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210__function6__funcIZN4View16updateScrollbarsEvE3__1NS_9allocatorIS3_EEFvvEE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $2 = ((($0)) + 4|0);
 HEAP32[$1>>2] = (8256);
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 return ($1|0);
}
function __ZNKSt3__210__function6__funcIZN4View16updateScrollbarsEvE3__1NS_9allocatorIS3_EEFvvEE7__cloneEPNS0_6__baseIS6_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 HEAP32[$1>>2] = (8256);
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 return;
}
function __ZNSt3__210__function6__funcIZN4View16updateScrollbarsEvE3__1NS_9allocatorIS3_EEFvvEE7destroyEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__210__function6__funcIZN4View16updateScrollbarsEvE3__1NS_9allocatorIS3_EEFvvEE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__210__function6__funcIZN4View16updateScrollbarsEvE3__1NS_9allocatorIS3_EEFvvEEclEv($0) {
 $0 = $0|0;
 var $$idx = 0, $$idx$val = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx = ((($0)) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $1 = HEAP32[$$idx$val>>2]|0;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vid[$3 & 1023]($$idx$val,0.0);
 return;
}
function __ZNKSt3__210__function6__funcIZN4View16updateScrollbarsEvE3__1NS_9allocatorIS3_EEFvvEE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(24014|0);
 $5 = ((($0)) + 4|0);
 $$0 = $4 ? $5 : 0;
 return ($$0|0);
}
function __ZNKSt3__210__function6__funcIZN4View16updateScrollbarsEvE3__1NS_9allocatorIS3_EEFvvEE11target_typeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1712|0);
}
function __ZNSt3__210__function6__funcIZN4View19scrollStartFadeAnimEfE3__0NS_9allocatorIS3_EEFvfEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210__function6__funcIZN4View19scrollStartFadeAnimEfE3__0NS_9allocatorIS3_EEFvfEE7__cloneEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $2 = ((($0)) + 4|0);
 HEAP32[$1>>2] = (8300);
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 return ($1|0);
}
function __ZNKSt3__210__function6__funcIZN4View19scrollStartFadeAnimEfE3__0NS_9allocatorIS3_EEFvfEE7__cloneEPNS0_6__baseIS6_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 HEAP32[$1>>2] = (8300);
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 return;
}
function __ZNSt3__210__function6__funcIZN4View19scrollStartFadeAnimEfE3__0NS_9allocatorIS3_EEFvfEE7destroyEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__210__function6__funcIZN4View19scrollStartFadeAnimEfE3__0NS_9allocatorIS3_EEFvfEE18destroy_deallocateEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__210__function6__funcIZN4View19scrollStartFadeAnimEfE3__0NS_9allocatorIS3_EEFvfEEclEOf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx = 0, $$idx$val = 0, $$val = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx = ((($0)) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$val = +HEAPF32[$1>>2];
 $2 = ((($$idx$val)) + 264|0);
 HEAPF32[$2>>2] = $$val;
 $3 = ((($$idx$val)) + 256|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 64|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  FUNCTION_TABLE_vid[$10 & 1023]($7,$$val);
  $11 = HEAP32[$$idx$val>>2]|0;
  $12 = ((($11)) + 180|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$3>>2]|0;
  $15 = ((($14)) + 64|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 12|0);
  FUNCTION_TABLE_vii[$13 & 1023]($$idx$val,$17);
 }
 $18 = ((($$idx$val)) + 260|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  return;
 }
 $21 = ((($19)) + 64|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 36|0);
 $25 = HEAP32[$24>>2]|0;
 FUNCTION_TABLE_vid[$25 & 1023]($22,$$val);
 $26 = HEAP32[$$idx$val>>2]|0;
 $27 = ((($26)) + 180|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP32[$18>>2]|0;
 $30 = ((($29)) + 64|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 12|0);
 FUNCTION_TABLE_vii[$28 & 1023]($$idx$val,$32);
 return;
}
function __ZNKSt3__210__function6__funcIZN4View19scrollStartFadeAnimEfE3__0NS_9allocatorIS3_EEFvfEE6targetERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(24132|0);
 $5 = ((($0)) + 4|0);
 $$0 = $4 ? $5 : 0;
 return ($$0|0);
}
function __ZNKSt3__210__function6__funcIZN4View19scrollStartFadeAnimEfE3__0NS_9allocatorIS3_EEFvfEE11target_typeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1736|0);
}
function __GLOBAL__sub_I_view_cpp() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $1 = ((($0)) + 11|0);
 HEAP8[$1>>0] = 4;
 HEAP32[$0>>2] = 2003134806;
 $2 = ((($0)) + 4|0);
 HEAP8[$2>>0] = 0;
 __THREW__ = 0;
 invoke_vii(775,(31715|0),($0|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  $10 = HEAP8[$1>>0]|0;
  $11 = ($10<<24>>24)<(0);
  if (!($11)) {
   ___resumeException($8|0);
   // unreachable;
  }
  $12 = HEAP32[$0>>2]|0;
  __ZdlPv($12);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $5 = HEAP8[$1>>0]|0;
  $6 = ($5<<24>>24)<(0);
  if (!($6)) {
   STACKTOP = sp;return;
  }
  $7 = HEAP32[$0>>2]|0;
  __ZdlPv($7);
  STACKTOP = sp;return;
 }
}
function __ZN14ClassRegistrarI4ViewEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp;
 $4 = HEAP32[7778]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (__Znwj(12)|0);
  $7 = ((($6)) + 4|0);
  HEAP32[$7>>2] = 0;
  $8 = ((($6)) + 8|0);
  HEAP32[$8>>2] = 0;
  HEAP32[$6>>2] = $7;
  HEAP32[7778] = $6;
  $10 = $6;
 } else {
  $10 = $4;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
 $9 = ((($3)) + 12|0);
 HEAP32[$9>>2] = (776);
 __THREW__ = 0;
 $11 = (invoke_iiii(535,($10|0),($2|0),($3|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if (!($13)) {
   $14 = HEAP32[$11>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    __THREW__ = 0;
    $16 = (invoke_ii(527,32)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     break;
    }
    $19 = ((($16)) + 16|0);
    ;HEAP32[$19>>2]=HEAP32[$3>>2]|0;HEAP32[$19+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$3+8>>2]|0;
    ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
    $20 = ((($16)) + 28|0);
    $21 = HEAP32[$9>>2]|0;
    HEAP32[$20>>2] = $21;
    $22 = HEAP32[$2>>2]|0;
    HEAP32[$16>>2] = 0;
    $23 = ((($16)) + 4|0);
    HEAP32[$23>>2] = 0;
    $24 = ((($16)) + 8|0);
    HEAP32[$24>>2] = $22;
    HEAP32[$11>>2] = $16;
    $25 = HEAP32[$10>>2]|0;
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0|0);
    if ($27) {
     $31 = $16;
    } else {
     $28 = $26;
     HEAP32[$10>>2] = $28;
     $$pre$i$i$i$i$i$i = HEAP32[$11>>2]|0;
     $31 = $$pre$i$i$i$i$i$i;
    }
    $29 = ((($10)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($30,$31);
    $32 = ((($10)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + 1)|0;
    HEAP32[$32>>2] = $34;
   }
   $35 = ((($3)) + 11|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = ($36<<24>>24)<(0);
   if (!($37)) {
    STACKTOP = sp;return;
   }
   $38 = HEAP32[$3>>2]|0;
   __ZdlPv($38);
   STACKTOP = sp;return;
  }
 } while(0);
 $39 = ___cxa_find_matching_catch_2()|0;
 $40 = tempRet0;
 $41 = ((($3)) + 11|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = ($42<<24>>24)<(0);
 if (!($43)) {
  ___resumeException($39|0);
  // unreachable;
 }
 $44 = HEAP32[$3>>2]|0;
 __ZdlPv($44);
 ___resumeException($39|0);
 // unreachable;
}
function __ZN14ClassRegistrarI4ViewE7createTEv() {
 var $$sroa$0$0$$sroa_idx$i = 0, $$sroa$030$0$$sroa_idx$i = 0, $$sroa$08$0$$sroa_idx$i = 0, $$sroa$4$0$$sroa_idx2$i = 0, $$sroa$410$0$$sroa_idx11$i = 0, $$sroa$5$0$$sroa_idx4$i = 0, $$sroa$513$0$$sroa_idx14$i = 0, $$sroa$6$0$$sroa_idx6$i = 0, $$sroa$616$0$$sroa_idx17$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN6ObjectnwEj(328)|0);
 __THREW__ = 0;
 invoke_vi(555,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $23 = ___cxa_find_matching_catch_2()|0;
  $24 = tempRet0;
  __ZdlPv($0);
  ___resumeException($23|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = (7948);
  $3 = ((($0)) + 8|0);
  ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
  $4 = ((($0)) + 28|0);
  HEAP32[$4>>2] = 0;
  $5 = ((($0)) + 32|0);
  HEAP32[$5>>2] = 0;
  $6 = ((($0)) + 36|0);
  HEAP32[$6>>2] = 0;
  $7 = ((($0)) + 52|0);
  HEAP8[$7>>0] = 1;
  $8 = ((($0)) + 56|0);
  $9 = ((($0)) + 76|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($0)) + 80|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($0)) + 84|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 88|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;HEAP32[$8+12>>2]=0|0;
  HEAP32[$12>>2] = $12;
  $13 = ((($0)) + 92|0);
  HEAP32[$13>>2] = $12;
  $14 = ((($0)) + 96|0);
  HEAP32[$14>>2] = 0;
  $15 = ((($0)) + 100|0);
  HEAP32[$15>>2] = 0;
  $16 = ((($0)) + 256|0);
  HEAP32[$16>>2] = 0;
  $17 = ((($0)) + 260|0);
  HEAP32[$17>>2] = 0;
  $18 = ((($0)) + 268|0);
  HEAP32[$18>>2] = 0;
  $19 = ((($0)) + 272|0);
  HEAP32[$19>>2] = 0;
  $20 = ((($0)) + 296|0);
  $21 = ((($0)) + 308|0);
  HEAPF32[$21>>2] = 1.0;
  $22 = ((($0)) + 48|0);
  HEAP32[$22>>2] = 0;
  $$sroa$030$0$$sroa_idx$i = ((($0)) + 132|0);
  $$sroa$08$0$$sroa_idx$i = ((($0)) + 164|0);
  ;HEAP32[$$sroa$030$0$$sroa_idx$i>>2]=0|0;HEAP32[$$sroa$030$0$$sroa_idx$i+4>>2]=0|0;HEAP32[$$sroa$030$0$$sroa_idx$i+8>>2]=0|0;HEAP32[$$sroa$030$0$$sroa_idx$i+12>>2]=0|0;HEAP32[$$sroa$030$0$$sroa_idx$i+16>>2]=0|0;HEAP32[$$sroa$030$0$$sroa_idx$i+20>>2]=0|0;HEAP32[$$sroa$030$0$$sroa_idx$i+24>>2]=0|0;HEAP32[$$sroa$030$0$$sroa_idx$i+28>>2]=0|0;
  HEAP32[$$sroa$08$0$$sroa_idx$i>>2] = (-1);
  $$sroa$410$0$$sroa_idx11$i = ((($0)) + 168|0);
  HEAPF32[$$sroa$410$0$$sroa_idx11$i>>2] = 0.0;
  $$sroa$513$0$$sroa_idx14$i = ((($0)) + 172|0);
  HEAPF32[$$sroa$513$0$$sroa_idx14$i>>2] = 0.0;
  $$sroa$616$0$$sroa_idx17$i = ((($0)) + 176|0);
  HEAPF32[$$sroa$616$0$$sroa_idx17$i>>2] = 0.0;
  $$sroa$0$0$$sroa_idx$i = ((($0)) + 180|0);
  HEAP32[$$sroa$0$0$$sroa_idx$i>>2] = (-1);
  $$sroa$4$0$$sroa_idx2$i = ((($0)) + 184|0);
  HEAPF32[$$sroa$4$0$$sroa_idx2$i>>2] = 0.0;
  $$sroa$5$0$$sroa_idx4$i = ((($0)) + 188|0);
  HEAPF32[$$sroa$5$0$$sroa_idx4$i>>2] = 0.0;
  $$sroa$6$0$$sroa_idx6$i = ((($0)) + 192|0);
  HEAPF32[$$sroa$6$0$$sroa_idx6$i>>2] = 0.0;
  HEAP32[$20>>2] = 0;
  return ($0|0);
 }
 return (0)|0;
}
function __Z9DYNCREATERKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[7778]|0;
 $2 = (__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFP4ViewvEEENS_19__map_value_compareIS7_SC_NS_4lessIS7_EELb1EEENS5_ISC_EEE4findIS7_EENS_15__tree_iteratorISC_PNS_11__tree_nodeISC_PvEEiEERKT_($1,$0)|0);
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_i[$4 & 1023]()|0);
 return ($5|0);
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFP4ViewvEEENS_19__map_value_compareIS7_SC_NS_4lessIS7_EELb1EEENS5_ISC_EEE4findIS7_EENS_15__tree_iteratorISC_PNS_11__tree_nodeISC_PvEEiEERKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$ph$lcssa$i = 0, $$0$ph14$i = 0, $$07$ph13$i = 0, $$0710$i = 0, $$sroa$0$0 = 0, $$sroa$speculated$i$i$i$i$i = 0, $$sroa$speculated$i$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if (!($4)) {
   $5 = ((($1)) + 11|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)<(0);
   $8 = ((($1)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $6&255;
   $11 = $7 ? $9 : $10;
   $12 = HEAP32[$1>>2]|0;
   $13 = $7 ? $12 : $1;
   $$0$ph14$i = $2;$$07$ph13$i = $3;
   L3: while(1) {
    $$0710$i = $$07$ph13$i;
    while(1) {
     $14 = ((($$0710$i)) + 16|0);
     $15 = ((($14)) + 11|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)<(0);
     $18 = ((($$0710$i)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = $16&255;
     $21 = $17 ? $19 : $20;
     $22 = ($11>>>0)<($21>>>0);
     $$sroa$speculated$i$i$i$i$i$i = $22 ? $11 : $21;
     $23 = ($$sroa$speculated$i$i$i$i$i$i|0)==(0);
     if ($23) {
      label = 6;
     } else {
      $24 = HEAP32[$14>>2]|0;
      $25 = $17 ? $24 : $14;
      $26 = (_memcmp($25,$13,$$sroa$speculated$i$i$i$i$i$i)|0);
      $27 = ($26|0)==(0);
      if ($27) {
       label = 6;
      } else {
       $29 = ($26|0)<(0);
       if (!($29)) {
        break;
       }
      }
     }
     if ((label|0) == 6) {
      label = 0;
      $28 = ($21>>>0)<($11>>>0);
      if (!($28)) {
       break;
      }
     }
     $32 = ((($$0710$i)) + 4|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)==(0|0);
     if ($34) {
      $$0$ph$lcssa$i = $$0$ph14$i;
      break L3;
     } else {
      $$0710$i = $33;
     }
    }
    $30 = HEAP32[$$0710$i>>2]|0;
    $31 = ($30|0)==(0|0);
    if ($31) {
     $$0$ph$lcssa$i = $$0710$i;
     break;
    } else {
     $$0$ph14$i = $$0710$i;$$07$ph13$i = $30;
    }
   }
   $35 = ($$0$ph$lcssa$i|0)==($2|0);
   if (!($35)) {
    $36 = ((($$0$ph$lcssa$i)) + 16|0);
    $37 = ((($36)) + 11|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = ($38<<24>>24)<(0);
    $40 = ((($$0$ph$lcssa$i)) + 20|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $38&255;
    $43 = $39 ? $41 : $42;
    $44 = ($43>>>0)<($11>>>0);
    $$sroa$speculated$i$i$i$i$i = $44 ? $43 : $11;
    $45 = ($$sroa$speculated$i$i$i$i$i|0)==(0);
    if (!($45)) {
     $46 = HEAP32[$36>>2]|0;
     $47 = $39 ? $46 : $36;
     $48 = (_memcmp($13,$47,$$sroa$speculated$i$i$i$i$i)|0);
     $49 = ($48|0)==(0);
     if (!($49)) {
      $51 = ($48|0)<(0);
      if ($51) {
       break;
      } else {
       $$sroa$0$0 = $$0$ph$lcssa$i;
      }
      return ($$sroa$0$0|0);
     }
    }
    $50 = ($11>>>0)<($43>>>0);
    if (!($50)) {
     $$sroa$0$0 = $$0$ph$lcssa$i;
     return ($$sroa$0$0|0);
    }
   }
  }
 } while(0);
 $$sroa$0$0 = $2;
 return ($$sroa$0$0|0);
}
function __Z16MEASURESPEC_MakeiP4Viewff($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 var $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($0)) + 8|0);
 HEAPF32[$6>>2] = $3;
 $7 = ((($0)) + 12|0);
 HEAPF32[$7>>2] = $4;
 return;
}
function __Z14ALIGNSPEC_MakeP4Viewfff($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $5 = ((($0)) + 4|0);
 HEAPF32[$5>>2] = $2;
 $6 = ((($0)) + 8|0);
 HEAPF32[$6>>2] = $3;
 $7 = ((($0)) + 12|0);
 HEAPF32[$7>>2] = $4;
 return;
}
function __ZN4ViewC2Ev($0) {
 $0 = $0|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$030$0$$sroa_idx = 0, $$sroa$08$0$$sroa_idx = 0, $$sroa$4$0$$sroa_idx2 = 0, $$sroa$410$0$$sroa_idx11 = 0, $$sroa$5$0$$sroa_idx4 = 0, $$sroa$513$0$$sroa_idx14 = 0, $$sroa$6$0$$sroa_idx6 = 0, $$sroa$616$0$$sroa_idx17 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ObjectC2Ev($0);
 HEAP32[$0>>2] = (7948);
 $1 = ((($0)) + 8|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $2 = ((($0)) + 28|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 32|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 52|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($0)) + 56|0);
 $7 = ((($0)) + 76|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 80|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 84|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 88|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;HEAP32[$6+12>>2]=0|0;
 HEAP32[$10>>2] = $10;
 $11 = ((($0)) + 92|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($0)) + 96|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 100|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($0)) + 256|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($0)) + 260|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($0)) + 268|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($0)) + 272|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($0)) + 296|0);
 $19 = ((($0)) + 308|0);
 HEAPF32[$19>>2] = 1.0;
 $20 = ((($0)) + 48|0);
 HEAP32[$20>>2] = 0;
 $$sroa$030$0$$sroa_idx = ((($0)) + 132|0);
 $$sroa$08$0$$sroa_idx = ((($0)) + 164|0);
 ;HEAP32[$$sroa$030$0$$sroa_idx>>2]=0|0;HEAP32[$$sroa$030$0$$sroa_idx+4>>2]=0|0;HEAP32[$$sroa$030$0$$sroa_idx+8>>2]=0|0;HEAP32[$$sroa$030$0$$sroa_idx+12>>2]=0|0;HEAP32[$$sroa$030$0$$sroa_idx+16>>2]=0|0;HEAP32[$$sroa$030$0$$sroa_idx+20>>2]=0|0;HEAP32[$$sroa$030$0$$sroa_idx+24>>2]=0|0;HEAP32[$$sroa$030$0$$sroa_idx+28>>2]=0|0;
 HEAP32[$$sroa$08$0$$sroa_idx>>2] = (-1);
 $$sroa$410$0$$sroa_idx11 = ((($0)) + 168|0);
 HEAPF32[$$sroa$410$0$$sroa_idx11>>2] = 0.0;
 $$sroa$513$0$$sroa_idx14 = ((($0)) + 172|0);
 HEAPF32[$$sroa$513$0$$sroa_idx14>>2] = 0.0;
 $$sroa$616$0$$sroa_idx17 = ((($0)) + 176|0);
 HEAPF32[$$sroa$616$0$$sroa_idx17>>2] = 0.0;
 $$sroa$0$0$$sroa_idx = ((($0)) + 180|0);
 HEAP32[$$sroa$0$0$$sroa_idx>>2] = (-1);
 $$sroa$4$0$$sroa_idx2 = ((($0)) + 184|0);
 HEAPF32[$$sroa$4$0$$sroa_idx2>>2] = 0.0;
 $$sroa$5$0$$sroa_idx4 = ((($0)) + 188|0);
 HEAPF32[$$sroa$5$0$$sroa_idx4>>2] = 0.0;
 $$sroa$6$0$$sroa_idx6 = ((($0)) + 192|0);
 HEAPF32[$$sroa$6$0$$sroa_idx6>>2] = 0.0;
 HEAP32[$18>>2] = 0;
 return;
}
function __ZN4View14setFrameOriginERK6_POINT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0;
 var $7 = 0, $8 = 0.0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP8[tempDoublePtr>>0]=HEAP8[$1>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1+3>>0];$3 = +HEAPF32[tempDoublePtr>>2];
 $4 = ((($0)) + 107|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$4>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$4+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$4+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$4+3>>0];$5 = +HEAPF32[tempDoublePtr>>2];
 $6 = $3 - $5;
 HEAPF32[$2>>2] = $6;
 $7 = ((($1)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$7>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$7+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$7+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$7+3>>0];$8 = +HEAPF32[tempDoublePtr>>2];
 $9 = ((($0)) + 111|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$9>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$9+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$9+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$9+3>>0];$10 = +HEAPF32[tempDoublePtr>>2];
 $11 = $8 - $10;
 $12 = ((($2)) + 4|0);
 HEAPF32[$12>>2] = $11;
 $13 = $6 != 0.0;
 $14 = $11 != 0.0;
 $or$cond = $14 | $13;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $15 = $1;
 $16 = $15;
 $17 = HEAPU8[$16>>0]|(HEAPU8[$16+1>>0]<<8)|(HEAPU8[$16+2>>0]<<16)|(HEAPU8[$16+3>>0]<<24);
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAPU8[$19>>0]|(HEAPU8[$19+1>>0]<<8)|(HEAPU8[$19+2>>0]<<16)|(HEAPU8[$19+3>>0]<<24);
 $21 = $4;
 $22 = $21;
 HEAP8[$22>>0]=$17&255;HEAP8[$22+1>>0]=($17>>8)&255;HEAP8[$22+2>>0]=($17>>16)&255;HEAP8[$22+3>>0]=$17>>24;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP8[$24>>0]=$20&255;HEAP8[$24+1>>0]=($20>>8)&255;HEAP8[$24+2>>0]=($20>>16)&255;HEAP8[$24+3>>0]=$20>>24;
 __ZN4View19adjustSurfaceOriginERK6_POINT($0,$2);
 STACKTOP = sp;return;
}
function __ZN4View8setAlphaEf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 308|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $3 != $1;
 if (!($4)) {
  return;
 }
 HEAPF32[$2>>2] = $1;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 1023]($0);
 return;
}
function __GLOBAL__sub_I_bind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(31716);
 return;
}
function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIvE3getEv()|0);
 __embind_register_void(($2|0),(24309|0));
 $3 = (__ZN10emscripten8internal6TypeIDIbE3getEv()|0);
 __embind_register_bool(($3|0),(24314|0),1,1,0);
 __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc(24319);
 __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc(24324);
 __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc(24336);
 __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc(24350);
 __ZN12_GLOBAL__N_1L16register_integerItEEvPKc(24356);
 __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc(24371);
 __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc(24375);
 __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc(24388);
 __ZN12_GLOBAL__N_1L16register_integerImEEvPKc(24393);
 __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc(24407);
 __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc(24413);
 $4 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 __embind_register_std_string(($4|0),(24420|0));
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 __embind_register_std_string(($5|0),(24432|0));
 $6 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 __embind_register_std_wstring(($6|0),4,(24465|0));
 $7 = (__ZN10emscripten8internal6TypeIDINS_3valEE3getEv()|0);
 __embind_register_emval(($7|0),(24478|0));
 __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc(24494);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(24524);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(24561);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(24600);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(24631);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(24671);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(24700);
 __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc(24738);
 __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc(24768);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(24807);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(24839);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(24872);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(24905);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(24939);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(24972);
 __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc(25006);
 __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc(25037);
 __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc(25069);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIvE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIbE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIcE3getEv()|0);
 $3 = $1;
 $4 = -128 << 24 >> 24;
 $5 = 127 << 24 >> 24;
 __embind_register_integer(($2|0),($3|0),1,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIaE3getEv()|0);
 $3 = $1;
 $4 = -128 << 24 >> 24;
 $5 = 127 << 24 >> 24;
 __embind_register_integer(($2|0),($3|0),1,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIhE3getEv()|0);
 $3 = $1;
 $4 = 0;
 $5 = 255;
 __embind_register_integer(($2|0),($3|0),1,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIsE3getEv()|0);
 $3 = $1;
 $4 = -32768 << 16 >> 16;
 $5 = 32767 << 16 >> 16;
 __embind_register_integer(($2|0),($3|0),2,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerItEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDItE3getEv()|0);
 $3 = $1;
 $4 = 0;
 $5 = 65535;
 __embind_register_integer(($2|0),($3|0),2,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $3 = $1;
 __embind_register_integer(($2|0),($3|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0);
 $3 = $1;
 __embind_register_integer(($2|0),($3|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIlE3getEv()|0);
 $3 = $1;
 __embind_register_integer(($2|0),($3|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerImEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDImE3getEv()|0);
 $3 = $1;
 __embind_register_integer(($2|0),($3|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIfE3getEv()|0);
 $3 = $1;
 __embind_register_float(($2|0),($3|0),4);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $3 = $1;
 __embind_register_float(($2|0),($3|0),8);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1744|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1752|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1760|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1768|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1776|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1784|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1792|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1800|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1808|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1264|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1816|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1824|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1256|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1832|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1856|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1272|0);
}
function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIdE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2184|0);
}
function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIfE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2176|0);
}
function __ZN10emscripten8internal6TypeIDImE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDImE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2168|0);
}
function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIlE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2160|0);
}
function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIjE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2152|0);
}
function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIiE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2144|0);
}
function __ZN10emscripten8internal6TypeIDItE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDItE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2136|0);
}
function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2128|0);
}
function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIhE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2112|0);
}
function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIaE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2120|0);
}
function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIcE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2104|0);
}
function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2096|0);
}
function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2088|0);
}
function ___getTypeName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (___strdup($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0172$i = 0, $$$0173$i = 0, $$$4236$i = 0, $$$4329$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$01$i$i = 0, $$0172$lcssa$i = 0, $$01726$i = 0, $$0173$lcssa$i = 0, $$01735$i = 0, $$0192 = 0, $$0194 = 0, $$0201$i$i = 0, $$0202$i$i = 0, $$0206$i$i = 0;
 var $$0207$i$i = 0, $$024370$i = 0, $$0260$i$i = 0, $$0261$i$i = 0, $$0262$i$i = 0, $$0268$i$i = 0, $$0269$i$i = 0, $$0320$i = 0, $$0322$i = 0, $$0323$i = 0, $$0325$i = 0, $$0331$i = 0, $$0336$i = 0, $$0337$$i = 0, $$0337$i = 0, $$0339$i = 0, $$0340$i = 0, $$0345$i = 0, $$1176$i = 0, $$1178$i = 0;
 var $$124469$i = 0, $$1264$i$i = 0, $$1266$i$i = 0, $$1321$i = 0, $$1326$i = 0, $$1341$i = 0, $$1347$i = 0, $$1351$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2333$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i200 = 0, $$3328$i = 0, $$3349$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$411$i = 0;
 var $$4236$i = 0, $$4329$lcssa$i = 0, $$432910$i = 0, $$4335$$4$i = 0, $$4335$ph$i = 0, $$43359$i = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i17$i = 0, $$pre$i195 = 0, $$pre$i210 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink1$i = 0;
 var $$sink1$i$i = 0, $$sink14$i = 0, $$sink2$i = 0, $$sink2$i204 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i208 = 0, $exitcond$i$i = 0, $not$$i = 0;
 var $not$$i$i = 0, $not$$i197 = 0, $not$$i209 = 0, $not$1$i = 0, $not$1$i203 = 0, $not$3$i = 0, $not$5$i = 0, $or$cond$i = 0, $or$cond$i201 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond2$i199 = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[7779]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (31156 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[7779] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(31124)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (31156 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($65|0)==($69|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[7779] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($79) + ($76)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(31136)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (31156 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[7779] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(31124)>>2] = $76;
     HEAP32[(31136)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(31120)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (31420 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $129 = ((($124)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $not$3$i = ($130|0)==(0|0);
     $$sink14$i = $not$3$i&1;
     $131 = (((($124)) + 16|0) + ($$sink14$i<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($132|0)==(0|0);
     if ($133) {
      $$0172$lcssa$i = $124;$$0173$lcssa$i = $128;
     } else {
      $$01726$i = $124;$$01735$i = $128;$135 = $132;
      while(1) {
       $134 = ((($135)) + 4|0);
       $136 = HEAP32[$134>>2]|0;
       $137 = $136 & -8;
       $138 = (($137) - ($6))|0;
       $139 = ($138>>>0)<($$01735$i>>>0);
       $$$0173$i = $139 ? $138 : $$01735$i;
       $$$0172$i = $139 ? $135 : $$01726$i;
       $140 = ((($135)) + 16|0);
       $141 = HEAP32[$140>>2]|0;
       $not$$i = ($141|0)==(0|0);
       $$sink1$i = $not$$i&1;
       $142 = (((($135)) + 16|0) + ($$sink1$i<<2)|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        $$0172$lcssa$i = $$$0172$i;$$0173$lcssa$i = $$$0173$i;
        break;
       } else {
        $$01726$i = $$$0172$i;$$01735$i = $$$0173$i;$135 = $143;
       }
      }
     }
     $145 = (($$0172$lcssa$i) + ($6)|0);
     $146 = ($$0172$lcssa$i>>>0)<($145>>>0);
     if ($146) {
      $147 = ((($$0172$lcssa$i)) + 24|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ((($$0172$lcssa$i)) + 12|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ($150|0)==($$0172$lcssa$i|0);
      do {
       if ($151) {
        $156 = ((($$0172$lcssa$i)) + 20|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = ($157|0)==(0|0);
        if ($158) {
         $159 = ((($$0172$lcssa$i)) + 16|0);
         $160 = HEAP32[$159>>2]|0;
         $161 = ($160|0)==(0|0);
         if ($161) {
          $$3$i = 0;
          break;
         } else {
          $$1176$i = $160;$$1178$i = $159;
         }
        } else {
         $$1176$i = $157;$$1178$i = $156;
        }
        while(1) {
         $162 = ((($$1176$i)) + 20|0);
         $163 = HEAP32[$162>>2]|0;
         $164 = ($163|0)==(0|0);
         if (!($164)) {
          $$1176$i = $163;$$1178$i = $162;
          continue;
         }
         $165 = ((($$1176$i)) + 16|0);
         $166 = HEAP32[$165>>2]|0;
         $167 = ($166|0)==(0|0);
         if ($167) {
          break;
         } else {
          $$1176$i = $166;$$1178$i = $165;
         }
        }
        HEAP32[$$1178$i>>2] = 0;
        $$3$i = $$1176$i;
       } else {
        $152 = ((($$0172$lcssa$i)) + 8|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ((($153)) + 12|0);
        HEAP32[$154>>2] = $150;
        $155 = ((($150)) + 8|0);
        HEAP32[$155>>2] = $153;
        $$3$i = $150;
       }
      } while(0);
      $168 = ($148|0)==(0|0);
      do {
       if (!($168)) {
        $169 = ((($$0172$lcssa$i)) + 28|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = (31420 + ($170<<2)|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($$0172$lcssa$i|0)==($172|0);
        if ($173) {
         HEAP32[$171>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $174 = 1 << $170;
          $175 = $174 ^ -1;
          $176 = $98 & $175;
          HEAP32[(31120)>>2] = $176;
          break;
         }
        } else {
         $177 = ((($148)) + 16|0);
         $178 = HEAP32[$177>>2]|0;
         $not$1$i = ($178|0)!=($$0172$lcssa$i|0);
         $$sink2$i = $not$1$i&1;
         $179 = (((($148)) + 16|0) + ($$sink2$i<<2)|0);
         HEAP32[$179>>2] = $$3$i;
         $180 = ($$3$i|0)==(0|0);
         if ($180) {
          break;
         }
        }
        $181 = ((($$3$i)) + 24|0);
        HEAP32[$181>>2] = $148;
        $182 = ((($$0172$lcssa$i)) + 16|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = ($183|0)==(0|0);
        if (!($184)) {
         $185 = ((($$3$i)) + 16|0);
         HEAP32[$185>>2] = $183;
         $186 = ((($183)) + 24|0);
         HEAP32[$186>>2] = $$3$i;
        }
        $187 = ((($$0172$lcssa$i)) + 20|0);
        $188 = HEAP32[$187>>2]|0;
        $189 = ($188|0)==(0|0);
        if (!($189)) {
         $190 = ((($$3$i)) + 20|0);
         HEAP32[$190>>2] = $188;
         $191 = ((($188)) + 24|0);
         HEAP32[$191>>2] = $$3$i;
        }
       }
      } while(0);
      $192 = ($$0173$lcssa$i>>>0)<(16);
      if ($192) {
       $193 = (($$0173$lcssa$i) + ($6))|0;
       $194 = $193 | 3;
       $195 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$195>>2] = $194;
       $196 = (($$0172$lcssa$i) + ($193)|0);
       $197 = ((($196)) + 4|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = $198 | 1;
       HEAP32[$197>>2] = $199;
      } else {
       $200 = $6 | 3;
       $201 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$201>>2] = $200;
       $202 = $$0173$lcssa$i | 1;
       $203 = ((($145)) + 4|0);
       HEAP32[$203>>2] = $202;
       $204 = (($145) + ($$0173$lcssa$i)|0);
       HEAP32[$204>>2] = $$0173$lcssa$i;
       $205 = ($33|0)==(0);
       if (!($205)) {
        $206 = HEAP32[(31136)>>2]|0;
        $207 = $33 >>> 3;
        $208 = $207 << 1;
        $209 = (31156 + ($208<<2)|0);
        $210 = 1 << $207;
        $211 = $8 & $210;
        $212 = ($211|0)==(0);
        if ($212) {
         $213 = $8 | $210;
         HEAP32[7779] = $213;
         $$pre$i = ((($209)) + 8|0);
         $$0$i = $209;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $214 = ((($209)) + 8|0);
         $215 = HEAP32[$214>>2]|0;
         $$0$i = $215;$$pre$phi$iZ2D = $214;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $206;
        $216 = ((($$0$i)) + 12|0);
        HEAP32[$216>>2] = $206;
        $217 = ((($206)) + 8|0);
        HEAP32[$217>>2] = $$0$i;
        $218 = ((($206)) + 12|0);
        HEAP32[$218>>2] = $209;
       }
       HEAP32[(31124)>>2] = $$0173$lcssa$i;
       HEAP32[(31136)>>2] = $145;
      }
      $219 = ((($$0172$lcssa$i)) + 8|0);
      $$0 = $219;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $220 = ($0>>>0)>(4294967231);
   if ($220) {
    $$0192 = -1;
   } else {
    $221 = (($0) + 11)|0;
    $222 = $221 & -8;
    $223 = HEAP32[(31120)>>2]|0;
    $224 = ($223|0)==(0);
    if ($224) {
     $$0192 = $222;
    } else {
     $225 = (0 - ($222))|0;
     $226 = $221 >>> 8;
     $227 = ($226|0)==(0);
     if ($227) {
      $$0336$i = 0;
     } else {
      $228 = ($222>>>0)>(16777215);
      if ($228) {
       $$0336$i = 31;
      } else {
       $229 = (($226) + 1048320)|0;
       $230 = $229 >>> 16;
       $231 = $230 & 8;
       $232 = $226 << $231;
       $233 = (($232) + 520192)|0;
       $234 = $233 >>> 16;
       $235 = $234 & 4;
       $236 = $235 | $231;
       $237 = $232 << $235;
       $238 = (($237) + 245760)|0;
       $239 = $238 >>> 16;
       $240 = $239 & 2;
       $241 = $236 | $240;
       $242 = (14 - ($241))|0;
       $243 = $237 << $240;
       $244 = $243 >>> 15;
       $245 = (($242) + ($244))|0;
       $246 = $245 << 1;
       $247 = (($245) + 7)|0;
       $248 = $222 >>> $247;
       $249 = $248 & 1;
       $250 = $249 | $246;
       $$0336$i = $250;
      }
     }
     $251 = (31420 + ($$0336$i<<2)|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = ($252|0)==(0|0);
     L74: do {
      if ($253) {
       $$2333$i = 0;$$3$i200 = 0;$$3328$i = $225;
       label = 57;
      } else {
       $254 = ($$0336$i|0)==(31);
       $255 = $$0336$i >>> 1;
       $256 = (25 - ($255))|0;
       $257 = $254 ? 0 : $256;
       $258 = $222 << $257;
       $$0320$i = 0;$$0325$i = $225;$$0331$i = $252;$$0337$i = $258;$$0340$i = 0;
       while(1) {
        $259 = ((($$0331$i)) + 4|0);
        $260 = HEAP32[$259>>2]|0;
        $261 = $260 & -8;
        $262 = (($261) - ($222))|0;
        $263 = ($262>>>0)<($$0325$i>>>0);
        if ($263) {
         $264 = ($262|0)==(0);
         if ($264) {
          $$411$i = $$0331$i;$$432910$i = 0;$$43359$i = $$0331$i;
          label = 61;
          break L74;
         } else {
          $$1321$i = $$0331$i;$$1326$i = $262;
         }
        } else {
         $$1321$i = $$0320$i;$$1326$i = $$0325$i;
        }
        $265 = ((($$0331$i)) + 20|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = $$0337$i >>> 31;
        $268 = (((($$0331$i)) + 16|0) + ($267<<2)|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = ($266|0)==(0|0);
        $271 = ($266|0)==($269|0);
        $or$cond2$i199 = $270 | $271;
        $$1341$i = $or$cond2$i199 ? $$0340$i : $266;
        $272 = ($269|0)==(0|0);
        $not$5$i = $272 ^ 1;
        $273 = $not$5$i&1;
        $$0337$$i = $$0337$i << $273;
        if ($272) {
         $$2333$i = $$1341$i;$$3$i200 = $$1321$i;$$3328$i = $$1326$i;
         label = 57;
         break;
        } else {
         $$0320$i = $$1321$i;$$0325$i = $$1326$i;$$0331$i = $269;$$0337$i = $$0337$$i;$$0340$i = $$1341$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 57) {
      $274 = ($$2333$i|0)==(0|0);
      $275 = ($$3$i200|0)==(0|0);
      $or$cond$i201 = $274 & $275;
      if ($or$cond$i201) {
       $276 = 2 << $$0336$i;
       $277 = (0 - ($276))|0;
       $278 = $276 | $277;
       $279 = $223 & $278;
       $280 = ($279|0)==(0);
       if ($280) {
        $$0192 = $222;
        break;
       }
       $281 = (0 - ($279))|0;
       $282 = $279 & $281;
       $283 = (($282) + -1)|0;
       $284 = $283 >>> 12;
       $285 = $284 & 16;
       $286 = $283 >>> $285;
       $287 = $286 >>> 5;
       $288 = $287 & 8;
       $289 = $288 | $285;
       $290 = $286 >>> $288;
       $291 = $290 >>> 2;
       $292 = $291 & 4;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 2;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = $298 >>> 1;
       $300 = $299 & 1;
       $301 = $297 | $300;
       $302 = $298 >>> $300;
       $303 = (($301) + ($302))|0;
       $304 = (31420 + ($303<<2)|0);
       $305 = HEAP32[$304>>2]|0;
       $$4$ph$i = 0;$$4335$ph$i = $305;
      } else {
       $$4$ph$i = $$3$i200;$$4335$ph$i = $$2333$i;
      }
      $306 = ($$4335$ph$i|0)==(0|0);
      if ($306) {
       $$4$lcssa$i = $$4$ph$i;$$4329$lcssa$i = $$3328$i;
      } else {
       $$411$i = $$4$ph$i;$$432910$i = $$3328$i;$$43359$i = $$4335$ph$i;
       label = 61;
      }
     }
     if ((label|0) == 61) {
      while(1) {
       label = 0;
       $307 = ((($$43359$i)) + 4|0);
       $308 = HEAP32[$307>>2]|0;
       $309 = $308 & -8;
       $310 = (($309) - ($222))|0;
       $311 = ($310>>>0)<($$432910$i>>>0);
       $$$4329$i = $311 ? $310 : $$432910$i;
       $$4335$$4$i = $311 ? $$43359$i : $$411$i;
       $312 = ((($$43359$i)) + 16|0);
       $313 = HEAP32[$312>>2]|0;
       $not$1$i203 = ($313|0)==(0|0);
       $$sink2$i204 = $not$1$i203&1;
       $314 = (((($$43359$i)) + 16|0) + ($$sink2$i204<<2)|0);
       $315 = HEAP32[$314>>2]|0;
       $316 = ($315|0)==(0|0);
       if ($316) {
        $$4$lcssa$i = $$4335$$4$i;$$4329$lcssa$i = $$$4329$i;
        break;
       } else {
        $$411$i = $$4335$$4$i;$$432910$i = $$$4329$i;$$43359$i = $315;
        label = 61;
       }
      }
     }
     $317 = ($$4$lcssa$i|0)==(0|0);
     if ($317) {
      $$0192 = $222;
     } else {
      $318 = HEAP32[(31124)>>2]|0;
      $319 = (($318) - ($222))|0;
      $320 = ($$4329$lcssa$i>>>0)<($319>>>0);
      if ($320) {
       $321 = (($$4$lcssa$i) + ($222)|0);
       $322 = ($$4$lcssa$i>>>0)<($321>>>0);
       if (!($322)) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $323 = ((($$4$lcssa$i)) + 24|0);
       $324 = HEAP32[$323>>2]|0;
       $325 = ((($$4$lcssa$i)) + 12|0);
       $326 = HEAP32[$325>>2]|0;
       $327 = ($326|0)==($$4$lcssa$i|0);
       do {
        if ($327) {
         $332 = ((($$4$lcssa$i)) + 20|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = ($333|0)==(0|0);
         if ($334) {
          $335 = ((($$4$lcssa$i)) + 16|0);
          $336 = HEAP32[$335>>2]|0;
          $337 = ($336|0)==(0|0);
          if ($337) {
           $$3349$i = 0;
           break;
          } else {
           $$1347$i = $336;$$1351$i = $335;
          }
         } else {
          $$1347$i = $333;$$1351$i = $332;
         }
         while(1) {
          $338 = ((($$1347$i)) + 20|0);
          $339 = HEAP32[$338>>2]|0;
          $340 = ($339|0)==(0|0);
          if (!($340)) {
           $$1347$i = $339;$$1351$i = $338;
           continue;
          }
          $341 = ((($$1347$i)) + 16|0);
          $342 = HEAP32[$341>>2]|0;
          $343 = ($342|0)==(0|0);
          if ($343) {
           break;
          } else {
           $$1347$i = $342;$$1351$i = $341;
          }
         }
         HEAP32[$$1351$i>>2] = 0;
         $$3349$i = $$1347$i;
        } else {
         $328 = ((($$4$lcssa$i)) + 8|0);
         $329 = HEAP32[$328>>2]|0;
         $330 = ((($329)) + 12|0);
         HEAP32[$330>>2] = $326;
         $331 = ((($326)) + 8|0);
         HEAP32[$331>>2] = $329;
         $$3349$i = $326;
        }
       } while(0);
       $344 = ($324|0)==(0|0);
       do {
        if ($344) {
         $426 = $223;
        } else {
         $345 = ((($$4$lcssa$i)) + 28|0);
         $346 = HEAP32[$345>>2]|0;
         $347 = (31420 + ($346<<2)|0);
         $348 = HEAP32[$347>>2]|0;
         $349 = ($$4$lcssa$i|0)==($348|0);
         if ($349) {
          HEAP32[$347>>2] = $$3349$i;
          $cond$i208 = ($$3349$i|0)==(0|0);
          if ($cond$i208) {
           $350 = 1 << $346;
           $351 = $350 ^ -1;
           $352 = $223 & $351;
           HEAP32[(31120)>>2] = $352;
           $426 = $352;
           break;
          }
         } else {
          $353 = ((($324)) + 16|0);
          $354 = HEAP32[$353>>2]|0;
          $not$$i209 = ($354|0)!=($$4$lcssa$i|0);
          $$sink3$i = $not$$i209&1;
          $355 = (((($324)) + 16|0) + ($$sink3$i<<2)|0);
          HEAP32[$355>>2] = $$3349$i;
          $356 = ($$3349$i|0)==(0|0);
          if ($356) {
           $426 = $223;
           break;
          }
         }
         $357 = ((($$3349$i)) + 24|0);
         HEAP32[$357>>2] = $324;
         $358 = ((($$4$lcssa$i)) + 16|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==(0|0);
         if (!($360)) {
          $361 = ((($$3349$i)) + 16|0);
          HEAP32[$361>>2] = $359;
          $362 = ((($359)) + 24|0);
          HEAP32[$362>>2] = $$3349$i;
         }
         $363 = ((($$4$lcssa$i)) + 20|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==(0|0);
         if ($365) {
          $426 = $223;
         } else {
          $366 = ((($$3349$i)) + 20|0);
          HEAP32[$366>>2] = $364;
          $367 = ((($364)) + 24|0);
          HEAP32[$367>>2] = $$3349$i;
          $426 = $223;
         }
        }
       } while(0);
       $368 = ($$4329$lcssa$i>>>0)<(16);
       do {
        if ($368) {
         $369 = (($$4329$lcssa$i) + ($222))|0;
         $370 = $369 | 3;
         $371 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$371>>2] = $370;
         $372 = (($$4$lcssa$i) + ($369)|0);
         $373 = ((($372)) + 4|0);
         $374 = HEAP32[$373>>2]|0;
         $375 = $374 | 1;
         HEAP32[$373>>2] = $375;
        } else {
         $376 = $222 | 3;
         $377 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$377>>2] = $376;
         $378 = $$4329$lcssa$i | 1;
         $379 = ((($321)) + 4|0);
         HEAP32[$379>>2] = $378;
         $380 = (($321) + ($$4329$lcssa$i)|0);
         HEAP32[$380>>2] = $$4329$lcssa$i;
         $381 = $$4329$lcssa$i >>> 3;
         $382 = ($$4329$lcssa$i>>>0)<(256);
         if ($382) {
          $383 = $381 << 1;
          $384 = (31156 + ($383<<2)|0);
          $385 = HEAP32[7779]|0;
          $386 = 1 << $381;
          $387 = $385 & $386;
          $388 = ($387|0)==(0);
          if ($388) {
           $389 = $385 | $386;
           HEAP32[7779] = $389;
           $$pre$i210 = ((($384)) + 8|0);
           $$0345$i = $384;$$pre$phi$i211Z2D = $$pre$i210;
          } else {
           $390 = ((($384)) + 8|0);
           $391 = HEAP32[$390>>2]|0;
           $$0345$i = $391;$$pre$phi$i211Z2D = $390;
          }
          HEAP32[$$pre$phi$i211Z2D>>2] = $321;
          $392 = ((($$0345$i)) + 12|0);
          HEAP32[$392>>2] = $321;
          $393 = ((($321)) + 8|0);
          HEAP32[$393>>2] = $$0345$i;
          $394 = ((($321)) + 12|0);
          HEAP32[$394>>2] = $384;
          break;
         }
         $395 = $$4329$lcssa$i >>> 8;
         $396 = ($395|0)==(0);
         if ($396) {
          $$0339$i = 0;
         } else {
          $397 = ($$4329$lcssa$i>>>0)>(16777215);
          if ($397) {
           $$0339$i = 31;
          } else {
           $398 = (($395) + 1048320)|0;
           $399 = $398 >>> 16;
           $400 = $399 & 8;
           $401 = $395 << $400;
           $402 = (($401) + 520192)|0;
           $403 = $402 >>> 16;
           $404 = $403 & 4;
           $405 = $404 | $400;
           $406 = $401 << $404;
           $407 = (($406) + 245760)|0;
           $408 = $407 >>> 16;
           $409 = $408 & 2;
           $410 = $405 | $409;
           $411 = (14 - ($410))|0;
           $412 = $406 << $409;
           $413 = $412 >>> 15;
           $414 = (($411) + ($413))|0;
           $415 = $414 << 1;
           $416 = (($414) + 7)|0;
           $417 = $$4329$lcssa$i >>> $416;
           $418 = $417 & 1;
           $419 = $418 | $415;
           $$0339$i = $419;
          }
         }
         $420 = (31420 + ($$0339$i<<2)|0);
         $421 = ((($321)) + 28|0);
         HEAP32[$421>>2] = $$0339$i;
         $422 = ((($321)) + 16|0);
         $423 = ((($422)) + 4|0);
         HEAP32[$423>>2] = 0;
         HEAP32[$422>>2] = 0;
         $424 = 1 << $$0339$i;
         $425 = $426 & $424;
         $427 = ($425|0)==(0);
         if ($427) {
          $428 = $426 | $424;
          HEAP32[(31120)>>2] = $428;
          HEAP32[$420>>2] = $321;
          $429 = ((($321)) + 24|0);
          HEAP32[$429>>2] = $420;
          $430 = ((($321)) + 12|0);
          HEAP32[$430>>2] = $321;
          $431 = ((($321)) + 8|0);
          HEAP32[$431>>2] = $321;
          break;
         }
         $432 = HEAP32[$420>>2]|0;
         $433 = ($$0339$i|0)==(31);
         $434 = $$0339$i >>> 1;
         $435 = (25 - ($434))|0;
         $436 = $433 ? 0 : $435;
         $437 = $$4329$lcssa$i << $436;
         $$0322$i = $437;$$0323$i = $432;
         while(1) {
          $438 = ((($$0323$i)) + 4|0);
          $439 = HEAP32[$438>>2]|0;
          $440 = $439 & -8;
          $441 = ($440|0)==($$4329$lcssa$i|0);
          if ($441) {
           label = 97;
           break;
          }
          $442 = $$0322$i >>> 31;
          $443 = (((($$0323$i)) + 16|0) + ($442<<2)|0);
          $444 = $$0322$i << 1;
          $445 = HEAP32[$443>>2]|0;
          $446 = ($445|0)==(0|0);
          if ($446) {
           label = 96;
           break;
          } else {
           $$0322$i = $444;$$0323$i = $445;
          }
         }
         if ((label|0) == 96) {
          HEAP32[$443>>2] = $321;
          $447 = ((($321)) + 24|0);
          HEAP32[$447>>2] = $$0323$i;
          $448 = ((($321)) + 12|0);
          HEAP32[$448>>2] = $321;
          $449 = ((($321)) + 8|0);
          HEAP32[$449>>2] = $321;
          break;
         }
         else if ((label|0) == 97) {
          $450 = ((($$0323$i)) + 8|0);
          $451 = HEAP32[$450>>2]|0;
          $452 = ((($451)) + 12|0);
          HEAP32[$452>>2] = $321;
          HEAP32[$450>>2] = $321;
          $453 = ((($321)) + 8|0);
          HEAP32[$453>>2] = $451;
          $454 = ((($321)) + 12|0);
          HEAP32[$454>>2] = $$0323$i;
          $455 = ((($321)) + 24|0);
          HEAP32[$455>>2] = 0;
          break;
         }
        }
       } while(0);
       $456 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $456;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0192 = $222;
      }
     }
    }
   }
  }
 } while(0);
 $457 = HEAP32[(31124)>>2]|0;
 $458 = ($457>>>0)<($$0192>>>0);
 if (!($458)) {
  $459 = (($457) - ($$0192))|0;
  $460 = HEAP32[(31136)>>2]|0;
  $461 = ($459>>>0)>(15);
  if ($461) {
   $462 = (($460) + ($$0192)|0);
   HEAP32[(31136)>>2] = $462;
   HEAP32[(31124)>>2] = $459;
   $463 = $459 | 1;
   $464 = ((($462)) + 4|0);
   HEAP32[$464>>2] = $463;
   $465 = (($462) + ($459)|0);
   HEAP32[$465>>2] = $459;
   $466 = $$0192 | 3;
   $467 = ((($460)) + 4|0);
   HEAP32[$467>>2] = $466;
  } else {
   HEAP32[(31124)>>2] = 0;
   HEAP32[(31136)>>2] = 0;
   $468 = $457 | 3;
   $469 = ((($460)) + 4|0);
   HEAP32[$469>>2] = $468;
   $470 = (($460) + ($457)|0);
   $471 = ((($470)) + 4|0);
   $472 = HEAP32[$471>>2]|0;
   $473 = $472 | 1;
   HEAP32[$471>>2] = $473;
  }
  $474 = ((($460)) + 8|0);
  $$0 = $474;
  STACKTOP = sp;return ($$0|0);
 }
 $475 = HEAP32[(31128)>>2]|0;
 $476 = ($475>>>0)>($$0192>>>0);
 if ($476) {
  $477 = (($475) - ($$0192))|0;
  HEAP32[(31128)>>2] = $477;
  $478 = HEAP32[(31140)>>2]|0;
  $479 = (($478) + ($$0192)|0);
  HEAP32[(31140)>>2] = $479;
  $480 = $477 | 1;
  $481 = ((($479)) + 4|0);
  HEAP32[$481>>2] = $480;
  $482 = $$0192 | 3;
  $483 = ((($478)) + 4|0);
  HEAP32[$483>>2] = $482;
  $484 = ((($478)) + 8|0);
  $$0 = $484;
  STACKTOP = sp;return ($$0|0);
 }
 $485 = HEAP32[7897]|0;
 $486 = ($485|0)==(0);
 if ($486) {
  HEAP32[(31596)>>2] = 4096;
  HEAP32[(31592)>>2] = 4096;
  HEAP32[(31600)>>2] = -1;
  HEAP32[(31604)>>2] = -1;
  HEAP32[(31608)>>2] = 0;
  HEAP32[(31560)>>2] = 0;
  $487 = $1;
  $488 = $487 & -16;
  $489 = $488 ^ 1431655768;
  HEAP32[$1>>2] = $489;
  HEAP32[7897] = $489;
  $493 = 4096;
 } else {
  $$pre$i195 = HEAP32[(31596)>>2]|0;
  $493 = $$pre$i195;
 }
 $490 = (($$0192) + 48)|0;
 $491 = (($$0192) + 47)|0;
 $492 = (($493) + ($491))|0;
 $494 = (0 - ($493))|0;
 $495 = $492 & $494;
 $496 = ($495>>>0)>($$0192>>>0);
 if (!($496)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $497 = HEAP32[(31556)>>2]|0;
 $498 = ($497|0)==(0);
 if (!($498)) {
  $499 = HEAP32[(31548)>>2]|0;
  $500 = (($499) + ($495))|0;
  $501 = ($500>>>0)<=($499>>>0);
  $502 = ($500>>>0)>($497>>>0);
  $or$cond1$i = $501 | $502;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $503 = HEAP32[(31560)>>2]|0;
 $504 = $503 & 4;
 $505 = ($504|0)==(0);
 L167: do {
  if ($505) {
   $506 = HEAP32[(31140)>>2]|0;
   $507 = ($506|0)==(0|0);
   L169: do {
    if ($507) {
     label = 118;
    } else {
     $$0$i20$i = (31564);
     while(1) {
      $508 = HEAP32[$$0$i20$i>>2]|0;
      $509 = ($508>>>0)>($506>>>0);
      if (!($509)) {
       $510 = ((($$0$i20$i)) + 4|0);
       $511 = HEAP32[$510>>2]|0;
       $512 = (($508) + ($511)|0);
       $513 = ($512>>>0)>($506>>>0);
       if ($513) {
        break;
       }
      }
      $514 = ((($$0$i20$i)) + 8|0);
      $515 = HEAP32[$514>>2]|0;
      $516 = ($515|0)==(0|0);
      if ($516) {
       label = 118;
       break L169;
      } else {
       $$0$i20$i = $515;
      }
     }
     $539 = (($492) - ($475))|0;
     $540 = $539 & $494;
     $541 = ($540>>>0)<(2147483647);
     if ($541) {
      $542 = (_sbrk(($540|0))|0);
      $543 = HEAP32[$$0$i20$i>>2]|0;
      $544 = HEAP32[$510>>2]|0;
      $545 = (($543) + ($544)|0);
      $546 = ($542|0)==($545|0);
      if ($546) {
       $547 = ($542|0)==((-1)|0);
       if ($547) {
        $$2234243136$i = $540;
       } else {
        $$723947$i = $540;$$748$i = $542;
        label = 135;
        break L167;
       }
      } else {
       $$2247$ph$i = $542;$$2253$ph$i = $540;
       label = 126;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 118) {
     $517 = (_sbrk(0)|0);
     $518 = ($517|0)==((-1)|0);
     if ($518) {
      $$2234243136$i = 0;
     } else {
      $519 = $517;
      $520 = HEAP32[(31592)>>2]|0;
      $521 = (($520) + -1)|0;
      $522 = $521 & $519;
      $523 = ($522|0)==(0);
      $524 = (($521) + ($519))|0;
      $525 = (0 - ($520))|0;
      $526 = $524 & $525;
      $527 = (($526) - ($519))|0;
      $528 = $523 ? 0 : $527;
      $$$i = (($528) + ($495))|0;
      $529 = HEAP32[(31548)>>2]|0;
      $530 = (($$$i) + ($529))|0;
      $531 = ($$$i>>>0)>($$0192>>>0);
      $532 = ($$$i>>>0)<(2147483647);
      $or$cond$i = $531 & $532;
      if ($or$cond$i) {
       $533 = HEAP32[(31556)>>2]|0;
       $534 = ($533|0)==(0);
       if (!($534)) {
        $535 = ($530>>>0)<=($529>>>0);
        $536 = ($530>>>0)>($533>>>0);
        $or$cond2$i = $535 | $536;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $537 = (_sbrk(($$$i|0))|0);
       $538 = ($537|0)==($517|0);
       if ($538) {
        $$723947$i = $$$i;$$748$i = $517;
        label = 135;
        break L167;
       } else {
        $$2247$ph$i = $537;$$2253$ph$i = $$$i;
        label = 126;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 126) {
     $548 = (0 - ($$2253$ph$i))|0;
     $549 = ($$2247$ph$i|0)!=((-1)|0);
     $550 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $550 & $549;
     $551 = ($490>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $551 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $561 = ($$2247$ph$i|0)==((-1)|0);
      if ($561) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 135;
       break L167;
      }
     }
     $552 = HEAP32[(31596)>>2]|0;
     $553 = (($491) - ($$2253$ph$i))|0;
     $554 = (($553) + ($552))|0;
     $555 = (0 - ($552))|0;
     $556 = $554 & $555;
     $557 = ($556>>>0)<(2147483647);
     if (!($557)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
     $558 = (_sbrk(($556|0))|0);
     $559 = ($558|0)==((-1)|0);
     if ($559) {
      (_sbrk(($548|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $560 = (($556) + ($$2253$ph$i))|0;
      $$723947$i = $560;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
    }
   } while(0);
   $562 = HEAP32[(31560)>>2]|0;
   $563 = $562 | 4;
   HEAP32[(31560)>>2] = $563;
   $$4236$i = $$2234243136$i;
   label = 133;
  } else {
   $$4236$i = 0;
   label = 133;
  }
 } while(0);
 if ((label|0) == 133) {
  $564 = ($495>>>0)<(2147483647);
  if ($564) {
   $565 = (_sbrk(($495|0))|0);
   $566 = (_sbrk(0)|0);
   $567 = ($565|0)!=((-1)|0);
   $568 = ($566|0)!=((-1)|0);
   $or$cond5$i = $567 & $568;
   $569 = ($565>>>0)<($566>>>0);
   $or$cond11$i = $569 & $or$cond5$i;
   $570 = $566;
   $571 = $565;
   $572 = (($570) - ($571))|0;
   $573 = (($$0192) + 40)|0;
   $574 = ($572>>>0)>($573>>>0);
   $$$4236$i = $574 ? $572 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $575 = ($565|0)==((-1)|0);
   $not$$i197 = $574 ^ 1;
   $576 = $575 | $not$$i197;
   $or$cond49$i = $576 | $or$cond11$not$i;
   if (!($or$cond49$i)) {
    $$723947$i = $$$4236$i;$$748$i = $565;
    label = 135;
   }
  }
 }
 if ((label|0) == 135) {
  $577 = HEAP32[(31548)>>2]|0;
  $578 = (($577) + ($$723947$i))|0;
  HEAP32[(31548)>>2] = $578;
  $579 = HEAP32[(31552)>>2]|0;
  $580 = ($578>>>0)>($579>>>0);
  if ($580) {
   HEAP32[(31552)>>2] = $578;
  }
  $581 = HEAP32[(31140)>>2]|0;
  $582 = ($581|0)==(0|0);
  do {
   if ($582) {
    $583 = HEAP32[(31132)>>2]|0;
    $584 = ($583|0)==(0|0);
    $585 = ($$748$i>>>0)<($583>>>0);
    $or$cond12$i = $584 | $585;
    if ($or$cond12$i) {
     HEAP32[(31132)>>2] = $$748$i;
    }
    HEAP32[(31564)>>2] = $$748$i;
    HEAP32[(31568)>>2] = $$723947$i;
    HEAP32[(31576)>>2] = 0;
    $586 = HEAP32[7897]|0;
    HEAP32[(31152)>>2] = $586;
    HEAP32[(31148)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $587 = $$01$i$i << 1;
     $588 = (31156 + ($587<<2)|0);
     $589 = ((($588)) + 12|0);
     HEAP32[$589>>2] = $588;
     $590 = ((($588)) + 8|0);
     HEAP32[$590>>2] = $588;
     $591 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($591|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $591;
     }
    }
    $592 = (($$723947$i) + -40)|0;
    $593 = ((($$748$i)) + 8|0);
    $594 = $593;
    $595 = $594 & 7;
    $596 = ($595|0)==(0);
    $597 = (0 - ($594))|0;
    $598 = $597 & 7;
    $599 = $596 ? 0 : $598;
    $600 = (($$748$i) + ($599)|0);
    $601 = (($592) - ($599))|0;
    HEAP32[(31140)>>2] = $600;
    HEAP32[(31128)>>2] = $601;
    $602 = $601 | 1;
    $603 = ((($600)) + 4|0);
    HEAP32[$603>>2] = $602;
    $604 = (($600) + ($601)|0);
    $605 = ((($604)) + 4|0);
    HEAP32[$605>>2] = 40;
    $606 = HEAP32[(31604)>>2]|0;
    HEAP32[(31144)>>2] = $606;
   } else {
    $$024370$i = (31564);
    while(1) {
     $607 = HEAP32[$$024370$i>>2]|0;
     $608 = ((($$024370$i)) + 4|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = (($607) + ($609)|0);
     $611 = ($$748$i|0)==($610|0);
     if ($611) {
      label = 145;
      break;
     }
     $612 = ((($$024370$i)) + 8|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = ($613|0)==(0|0);
     if ($614) {
      break;
     } else {
      $$024370$i = $613;
     }
    }
    if ((label|0) == 145) {
     $615 = ((($$024370$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($581>>>0)>=($607>>>0);
      $620 = ($581>>>0)<($$748$i>>>0);
      $or$cond50$i = $620 & $619;
      if ($or$cond50$i) {
       $621 = (($609) + ($$723947$i))|0;
       HEAP32[$608>>2] = $621;
       $622 = HEAP32[(31128)>>2]|0;
       $623 = ((($581)) + 8|0);
       $624 = $623;
       $625 = $624 & 7;
       $626 = ($625|0)==(0);
       $627 = (0 - ($624))|0;
       $628 = $627 & 7;
       $629 = $626 ? 0 : $628;
       $630 = (($581) + ($629)|0);
       $631 = (($$723947$i) - ($629))|0;
       $632 = (($622) + ($631))|0;
       HEAP32[(31140)>>2] = $630;
       HEAP32[(31128)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($630)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($630) + ($632)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(31604)>>2]|0;
       HEAP32[(31144)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(31132)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(31132)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (31564);
    while(1) {
     $641 = HEAP32[$$124469$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 153;
      break;
     }
     $643 = ((($$124469$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      break;
     } else {
      $$124469$i = $644;
     }
    }
    if ((label|0) == 153) {
     $646 = ((($$124469$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $650 = ((($$124469$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($668|0)==($581|0);
      do {
       if ($676) {
        $677 = HEAP32[(31128)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(31128)>>2] = $678;
        HEAP32[(31140)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(31136)>>2]|0;
        $682 = ($668|0)==($681|0);
        if ($682) {
         $683 = HEAP32[(31124)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(31124)>>2] = $684;
         HEAP32[(31136)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L237: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[7779]|0;
            $703 = $702 & $701;
            HEAP32[7779] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1264$i$i = $719;$$1266$i$i = $715;
              }
             } else {
              $$1264$i$i = $717;$$1266$i$i = $716;
             }
             while(1) {
              $721 = ((($$1264$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if (!($723)) {
               $$1264$i$i = $722;$$1266$i$i = $721;
               continue;
              }
              $724 = ((($$1264$i$i)) + 16|0);
              $725 = HEAP32[$724>>2]|0;
              $726 = ($725|0)==(0|0);
              if ($726) {
               break;
              } else {
               $$1264$i$i = $725;$$1266$i$i = $724;
              }
             }
             HEAP32[$$1266$i$i>>2] = 0;
             $$3$i$i = $$1264$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (31420 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($668|0)==($731|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(31120)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(31120)>>2] = $736;
             break L237;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $not$$i$i = ($738|0)!=($668|0);
             $$sink1$i$i = $not$$i$i&1;
             $739 = (((($707)) + 16|0) + ($$sink1$i$i<<2)|0);
             HEAP32[$739>>2] = $$3$i$i;
             $740 = ($$3$i$i|0)==(0|0);
             if ($740) {
              break L237;
             }
            }
           } while(0);
           $741 = ((($$3$i$i)) + 24|0);
           HEAP32[$741>>2] = $707;
           $742 = ((($668)) + 16|0);
           $743 = HEAP32[$742>>2]|0;
           $744 = ($743|0)==(0|0);
           if (!($744)) {
            $745 = ((($$3$i$i)) + 16|0);
            HEAP32[$745>>2] = $743;
            $746 = ((($743)) + 24|0);
            HEAP32[$746>>2] = $$3$i$i;
           }
           $747 = ((($742)) + 4|0);
           $748 = HEAP32[$747>>2]|0;
           $749 = ($748|0)==(0|0);
           if ($749) {
            break;
           }
           $750 = ((($$3$i$i)) + 20|0);
           HEAP32[$750>>2] = $748;
           $751 = ((($748)) + 24|0);
           HEAP32[$751>>2] = $$3$i$i;
          }
         } while(0);
         $752 = (($668) + ($692)|0);
         $753 = (($692) + ($673))|0;
         $$0$i$i = $752;$$0260$i$i = $753;
        } else {
         $$0$i$i = $668;$$0260$i$i = $673;
        }
        $754 = ((($$0$i$i)) + 4|0);
        $755 = HEAP32[$754>>2]|0;
        $756 = $755 & -2;
        HEAP32[$754>>2] = $756;
        $757 = $$0260$i$i | 1;
        $758 = ((($672)) + 4|0);
        HEAP32[$758>>2] = $757;
        $759 = (($672) + ($$0260$i$i)|0);
        HEAP32[$759>>2] = $$0260$i$i;
        $760 = $$0260$i$i >>> 3;
        $761 = ($$0260$i$i>>>0)<(256);
        if ($761) {
         $762 = $760 << 1;
         $763 = (31156 + ($762<<2)|0);
         $764 = HEAP32[7779]|0;
         $765 = 1 << $760;
         $766 = $764 & $765;
         $767 = ($766|0)==(0);
         if ($767) {
          $768 = $764 | $765;
          HEAP32[7779] = $768;
          $$pre$i17$i = ((($763)) + 8|0);
          $$0268$i$i = $763;$$pre$phi$i18$iZ2D = $$pre$i17$i;
         } else {
          $769 = ((($763)) + 8|0);
          $770 = HEAP32[$769>>2]|0;
          $$0268$i$i = $770;$$pre$phi$i18$iZ2D = $769;
         }
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $672;
         $771 = ((($$0268$i$i)) + 12|0);
         HEAP32[$771>>2] = $672;
         $772 = ((($672)) + 8|0);
         HEAP32[$772>>2] = $$0268$i$i;
         $773 = ((($672)) + 12|0);
         HEAP32[$773>>2] = $763;
         break;
        }
        $774 = $$0260$i$i >>> 8;
        $775 = ($774|0)==(0);
        do {
         if ($775) {
          $$0269$i$i = 0;
         } else {
          $776 = ($$0260$i$i>>>0)>(16777215);
          if ($776) {
           $$0269$i$i = 31;
           break;
          }
          $777 = (($774) + 1048320)|0;
          $778 = $777 >>> 16;
          $779 = $778 & 8;
          $780 = $774 << $779;
          $781 = (($780) + 520192)|0;
          $782 = $781 >>> 16;
          $783 = $782 & 4;
          $784 = $783 | $779;
          $785 = $780 << $783;
          $786 = (($785) + 245760)|0;
          $787 = $786 >>> 16;
          $788 = $787 & 2;
          $789 = $784 | $788;
          $790 = (14 - ($789))|0;
          $791 = $785 << $788;
          $792 = $791 >>> 15;
          $793 = (($790) + ($792))|0;
          $794 = $793 << 1;
          $795 = (($793) + 7)|0;
          $796 = $$0260$i$i >>> $795;
          $797 = $796 & 1;
          $798 = $797 | $794;
          $$0269$i$i = $798;
         }
        } while(0);
        $799 = (31420 + ($$0269$i$i<<2)|0);
        $800 = ((($672)) + 28|0);
        HEAP32[$800>>2] = $$0269$i$i;
        $801 = ((($672)) + 16|0);
        $802 = ((($801)) + 4|0);
        HEAP32[$802>>2] = 0;
        HEAP32[$801>>2] = 0;
        $803 = HEAP32[(31120)>>2]|0;
        $804 = 1 << $$0269$i$i;
        $805 = $803 & $804;
        $806 = ($805|0)==(0);
        if ($806) {
         $807 = $803 | $804;
         HEAP32[(31120)>>2] = $807;
         HEAP32[$799>>2] = $672;
         $808 = ((($672)) + 24|0);
         HEAP32[$808>>2] = $799;
         $809 = ((($672)) + 12|0);
         HEAP32[$809>>2] = $672;
         $810 = ((($672)) + 8|0);
         HEAP32[$810>>2] = $672;
         break;
        }
        $811 = HEAP32[$799>>2]|0;
        $812 = ($$0269$i$i|0)==(31);
        $813 = $$0269$i$i >>> 1;
        $814 = (25 - ($813))|0;
        $815 = $812 ? 0 : $814;
        $816 = $$0260$i$i << $815;
        $$0261$i$i = $816;$$0262$i$i = $811;
        while(1) {
         $817 = ((($$0262$i$i)) + 4|0);
         $818 = HEAP32[$817>>2]|0;
         $819 = $818 & -8;
         $820 = ($819|0)==($$0260$i$i|0);
         if ($820) {
          label = 194;
          break;
         }
         $821 = $$0261$i$i >>> 31;
         $822 = (((($$0262$i$i)) + 16|0) + ($821<<2)|0);
         $823 = $$0261$i$i << 1;
         $824 = HEAP32[$822>>2]|0;
         $825 = ($824|0)==(0|0);
         if ($825) {
          label = 193;
          break;
         } else {
          $$0261$i$i = $823;$$0262$i$i = $824;
         }
        }
        if ((label|0) == 193) {
         HEAP32[$822>>2] = $672;
         $826 = ((($672)) + 24|0);
         HEAP32[$826>>2] = $$0262$i$i;
         $827 = ((($672)) + 12|0);
         HEAP32[$827>>2] = $672;
         $828 = ((($672)) + 8|0);
         HEAP32[$828>>2] = $672;
         break;
        }
        else if ((label|0) == 194) {
         $829 = ((($$0262$i$i)) + 8|0);
         $830 = HEAP32[$829>>2]|0;
         $831 = ((($830)) + 12|0);
         HEAP32[$831>>2] = $672;
         HEAP32[$829>>2] = $672;
         $832 = ((($672)) + 8|0);
         HEAP32[$832>>2] = $830;
         $833 = ((($672)) + 12|0);
         HEAP32[$833>>2] = $$0262$i$i;
         $834 = ((($672)) + 24|0);
         HEAP32[$834>>2] = 0;
         break;
        }
       }
      } while(0);
      $959 = ((($660)) + 8|0);
      $$0 = $959;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (31564);
    while(1) {
     $835 = HEAP32[$$0$i$i$i>>2]|0;
     $836 = ($835>>>0)>($581>>>0);
     if (!($836)) {
      $837 = ((($$0$i$i$i)) + 4|0);
      $838 = HEAP32[$837>>2]|0;
      $839 = (($835) + ($838)|0);
      $840 = ($839>>>0)>($581>>>0);
      if ($840) {
       break;
      }
     }
     $841 = ((($$0$i$i$i)) + 8|0);
     $842 = HEAP32[$841>>2]|0;
     $$0$i$i$i = $842;
    }
    $843 = ((($839)) + -47|0);
    $844 = ((($843)) + 8|0);
    $845 = $844;
    $846 = $845 & 7;
    $847 = ($846|0)==(0);
    $848 = (0 - ($845))|0;
    $849 = $848 & 7;
    $850 = $847 ? 0 : $849;
    $851 = (($843) + ($850)|0);
    $852 = ((($581)) + 16|0);
    $853 = ($851>>>0)<($852>>>0);
    $854 = $853 ? $581 : $851;
    $855 = ((($854)) + 8|0);
    $856 = ((($854)) + 24|0);
    $857 = (($$723947$i) + -40)|0;
    $858 = ((($$748$i)) + 8|0);
    $859 = $858;
    $860 = $859 & 7;
    $861 = ($860|0)==(0);
    $862 = (0 - ($859))|0;
    $863 = $862 & 7;
    $864 = $861 ? 0 : $863;
    $865 = (($$748$i) + ($864)|0);
    $866 = (($857) - ($864))|0;
    HEAP32[(31140)>>2] = $865;
    HEAP32[(31128)>>2] = $866;
    $867 = $866 | 1;
    $868 = ((($865)) + 4|0);
    HEAP32[$868>>2] = $867;
    $869 = (($865) + ($866)|0);
    $870 = ((($869)) + 4|0);
    HEAP32[$870>>2] = 40;
    $871 = HEAP32[(31604)>>2]|0;
    HEAP32[(31144)>>2] = $871;
    $872 = ((($854)) + 4|0);
    HEAP32[$872>>2] = 27;
    ;HEAP32[$855>>2]=HEAP32[(31564)>>2]|0;HEAP32[$855+4>>2]=HEAP32[(31564)+4>>2]|0;HEAP32[$855+8>>2]=HEAP32[(31564)+8>>2]|0;HEAP32[$855+12>>2]=HEAP32[(31564)+12>>2]|0;
    HEAP32[(31564)>>2] = $$748$i;
    HEAP32[(31568)>>2] = $$723947$i;
    HEAP32[(31576)>>2] = 0;
    HEAP32[(31572)>>2] = $855;
    $874 = $856;
    while(1) {
     $873 = ((($874)) + 4|0);
     HEAP32[$873>>2] = 7;
     $875 = ((($874)) + 8|0);
     $876 = ($875>>>0)<($839>>>0);
     if ($876) {
      $874 = $873;
     } else {
      break;
     }
    }
    $877 = ($854|0)==($581|0);
    if (!($877)) {
     $878 = $854;
     $879 = $581;
     $880 = (($878) - ($879))|0;
     $881 = HEAP32[$872>>2]|0;
     $882 = $881 & -2;
     HEAP32[$872>>2] = $882;
     $883 = $880 | 1;
     $884 = ((($581)) + 4|0);
     HEAP32[$884>>2] = $883;
     HEAP32[$854>>2] = $880;
     $885 = $880 >>> 3;
     $886 = ($880>>>0)<(256);
     if ($886) {
      $887 = $885 << 1;
      $888 = (31156 + ($887<<2)|0);
      $889 = HEAP32[7779]|0;
      $890 = 1 << $885;
      $891 = $889 & $890;
      $892 = ($891|0)==(0);
      if ($892) {
       $893 = $889 | $890;
       HEAP32[7779] = $893;
       $$pre$i$i = ((($888)) + 8|0);
       $$0206$i$i = $888;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $894 = ((($888)) + 8|0);
       $895 = HEAP32[$894>>2]|0;
       $$0206$i$i = $895;$$pre$phi$i$iZ2D = $894;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $581;
      $896 = ((($$0206$i$i)) + 12|0);
      HEAP32[$896>>2] = $581;
      $897 = ((($581)) + 8|0);
      HEAP32[$897>>2] = $$0206$i$i;
      $898 = ((($581)) + 12|0);
      HEAP32[$898>>2] = $888;
      break;
     }
     $899 = $880 >>> 8;
     $900 = ($899|0)==(0);
     if ($900) {
      $$0207$i$i = 0;
     } else {
      $901 = ($880>>>0)>(16777215);
      if ($901) {
       $$0207$i$i = 31;
      } else {
       $902 = (($899) + 1048320)|0;
       $903 = $902 >>> 16;
       $904 = $903 & 8;
       $905 = $899 << $904;
       $906 = (($905) + 520192)|0;
       $907 = $906 >>> 16;
       $908 = $907 & 4;
       $909 = $908 | $904;
       $910 = $905 << $908;
       $911 = (($910) + 245760)|0;
       $912 = $911 >>> 16;
       $913 = $912 & 2;
       $914 = $909 | $913;
       $915 = (14 - ($914))|0;
       $916 = $910 << $913;
       $917 = $916 >>> 15;
       $918 = (($915) + ($917))|0;
       $919 = $918 << 1;
       $920 = (($918) + 7)|0;
       $921 = $880 >>> $920;
       $922 = $921 & 1;
       $923 = $922 | $919;
       $$0207$i$i = $923;
      }
     }
     $924 = (31420 + ($$0207$i$i<<2)|0);
     $925 = ((($581)) + 28|0);
     HEAP32[$925>>2] = $$0207$i$i;
     $926 = ((($581)) + 20|0);
     HEAP32[$926>>2] = 0;
     HEAP32[$852>>2] = 0;
     $927 = HEAP32[(31120)>>2]|0;
     $928 = 1 << $$0207$i$i;
     $929 = $927 & $928;
     $930 = ($929|0)==(0);
     if ($930) {
      $931 = $927 | $928;
      HEAP32[(31120)>>2] = $931;
      HEAP32[$924>>2] = $581;
      $932 = ((($581)) + 24|0);
      HEAP32[$932>>2] = $924;
      $933 = ((($581)) + 12|0);
      HEAP32[$933>>2] = $581;
      $934 = ((($581)) + 8|0);
      HEAP32[$934>>2] = $581;
      break;
     }
     $935 = HEAP32[$924>>2]|0;
     $936 = ($$0207$i$i|0)==(31);
     $937 = $$0207$i$i >>> 1;
     $938 = (25 - ($937))|0;
     $939 = $936 ? 0 : $938;
     $940 = $880 << $939;
     $$0201$i$i = $940;$$0202$i$i = $935;
     while(1) {
      $941 = ((($$0202$i$i)) + 4|0);
      $942 = HEAP32[$941>>2]|0;
      $943 = $942 & -8;
      $944 = ($943|0)==($880|0);
      if ($944) {
       label = 216;
       break;
      }
      $945 = $$0201$i$i >>> 31;
      $946 = (((($$0202$i$i)) + 16|0) + ($945<<2)|0);
      $947 = $$0201$i$i << 1;
      $948 = HEAP32[$946>>2]|0;
      $949 = ($948|0)==(0|0);
      if ($949) {
       label = 215;
       break;
      } else {
       $$0201$i$i = $947;$$0202$i$i = $948;
      }
     }
     if ((label|0) == 215) {
      HEAP32[$946>>2] = $581;
      $950 = ((($581)) + 24|0);
      HEAP32[$950>>2] = $$0202$i$i;
      $951 = ((($581)) + 12|0);
      HEAP32[$951>>2] = $581;
      $952 = ((($581)) + 8|0);
      HEAP32[$952>>2] = $581;
      break;
     }
     else if ((label|0) == 216) {
      $953 = ((($$0202$i$i)) + 8|0);
      $954 = HEAP32[$953>>2]|0;
      $955 = ((($954)) + 12|0);
      HEAP32[$955>>2] = $581;
      HEAP32[$953>>2] = $581;
      $956 = ((($581)) + 8|0);
      HEAP32[$956>>2] = $954;
      $957 = ((($581)) + 12|0);
      HEAP32[$957>>2] = $$0202$i$i;
      $958 = ((($581)) + 24|0);
      HEAP32[$958>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $960 = HEAP32[(31128)>>2]|0;
  $961 = ($960>>>0)>($$0192>>>0);
  if ($961) {
   $962 = (($960) - ($$0192))|0;
   HEAP32[(31128)>>2] = $962;
   $963 = HEAP32[(31140)>>2]|0;
   $964 = (($963) + ($$0192)|0);
   HEAP32[(31140)>>2] = $964;
   $965 = $962 | 1;
   $966 = ((($964)) + 4|0);
   HEAP32[$966>>2] = $965;
   $967 = $$0192 | 3;
   $968 = ((($963)) + 4|0);
   HEAP32[$968>>2] = $967;
   $969 = ((($963)) + 8|0);
   $$0 = $969;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $970 = (___errno_location()|0);
 HEAP32[$970>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0195$i = 0, $$0195$in$i = 0, $$0348 = 0, $$0349 = 0, $$0361 = 0, $$0368 = 0, $$1 = 0, $$1347 = 0, $$1352 = 0, $$1355 = 0, $$1363 = 0, $$1367 = 0, $$2 = 0, $$3 = 0, $$3365 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond374 = 0, $cond375 = 0, $not$ = 0, $not$370 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(31132)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(31136)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $78 = ((($7)) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $79 & 3;
    $81 = ($80|0)==(3);
    if (!($81)) {
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
    $82 = (($14) + ($15)|0);
    $83 = ((($14)) + 4|0);
    $84 = $15 | 1;
    $85 = $79 & -2;
    HEAP32[(31124)>>2] = $15;
    HEAP32[$78>>2] = $85;
    HEAP32[$83>>2] = $84;
    HEAP32[$82>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[7779]|0;
     $29 = $28 & $27;
     HEAP32[7779] = $29;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1352 = $45;$$1355 = $41;
      }
     } else {
      $$1352 = $43;$$1355 = $42;
     }
     while(1) {
      $47 = ((($$1352)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $$1352 = $48;$$1355 = $47;
       continue;
      }
      $50 = ((($$1352)) + 16|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       break;
      } else {
       $$1352 = $51;$$1355 = $50;
      }
     }
     HEAP32[$$1355>>2] = 0;
     $$3 = $$1352;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1347 = $15;$87 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (31420 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($14|0)==($57|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond374 = ($$3|0)==(0|0);
     if ($cond374) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(31120)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(31120)>>2] = $62;
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $not$370 = ($64|0)!=($14|0);
     $$sink3 = $not$370&1;
     $65 = (((($33)) + 16|0) + ($$sink3<<2)|0);
     HEAP32[$65>>2] = $$3;
     $66 = ($$3|0)==(0|0);
     if ($66) {
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    }
    $67 = ((($$3)) + 24|0);
    HEAP32[$67>>2] = $33;
    $68 = ((($14)) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==(0|0);
    if (!($70)) {
     $71 = ((($$3)) + 16|0);
     HEAP32[$71>>2] = $69;
     $72 = ((($69)) + 24|0);
     HEAP32[$72>>2] = $$3;
    }
    $73 = ((($68)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)==(0|0);
    if ($75) {
     $$1 = $14;$$1347 = $15;$87 = $14;
    } else {
     $76 = ((($$3)) + 20|0);
     HEAP32[$76>>2] = $74;
     $77 = ((($74)) + 24|0);
     HEAP32[$77>>2] = $$3;
     $$1 = $14;$$1347 = $15;$87 = $14;
    }
   }
  } else {
   $$1 = $2;$$1347 = $6;$87 = $2;
  }
 } while(0);
 $86 = ($87>>>0)<($7>>>0);
 if (!($86)) {
  return;
 }
 $88 = ((($7)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $89 & 1;
 $91 = ($90|0)==(0);
 if ($91) {
  return;
 }
 $92 = $89 & 2;
 $93 = ($92|0)==(0);
 if ($93) {
  $94 = HEAP32[(31140)>>2]|0;
  $95 = ($7|0)==($94|0);
  $96 = HEAP32[(31136)>>2]|0;
  if ($95) {
   $97 = HEAP32[(31128)>>2]|0;
   $98 = (($97) + ($$1347))|0;
   HEAP32[(31128)>>2] = $98;
   HEAP32[(31140)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = ($$1|0)==($96|0);
   if (!($101)) {
    return;
   }
   HEAP32[(31136)>>2] = 0;
   HEAP32[(31124)>>2] = 0;
   return;
  }
  $102 = ($7|0)==($96|0);
  if ($102) {
   $103 = HEAP32[(31124)>>2]|0;
   $104 = (($103) + ($$1347))|0;
   HEAP32[(31124)>>2] = $104;
   HEAP32[(31136)>>2] = $87;
   $105 = $104 | 1;
   $106 = ((($$1)) + 4|0);
   HEAP32[$106>>2] = $105;
   $107 = (($87) + ($104)|0);
   HEAP32[$107>>2] = $104;
   return;
  }
  $108 = $89 & -8;
  $109 = (($108) + ($$1347))|0;
  $110 = $89 >>> 3;
  $111 = ($89>>>0)<(256);
  do {
   if ($111) {
    $112 = ((($7)) + 8|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = ((($7)) + 12|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ($115|0)==($113|0);
    if ($116) {
     $117 = 1 << $110;
     $118 = $117 ^ -1;
     $119 = HEAP32[7779]|0;
     $120 = $119 & $118;
     HEAP32[7779] = $120;
     break;
    } else {
     $121 = ((($113)) + 12|0);
     HEAP32[$121>>2] = $115;
     $122 = ((($115)) + 8|0);
     HEAP32[$122>>2] = $113;
     break;
    }
   } else {
    $123 = ((($7)) + 24|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((($7)) + 12|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126|0)==($7|0);
    do {
     if ($127) {
      $132 = ((($7)) + 16|0);
      $133 = ((($132)) + 4|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($134|0)==(0|0);
      if ($135) {
       $136 = HEAP32[$132>>2]|0;
       $137 = ($136|0)==(0|0);
       if ($137) {
        $$3365 = 0;
        break;
       } else {
        $$1363 = $136;$$1367 = $132;
       }
      } else {
       $$1363 = $134;$$1367 = $133;
      }
      while(1) {
       $138 = ((($$1363)) + 20|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = ($139|0)==(0|0);
       if (!($140)) {
        $$1363 = $139;$$1367 = $138;
        continue;
       }
       $141 = ((($$1363)) + 16|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        break;
       } else {
        $$1363 = $142;$$1367 = $141;
       }
      }
      HEAP32[$$1367>>2] = 0;
      $$3365 = $$1363;
     } else {
      $128 = ((($7)) + 8|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = ((($129)) + 12|0);
      HEAP32[$130>>2] = $126;
      $131 = ((($126)) + 8|0);
      HEAP32[$131>>2] = $129;
      $$3365 = $126;
     }
    } while(0);
    $144 = ($124|0)==(0|0);
    if (!($144)) {
     $145 = ((($7)) + 28|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (31420 + ($146<<2)|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($7|0)==($148|0);
     if ($149) {
      HEAP32[$147>>2] = $$3365;
      $cond375 = ($$3365|0)==(0|0);
      if ($cond375) {
       $150 = 1 << $146;
       $151 = $150 ^ -1;
       $152 = HEAP32[(31120)>>2]|0;
       $153 = $152 & $151;
       HEAP32[(31120)>>2] = $153;
       break;
      }
     } else {
      $154 = ((($124)) + 16|0);
      $155 = HEAP32[$154>>2]|0;
      $not$ = ($155|0)!=($7|0);
      $$sink5 = $not$&1;
      $156 = (((($124)) + 16|0) + ($$sink5<<2)|0);
      HEAP32[$156>>2] = $$3365;
      $157 = ($$3365|0)==(0|0);
      if ($157) {
       break;
      }
     }
     $158 = ((($$3365)) + 24|0);
     HEAP32[$158>>2] = $124;
     $159 = ((($7)) + 16|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==(0|0);
     if (!($161)) {
      $162 = ((($$3365)) + 16|0);
      HEAP32[$162>>2] = $160;
      $163 = ((($160)) + 24|0);
      HEAP32[$163>>2] = $$3365;
     }
     $164 = ((($159)) + 4|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($165|0)==(0|0);
     if (!($166)) {
      $167 = ((($$3365)) + 20|0);
      HEAP32[$167>>2] = $165;
      $168 = ((($165)) + 24|0);
      HEAP32[$168>>2] = $$3365;
     }
    }
   }
  } while(0);
  $169 = $109 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($87) + ($109)|0);
  HEAP32[$171>>2] = $109;
  $172 = HEAP32[(31136)>>2]|0;
  $173 = ($$1|0)==($172|0);
  if ($173) {
   HEAP32[(31124)>>2] = $109;
   return;
  } else {
   $$2 = $109;
  }
 } else {
  $174 = $89 & -2;
  HEAP32[$88>>2] = $174;
  $175 = $$1347 | 1;
  $176 = ((($$1)) + 4|0);
  HEAP32[$176>>2] = $175;
  $177 = (($87) + ($$1347)|0);
  HEAP32[$177>>2] = $$1347;
  $$2 = $$1347;
 }
 $178 = $$2 >>> 3;
 $179 = ($$2>>>0)<(256);
 if ($179) {
  $180 = $178 << 1;
  $181 = (31156 + ($180<<2)|0);
  $182 = HEAP32[7779]|0;
  $183 = 1 << $178;
  $184 = $182 & $183;
  $185 = ($184|0)==(0);
  if ($185) {
   $186 = $182 | $183;
   HEAP32[7779] = $186;
   $$pre = ((($181)) + 8|0);
   $$0368 = $181;$$pre$phiZ2D = $$pre;
  } else {
   $187 = ((($181)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $$0368 = $188;$$pre$phiZ2D = $187;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $189 = ((($$0368)) + 12|0);
  HEAP32[$189>>2] = $$1;
  $190 = ((($$1)) + 8|0);
  HEAP32[$190>>2] = $$0368;
  $191 = ((($$1)) + 12|0);
  HEAP32[$191>>2] = $181;
  return;
 }
 $192 = $$2 >>> 8;
 $193 = ($192|0)==(0);
 if ($193) {
  $$0361 = 0;
 } else {
  $194 = ($$2>>>0)>(16777215);
  if ($194) {
   $$0361 = 31;
  } else {
   $195 = (($192) + 1048320)|0;
   $196 = $195 >>> 16;
   $197 = $196 & 8;
   $198 = $192 << $197;
   $199 = (($198) + 520192)|0;
   $200 = $199 >>> 16;
   $201 = $200 & 4;
   $202 = $201 | $197;
   $203 = $198 << $201;
   $204 = (($203) + 245760)|0;
   $205 = $204 >>> 16;
   $206 = $205 & 2;
   $207 = $202 | $206;
   $208 = (14 - ($207))|0;
   $209 = $203 << $206;
   $210 = $209 >>> 15;
   $211 = (($208) + ($210))|0;
   $212 = $211 << 1;
   $213 = (($211) + 7)|0;
   $214 = $$2 >>> $213;
   $215 = $214 & 1;
   $216 = $215 | $212;
   $$0361 = $216;
  }
 }
 $217 = (31420 + ($$0361<<2)|0);
 $218 = ((($$1)) + 28|0);
 HEAP32[$218>>2] = $$0361;
 $219 = ((($$1)) + 16|0);
 $220 = ((($$1)) + 20|0);
 HEAP32[$220>>2] = 0;
 HEAP32[$219>>2] = 0;
 $221 = HEAP32[(31120)>>2]|0;
 $222 = 1 << $$0361;
 $223 = $221 & $222;
 $224 = ($223|0)==(0);
 do {
  if ($224) {
   $225 = $221 | $222;
   HEAP32[(31120)>>2] = $225;
   HEAP32[$217>>2] = $$1;
   $226 = ((($$1)) + 24|0);
   HEAP32[$226>>2] = $217;
   $227 = ((($$1)) + 12|0);
   HEAP32[$227>>2] = $$1;
   $228 = ((($$1)) + 8|0);
   HEAP32[$228>>2] = $$1;
  } else {
   $229 = HEAP32[$217>>2]|0;
   $230 = ($$0361|0)==(31);
   $231 = $$0361 >>> 1;
   $232 = (25 - ($231))|0;
   $233 = $230 ? 0 : $232;
   $234 = $$2 << $233;
   $$0348 = $234;$$0349 = $229;
   while(1) {
    $235 = ((($$0349)) + 4|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = $236 & -8;
    $238 = ($237|0)==($$2|0);
    if ($238) {
     label = 73;
     break;
    }
    $239 = $$0348 >>> 31;
    $240 = (((($$0349)) + 16|0) + ($239<<2)|0);
    $241 = $$0348 << 1;
    $242 = HEAP32[$240>>2]|0;
    $243 = ($242|0)==(0|0);
    if ($243) {
     label = 72;
     break;
    } else {
     $$0348 = $241;$$0349 = $242;
    }
   }
   if ((label|0) == 72) {
    HEAP32[$240>>2] = $$1;
    $244 = ((($$1)) + 24|0);
    HEAP32[$244>>2] = $$0349;
    $245 = ((($$1)) + 12|0);
    HEAP32[$245>>2] = $$1;
    $246 = ((($$1)) + 8|0);
    HEAP32[$246>>2] = $$1;
    break;
   }
   else if ((label|0) == 73) {
    $247 = ((($$0349)) + 8|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = ((($248)) + 12|0);
    HEAP32[$249>>2] = $$1;
    HEAP32[$247>>2] = $$1;
    $250 = ((($$1)) + 8|0);
    HEAP32[$250>>2] = $248;
    $251 = ((($$1)) + 12|0);
    HEAP32[$251>>2] = $$0349;
    $252 = ((($$1)) + 24|0);
    HEAP32[$252>>2] = 0;
    break;
   }
  }
 } while(0);
 $253 = HEAP32[(31148)>>2]|0;
 $254 = (($253) + -1)|0;
 HEAP32[(31148)>>2] = $254;
 $255 = ($254|0)==(0);
 if ($255) {
  $$0195$in$i = (31572);
 } else {
  return;
 }
 while(1) {
  $$0195$i = HEAP32[$$0195$in$i>>2]|0;
  $256 = ($$0195$i|0)==(0|0);
  $257 = ((($$0195$i)) + 8|0);
  if ($256) {
   break;
  } else {
   $$0195$in$i = $257;
  }
 }
 HEAP32[(31148)>>2] = -1;
 return;
}
function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (31612|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_570($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $25 = ($26|0)<(0);
    if ($25) {
     break;
    }
    $34 = (($$04855) - ($26))|0;
    $35 = ((($$04954)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($26>>>0)>($36>>>0);
    $38 = ((($$04954)) + 8|0);
    $$150 = $37 ? $38 : $$04954;
    $39 = $37 << 31 >> 31;
    $$1 = (($39) + ($$04756))|0;
    $40 = $37 ? $36 : 0;
    $$0 = (($26) - ($40))|0;
    $41 = HEAP32[$$150>>2]|0;
    $42 = (($41) + ($$0)|0);
    HEAP32[$$150>>2] = $42;
    $43 = ((($$150)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) - ($$0))|0;
    HEAP32[$43>>2] = $45;
    $46 = HEAP32[$13>>2]|0;
    $47 = $$150;
    HEAP32[$vararg_buffer3>>2] = $46;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $47;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $48 = (___syscall146(146,($vararg_buffer3|0))|0);
    $49 = (___syscall_ret($48)|0);
    $50 = ($34|0)==($49|0);
    if ($50) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $34;$$04954 = $$150;$26 = $49;
    }
   }
   $27 = ((($0)) + 16|0);
   HEAP32[$27>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $28 = HEAP32[$0>>2]|0;
   $29 = $28 | 32;
   HEAP32[$0>>2] = $29;
   $30 = ($$04756|0)==(2);
   if ($30) {
    $$051 = 0;
   } else {
    $31 = ((($$04954)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($2) - ($32))|0;
    $$051 = $33;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  HEAP32[$4>>2] = $20;
  HEAP32[$7>>2] = $20;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___pthread_self_103()|0);
 $1 = ((($0)) + 64|0);
 return ($1|0);
}
function ___pthread_self_103() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8464|0);
}
function _dummy_570($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $29 = (($27) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($27)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$27>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 486;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = ((($0)) + 108|0);
 HEAP32[$10>>2] = $9;
 $11 = ($1|0)!=(0);
 $12 = ($9|0)>($1|0);
 $or$cond = $11 & $12;
 $13 = (($6) + ($1)|0);
 $$sink = $or$cond ? $13 : $4;
 $14 = ((($0)) + 100|0);
 HEAP32[$14>>2] = $$sink;
 return;
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28$phi$trans$insert = 0, $$pre = 0, $$pre$phi34Z2D = 0, $$pre29$pre = 0, $$pre35 = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   if ($11) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $$phi$trans$insert28$phi$trans$insert = ((($0)) + 4|0);
    $$pre29$pre = HEAP32[$$phi$trans$insert28$phi$trans$insert>>2]|0;
    $$pre35 = ((($0)) + 108|0);
    $$pre$phi34Z2D = $$pre35;$$sink = $$pre;$26 = $$pre;$29 = $$pre29$pre;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($12) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $12;
    if ($20) {
     $$pre$phi34Z2D = $17;$$sink = $21;$26 = $21;$29 = $14;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $$pre$phi34Z2D = $17;$$sink = $23;$26 = $21;$29 = $14;
    }
   }
   $24 = ((($0)) + 100|0);
   HEAP32[$24>>2] = $$sink;
   $25 = ($26|0)==(0|0);
   if (!($25)) {
    $27 = $26;
    $28 = $29;
    $30 = HEAP32[$$pre$phi34Z2D>>2]|0;
    $31 = (($27) + 1)|0;
    $32 = (($31) - ($28))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$$pre$phi34Z2D>>2] = $33;
   }
   $34 = ((($29)) + -1|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = ($36|0)==($7|0);
   if ($37) {
    $$0 = $7;
   } else {
    $38 = $7&255;
    HEAP8[$34>>0] = $38;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $4 = $1 | $3;
 $5 = $4&1;
 return ($5|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 1023]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 1023]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _hypotf($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0, $$0 = 0.0, $$032 = 0.0, $$033 = 0.0, $$034 = 0.0, $$35 = 0, $$38 = 0.0, $$39 = 0.0, $$40 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0;
 var $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $or$cond = 0, $or$cond37 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $3 = (HEAPF32[tempDoublePtr>>2]=$1,HEAP32[tempDoublePtr>>2]|0);
 $4 = $2 & 2147483647;
 $5 = $3 & 2147483647;
 $6 = ($4>>>0)<($5>>>0);
 $$ = $6 ? $5 : $4;
 $$35 = $6 ? $4 : $5;
 $7 = (HEAP32[tempDoublePtr>>2]=$$,+HEAPF32[tempDoublePtr>>2]);
 $8 = (HEAP32[tempDoublePtr>>2]=$$35,+HEAPF32[tempDoublePtr>>2]);
 $9 = ($$35|0)==(2139095040);
 do {
  if ($9) {
   $$032 = $8;
  } else {
   $10 = ($$>>>0)>(2139095039);
   $11 = ($$35|0)==(0);
   $or$cond = $10 | $11;
   $12 = (($$) - ($$35))|0;
   $13 = ($12>>>0)>(209715199);
   $or$cond37 = $or$cond | $13;
   if ($or$cond37) {
    $14 = $7 + $8;
    $$032 = $14;
    break;
   }
   $15 = ($$>>>0)>(1568669695);
   if ($15) {
    $16 = $7 * 8.0779356694631609E-28;
    $17 = $8 * 8.0779356694631609E-28;
    $$0 = 1.2379400392853803E+27;$$033 = $17;$$034 = $16;
   } else {
    $18 = ($$35>>>0)<(562036736);
    $19 = $7 * 1.2379400392853803E+27;
    $20 = $8 * 1.2379400392853803E+27;
    $$38 = $18 ? $19 : $7;
    $$39 = $18 ? $20 : $8;
    $$40 = $18 ? 8.0779356694631609E-28 : 1.0;
    $$0 = $$40;$$033 = $$39;$$034 = $$38;
   }
   $21 = $$034;
   $22 = $21 * $21;
   $23 = $$033;
   $24 = $23 * $23;
   $25 = $22 + $24;
   $26 = $25;
   $27 = (+Math_sqrt((+$26)));
   $28 = $$0 * $27;
   $$032 = $28;
  }
 } while(0);
 return (+$$032);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=8840; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $40 = $12;
  } else {
   $40 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 1023]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $39 = ($40|0)==(0);
  if (!($39)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229322 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa357 = 0, $$0240321 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0;
 var $$0249306 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262311 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230333 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241332 = 0, $$1244320 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0;
 var $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242305 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$284$ = 0, $$289 = 0, $$290 = 0, $$3257 = 0, $$3265 = 0;
 var $$3272 = 0, $$3303 = 0, $$377 = 0, $$4258355 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa295 = 0, $$pre = 0, $$pre346 = 0, $$pre347 = 0, $$pre347$pre = 0, $$pre349 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit275 = 0, $isdigit277 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp274 = 0;
 var $isdigittmp276 = 0, $narrow = 0, $or$cond = 0, $or$cond281 = 0, $or$cond283 = 0, $or$cond286 = 0, $storemerge = 0, $storemerge273310 = 0, $storemerge278 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$21 = $1;
 L1: while(1) {
  $15 = ($$0247|0)>(-1);
  do {
   if ($15) {
    $16 = (2147483647 - ($$0247))|0;
    $17 = ($$0243|0)>($16|0);
    if ($17) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $19 = (($$0243) + ($$0247))|0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $20 = HEAP8[$21>>0]|0;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   label = 87;
   break;
  } else {
   $23 = $20;$25 = $21;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $$0249306 = $25;$27 = $25;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $25;$39 = $25;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($25)) + 1|0);
   HEAP32[$5>>2] = $24;
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($27)) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$0249$lcssa = $$0249306;$39 = $27;
      break L12;
     }
     $30 = ((($$0249306)) + 1|0);
     $31 = ((($27)) + 2|0);
     HEAP32[$5>>2] = $31;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $$0249306 = $30;$27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;$39 = $31;
      break;
     }
    }
   }
  } while(0);
  $34 = $$0249$lcssa;
  $35 = $21;
  $36 = (($34) - ($35))|0;
  if ($10) {
   _out($0,$21,$36);
  }
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0269$phi = $$0269;$$0243 = $36;$$0247 = $$1248;$21 = $39;$$0269 = $$0269$phi;
   continue;
  }
  $38 = ((($39)) + 1|0);
  $40 = HEAP8[$38>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($39)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($39)) + 3|0);
   $$377 = $44 ? $45 : $38;
   $$$0269 = $44 ? 1 : $$0269;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$storemerge = $$377;
  } else {
   $$0253 = -1;$$1270 = $$0269;$storemerge = $38;
  }
  HEAP32[$5>>2] = $storemerge;
  $46 = HEAP8[$storemerge>>0]|0;
  $47 = $46 << 24 >> 24;
  $48 = (($47) + -32)|0;
  $49 = ($48>>>0)<(32);
  L24: do {
   if ($49) {
    $$0262311 = 0;$329 = $46;$51 = $48;$storemerge273310 = $storemerge;
    while(1) {
     $50 = 1 << $51;
     $52 = $50 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $$0262$lcssa = $$0262311;$$lcssa295 = $329;$62 = $storemerge273310;
      break L24;
     }
     $54 = $50 | $$0262311;
     $55 = ((($storemerge273310)) + 1|0);
     HEAP32[$5>>2] = $55;
     $56 = HEAP8[$55>>0]|0;
     $57 = $56 << 24 >> 24;
     $58 = (($57) + -32)|0;
     $59 = ($58>>>0)<(32);
     if ($59) {
      $$0262311 = $54;$329 = $56;$51 = $58;$storemerge273310 = $55;
     } else {
      $$0262$lcssa = $54;$$lcssa295 = $56;$62 = $55;
      break;
     }
    }
   } else {
    $$0262$lcssa = 0;$$lcssa295 = $46;$62 = $storemerge;
   }
  } while(0);
  $60 = ($$lcssa295<<24>>24)==(42);
  if ($60) {
   $61 = ((($62)) + 1|0);
   $63 = HEAP8[$61>>0]|0;
   $64 = $63 << 24 >> 24;
   $isdigittmp276 = (($64) + -48)|0;
   $isdigit277 = ($isdigittmp276>>>0)<(10);
   if ($isdigit277) {
    $65 = ((($62)) + 2|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = ($66<<24>>24)==(36);
    if ($67) {
     $68 = (($4) + ($isdigittmp276<<2)|0);
     HEAP32[$68>>2] = 10;
     $69 = HEAP8[$61>>0]|0;
     $70 = $69 << 24 >> 24;
     $71 = (($70) + -48)|0;
     $72 = (($3) + ($71<<3)|0);
     $73 = $72;
     $74 = $73;
     $75 = HEAP32[$74>>2]|0;
     $76 = (($73) + 4)|0;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $79 = ((($62)) + 3|0);
     $$0259 = $75;$$2271 = 1;$storemerge278 = $79;
    } else {
     label = 23;
    }
   } else {
    label = 23;
   }
   if ((label|0) == 23) {
    label = 0;
    $80 = ($$1270|0)==(0);
    if (!($80)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $81 = $arglist_current;
     $82 = ((0) + 4|0);
     $expanded4 = $82;
     $expanded = (($expanded4) - 1)|0;
     $83 = (($81) + ($expanded))|0;
     $84 = ((0) + 4|0);
     $expanded8 = $84;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $85 = $83 & $expanded6;
     $86 = $85;
     $87 = HEAP32[$86>>2]|0;
     $arglist_next = ((($86)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $87;$$2271 = 0;$storemerge278 = $61;
    } else {
     $$0259 = 0;$$2271 = 0;$storemerge278 = $61;
    }
   }
   HEAP32[$5>>2] = $storemerge278;
   $88 = ($$0259|0)<(0);
   $89 = $$0262$lcssa | 8192;
   $90 = (0 - ($$0259))|0;
   $$$0262 = $88 ? $89 : $$0262$lcssa;
   $$$0259 = $88 ? $90 : $$0259;
   $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$94 = $storemerge278;
  } else {
   $91 = (_getint($5)|0);
   $92 = ($91|0)<(0);
   if ($92) {
    $$0 = -1;
    break;
   }
   $$pre346 = HEAP32[$5>>2]|0;
   $$1260 = $91;$$1263 = $$0262$lcssa;$$3272 = $$1270;$94 = $$pre346;
  }
  $93 = HEAP8[$94>>0]|0;
  $95 = ($93<<24>>24)==(46);
  do {
   if ($95) {
    $96 = ((($94)) + 1|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = ($97<<24>>24)==(42);
    if (!($98)) {
     $125 = ((($94)) + 1|0);
     HEAP32[$5>>2] = $125;
     $126 = (_getint($5)|0);
     $$pre347$pre = HEAP32[$5>>2]|0;
     $$0254 = $126;$$pre347 = $$pre347$pre;
     break;
    }
    $99 = ((($94)) + 2|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100 << 24 >> 24;
    $isdigittmp274 = (($101) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $102 = ((($94)) + 3|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = ($103<<24>>24)==(36);
     if ($104) {
      $105 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$105>>2] = 10;
      $106 = HEAP8[$99>>0]|0;
      $107 = $106 << 24 >> 24;
      $108 = (($107) + -48)|0;
      $109 = (($3) + ($108<<3)|0);
      $110 = $109;
      $111 = $110;
      $112 = HEAP32[$111>>2]|0;
      $113 = (($110) + 4)|0;
      $114 = $113;
      $115 = HEAP32[$114>>2]|0;
      $116 = ((($94)) + 4|0);
      HEAP32[$5>>2] = $116;
      $$0254 = $112;$$pre347 = $116;
      break;
     }
    }
    $117 = ($$3272|0)==(0);
    if (!($117)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $118 = $arglist_current2;
     $119 = ((0) + 4|0);
     $expanded11 = $119;
     $expanded10 = (($expanded11) - 1)|0;
     $120 = (($118) + ($expanded10))|0;
     $121 = ((0) + 4|0);
     $expanded15 = $121;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $122 = $120 & $expanded13;
     $123 = $122;
     $124 = HEAP32[$123>>2]|0;
     $arglist_next3 = ((($123)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $330 = $124;
    } else {
     $330 = 0;
    }
    HEAP32[$5>>2] = $99;
    $$0254 = $330;$$pre347 = $99;
   } else {
    $$0254 = -1;$$pre347 = $94;
   }
  } while(0);
  $$0252 = 0;$128 = $$pre347;
  while(1) {
   $127 = HEAP8[$128>>0]|0;
   $129 = $127 << 24 >> 24;
   $130 = (($129) + -65)|0;
   $131 = ($130>>>0)>(57);
   if ($131) {
    $$0 = -1;
    break L1;
   }
   $132 = ((($128)) + 1|0);
   HEAP32[$5>>2] = $132;
   $133 = HEAP8[$128>>0]|0;
   $134 = $133 << 24 >> 24;
   $135 = (($134) + -65)|0;
   $136 = ((25573 + (($$0252*58)|0)|0) + ($135)|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137&255;
   $139 = (($138) + -1)|0;
   $140 = ($139>>>0)<(8);
   if ($140) {
    $$0252 = $138;$128 = $132;
   } else {
    break;
   }
  }
  $141 = ($137<<24>>24)==(0);
  if ($141) {
   $$0 = -1;
   break;
  }
  $142 = ($137<<24>>24)==(19);
  $143 = ($$0253|0)>(-1);
  do {
   if ($142) {
    if ($143) {
     $$0 = -1;
     break L1;
    } else {
     label = 49;
    }
   } else {
    if ($143) {
     $144 = (($4) + ($$0253<<2)|0);
     HEAP32[$144>>2] = $138;
     $145 = (($3) + ($$0253<<3)|0);
     $146 = $145;
     $147 = $146;
     $148 = HEAP32[$147>>2]|0;
     $149 = (($146) + 4)|0;
     $150 = $149;
     $151 = HEAP32[$150>>2]|0;
     $152 = $6;
     $153 = $152;
     HEAP32[$153>>2] = $148;
     $154 = (($152) + 4)|0;
     $155 = $154;
     HEAP32[$155>>2] = $151;
     label = 49;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6,$138,$2);
   }
  } while(0);
  if ((label|0) == 49) {
   label = 0;
   if (!($10)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue;
   }
  }
  $156 = HEAP8[$128>>0]|0;
  $157 = $156 << 24 >> 24;
  $158 = ($$0252|0)!=(0);
  $159 = $157 & 15;
  $160 = ($159|0)==(3);
  $or$cond281 = $158 & $160;
  $161 = $157 & -33;
  $$0235 = $or$cond281 ? $161 : $157;
  $162 = $$1263 & 8192;
  $163 = ($162|0)==(0);
  $164 = $$1263 & -65537;
  $$1263$ = $163 ? $$1263 : $164;
  L71: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $171 = HEAP32[$6>>2]|0;
     HEAP32[$171>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 1:  {
     $172 = HEAP32[$6>>2]|0;
     HEAP32[$172>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 2:  {
     $173 = ($$1248|0)<(0);
     $174 = $173 << 31 >> 31;
     $175 = HEAP32[$6>>2]|0;
     $176 = $175;
     $177 = $176;
     HEAP32[$177>>2] = $$1248;
     $178 = (($176) + 4)|0;
     $179 = $178;
     HEAP32[$179>>2] = $174;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 3:  {
     $180 = $$1248&65535;
     $181 = HEAP32[$6>>2]|0;
     HEAP16[$181>>1] = $180;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 4:  {
     $182 = $$1248&255;
     $183 = HEAP32[$6>>2]|0;
     HEAP8[$183>>0] = $182;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 6:  {
     $184 = HEAP32[$6>>2]|0;
     HEAP32[$184>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 7:  {
     $185 = ($$1248|0)<(0);
     $186 = $185 << 31 >> 31;
     $187 = HEAP32[$6>>2]|0;
     $188 = $187;
     $189 = $188;
     HEAP32[$189>>2] = $$1248;
     $190 = (($188) + 4)|0;
     $191 = $190;
     HEAP32[$191>>2] = $186;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $192 = ($$0254>>>0)>(8);
    $193 = $192 ? $$0254 : 8;
    $194 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $193;$$3265 = $194;
    label = 61;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 61;
    break;
   }
   case 111:  {
    $210 = $6;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = (($210) + 4)|0;
    $214 = $213;
    $215 = HEAP32[$214>>2]|0;
    $216 = (_fmt_o($212,$215,$11)|0);
    $217 = $$1263$ & 8;
    $218 = ($217|0)==(0);
    $219 = $216;
    $220 = (($12) - ($219))|0;
    $221 = ($$0254|0)>($220|0);
    $222 = (($220) + 1)|0;
    $223 = $218 | $221;
    $$0254$$0254$ = $223 ? $$0254 : $222;
    $$0228 = $216;$$1233 = 0;$$1238 = 26037;$$2256 = $$0254$$0254$;$$4266 = $$1263$;$248 = $212;$250 = $215;
    label = 67;
    break;
   }
   case 105: case 100:  {
    $224 = $6;
    $225 = $224;
    $226 = HEAP32[$225>>2]|0;
    $227 = (($224) + 4)|0;
    $228 = $227;
    $229 = HEAP32[$228>>2]|0;
    $230 = ($229|0)<(0);
    if ($230) {
     $231 = (_i64Subtract(0,0,($226|0),($229|0))|0);
     $232 = tempRet0;
     $233 = $6;
     $234 = $233;
     HEAP32[$234>>2] = $231;
     $235 = (($233) + 4)|0;
     $236 = $235;
     HEAP32[$236>>2] = $232;
     $$0232 = 1;$$0237 = 26037;$242 = $231;$243 = $232;
     label = 66;
     break L71;
    } else {
     $237 = $$1263$ & 2048;
     $238 = ($237|0)==(0);
     $239 = $$1263$ & 1;
     $240 = ($239|0)==(0);
     $$ = $240 ? 26037 : (26039);
     $$$ = $238 ? $$ : (26038);
     $241 = $$1263$ & 2049;
     $narrow = ($241|0)!=(0);
     $$284$ = $narrow&1;
     $$0232 = $$284$;$$0237 = $$$;$242 = $226;$243 = $229;
     label = 66;
     break L71;
    }
    break;
   }
   case 117:  {
    $165 = $6;
    $166 = $165;
    $167 = HEAP32[$166>>2]|0;
    $168 = (($165) + 4)|0;
    $169 = $168;
    $170 = HEAP32[$169>>2]|0;
    $$0232 = 0;$$0237 = 26037;$242 = $167;$243 = $170;
    label = 66;
    break;
   }
   case 99:  {
    $259 = $6;
    $260 = $259;
    $261 = HEAP32[$260>>2]|0;
    $262 = (($259) + 4)|0;
    $263 = $262;
    $264 = HEAP32[$263>>2]|0;
    $265 = $261&255;
    HEAP8[$13>>0] = $265;
    $$2 = $13;$$2234 = 0;$$2239 = 26037;$$2251 = $11;$$5 = 1;$$6268 = $164;
    break;
   }
   case 109:  {
    $266 = (___errno_location()|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = (_strerror($267)|0);
    $$1 = $268;
    label = 71;
    break;
   }
   case 115:  {
    $269 = HEAP32[$6>>2]|0;
    $270 = ($269|0)!=(0|0);
    $271 = $270 ? $269 : 26047;
    $$1 = $271;
    label = 71;
    break;
   }
   case 67:  {
    $278 = $6;
    $279 = $278;
    $280 = HEAP32[$279>>2]|0;
    $281 = (($278) + 4)|0;
    $282 = $281;
    $283 = HEAP32[$282>>2]|0;
    HEAP32[$8>>2] = $280;
    HEAP32[$14>>2] = 0;
    HEAP32[$6>>2] = $8;
    $$4258355 = -1;$331 = $8;
    label = 75;
    break;
   }
   case 83:  {
    $$pre349 = HEAP32[$6>>2]|0;
    $284 = ($$0254|0)==(0);
    if ($284) {
     _pad_684($0,32,$$1260,0,$$1263$);
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$4258355 = $$0254;$331 = $$pre349;
     label = 75;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $306 = +HEAPF64[$6>>3];
    $307 = (_fmt_fp($0,$306,$$1260,$$0254,$$1263$,$$0235)|0);
    $$0243 = $307;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue L1;
    break;
   }
   default: {
    $$2 = $21;$$2234 = 0;$$2239 = 26037;$$2251 = $11;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L95: do {
   if ((label|0) == 61) {
    label = 0;
    $195 = $6;
    $196 = $195;
    $197 = HEAP32[$196>>2]|0;
    $198 = (($195) + 4)|0;
    $199 = $198;
    $200 = HEAP32[$199>>2]|0;
    $201 = $$1236 & 32;
    $202 = (_fmt_x($197,$200,$11,$201)|0);
    $203 = ($197|0)==(0);
    $204 = ($200|0)==(0);
    $205 = $203 & $204;
    $206 = $$3265 & 8;
    $207 = ($206|0)==(0);
    $or$cond283 = $207 | $205;
    $208 = $$1236 >> 4;
    $209 = (26037 + ($208)|0);
    $$289 = $or$cond283 ? 26037 : $209;
    $$290 = $or$cond283 ? 0 : 2;
    $$0228 = $202;$$1233 = $$290;$$1238 = $$289;$$2256 = $$1255;$$4266 = $$3265;$248 = $197;$250 = $200;
    label = 67;
   }
   else if ((label|0) == 66) {
    label = 0;
    $244 = (_fmt_u($242,$243,$11)|0);
    $$0228 = $244;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;$248 = $242;$250 = $243;
    label = 67;
   }
   else if ((label|0) == 71) {
    label = 0;
    $272 = (_memchr($$1,0,$$0254)|0);
    $273 = ($272|0)==(0|0);
    $274 = $272;
    $275 = $$1;
    $276 = (($274) - ($275))|0;
    $277 = (($$1) + ($$0254)|0);
    $$3257 = $273 ? $$0254 : $276;
    $$1250 = $273 ? $277 : $272;
    $$2 = $$1;$$2234 = 0;$$2239 = 26037;$$2251 = $$1250;$$5 = $$3257;$$6268 = $164;
   }
   else if ((label|0) == 75) {
    label = 0;
    $$0229322 = $331;$$0240321 = 0;$$1244320 = 0;
    while(1) {
     $285 = HEAP32[$$0229322>>2]|0;
     $286 = ($285|0)==(0);
     if ($286) {
      $$0240$lcssa = $$0240321;$$2245 = $$1244320;
      break;
     }
     $287 = (_wctomb($9,$285)|0);
     $288 = ($287|0)<(0);
     $289 = (($$4258355) - ($$0240321))|0;
     $290 = ($287>>>0)>($289>>>0);
     $or$cond286 = $288 | $290;
     if ($or$cond286) {
      $$0240$lcssa = $$0240321;$$2245 = $287;
      break;
     }
     $291 = ((($$0229322)) + 4|0);
     $292 = (($287) + ($$0240321))|0;
     $293 = ($$4258355>>>0)>($292>>>0);
     if ($293) {
      $$0229322 = $291;$$0240321 = $292;$$1244320 = $287;
     } else {
      $$0240$lcssa = $292;$$2245 = $287;
      break;
     }
    }
    $294 = ($$2245|0)<(0);
    if ($294) {
     $$0 = -1;
     break L1;
    }
    _pad_684($0,32,$$1260,$$0240$lcssa,$$1263$);
    $295 = ($$0240$lcssa|0)==(0);
    if ($295) {
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$1230333 = $331;$$1241332 = 0;
     while(1) {
      $296 = HEAP32[$$1230333>>2]|0;
      $297 = ($296|0)==(0);
      if ($297) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $298 = (_wctomb($9,$296)|0);
      $299 = (($298) + ($$1241332))|0;
      $300 = ($299|0)>($$0240$lcssa|0);
      if ($300) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $301 = ((($$1230333)) + 4|0);
      _out($0,$9,$298);
      $302 = ($299>>>0)<($$0240$lcssa>>>0);
      if ($302) {
       $$1230333 = $301;$$1241332 = $299;
      } else {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 67) {
   label = 0;
   $245 = ($$2256|0)>(-1);
   $246 = $$4266 & -65537;
   $$$4266 = $245 ? $246 : $$4266;
   $247 = ($248|0)!=(0);
   $249 = ($250|0)!=(0);
   $251 = $247 | $249;
   $252 = ($$2256|0)!=(0);
   $or$cond = $252 | $251;
   $253 = $$0228;
   $254 = (($12) - ($253))|0;
   $255 = $251 ^ 1;
   $256 = $255&1;
   $257 = (($256) + ($254))|0;
   $258 = ($$2256|0)>($257|0);
   $$2256$ = $258 ? $$2256 : $257;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $11;$$5 = $$2256$$$2256;$$6268 = $$$4266;
  }
  else if ((label|0) == 84) {
   label = 0;
   $303 = $$1263$ ^ 8192;
   _pad_684($0,32,$$1260,$$0240$lcssa357,$303);
   $304 = ($$1260|0)>($$0240$lcssa357|0);
   $305 = $304 ? $$1260 : $$0240$lcssa357;
   $$0243 = $305;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
   continue;
  }
  $308 = $$2251;
  $309 = $$2;
  $310 = (($308) - ($309))|0;
  $311 = ($$5|0)<($310|0);
  $$$5 = $311 ? $310 : $$5;
  $312 = (($$$5) + ($$2234))|0;
  $313 = ($$1260|0)<($312|0);
  $$2261 = $313 ? $312 : $$1260;
  _pad_684($0,32,$$2261,$312,$$6268);
  _out($0,$$2239,$$2234);
  $314 = $$6268 ^ 65536;
  _pad_684($0,48,$$2261,$312,$314);
  _pad_684($0,48,$$$5,$310,0);
  _out($0,$$2,$310);
  $315 = $$6268 ^ 8192;
  _pad_684($0,32,$$2261,$312,$315);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
 }
 L114: do {
  if ((label|0) == 87) {
   $316 = ($0|0)==(0|0);
   if ($316) {
    $317 = ($$0269|0)==(0);
    if ($317) {
     $$0 = 0;
    } else {
     $$2242305 = 1;
     while(1) {
      $318 = (($4) + ($$2242305<<2)|0);
      $319 = HEAP32[$318>>2]|0;
      $320 = ($319|0)==(0);
      if ($320) {
       $$3303 = $$2242305;
       break;
      }
      $321 = (($3) + ($$2242305<<3)|0);
      _pop_arg($321,$319,$2);
      $322 = (($$2242305) + 1)|0;
      $323 = ($322|0)<(10);
      if ($323) {
       $$2242305 = $322;
      } else {
       $$0 = 1;
       break L114;
      }
     }
     while(1) {
      $326 = (($4) + ($$3303<<2)|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = ($327|0)==(0);
      $325 = (($$3303) + 1)|0;
      if (!($328)) {
       $$0 = -1;
       break L114;
      }
      $324 = ($325|0)<(10);
      if ($324) {
       $$3303 = $325;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$06 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit5 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $isdigittmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $isdigittmp4 = (($3) + -48)|0;
 $isdigit5 = ($isdigittmp4>>>0)<(10);
 if ($isdigit5) {
  $$06 = 0;$7 = $1;$isdigittmp7 = $isdigittmp4;
  while(1) {
   $4 = ($$06*10)|0;
   $5 = (($isdigittmp7) + ($4))|0;
   $6 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $6;
   $8 = HEAP8[$6>>0]|0;
   $9 = $8 << 24 >> 24;
   $isdigittmp = (($9) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$06 = $5;$7 = $6;$isdigittmp7 = $isdigittmp;
   } else {
    $$0$lcssa = $5;
    break;
   }
  }
 } else {
  $$0$lcssa = 0;
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (26085 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10&255;
   $13 = $12 | 48;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_104()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad_684($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = ($9>>>0)<(256);
  $11 = $10 ? $9 : 256;
  _memset(($5|0),($1|0),($11|0))|0;
  $12 = ($9>>>0)>(255);
  if ($12) {
   $13 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $14 = (($$011) + -256)|0;
    $15 = ($14>>>0)>(255);
    if ($15) {
     $$011 = $14;
    } else {
     break;
    }
   }
   $16 = $13 & 255;
   $$0$lcssa = $16;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$ = 0, $$$$559 = 0.0, $$$3484 = 0, $$$3484691 = 0, $$$3484692 = 0, $$$3501 = 0, $$$4502 = 0, $$$542 = 0.0, $$$559 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463584 = 0, $$0464594 = 0, $$0471 = 0.0, $$0479 = 0, $$0487642 = 0, $$0488 = 0, $$0488653 = 0, $$0488655 = 0;
 var $$0496$$9 = 0, $$0497654 = 0, $$0498 = 0, $$0509582 = 0.0, $$0510 = 0, $$0511 = 0, $$0514637 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0525 = 0, $$0527 = 0, $$0527629 = 0, $$0527631 = 0, $$0530636 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0;
 var $$1480 = 0, $$1482$lcssa = 0, $$1482661 = 0, $$1489641 = 0, $$1499$lcssa = 0, $$1499660 = 0, $$1508583 = 0, $$1512$lcssa = 0, $$1512607 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528614 = 0, $$1531$lcssa = 0, $$1531630 = 0, $$1598 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$547 = 0;
 var $$2476$$549 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516618 = 0, $$2529 = 0, $$2532617 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484648 = 0, $$3501$lcssa = 0, $$3501647 = 0, $$3533613 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478590 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0;
 var $$5$lcssa = 0, $$534$ = 0, $$539 = 0, $$539$ = 0, $$542 = 0.0, $$546 = 0, $$548 = 0, $$5486$lcssa = 0, $$5486623 = 0, $$5493597 = 0, $$5519$ph = 0, $$555 = 0, $$556 = 0, $$559 = 0.0, $$5602 = 0, $$6 = 0, $$6494589 = 0, $$7495601 = 0, $$7505 = 0, $$7505$ = 0;
 var $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa673 = 0, $$neg = 0, $$neg567 = 0, $$pn = 0, $$pn566 = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi690Z2D = 0, $$pre689 = 0, $$sink545$lcssa = 0, $$sink545622 = 0, $$sink562 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0;
 var $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0;
 var $narrow = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond537 = 0, $or$cond541 = 0, $or$cond544 = 0, $or$cond554 = 0, $or$cond6 = 0, $scevgep684 = 0, $scevgep684685 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 524|0;
 $9 = $8;
 $10 = sp + 512|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 (___DOUBLE_BITS_685($1)|0);
 $12 = tempRet0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = -$1;
  $$0471 = $14;$$0520 = 1;$$0521 = 26054;
 } else {
  $15 = $4 & 2048;
  $16 = ($15|0)==(0);
  $17 = $4 & 1;
  $18 = ($17|0)==(0);
  $$ = $18 ? (26055) : (26060);
  $$$ = $16 ? $$ : (26057);
  $19 = $4 & 2049;
  $narrow = ($19|0)!=(0);
  $$534$ = $narrow&1;
  $$0471 = $1;$$0520 = $$534$;$$0521 = $$$;
 }
 (___DOUBLE_BITS_685($$0471)|0);
 $20 = tempRet0;
 $21 = $20 & 2146435072;
 $22 = ($21>>>0)<(2146435072);
 $23 = (0)<(0);
 $24 = ($21|0)==(2146435072);
 $25 = $24 & $23;
 $26 = $22 | $25;
 do {
  if ($26) {
   $35 = (+_frexpl($$0471,$7));
   $36 = $35 * 2.0;
   $37 = $36 != 0.0;
   if ($37) {
    $38 = HEAP32[$7>>2]|0;
    $39 = (($38) + -1)|0;
    HEAP32[$7>>2] = $39;
   }
   $40 = $5 | 32;
   $41 = ($40|0)==(97);
   if ($41) {
    $42 = $5 & 32;
    $43 = ($42|0)==(0);
    $44 = ((($$0521)) + 9|0);
    $$0521$ = $43 ? $$0521 : $44;
    $45 = $$0520 | 2;
    $46 = ($3>>>0)>(11);
    $47 = (12 - ($3))|0;
    $48 = ($47|0)==(0);
    $49 = $46 | $48;
    do {
     if ($49) {
      $$1472 = $36;
     } else {
      $$0509582 = 8.0;$$1508583 = $47;
      while(1) {
       $50 = (($$1508583) + -1)|0;
       $51 = $$0509582 * 16.0;
       $52 = ($50|0)==(0);
       if ($52) {
        break;
       } else {
        $$0509582 = $51;$$1508583 = $50;
       }
      }
      $53 = HEAP8[$$0521$>>0]|0;
      $54 = ($53<<24>>24)==(45);
      if ($54) {
       $55 = -$36;
       $56 = $55 - $51;
       $57 = $51 + $56;
       $58 = -$57;
       $$1472 = $58;
       break;
      } else {
       $59 = $36 + $51;
       $60 = $59 - $51;
       $$1472 = $60;
       break;
      }
     }
    } while(0);
    $61 = HEAP32[$7>>2]|0;
    $62 = ($61|0)<(0);
    $63 = (0 - ($61))|0;
    $64 = $62 ? $63 : $61;
    $65 = ($64|0)<(0);
    $66 = $65 << 31 >> 31;
    $67 = (_fmt_u($64,$66,$11)|0);
    $68 = ($67|0)==($11|0);
    if ($68) {
     $69 = ((($10)) + 11|0);
     HEAP8[$69>>0] = 48;
     $$0511 = $69;
    } else {
     $$0511 = $67;
    }
    $70 = $61 >> 31;
    $71 = $70 & 2;
    $72 = (($71) + 43)|0;
    $73 = $72&255;
    $74 = ((($$0511)) + -1|0);
    HEAP8[$74>>0] = $73;
    $75 = (($5) + 15)|0;
    $76 = $75&255;
    $77 = ((($$0511)) + -2|0);
    HEAP8[$77>>0] = $76;
    $notrhs = ($3|0)<(1);
    $78 = $4 & 8;
    $79 = ($78|0)==(0);
    $$0523 = $8;$$2473 = $$1472;
    while(1) {
     $80 = (~~(($$2473)));
     $81 = (26085 + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $83 | $42;
     $85 = $84&255;
     $86 = ((($$0523)) + 1|0);
     HEAP8[$$0523>>0] = $85;
     $87 = (+($80|0));
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = (($90) - ($9))|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $notlhs = $89 == 0.0;
      $or$cond3$not = $notrhs & $notlhs;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $93 = ((($$0523)) + 2|0);
       HEAP8[$86>>0] = 46;
       $$1524 = $93;
      }
     } else {
      $$1524 = $86;
     }
     $94 = $89 != 0.0;
     if ($94) {
      $$0523 = $$1524;$$2473 = $89;
     } else {
      break;
     }
    }
    $95 = ($3|0)!=(0);
    $96 = $77;
    $97 = $11;
    $98 = $$1524;
    $99 = (($98) - ($9))|0;
    $100 = (($97) - ($96))|0;
    $101 = (($99) + -2)|0;
    $102 = ($101|0)<($3|0);
    $or$cond537 = $95 & $102;
    $103 = (($3) + 2)|0;
    $$pn = $or$cond537 ? $103 : $99;
    $$0525 = (($100) + ($45))|0;
    $104 = (($$0525) + ($$pn))|0;
    _pad_684($0,32,$2,$104,$4);
    _out($0,$$0521$,$45);
    $105 = $4 ^ 65536;
    _pad_684($0,48,$2,$104,$105);
    _out($0,$8,$99);
    $106 = (($$pn) - ($99))|0;
    _pad_684($0,48,$106,0,0);
    _out($0,$77,$100);
    $107 = $4 ^ 8192;
    _pad_684($0,32,$2,$104,$107);
    $$sink562 = $104;
    break;
   }
   $108 = ($3|0)<(0);
   $$539 = $108 ? 6 : $3;
   if ($37) {
    $109 = $36 * 268435456.0;
    $110 = HEAP32[$7>>2]|0;
    $111 = (($110) + -28)|0;
    HEAP32[$7>>2] = $111;
    $$3 = $109;$$pr = $111;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $36;$$pr = $$pre;
   }
   $112 = ($$pr|0)<(0);
   $113 = ((($6)) + 288|0);
   $$556 = $112 ? $6 : $113;
   $$0498 = $$556;$$4 = $$3;
   while(1) {
    $114 = (~~(($$4))>>>0);
    HEAP32[$$0498>>2] = $114;
    $115 = ((($$0498)) + 4|0);
    $116 = (+($114>>>0));
    $117 = $$4 - $116;
    $118 = $117 * 1.0E+9;
    $119 = $118 != 0.0;
    if ($119) {
     $$0498 = $115;$$4 = $118;
    } else {
     break;
    }
   }
   $120 = ($$pr|0)>(0);
   if ($120) {
    $$1482661 = $$556;$$1499660 = $115;$122 = $$pr;
    while(1) {
     $121 = ($122|0)<(29);
     $123 = $121 ? $122 : 29;
     $$0488653 = ((($$1499660)) + -4|0);
     $124 = ($$0488653>>>0)<($$1482661>>>0);
     if ($124) {
      $$2483$ph = $$1482661;
     } else {
      $$0488655 = $$0488653;$$0497654 = 0;
      while(1) {
       $125 = HEAP32[$$0488655>>2]|0;
       $126 = (_bitshift64Shl(($125|0),0,($123|0))|0);
       $127 = tempRet0;
       $128 = (_i64Add(($126|0),($127|0),($$0497654|0),0)|0);
       $129 = tempRet0;
       $130 = (___uremdi3(($128|0),($129|0),1000000000,0)|0);
       $131 = tempRet0;
       HEAP32[$$0488655>>2] = $130;
       $132 = (___udivdi3(($128|0),($129|0),1000000000,0)|0);
       $133 = tempRet0;
       $$0488 = ((($$0488655)) + -4|0);
       $134 = ($$0488>>>0)<($$1482661>>>0);
       if ($134) {
        break;
       } else {
        $$0488655 = $$0488;$$0497654 = $132;
       }
      }
      $135 = ($132|0)==(0);
      if ($135) {
       $$2483$ph = $$1482661;
      } else {
       $136 = ((($$1482661)) + -4|0);
       HEAP32[$136>>2] = $132;
       $$2483$ph = $136;
      }
     }
     $$2500 = $$1499660;
     while(1) {
      $137 = ($$2500>>>0)>($$2483$ph>>>0);
      if (!($137)) {
       break;
      }
      $138 = ((($$2500)) + -4|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0);
      if ($140) {
       $$2500 = $138;
      } else {
       break;
      }
     }
     $141 = HEAP32[$7>>2]|0;
     $142 = (($141) - ($123))|0;
     HEAP32[$7>>2] = $142;
     $143 = ($142|0)>(0);
     if ($143) {
      $$1482661 = $$2483$ph;$$1499660 = $$2500;$122 = $142;
     } else {
      $$1482$lcssa = $$2483$ph;$$1499$lcssa = $$2500;$$pr564 = $142;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$556;$$1499$lcssa = $115;$$pr564 = $$pr;
   }
   $144 = ($$pr564|0)<(0);
   if ($144) {
    $145 = (($$539) + 25)|0;
    $146 = (($145|0) / 9)&-1;
    $147 = (($146) + 1)|0;
    $148 = ($40|0)==(102);
    $$3484648 = $$1482$lcssa;$$3501647 = $$1499$lcssa;$150 = $$pr564;
    while(1) {
     $149 = (0 - ($150))|0;
     $151 = ($149|0)<(9);
     $152 = $151 ? $149 : 9;
     $153 = ($$3484648>>>0)<($$3501647>>>0);
     if ($153) {
      $157 = 1 << $152;
      $158 = (($157) + -1)|0;
      $159 = 1000000000 >>> $152;
      $$0487642 = 0;$$1489641 = $$3484648;
      while(1) {
       $160 = HEAP32[$$1489641>>2]|0;
       $161 = $160 & $158;
       $162 = $160 >>> $152;
       $163 = (($162) + ($$0487642))|0;
       HEAP32[$$1489641>>2] = $163;
       $164 = Math_imul($161, $159)|0;
       $165 = ((($$1489641)) + 4|0);
       $166 = ($165>>>0)<($$3501647>>>0);
       if ($166) {
        $$0487642 = $164;$$1489641 = $165;
       } else {
        break;
       }
      }
      $167 = HEAP32[$$3484648>>2]|0;
      $168 = ($167|0)==(0);
      $169 = ((($$3484648)) + 4|0);
      $$$3484 = $168 ? $169 : $$3484648;
      $170 = ($164|0)==(0);
      if ($170) {
       $$$3484692 = $$$3484;$$4502 = $$3501647;
      } else {
       $171 = ((($$3501647)) + 4|0);
       HEAP32[$$3501647>>2] = $164;
       $$$3484692 = $$$3484;$$4502 = $171;
      }
     } else {
      $154 = HEAP32[$$3484648>>2]|0;
      $155 = ($154|0)==(0);
      $156 = ((($$3484648)) + 4|0);
      $$$3484691 = $155 ? $156 : $$3484648;
      $$$3484692 = $$$3484691;$$4502 = $$3501647;
     }
     $172 = $148 ? $$556 : $$$3484692;
     $173 = $$4502;
     $174 = $172;
     $175 = (($173) - ($174))|0;
     $176 = $175 >> 2;
     $177 = ($176|0)>($147|0);
     $178 = (($172) + ($147<<2)|0);
     $$$4502 = $177 ? $178 : $$4502;
     $179 = HEAP32[$7>>2]|0;
     $180 = (($179) + ($152))|0;
     HEAP32[$7>>2] = $180;
     $181 = ($180|0)<(0);
     if ($181) {
      $$3484648 = $$$3484692;$$3501647 = $$$4502;$150 = $180;
     } else {
      $$3484$lcssa = $$$3484692;$$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$3501$lcssa = $$1499$lcssa;
   }
   $182 = ($$3484$lcssa>>>0)<($$3501$lcssa>>>0);
   $183 = $$556;
   if ($182) {
    $184 = $$3484$lcssa;
    $185 = (($183) - ($184))|0;
    $186 = $185 >> 2;
    $187 = ($186*9)|0;
    $188 = HEAP32[$$3484$lcssa>>2]|0;
    $189 = ($188>>>0)<(10);
    if ($189) {
     $$1515 = $187;
    } else {
     $$0514637 = $187;$$0530636 = 10;
     while(1) {
      $190 = ($$0530636*10)|0;
      $191 = (($$0514637) + 1)|0;
      $192 = ($188>>>0)<($190>>>0);
      if ($192) {
       $$1515 = $191;
       break;
      } else {
       $$0514637 = $191;$$0530636 = $190;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $193 = ($40|0)!=(102);
   $194 = $193 ? $$1515 : 0;
   $195 = (($$539) - ($194))|0;
   $196 = ($40|0)==(103);
   $197 = ($$539|0)!=(0);
   $198 = $197 & $196;
   $$neg = $198 << 31 >> 31;
   $199 = (($195) + ($$neg))|0;
   $200 = $$3501$lcssa;
   $201 = (($200) - ($183))|0;
   $202 = $201 >> 2;
   $203 = ($202*9)|0;
   $204 = (($203) + -9)|0;
   $205 = ($199|0)<($204|0);
   if ($205) {
    $206 = ((($$556)) + 4|0);
    $207 = (($199) + 9216)|0;
    $208 = (($207|0) / 9)&-1;
    $209 = (($208) + -1024)|0;
    $210 = (($206) + ($209<<2)|0);
    $211 = (($207|0) % 9)&-1;
    $$0527629 = (($211) + 1)|0;
    $212 = ($$0527629|0)<(9);
    if ($212) {
     $$0527631 = $$0527629;$$1531630 = 10;
     while(1) {
      $213 = ($$1531630*10)|0;
      $$0527 = (($$0527631) + 1)|0;
      $exitcond = ($$0527|0)==(9);
      if ($exitcond) {
       $$1531$lcssa = $213;
       break;
      } else {
       $$0527631 = $$0527;$$1531630 = $213;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $214 = HEAP32[$210>>2]|0;
    $215 = (($214>>>0) % ($$1531$lcssa>>>0))&-1;
    $216 = ($215|0)==(0);
    $217 = ((($210)) + 4|0);
    $218 = ($217|0)==($$3501$lcssa|0);
    $or$cond541 = $218 & $216;
    if ($or$cond541) {
     $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
    } else {
     $219 = (($214>>>0) / ($$1531$lcssa>>>0))&-1;
     $220 = $219 & 1;
     $221 = ($220|0)==(0);
     $$542 = $221 ? 9007199254740992.0 : 9007199254740994.0;
     $222 = (($$1531$lcssa|0) / 2)&-1;
     $223 = ($215>>>0)<($222>>>0);
     $224 = ($215|0)==($222|0);
     $or$cond544 = $218 & $224;
     $$559 = $or$cond544 ? 1.0 : 1.5;
     $$$559 = $223 ? 0.5 : $$559;
     $225 = ($$0520|0)==(0);
     if ($225) {
      $$1467 = $$$559;$$1469 = $$542;
     } else {
      $226 = HEAP8[$$0521>>0]|0;
      $227 = ($226<<24>>24)==(45);
      $228 = -$$542;
      $229 = -$$$559;
      $$$542 = $227 ? $228 : $$542;
      $$$$559 = $227 ? $229 : $$$559;
      $$1467 = $$$$559;$$1469 = $$$542;
     }
     $230 = (($214) - ($215))|0;
     HEAP32[$210>>2] = $230;
     $231 = $$1469 + $$1467;
     $232 = $231 != $$1469;
     if ($232) {
      $233 = (($230) + ($$1531$lcssa))|0;
      HEAP32[$210>>2] = $233;
      $234 = ($233>>>0)>(999999999);
      if ($234) {
       $$5486623 = $$3484$lcssa;$$sink545622 = $210;
       while(1) {
        $235 = ((($$sink545622)) + -4|0);
        HEAP32[$$sink545622>>2] = 0;
        $236 = ($235>>>0)<($$5486623>>>0);
        if ($236) {
         $237 = ((($$5486623)) + -4|0);
         HEAP32[$237>>2] = 0;
         $$6 = $237;
        } else {
         $$6 = $$5486623;
        }
        $238 = HEAP32[$235>>2]|0;
        $239 = (($238) + 1)|0;
        HEAP32[$235>>2] = $239;
        $240 = ($239>>>0)>(999999999);
        if ($240) {
         $$5486623 = $$6;$$sink545622 = $235;
        } else {
         $$5486$lcssa = $$6;$$sink545$lcssa = $235;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;$$sink545$lcssa = $210;
      }
      $241 = $$5486$lcssa;
      $242 = (($183) - ($241))|0;
      $243 = $242 >> 2;
      $244 = ($243*9)|0;
      $245 = HEAP32[$$5486$lcssa>>2]|0;
      $246 = ($245>>>0)<(10);
      if ($246) {
       $$4492 = $$sink545$lcssa;$$4518 = $244;$$8 = $$5486$lcssa;
      } else {
       $$2516618 = $244;$$2532617 = 10;
       while(1) {
        $247 = ($$2532617*10)|0;
        $248 = (($$2516618) + 1)|0;
        $249 = ($245>>>0)<($247>>>0);
        if ($249) {
         $$4492 = $$sink545$lcssa;$$4518 = $248;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2516618 = $248;$$2532617 = $247;
        }
       }
      }
     } else {
      $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
     }
    }
    $250 = ((($$4492)) + 4|0);
    $251 = ($$3501$lcssa>>>0)>($250>>>0);
    $$$3501 = $251 ? $250 : $$3501$lcssa;
    $$5519$ph = $$4518;$$7505$ph = $$$3501;$$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;$$7505$ph = $$3501$lcssa;$$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while(1) {
    $252 = ($$7505>>>0)>($$9$ph>>>0);
    if (!($252)) {
     $$lcssa673 = 0;
     break;
    }
    $253 = ((($$7505)) + -4|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = ($254|0)==(0);
    if ($255) {
     $$7505 = $253;
    } else {
     $$lcssa673 = 1;
     break;
    }
   }
   $256 = (0 - ($$5519$ph))|0;
   do {
    if ($196) {
     $not$ = $197 ^ 1;
     $257 = $not$&1;
     $$539$ = (($257) + ($$539))|0;
     $258 = ($$539$|0)>($$5519$ph|0);
     $259 = ($$5519$ph|0)>(-5);
     $or$cond6 = $258 & $259;
     if ($or$cond6) {
      $260 = (($5) + -1)|0;
      $$neg567 = (($$539$) + -1)|0;
      $261 = (($$neg567) - ($$5519$ph))|0;
      $$0479 = $260;$$2476 = $261;
     } else {
      $262 = (($5) + -2)|0;
      $263 = (($$539$) + -1)|0;
      $$0479 = $262;$$2476 = $263;
     }
     $264 = $4 & 8;
     $265 = ($264|0)==(0);
     if ($265) {
      if ($$lcssa673) {
       $266 = ((($$7505)) + -4|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = ($267|0)==(0);
       if ($268) {
        $$2529 = 9;
       } else {
        $269 = (($267>>>0) % 10)&-1;
        $270 = ($269|0)==(0);
        if ($270) {
         $$1528614 = 0;$$3533613 = 10;
         while(1) {
          $271 = ($$3533613*10)|0;
          $272 = (($$1528614) + 1)|0;
          $273 = (($267>>>0) % ($271>>>0))&-1;
          $274 = ($273|0)==(0);
          if ($274) {
           $$1528614 = $272;$$3533613 = $271;
          } else {
           $$2529 = $272;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $275 = $$0479 | 32;
      $276 = ($275|0)==(102);
      $277 = $$7505;
      $278 = (($277) - ($183))|0;
      $279 = $278 >> 2;
      $280 = ($279*9)|0;
      $281 = (($280) + -9)|0;
      if ($276) {
       $282 = (($281) - ($$2529))|0;
       $283 = ($282|0)>(0);
       $$546 = $283 ? $282 : 0;
       $284 = ($$2476|0)<($$546|0);
       $$2476$$547 = $284 ? $$2476 : $$546;
       $$1480 = $$0479;$$3477 = $$2476$$547;$$pre$phi690Z2D = 0;
       break;
      } else {
       $285 = (($281) + ($$5519$ph))|0;
       $286 = (($285) - ($$2529))|0;
       $287 = ($286|0)>(0);
       $$548 = $287 ? $286 : 0;
       $288 = ($$2476|0)<($$548|0);
       $$2476$$549 = $288 ? $$2476 : $$548;
       $$1480 = $$0479;$$3477 = $$2476$$549;$$pre$phi690Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;$$pre$phi690Z2D = $264;
     }
    } else {
     $$pre689 = $4 & 8;
     $$1480 = $5;$$3477 = $$539;$$pre$phi690Z2D = $$pre689;
    }
   } while(0);
   $289 = $$3477 | $$pre$phi690Z2D;
   $290 = ($289|0)!=(0);
   $291 = $290&1;
   $292 = $$1480 | 32;
   $293 = ($292|0)==(102);
   if ($293) {
    $294 = ($$5519$ph|0)>(0);
    $295 = $294 ? $$5519$ph : 0;
    $$2513 = 0;$$pn566 = $295;
   } else {
    $296 = ($$5519$ph|0)<(0);
    $297 = $296 ? $256 : $$5519$ph;
    $298 = ($297|0)<(0);
    $299 = $298 << 31 >> 31;
    $300 = (_fmt_u($297,$299,$11)|0);
    $301 = $11;
    $302 = $300;
    $303 = (($301) - ($302))|0;
    $304 = ($303|0)<(2);
    if ($304) {
     $$1512607 = $300;
     while(1) {
      $305 = ((($$1512607)) + -1|0);
      HEAP8[$305>>0] = 48;
      $306 = $305;
      $307 = (($301) - ($306))|0;
      $308 = ($307|0)<(2);
      if ($308) {
       $$1512607 = $305;
      } else {
       $$1512$lcssa = $305;
       break;
      }
     }
    } else {
     $$1512$lcssa = $300;
    }
    $309 = $$5519$ph >> 31;
    $310 = $309 & 2;
    $311 = (($310) + 43)|0;
    $312 = $311&255;
    $313 = ((($$1512$lcssa)) + -1|0);
    HEAP8[$313>>0] = $312;
    $314 = $$1480&255;
    $315 = ((($$1512$lcssa)) + -2|0);
    HEAP8[$315>>0] = $314;
    $316 = $315;
    $317 = (($301) - ($316))|0;
    $$2513 = $315;$$pn566 = $317;
   }
   $318 = (($$0520) + 1)|0;
   $319 = (($318) + ($$3477))|0;
   $$1526 = (($319) + ($291))|0;
   $320 = (($$1526) + ($$pn566))|0;
   _pad_684($0,32,$2,$320,$4);
   _out($0,$$0521,$$0520);
   $321 = $4 ^ 65536;
   _pad_684($0,48,$2,$320,$321);
   if ($293) {
    $322 = ($$9$ph>>>0)>($$556>>>0);
    $$0496$$9 = $322 ? $$556 : $$9$ph;
    $323 = ((($8)) + 9|0);
    $324 = $323;
    $325 = ((($8)) + 8|0);
    $$5493597 = $$0496$$9;
    while(1) {
     $326 = HEAP32[$$5493597>>2]|0;
     $327 = (_fmt_u($326,0,$323)|0);
     $328 = ($$5493597|0)==($$0496$$9|0);
     if ($328) {
      $334 = ($327|0)==($323|0);
      if ($334) {
       HEAP8[$325>>0] = 48;
       $$1465 = $325;
      } else {
       $$1465 = $327;
      }
     } else {
      $329 = ($327>>>0)>($8>>>0);
      if ($329) {
       $330 = $327;
       $331 = (($330) - ($9))|0;
       _memset(($8|0),48,($331|0))|0;
       $$0464594 = $327;
       while(1) {
        $332 = ((($$0464594)) + -1|0);
        $333 = ($332>>>0)>($8>>>0);
        if ($333) {
         $$0464594 = $332;
        } else {
         $$1465 = $332;
         break;
        }
       }
      } else {
       $$1465 = $327;
      }
     }
     $335 = $$1465;
     $336 = (($324) - ($335))|0;
     _out($0,$$1465,$336);
     $337 = ((($$5493597)) + 4|0);
     $338 = ($337>>>0)>($$556>>>0);
     if ($338) {
      break;
     } else {
      $$5493597 = $337;
     }
    }
    $339 = ($289|0)==(0);
    if (!($339)) {
     _out($0,26101,1);
    }
    $340 = ($337>>>0)<($$7505>>>0);
    $341 = ($$3477|0)>(0);
    $342 = $340 & $341;
    if ($342) {
     $$4478590 = $$3477;$$6494589 = $337;
     while(1) {
      $343 = HEAP32[$$6494589>>2]|0;
      $344 = (_fmt_u($343,0,$323)|0);
      $345 = ($344>>>0)>($8>>>0);
      if ($345) {
       $346 = $344;
       $347 = (($346) - ($9))|0;
       _memset(($8|0),48,($347|0))|0;
       $$0463584 = $344;
       while(1) {
        $348 = ((($$0463584)) + -1|0);
        $349 = ($348>>>0)>($8>>>0);
        if ($349) {
         $$0463584 = $348;
        } else {
         $$0463$lcssa = $348;
         break;
        }
       }
      } else {
       $$0463$lcssa = $344;
      }
      $350 = ($$4478590|0)<(9);
      $351 = $350 ? $$4478590 : 9;
      _out($0,$$0463$lcssa,$351);
      $352 = ((($$6494589)) + 4|0);
      $353 = (($$4478590) + -9)|0;
      $354 = ($352>>>0)<($$7505>>>0);
      $355 = ($$4478590|0)>(9);
      $356 = $354 & $355;
      if ($356) {
       $$4478590 = $353;$$6494589 = $352;
      } else {
       $$4478$lcssa = $353;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $357 = (($$4478$lcssa) + 9)|0;
    _pad_684($0,48,$357,9,0);
   } else {
    $358 = ((($$9$ph)) + 4|0);
    $$7505$ = $$lcssa673 ? $$7505 : $358;
    $359 = ($$3477|0)>(-1);
    if ($359) {
     $360 = ((($8)) + 9|0);
     $361 = ($$pre$phi690Z2D|0)==(0);
     $362 = $360;
     $363 = (0 - ($9))|0;
     $364 = ((($8)) + 8|0);
     $$5602 = $$3477;$$7495601 = $$9$ph;
     while(1) {
      $365 = HEAP32[$$7495601>>2]|0;
      $366 = (_fmt_u($365,0,$360)|0);
      $367 = ($366|0)==($360|0);
      if ($367) {
       HEAP8[$364>>0] = 48;
       $$0 = $364;
      } else {
       $$0 = $366;
      }
      $368 = ($$7495601|0)==($$9$ph|0);
      do {
       if ($368) {
        $372 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $373 = ($$5602|0)<(1);
        $or$cond554 = $361 & $373;
        if ($or$cond554) {
         $$2 = $372;
         break;
        }
        _out($0,26101,1);
        $$2 = $372;
       } else {
        $369 = ($$0>>>0)>($8>>>0);
        if (!($369)) {
         $$2 = $$0;
         break;
        }
        $scevgep684 = (($$0) + ($363)|0);
        $scevgep684685 = $scevgep684;
        _memset(($8|0),48,($scevgep684685|0))|0;
        $$1598 = $$0;
        while(1) {
         $370 = ((($$1598)) + -1|0);
         $371 = ($370>>>0)>($8>>>0);
         if ($371) {
          $$1598 = $370;
         } else {
          $$2 = $370;
          break;
         }
        }
       }
      } while(0);
      $374 = $$2;
      $375 = (($362) - ($374))|0;
      $376 = ($$5602|0)>($375|0);
      $377 = $376 ? $375 : $$5602;
      _out($0,$$2,$377);
      $378 = (($$5602) - ($375))|0;
      $379 = ((($$7495601)) + 4|0);
      $380 = ($379>>>0)<($$7505$>>>0);
      $381 = ($378|0)>(-1);
      $382 = $380 & $381;
      if ($382) {
       $$5602 = $378;$$7495601 = $379;
      } else {
       $$5$lcssa = $378;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $383 = (($$5$lcssa) + 18)|0;
    _pad_684($0,48,$383,18,0);
    $384 = $11;
    $385 = $$2513;
    $386 = (($384) - ($385))|0;
    _out($0,$$2513,$386);
   }
   $387 = $4 ^ 8192;
   _pad_684($0,32,$2,$320,$387);
   $$sink562 = $320;
  } else {
   $27 = $5 & 32;
   $28 = ($27|0)!=(0);
   $29 = $28 ? 26073 : 26077;
   $30 = ($$0471 != $$0471) | (0.0 != 0.0);
   $31 = $28 ? 28004 : 26081;
   $$0510 = $30 ? $31 : $29;
   $32 = (($$0520) + 3)|0;
   $33 = $4 & -65537;
   _pad_684($0,32,$2,$32,$33);
   _out($0,$$0521,$$0520);
   _out($0,$$0510,3);
   $34 = $4 ^ 8192;
   _pad_684($0,32,$2,$32,$34);
   $$sink562 = $32;
  }
 } while(0);
 $388 = ($$sink562|0)<($2|0);
 $$555 = $388 ? $2 : $$sink562;
 STACKTOP = sp;return ($$555|0);
}
function ___DOUBLE_BITS_685($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_431()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $not$ = ($9|0)==(0|0);
   if ($not$) {
    $10 = $1 & -128;
    $11 = ($10|0)==(57216);
    if ($11) {
     $13 = $1&255;
     HEAP8[$0>>0] = $13;
     $$0 = 1;
     break;
    } else {
     $12 = (___errno_location()|0);
     HEAP32[$12>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $14 = ($1>>>0)<(2048);
   if ($14) {
    $15 = $1 >>> 6;
    $16 = $15 | 192;
    $17 = $16&255;
    $18 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $17;
    $19 = $1 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    HEAP8[$18>>0] = $21;
    $$0 = 2;
    break;
   }
   $22 = ($1>>>0)<(55296);
   $23 = $1 & -8192;
   $24 = ($23|0)==(57344);
   $or$cond = $22 | $24;
   if ($or$cond) {
    $25 = $1 >>> 12;
    $26 = $25 | 224;
    $27 = $26&255;
    $28 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $27;
    $29 = $1 >>> 6;
    $30 = $29 & 63;
    $31 = $30 | 128;
    $32 = $31&255;
    $33 = ((($0)) + 2|0);
    HEAP8[$28>>0] = $32;
    $34 = $1 & 63;
    $35 = $34 | 128;
    $36 = $35&255;
    HEAP8[$33>>0] = $36;
    $$0 = 3;
    break;
   }
   $37 = (($1) + -65536)|0;
   $38 = ($37>>>0)<(1048576);
   if ($38) {
    $39 = $1 >>> 18;
    $40 = $39 | 240;
    $41 = $40&255;
    $42 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $41;
    $43 = $1 >>> 12;
    $44 = $43 & 63;
    $45 = $44 | 128;
    $46 = $45&255;
    $47 = ((($0)) + 2|0);
    HEAP8[$42>>0] = $46;
    $48 = $1 >>> 6;
    $49 = $48 & 63;
    $50 = $49 | 128;
    $51 = $50&255;
    $52 = ((($0)) + 3|0);
    HEAP8[$47>>0] = $51;
    $53 = $1 & 63;
    $54 = $53 | 128;
    $55 = $54&255;
    HEAP8[$52>>0] = $55;
    $$0 = 4;
    break;
   } else {
    $56 = (___errno_location()|0);
    HEAP32[$56>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_431() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___pthread_self_104() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (26103 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 26191;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 26191;
  } else {
   $$01214 = 26191;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 1023]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 1023]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   _memcpy(($31|0),($$141|0),($$143|0))|0;
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = ((($0)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($14) + ($18)|0);
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6;
 $8 = (($4) - ($7))|0;
 $9 = ($8>>>0)>($2>>>0);
 $$ = $9 ? $2 : $8;
 _memcpy(($6|0),($1|0),($$|0))|0;
 $10 = HEAP32[$5>>2]|0;
 $11 = (($10) + ($$)|0);
 HEAP32[$5>>2] = $11;
 return ($2|0);
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $$old8 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$0105$ph = -149;$$0106$ph = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 default: {
  $$0114 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $3 = ((($0)) + 4|0);
   $4 = ((($0)) + 100|0);
   while(1) {
    $5 = HEAP32[$3>>2]|0;
    $6 = HEAP32[$4>>2]|0;
    $7 = ($5>>>0)<($6>>>0);
    if ($7) {
     $8 = ((($5)) + 1|0);
     HEAP32[$3>>2] = $8;
     $9 = HEAP8[$5>>0]|0;
     $10 = $9&255;
     $12 = $10;
    } else {
     $11 = (___shgetc($0)|0);
     $12 = $11;
    }
    $13 = (_isspace($12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     break;
    }
   }
   L13: do {
    switch ($12|0) {
    case 43: case 45:  {
     $15 = ($12|0)==(45);
     $16 = $15&1;
     $17 = $16 << 1;
     $18 = (1 - ($17))|0;
     $19 = HEAP32[$3>>2]|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = ($19>>>0)<($20>>>0);
     if ($21) {
      $22 = ((($19)) + 1|0);
      HEAP32[$3>>2] = $22;
      $23 = HEAP8[$19>>0]|0;
      $24 = $23&255;
      $$0 = $24;$$0113 = $18;
      break L13;
     } else {
      $25 = (___shgetc($0)|0);
      $$0 = $25;$$0113 = $18;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $12;$$0113 = 1;
    }
    }
   } while(0);
   $$0107127 = 0;$$1128 = $$0;
   while(1) {
    $26 = $$1128 | 32;
    $27 = (27995 + ($$0107127)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($26|0)==($29|0);
    if (!($30)) {
     $$0107$lcssa = $$0107127;$$1$lcssa = $$1128;
     break;
    }
    $31 = ($$0107127>>>0)<(7);
    do {
     if ($31) {
      $32 = HEAP32[$3>>2]|0;
      $33 = HEAP32[$4>>2]|0;
      $34 = ($32>>>0)<($33>>>0);
      if ($34) {
       $35 = ((($32)) + 1|0);
       HEAP32[$3>>2] = $35;
       $36 = HEAP8[$32>>0]|0;
       $37 = $36&255;
       $$2 = $37;
       break;
      } else {
       $38 = (___shgetc($0)|0);
       $$2 = $38;
       break;
      }
     } else {
      $$2 = $$1128;
     }
    } while(0);
    $39 = (($$0107127) + 1)|0;
    $40 = ($39>>>0)<(8);
    if ($40) {
     $$0107127 = $39;$$1128 = $$2;
    } else {
     $$0107$lcssa = $39;$$1$lcssa = $$2;
     break;
    }
   }
   L29: do {
    switch ($$0107$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $41 = ($$0107$lcssa>>>0)>(3);
     $42 = ($2|0)!=(0);
     $or$cond5 = $42 & $41;
     if ($or$cond5) {
      $43 = ($$0107$lcssa|0)==(8);
      if ($43) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $56 = ($$0107$lcssa|0)==(0);
     L34: do {
      if ($56) {
       $$2109125 = 0;$$3126 = $$1$lcssa;
       while(1) {
        $57 = $$3126 | 32;
        $58 = (28004 + ($$2109125)|0);
        $59 = HEAP8[$58>>0]|0;
        $60 = $59 << 24 >> 24;
        $61 = ($57|0)==($60|0);
        if (!($61)) {
         $$3110 = $$2109125;$$5 = $$3126;
         break L34;
        }
        $62 = ($$2109125>>>0)<(2);
        do {
         if ($62) {
          $63 = HEAP32[$3>>2]|0;
          $64 = HEAP32[$4>>2]|0;
          $65 = ($63>>>0)<($64>>>0);
          if ($65) {
           $66 = ((($63)) + 1|0);
           HEAP32[$3>>2] = $66;
           $67 = HEAP8[$63>>0]|0;
           $68 = $67&255;
           $$4 = $68;
           break;
          } else {
           $69 = (___shgetc($0)|0);
           $$4 = $69;
           break;
          }
         } else {
          $$4 = $$3126;
         }
        } while(0);
        $70 = (($$2109125) + 1)|0;
        $71 = ($70>>>0)<(3);
        if ($71) {
         $$2109125 = $70;$$3126 = $$4;
        } else {
         $$3110 = $70;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3110 = $$0107$lcssa;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3110|0) {
     case 3:  {
      $72 = HEAP32[$3>>2]|0;
      $73 = HEAP32[$4>>2]|0;
      $74 = ($72>>>0)<($73>>>0);
      if ($74) {
       $75 = ((($72)) + 1|0);
       HEAP32[$3>>2] = $75;
       $76 = HEAP8[$72>>0]|0;
       $77 = $76&255;
       $80 = $77;
      } else {
       $78 = (___shgetc($0)|0);
       $80 = $78;
      }
      $79 = ($80|0)==(40);
      if ($79) {
       $$4111 = 1;
      } else {
       $81 = HEAP32[$4>>2]|0;
       $82 = ($81|0)==(0|0);
       if ($82) {
        $$0114 = nan;
        break L4;
       }
       $83 = HEAP32[$3>>2]|0;
       $84 = ((($83)) + -1|0);
       HEAP32[$3>>2] = $84;
       $$0114 = nan;
       break L4;
      }
      while(1) {
       $85 = HEAP32[$3>>2]|0;
       $86 = HEAP32[$4>>2]|0;
       $87 = ($85>>>0)<($86>>>0);
       if ($87) {
        $88 = ((($85)) + 1|0);
        HEAP32[$3>>2] = $88;
        $89 = HEAP8[$85>>0]|0;
        $90 = $89&255;
        $93 = $90;
       } else {
        $91 = (___shgetc($0)|0);
        $93 = $91;
       }
       $92 = (($93) + -48)|0;
       $94 = ($92>>>0)<(10);
       $95 = (($93) + -65)|0;
       $96 = ($95>>>0)<(26);
       $or$cond = $94 | $96;
       if (!($or$cond)) {
        $97 = (($93) + -97)|0;
        $98 = ($97>>>0)<(26);
        $99 = ($93|0)==(95);
        $or$cond7 = $99 | $98;
        if (!($or$cond7)) {
         break;
        }
       }
       $111 = (($$4111) + 1)|0;
       $$4111 = $111;
      }
      $100 = ($93|0)==(41);
      if ($100) {
       $$0114 = nan;
       break L4;
      }
      $101 = HEAP32[$4>>2]|0;
      $102 = ($101|0)==(0|0);
      if (!($102)) {
       $103 = HEAP32[$3>>2]|0;
       $104 = ((($103)) + -1|0);
       HEAP32[$3>>2] = $104;
      }
      if (!($42)) {
       $106 = (___errno_location()|0);
       HEAP32[$106>>2] = 22;
       ___shlim($0,0);
       $$0114 = 0.0;
       break L4;
      }
      $105 = ($$4111|0)==(0);
      if ($105) {
       $$0114 = nan;
       break L4;
      } else {
       $$in = $$4111;
      }
      while(1) {
       $107 = (($$in) + -1)|0;
       if (!($102)) {
        $108 = HEAP32[$3>>2]|0;
        $109 = ((($108)) + -1|0);
        HEAP32[$3>>2] = $109;
       }
       $110 = ($107|0)==(0);
       if ($110) {
        $$0114 = nan;
        break L4;
       } else {
        $$in = $107;
       }
      }
      break;
     }
     case 0:  {
      $117 = ($$5|0)==(48);
      if ($117) {
       $118 = HEAP32[$3>>2]|0;
       $119 = HEAP32[$4>>2]|0;
       $120 = ($118>>>0)<($119>>>0);
       if ($120) {
        $121 = ((($118)) + 1|0);
        HEAP32[$3>>2] = $121;
        $122 = HEAP8[$118>>0]|0;
        $123 = $122&255;
        $126 = $123;
       } else {
        $124 = (___shgetc($0)|0);
        $126 = $124;
       }
       $125 = $126 | 32;
       $127 = ($125|0)==(120);
       if ($127) {
        $128 = (+_hexfloat($0,$$0106$ph,$$0105$ph,$$0113,$2));
        $$0114 = $128;
        break L4;
       }
       $129 = HEAP32[$4>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$6 = 48;
       } else {
        $131 = HEAP32[$3>>2]|0;
        $132 = ((($131)) + -1|0);
        HEAP32[$3>>2] = $132;
        $$6 = 48;
       }
      } else {
       $$6 = $$5;
      }
      $133 = (+_decfloat($0,$$6,$$0106$ph,$$0105$ph,$$0113,$2));
      $$0114 = $133;
      break L4;
      break;
     }
     default: {
      $112 = HEAP32[$4>>2]|0;
      $113 = ($112|0)==(0|0);
      if (!($113)) {
       $114 = HEAP32[$3>>2]|0;
       $115 = ((($114)) + -1|0);
       HEAP32[$3>>2] = $115;
      }
      $116 = (___errno_location()|0);
      HEAP32[$116>>2] = 22;
      ___shlim($0,0);
      $$0114 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $44 = HEAP32[$4>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     $46 = HEAP32[$3>>2]|0;
     $47 = ((($46)) + -1|0);
     HEAP32[$3>>2] = $47;
    }
    $48 = ($2|0)!=(0);
    $49 = ($$0107$lcssa>>>0)>(3);
    $or$cond9 = $48 & $49;
    if ($or$cond9) {
     $$1108 = $$0107$lcssa;
     while(1) {
      if (!($45)) {
       $50 = HEAP32[$3>>2]|0;
       $51 = ((($50)) + -1|0);
       HEAP32[$3>>2] = $51;
      }
      $52 = (($$1108) + -1)|0;
      $$old8 = ($52>>>0)>(3);
      if ($$old8) {
       $$1108 = $52;
      } else {
       break;
      }
     }
    }
   }
   $53 = (+($$0113|0));
   $54 = $53 * inf;
   $55 = $54;
   $$0114 = $55;
  }
 } while(0);
 return (+$$0114);
}
function _hexfloat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0148$ = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0155$ = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0;
 var $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5 = 0.0, $$5164 = 0, $$6 = 0, $$pn = 0.0;
 var $$pre = 0.0, $$pre$phiZ2D = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0.0;
 var $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond168 = 0, $or$cond206 = 0, $or$cond4 = 0;
 var $or$cond6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $10;
  $11 = HEAP8[$6>>0]|0;
  $12 = $11&255;
  $$0 = $12;$$0142 = 0;
 } else {
  $13 = (___shgetc($0)|0);
  $$0 = $13;$$0142 = 0;
 }
 L4: while(1) {
  switch ($$0|0) {
  case 46:  {
   label = 8;
   break L4;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0146 = 0;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $$0;$$2144 = $$0142;$101 = 0;$53 = 0;$55 = 0;$99 = 0;
   break L4;
  }
  }
  $14 = HEAP32[$5>>2]|0;
  $15 = HEAP32[$7>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $$0 = $19;$$0142 = 1;
   continue;
  } else {
   $20 = (___shgetc($0)|0);
   $$0 = $20;$$0142 = 1;
   continue;
  }
 }
 if ((label|0) == 8) {
  $21 = HEAP32[$5>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if ($23) {
   $24 = ((($21)) + 1|0);
   HEAP32[$5>>2] = $24;
   $25 = HEAP8[$21>>0]|0;
   $26 = $25&255;
   $$1$ph = $26;
  } else {
   $27 = (___shgetc($0)|0);
   $$1$ph = $27;
  }
  $28 = ($$1$ph|0)==(48);
  if ($28) {
   $36 = 0;$37 = 0;
   while(1) {
    $29 = HEAP32[$5>>2]|0;
    $30 = HEAP32[$7>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$5>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $41 = $34;
    } else {
     $35 = (___shgetc($0)|0);
     $41 = $35;
    }
    $38 = (_i64Add(($36|0),($37|0),-1,-1)|0);
    $39 = tempRet0;
    $40 = ($41|0)==(48);
    if ($40) {
     $36 = $38;$37 = $39;
    } else {
     $$0146 = 1;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $41;$$2144 = 1;$101 = $39;$53 = 0;$55 = 0;$99 = $38;
     break;
    }
   }
  } else {
   $$0146 = 1;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $$1$ph;$$2144 = $$0142;$101 = 0;$53 = 0;$55 = 0;$99 = 0;
  }
 }
 while(1) {
  $42 = (($$2) + -48)|0;
  $43 = ($42>>>0)<(10);
  $44 = ($$2|0)==(46);
  if (!($43)) {
   $45 = $$2 | 32;
   $46 = (($45) + -97)|0;
   $47 = ($46>>>0)<(6);
   $or$cond6 = $44 | $47;
   if (!($or$cond6)) {
    $$2$lcssa = $$2;
    break;
   }
  }
  if ($44) {
   $48 = ($$0146|0)==(0);
   if ($48) {
    $$1147 = 1;$$2150 = $$0148;$$2154 = $$0152;$$2157 = $$0155;$$2161 = $$0159;$$3145 = $$2144;$214 = $55;$215 = $53;$216 = $55;$217 = $53;
   } else {
    $$2$lcssa = 46;
    break;
   }
  } else {
   $49 = ($$2|0)>(57);
   $50 = $$2 | 32;
   $51 = (($50) + -87)|0;
   $$0133 = $49 ? $51 : $42;
   $52 = ($53|0)<(0);
   $54 = ($55>>>0)<(8);
   $56 = ($53|0)==(0);
   $57 = $56 & $54;
   $58 = $52 | $57;
   do {
    if ($58) {
     $59 = $$0159 << 4;
     $60 = (($$0133) + ($59))|0;
     $$1149 = $$0148;$$1153 = $$0152;$$1156 = $$0155;$$1160 = $60;
    } else {
     $61 = ($53|0)<(0);
     $62 = ($55>>>0)<(14);
     $63 = ($53|0)==(0);
     $64 = $63 & $62;
     $65 = $61 | $64;
     if ($65) {
      $66 = (+($$0133|0));
      $67 = $$0152 * 0.0625;
      $68 = $67 * $66;
      $69 = $$0155 + $68;
      $$1149 = $$0148;$$1153 = $67;$$1156 = $69;$$1160 = $$0159;
      break;
     } else {
      $70 = ($$0133|0)==(0);
      $71 = ($$0148|0)!=(0);
      $or$cond = $71 | $70;
      $72 = $$0152 * 0.5;
      $73 = $$0155 + $72;
      $$0155$ = $or$cond ? $$0155 : $73;
      $$0148$ = $or$cond ? $$0148 : 1;
      $$1149 = $$0148$;$$1153 = $$0152;$$1156 = $$0155$;$$1160 = $$0159;
      break;
     }
    }
   } while(0);
   $74 = (_i64Add(($55|0),($53|0),1,0)|0);
   $75 = tempRet0;
   $$1147 = $$0146;$$2150 = $$1149;$$2154 = $$1153;$$2157 = $$1156;$$2161 = $$1160;$$3145 = 1;$214 = $99;$215 = $101;$216 = $74;$217 = $75;
  }
  $76 = HEAP32[$5>>2]|0;
  $77 = HEAP32[$7>>2]|0;
  $78 = ($76>>>0)<($77>>>0);
  if ($78) {
   $79 = ((($76)) + 1|0);
   HEAP32[$5>>2] = $79;
   $80 = HEAP8[$76>>0]|0;
   $81 = $80&255;
   $$0146 = $$1147;$$0148 = $$2150;$$0152 = $$2154;$$0155 = $$2157;$$0159 = $$2161;$$2 = $81;$$2144 = $$3145;$101 = $215;$53 = $217;$55 = $216;$99 = $214;
   continue;
  } else {
   $82 = (___shgetc($0)|0);
   $$0146 = $$1147;$$0148 = $$2150;$$0152 = $$2154;$$0155 = $$2157;$$0159 = $$2161;$$2 = $82;$$2144 = $$3145;$101 = $215;$53 = $217;$55 = $216;$99 = $214;
   continue;
  }
 }
 $83 = ($$2144|0)==(0);
 do {
  if ($83) {
   $84 = HEAP32[$7>>2]|0;
   $85 = ($84|0)!=(0|0);
   if ($85) {
    $86 = HEAP32[$5>>2]|0;
    $87 = ((($86)) + -1|0);
    HEAP32[$5>>2] = $87;
   }
   $88 = ($4|0)==(0);
   if ($88) {
    ___shlim($0,0);
   } else {
    if ($85) {
     $89 = HEAP32[$5>>2]|0;
     $90 = ((($89)) + -1|0);
     HEAP32[$5>>2] = $90;
    }
    $91 = ($$0146|0)==(0);
    $92 = ($84|0)==(0|0);
    $or$cond206 = $91 | $92;
    if (!($or$cond206)) {
     $93 = HEAP32[$5>>2]|0;
     $94 = ((($93)) + -1|0);
     HEAP32[$5>>2] = $94;
    }
   }
   $95 = (+($3|0));
   $96 = $95 * 0.0;
   $$0165 = $96;
  } else {
   $97 = ($$0146|0)==(0);
   $98 = $97 ? $55 : $99;
   $100 = $97 ? $53 : $101;
   $102 = ($53|0)<(0);
   $103 = ($55>>>0)<(8);
   $104 = ($53|0)==(0);
   $105 = $104 & $103;
   $106 = $102 | $105;
   if ($106) {
    $$3162183 = $$0159;$108 = $55;$109 = $53;
    while(1) {
     $107 = $$3162183 << 4;
     $110 = (_i64Add(($108|0),($109|0),1,0)|0);
     $111 = tempRet0;
     $112 = ($111|0)<(0);
     $113 = ($110>>>0)<(8);
     $114 = ($111|0)==(0);
     $115 = $114 & $113;
     $116 = $112 | $115;
     if ($116) {
      $$3162183 = $107;$108 = $110;$109 = $111;
     } else {
      $$3162$lcssa = $107;
      break;
     }
    }
   } else {
    $$3162$lcssa = $$0159;
   }
   $117 = $$2$lcssa | 32;
   $118 = ($117|0)==(112);
   if ($118) {
    $119 = (_scanexp($0,$4)|0);
    $120 = tempRet0;
    $121 = ($119|0)==(0);
    $122 = ($120|0)==(-2147483648);
    $123 = $121 & $122;
    if ($123) {
     $124 = ($4|0)==(0);
     if ($124) {
      ___shlim($0,0);
      $$0165 = 0.0;
      break;
     }
     $125 = HEAP32[$7>>2]|0;
     $126 = ($125|0)==(0|0);
     if ($126) {
      $137 = 0;$138 = 0;
     } else {
      $127 = HEAP32[$5>>2]|0;
      $128 = ((($127)) + -1|0);
      HEAP32[$5>>2] = $128;
      $137 = 0;$138 = 0;
     }
    } else {
     $137 = $119;$138 = $120;
    }
   } else {
    $129 = HEAP32[$7>>2]|0;
    $130 = ($129|0)==(0|0);
    if ($130) {
     $137 = 0;$138 = 0;
    } else {
     $131 = HEAP32[$5>>2]|0;
     $132 = ((($131)) + -1|0);
     HEAP32[$5>>2] = $132;
     $137 = 0;$138 = 0;
    }
   }
   $133 = (_bitshift64Shl(($98|0),($100|0),2)|0);
   $134 = tempRet0;
   $135 = (_i64Add(($133|0),($134|0),-32,-1)|0);
   $136 = tempRet0;
   $139 = (_i64Add(($135|0),($136|0),($137|0),($138|0))|0);
   $140 = tempRet0;
   $141 = ($$3162$lcssa|0)==(0);
   if ($141) {
    $142 = (+($3|0));
    $143 = $142 * 0.0;
    $$0165 = $143;
    break;
   }
   $144 = (0 - ($2))|0;
   $145 = ($144|0)<(0);
   $146 = $145 << 31 >> 31;
   $147 = ($140|0)>($146|0);
   $148 = ($139>>>0)>($144>>>0);
   $149 = ($140|0)==($146|0);
   $150 = $149 & $148;
   $151 = $147 | $150;
   if ($151) {
    $152 = (___errno_location()|0);
    HEAP32[$152>>2] = 34;
    $153 = (+($3|0));
    $154 = $153 * 1.7976931348623157E+308;
    $155 = $154 * 1.7976931348623157E+308;
    $$0165 = $155;
    break;
   }
   $156 = (($2) + -106)|0;
   $157 = ($156|0)<(0);
   $158 = $157 << 31 >> 31;
   $159 = ($140|0)<($158|0);
   $160 = ($139>>>0)<($156>>>0);
   $161 = ($140|0)==($158|0);
   $162 = $161 & $160;
   $163 = $159 | $162;
   if ($163) {
    $165 = (___errno_location()|0);
    HEAP32[$165>>2] = 34;
    $166 = (+($3|0));
    $167 = $166 * 2.2250738585072014E-308;
    $168 = $167 * 2.2250738585072014E-308;
    $$0165 = $168;
    break;
   }
   $164 = ($$3162$lcssa|0)>(-1);
   if ($164) {
    $$3158179 = $$0155;$$4163178 = $$3162$lcssa;$173 = $139;$174 = $140;
    while(1) {
     $169 = !($$3158179 >= 0.5);
     $170 = $$4163178 << 1;
     $171 = $$3158179 + -1.0;
     $not$ = $169 ^ 1;
     $172 = $not$&1;
     $$5164 = $170 | $172;
     $$pn = $169 ? $$3158179 : $171;
     $$4 = $$3158179 + $$pn;
     $175 = (_i64Add(($173|0),($174|0),-1,-1)|0);
     $176 = tempRet0;
     $177 = ($$5164|0)>(-1);
     if ($177) {
      $$3158179 = $$4;$$4163178 = $$5164;$173 = $175;$174 = $176;
     } else {
      $$3158$lcssa = $$4;$$4163$lcssa = $$5164;$184 = $175;$185 = $176;
      break;
     }
    }
   } else {
    $$3158$lcssa = $$0155;$$4163$lcssa = $$3162$lcssa;$184 = $139;$185 = $140;
   }
   $178 = ($1|0)<(0);
   $179 = $178 << 31 >> 31;
   $180 = ($2|0)<(0);
   $181 = $180 << 31 >> 31;
   $182 = (_i64Subtract(32,0,($2|0),($181|0))|0);
   $183 = tempRet0;
   $186 = (_i64Add(($182|0),($183|0),($184|0),($185|0))|0);
   $187 = tempRet0;
   $188 = ($179|0)>($187|0);
   $189 = ($1>>>0)>($186>>>0);
   $190 = ($179|0)==($187|0);
   $191 = $190 & $189;
   $192 = $188 | $191;
   if ($192) {
    $193 = ($186|0)>(0);
    if ($193) {
     $$0166 = $186;
     label = 59;
    } else {
     $$0166170 = 0;$197 = 84;
     label = 61;
    }
   } else {
    $$0166 = $1;
    label = 59;
   }
   if ((label|0) == 59) {
    $194 = ($$0166|0)<(53);
    $195 = (84 - ($$0166))|0;
    if ($194) {
     $$0166170 = $$0166;$197 = $195;
     label = 61;
    } else {
     $$pre = (+($3|0));
     $$0151 = 0.0;$$0166169 = $$0166;$$pre$phiZ2D = $$pre;
    }
   }
   if ((label|0) == 61) {
    $196 = (+($3|0));
    $198 = (+_scalbn(1.0,$197));
    $199 = (+_copysignl($198,$196));
    $$0151 = $199;$$0166169 = $$0166170;$$pre$phiZ2D = $196;
   }
   $200 = ($$0166169|0)<(32);
   $201 = $$3158$lcssa != 0.0;
   $or$cond4 = $201 & $200;
   $202 = $$4163$lcssa & 1;
   $203 = ($202|0)==(0);
   $or$cond168 = $203 & $or$cond4;
   $204 = $or$cond168&1;
   $$6 = (($204) + ($$4163$lcssa))|0;
   $$5 = $or$cond168 ? 0.0 : $$3158$lcssa;
   $205 = (+($$6>>>0));
   $206 = $$pre$phiZ2D * $205;
   $207 = $$0151 + $206;
   $208 = $$pre$phiZ2D * $$5;
   $209 = $208 + $207;
   $210 = $209 - $$0151;
   $211 = $210 != 0.0;
   if (!($211)) {
    $212 = (___errno_location()|0);
    HEAP32[$212>>2] = 34;
   }
   $213 = (+_scalbnl($210,$184));
   $$0165 = $213;
  }
 } while(0);
 return (+$$0165);
}
function _decfloat($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$0345 = 0, $$$0350 = 0, $$$0385 = 0, $$$0401 = 0, $$$5355 = 0, $$$5390 = 0, $$0329 = 0, $$0332490 = 0, $$0333 = 0, $$0334 = 0, $$0336486 = 0, $$0340496 = 0, $$0341$lcssa = 0, $$0341463 = 0, $$0341464 = 0, $$0341465 = 0, $$0341513 = 0, $$0345$lcssa = 0, $$0345467 = 0;
 var $$0345468 = 0, $$0345469 = 0, $$0345512 = 0, $$0350$lcssa554 = 0, $$0350494 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365484 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa553 = 0, $$0385493 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401473 = 0, $$0401474 = 0, $$0401475 = 0, $$0401509 = 0;
 var $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph448 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph558 = 0, $$1394$lcssa = 0, $$1394511 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph449 = 0, $$2367 = 0.0;
 var $$2371$v = 0, $$2374 = 0, $$2387$ph447 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344503 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3375 = 0, $$3383 = 0, $$3399$lcssa = 0, $$3399510 = 0, $$3514 = 0, $$413 = 0, $$425 = 0, $$4349495 = 0;
 var $$4354 = 0, $$4354$ph = 0, $$4354$ph559 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph445 = 0, $$4400 = 0, $$4485 = 0, $$5 = 0, $$5$in = 0, $$5355488 = 0, $$5390487 = 0, $$6378$ph = 0, $$6489 = 0, $$9483 = 0, $$neg442 = 0, $$neg443 = 0, $$pre = 0, $$promoted = 0;
 var $$sink = 0, $$sink421$off0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0.0, $335 = 0.0, $336 = 0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0, $35 = 0, $350 = 0.0, $351 = 0.0;
 var $352 = 0.0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $exitcond = 0, $exitcond551 = 0, $narrow = 0, $not$ = 0, $or$cond = 0, $or$cond11 = 0, $or$cond14 = 0, $or$cond415 = 0, $or$cond417 = 0, $or$cond419 = 0, $or$cond420 = 0, $or$cond422 = 0, $or$cond422$not = 0, $or$cond423 = 0, $or$cond426 = 0, $or$cond5 = 0, $sum = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $6 = sp;
 $sum = (($3) + ($2))|0;
 $7 = (0 - ($sum))|0;
 $8 = ((($0)) + 4|0);
 $9 = ((($0)) + 100|0);
 $$0329 = $1;$$0396 = 0;
 L1: while(1) {
  switch ($$0329|0) {
  case 46:  {
   label = 6;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0393 = 0;$$2 = $$0329;$$2398 = $$0396;$366 = 0;$367 = 0;
   break L1;
  }
  }
  $10 = HEAP32[$8>>2]|0;
  $11 = HEAP32[$9>>2]|0;
  $12 = ($10>>>0)<($11>>>0);
  if ($12) {
   $13 = ((($10)) + 1|0);
   HEAP32[$8>>2] = $13;
   $14 = HEAP8[$10>>0]|0;
   $15 = $14&255;
   $$0329 = $15;$$0396 = 1;
   continue;
  } else {
   $16 = (___shgetc($0)|0);
   $$0329 = $16;$$0396 = 1;
   continue;
  }
 }
 if ((label|0) == 6) {
  $17 = HEAP32[$8>>2]|0;
  $18 = HEAP32[$9>>2]|0;
  $19 = ($17>>>0)<($18>>>0);
  if ($19) {
   $20 = ((($17)) + 1|0);
   HEAP32[$8>>2] = $20;
   $21 = HEAP8[$17>>0]|0;
   $22 = $21&255;
   $$1330$ph = $22;
  } else {
   $23 = (___shgetc($0)|0);
   $$1330$ph = $23;
  }
  $24 = ($$1330$ph|0)==(48);
  if ($24) {
   $25 = 0;$26 = 0;
   while(1) {
    $27 = (_i64Add(($25|0),($26|0),-1,-1)|0);
    $28 = tempRet0;
    $29 = HEAP32[$8>>2]|0;
    $30 = HEAP32[$9>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$8>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $$1330$be = $34;
    } else {
     $35 = (___shgetc($0)|0);
     $$1330$be = $35;
    }
    $36 = ($$1330$be|0)==(48);
    if ($36) {
     $25 = $27;$26 = $28;
    } else {
     $$0393 = 1;$$2 = $$1330$be;$$2398 = 1;$366 = $27;$367 = $28;
     break;
    }
   }
  } else {
   $$0393 = 1;$$2 = $$1330$ph;$$2398 = $$0396;$366 = 0;$367 = 0;
  }
 }
 HEAP32[$6>>2] = 0;
 $37 = (($$2) + -48)|0;
 $38 = ($37>>>0)<(10);
 $39 = ($$2|0)==(46);
 $40 = $39 | $38;
 L20: do {
  if ($40) {
   $41 = ((($6)) + 496|0);
   $$0341513 = 0;$$0345512 = 0;$$0401509 = 0;$$1394511 = $$0393;$$3399510 = $$2398;$$3514 = $$2;$368 = $39;$369 = $37;$370 = $366;$371 = $367;$44 = 0;$45 = 0;
   L22: while(1) {
    do {
     if ($368) {
      $cond = ($$1394511|0)==(0);
      if ($cond) {
       $$2343 = $$0341513;$$2347 = $$0345512;$$2395 = 1;$$2403 = $$0401509;$$4400 = $$3399510;$372 = $44;$373 = $45;$374 = $44;$375 = $45;
      } else {
       break L22;
      }
     } else {
      $43 = ($$0345512|0)<(125);
      $46 = (_i64Add(($44|0),($45|0),1,0)|0);
      $47 = tempRet0;
      $48 = ($$3514|0)!=(48);
      if (!($43)) {
       if (!($48)) {
        $$2343 = $$0341513;$$2347 = $$0345512;$$2395 = $$1394511;$$2403 = $$0401509;$$4400 = $$3399510;$372 = $370;$373 = $371;$374 = $46;$375 = $47;
        break;
       }
       $57 = HEAP32[$41>>2]|0;
       $58 = $57 | 1;
       HEAP32[$41>>2] = $58;
       $$2343 = $$0341513;$$2347 = $$0345512;$$2395 = $$1394511;$$2403 = $$0401509;$$4400 = $$3399510;$372 = $370;$373 = $371;$374 = $46;$375 = $47;
       break;
      }
      $$$0401 = $48 ? $46 : $$0401509;
      $49 = ($$0341513|0)==(0);
      $$pre = (($6) + ($$0345512<<2)|0);
      if ($49) {
       $$sink = $369;
      } else {
       $50 = HEAP32[$$pre>>2]|0;
       $51 = ($50*10)|0;
       $52 = (($$3514) + -48)|0;
       $53 = (($52) + ($51))|0;
       $$sink = $53;
      }
      HEAP32[$$pre>>2] = $$sink;
      $54 = (($$0341513) + 1)|0;
      $55 = ($54|0)==(9);
      $56 = $55&1;
      $$$0345 = (($56) + ($$0345512))|0;
      $$413 = $55 ? 0 : $54;
      $$2343 = $$413;$$2347 = $$$0345;$$2395 = $$1394511;$$2403 = $$$0401;$$4400 = 1;$372 = $370;$373 = $371;$374 = $46;$375 = $47;
     }
    } while(0);
    $59 = HEAP32[$8>>2]|0;
    $60 = HEAP32[$9>>2]|0;
    $61 = ($59>>>0)<($60>>>0);
    if ($61) {
     $62 = ((($59)) + 1|0);
     HEAP32[$8>>2] = $62;
     $63 = HEAP8[$59>>0]|0;
     $64 = $63&255;
     $$3$be = $64;
    } else {
     $65 = (___shgetc($0)|0);
     $$3$be = $65;
    }
    $66 = (($$3$be) + -48)|0;
    $67 = ($66>>>0)<(10);
    $68 = ($$3$be|0)==(46);
    $69 = $68 | $67;
    if ($69) {
     $$0341513 = $$2343;$$0345512 = $$2347;$$0401509 = $$2403;$$1394511 = $$2395;$$3399510 = $$4400;$$3514 = $$3$be;$368 = $68;$369 = $66;$370 = $372;$371 = $373;$44 = $374;$45 = $375;
    } else {
     $$0341$lcssa = $$2343;$$0345$lcssa = $$2347;$$0401$lcssa = $$2403;$$1394$lcssa = $$2395;$$3$lcssa = $$3$be;$$3399$lcssa = $$4400;$72 = $374;$73 = $372;$75 = $375;$76 = $373;
     label = 29;
     break L20;
    }
   }
   $42 = ($$3399510|0)!=(0);
   $$0341465 = $$0341513;$$0345469 = $$0345512;$$0401475 = $$0401509;$376 = $44;$377 = $45;$378 = $370;$379 = $371;$380 = $42;
   label = 37;
  } else {
   $$0341$lcssa = 0;$$0345$lcssa = 0;$$0401$lcssa = 0;$$1394$lcssa = $$0393;$$3$lcssa = $$2;$$3399$lcssa = $$2398;$72 = 0;$73 = $366;$75 = 0;$76 = $367;
   label = 29;
  }
 } while(0);
 do {
  if ((label|0) == 29) {
   $70 = ($$1394$lcssa|0)==(0);
   $71 = $70 ? $72 : $73;
   $74 = $70 ? $75 : $76;
   $77 = ($$3399$lcssa|0)!=(0);
   $78 = $$3$lcssa | 32;
   $79 = ($78|0)==(101);
   $or$cond415 = $77 & $79;
   if (!($or$cond415)) {
    $94 = ($$3$lcssa|0)>(-1);
    if ($94) {
     $$0341465 = $$0341$lcssa;$$0345469 = $$0345$lcssa;$$0401475 = $$0401$lcssa;$376 = $72;$377 = $75;$378 = $71;$379 = $74;$380 = $77;
     label = 37;
     break;
    } else {
     $$0341464 = $$0341$lcssa;$$0345468 = $$0345$lcssa;$$0401474 = $$0401$lcssa;$381 = $72;$382 = $75;$383 = $77;$384 = $71;$385 = $74;
     label = 39;
     break;
    }
   }
   $80 = (_scanexp($0,$5)|0);
   $81 = tempRet0;
   $82 = ($80|0)==(0);
   $83 = ($81|0)==(-2147483648);
   $84 = $82 & $83;
   if ($84) {
    $85 = ($5|0)==(0);
    if ($85) {
     ___shlim($0,0);
     $$1 = 0.0;
     break;
    }
    $86 = HEAP32[$9>>2]|0;
    $87 = ($86|0)==(0|0);
    if ($87) {
     $90 = 0;$91 = 0;
    } else {
     $88 = HEAP32[$8>>2]|0;
     $89 = ((($88)) + -1|0);
     HEAP32[$8>>2] = $89;
     $90 = 0;$91 = 0;
    }
   } else {
    $90 = $80;$91 = $81;
   }
   $92 = (_i64Add(($90|0),($91|0),($71|0),($74|0))|0);
   $93 = tempRet0;
   $$0341463 = $$0341$lcssa;$$0345467 = $$0345$lcssa;$$0401473 = $$0401$lcssa;$105 = $92;$106 = $72;$108 = $93;$109 = $75;
   label = 41;
  }
 } while(0);
 if ((label|0) == 37) {
  $95 = HEAP32[$9>>2]|0;
  $96 = ($95|0)==(0|0);
  if ($96) {
   $$0341464 = $$0341465;$$0345468 = $$0345469;$$0401474 = $$0401475;$381 = $376;$382 = $377;$383 = $380;$384 = $378;$385 = $379;
   label = 39;
  } else {
   $97 = HEAP32[$8>>2]|0;
   $98 = ((($97)) + -1|0);
   HEAP32[$8>>2] = $98;
   if ($380) {
    $$0341463 = $$0341465;$$0345467 = $$0345469;$$0401473 = $$0401475;$105 = $378;$106 = $376;$108 = $379;$109 = $377;
    label = 41;
   } else {
    label = 40;
   }
  }
 }
 if ((label|0) == 39) {
  if ($383) {
   $$0341463 = $$0341464;$$0345467 = $$0345468;$$0401473 = $$0401474;$105 = $384;$106 = $381;$108 = $385;$109 = $382;
   label = 41;
  } else {
   label = 40;
  }
 }
 do {
  if ((label|0) == 40) {
   $99 = (___errno_location()|0);
   HEAP32[$99>>2] = 22;
   ___shlim($0,0);
   $$1 = 0.0;
  }
  else if ((label|0) == 41) {
   $100 = HEAP32[$6>>2]|0;
   $101 = ($100|0)==(0);
   if ($101) {
    $102 = (+($4|0));
    $103 = $102 * 0.0;
    $$1 = $103;
    break;
   }
   $104 = ($105|0)==($106|0);
   $107 = ($108|0)==($109|0);
   $110 = $104 & $107;
   $111 = ($109|0)<(0);
   $112 = ($106>>>0)<(10);
   $113 = ($109|0)==(0);
   $114 = $113 & $112;
   $115 = $111 | $114;
   $or$cond = $115 & $110;
   if ($or$cond) {
    $116 = ($2|0)>(30);
    $117 = $100 >>> $2;
    $118 = ($117|0)==(0);
    $or$cond417 = $116 | $118;
    if ($or$cond417) {
     $119 = (+($4|0));
     $120 = (+($100>>>0));
     $121 = $119 * $120;
     $$1 = $121;
     break;
    }
   }
   $122 = (($3|0) / -2)&-1;
   $123 = ($122|0)<(0);
   $124 = $123 << 31 >> 31;
   $125 = ($108|0)>($124|0);
   $126 = ($105>>>0)>($122>>>0);
   $127 = ($108|0)==($124|0);
   $128 = $127 & $126;
   $129 = $125 | $128;
   if ($129) {
    $130 = (___errno_location()|0);
    HEAP32[$130>>2] = 34;
    $131 = (+($4|0));
    $132 = $131 * 1.7976931348623157E+308;
    $133 = $132 * 1.7976931348623157E+308;
    $$1 = $133;
    break;
   }
   $134 = (($3) + -106)|0;
   $135 = ($134|0)<(0);
   $136 = $135 << 31 >> 31;
   $137 = ($108|0)<($136|0);
   $138 = ($105>>>0)<($134>>>0);
   $139 = ($108|0)==($136|0);
   $140 = $139 & $138;
   $141 = $137 | $140;
   if ($141) {
    $142 = (___errno_location()|0);
    HEAP32[$142>>2] = 34;
    $143 = (+($4|0));
    $144 = $143 * 2.2250738585072014E-308;
    $145 = $144 * 2.2250738585072014E-308;
    $$1 = $145;
    break;
   }
   $146 = ($$0341463|0)==(0);
   if ($146) {
    $$3348 = $$0345467;
   } else {
    $147 = ($$0341463|0)<(9);
    if ($147) {
     $148 = (($6) + ($$0345467<<2)|0);
     $$promoted = HEAP32[$148>>2]|0;
     $$3344503 = $$0341463;$150 = $$promoted;
     while(1) {
      $149 = ($150*10)|0;
      $151 = (($$3344503) + 1)|0;
      $exitcond551 = ($151|0)==(9);
      if ($exitcond551) {
       break;
      } else {
       $$3344503 = $151;$150 = $149;
      }
     }
     HEAP32[$148>>2] = $149;
    }
    $152 = (($$0345467) + 1)|0;
    $$3348 = $152;
   }
   $153 = ($$0401473|0)<(9);
   if ($153) {
    $154 = ($$0401473|0)<=($105|0);
    $155 = ($105|0)<(18);
    $or$cond5 = $154 & $155;
    if ($or$cond5) {
     $156 = ($105|0)==(9);
     $157 = HEAP32[$6>>2]|0;
     if ($156) {
      $158 = (+($4|0));
      $159 = (+($157>>>0));
      $160 = $158 * $159;
      $$1 = $160;
      break;
     }
     $161 = ($105|0)<(9);
     if ($161) {
      $162 = (+($4|0));
      $163 = (+($157>>>0));
      $164 = $162 * $163;
      $165 = (8 - ($105))|0;
      $166 = (8964 + ($165<<2)|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = (+($167|0));
      $169 = $164 / $168;
      $$1 = $169;
      break;
     }
     $$neg442 = Math_imul($105, -3)|0;
     $$neg443 = (($2) + 27)|0;
     $170 = (($$neg443) + ($$neg442))|0;
     $171 = ($170|0)>(30);
     $172 = $157 >>> $170;
     $173 = ($172|0)==(0);
     $or$cond419 = $171 | $173;
     if ($or$cond419) {
      $174 = (($105) + -10)|0;
      $175 = (8964 + ($174<<2)|0);
      $176 = (+($4|0));
      $177 = (+($157>>>0));
      $178 = $176 * $177;
      $179 = HEAP32[$175>>2]|0;
      $180 = (+($179|0));
      $181 = $178 * $180;
      $$1 = $181;
      break;
     }
    }
   }
   $182 = (($105|0) % 9)&-1;
   $183 = ($182|0)==(0);
   if ($183) {
    $$0380$ph = 0;$$1373$ph448 = $$3348;$$2352$ph449 = 0;$$2387$ph447 = $105;
   } else {
    $184 = ($105|0)>(-1);
    $185 = (($182) + 9)|0;
    $186 = $184 ? $182 : $185;
    $187 = (8 - ($186))|0;
    $188 = (8964 + ($187<<2)|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = ($$3348|0)==(0);
    if ($190) {
     $$0350$lcssa554 = 0;$$0372 = 0;$$0385$lcssa553 = $105;
    } else {
     $191 = (1000000000 / ($189|0))&-1;
     $$0340496 = 0;$$0350494 = 0;$$0385493 = $105;$$4349495 = 0;
     while(1) {
      $192 = (($6) + ($$4349495<<2)|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = (($193>>>0) % ($189>>>0))&-1;
      $195 = (($193>>>0) / ($189>>>0))&-1;
      $196 = (($195) + ($$0340496))|0;
      HEAP32[$192>>2] = $196;
      $197 = Math_imul($191, $194)|0;
      $198 = ($$4349495|0)==($$0350494|0);
      $199 = ($196|0)==(0);
      $or$cond420 = $198 & $199;
      $200 = (($$0350494) + 1)|0;
      $201 = $200 & 127;
      $202 = (($$0385493) + -9)|0;
      $$$0385 = $or$cond420 ? $202 : $$0385493;
      $$$0350 = $or$cond420 ? $201 : $$0350494;
      $203 = (($$4349495) + 1)|0;
      $204 = ($203|0)==($$3348|0);
      if ($204) {
       break;
      } else {
       $$0340496 = $197;$$0350494 = $$$0350;$$0385493 = $$$0385;$$4349495 = $203;
      }
     }
     $205 = ($197|0)==(0);
     if ($205) {
      $$0350$lcssa554 = $$$0350;$$0372 = $$3348;$$0385$lcssa553 = $$$0385;
     } else {
      $206 = (($6) + ($$3348<<2)|0);
      $207 = (($$3348) + 1)|0;
      HEAP32[$206>>2] = $197;
      $$0350$lcssa554 = $$$0350;$$0372 = $207;$$0385$lcssa553 = $$$0385;
     }
    }
    $208 = (9 - ($186))|0;
    $209 = (($208) + ($$0385$lcssa553))|0;
    $$0380$ph = 0;$$1373$ph448 = $$0372;$$2352$ph449 = $$0350$lcssa554;$$2387$ph447 = $209;
   }
   L101: while(1) {
    $210 = ($$2387$ph447|0)<(18);
    $211 = ($$2387$ph447|0)==(18);
    $212 = (($6) + ($$2352$ph449<<2)|0);
    $$0380 = $$0380$ph;$$1373 = $$1373$ph448;
    while(1) {
     if (!($210)) {
      if (!($211)) {
       $$1381$ph = $$0380;$$4354$ph = $$2352$ph449;$$4389$ph445 = $$2387$ph447;$$6378$ph = $$1373;
       break L101;
      }
      $213 = HEAP32[$212>>2]|0;
      $214 = ($213>>>0)<(9007199);
      if (!($214)) {
       $$1381$ph = $$0380;$$4354$ph = $$2352$ph449;$$4389$ph445 = 18;$$6378$ph = $$1373;
       break L101;
      }
     }
     $215 = (($$1373) + 127)|0;
     $$0334 = 0;$$2374 = $$1373;$$5$in = $215;
     while(1) {
      $$5 = $$5$in & 127;
      $216 = (($6) + ($$5<<2)|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = (_bitshift64Shl(($217|0),0,29)|0);
      $219 = tempRet0;
      $220 = (_i64Add(($218|0),($219|0),($$0334|0),0)|0);
      $221 = tempRet0;
      $222 = ($221>>>0)>(0);
      $223 = ($220>>>0)>(1000000000);
      $224 = ($221|0)==(0);
      $225 = $224 & $223;
      $226 = $222 | $225;
      if ($226) {
       $227 = (___udivdi3(($220|0),($221|0),1000000000,0)|0);
       $228 = tempRet0;
       $229 = (___uremdi3(($220|0),($221|0),1000000000,0)|0);
       $230 = tempRet0;
       $$1335 = $227;$$sink421$off0 = $229;
      } else {
       $$1335 = 0;$$sink421$off0 = $220;
      }
      HEAP32[$216>>2] = $$sink421$off0;
      $231 = (($$2374) + 127)|0;
      $232 = $231 & 127;
      $233 = ($$5|0)!=($232|0);
      $234 = ($$5|0)==($$2352$ph449|0);
      $or$cond422 = $233 | $234;
      $or$cond422$not = $or$cond422 ^ 1;
      $235 = ($$sink421$off0|0)==(0);
      $or$cond423 = $235 & $or$cond422$not;
      $$3375 = $or$cond423 ? $$5 : $$2374;
      $236 = (($$5) + -1)|0;
      if ($234) {
       break;
      } else {
       $$0334 = $$1335;$$2374 = $$3375;$$5$in = $236;
      }
     }
     $237 = (($$0380) + -29)|0;
     $238 = ($$1335|0)==(0);
     if ($238) {
      $$0380 = $237;$$1373 = $$3375;
     } else {
      break;
     }
    }
    $239 = (($$2387$ph447) + 9)|0;
    $240 = (($$2352$ph449) + 127)|0;
    $241 = $240 & 127;
    $242 = ($241|0)==($$3375|0);
    $243 = (($$3375) + 127)|0;
    $244 = $243 & 127;
    $245 = (($$3375) + 126)|0;
    $246 = $245 & 127;
    $247 = (($6) + ($246<<2)|0);
    if ($242) {
     $248 = (($6) + ($244<<2)|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = HEAP32[$247>>2]|0;
     $251 = $250 | $249;
     HEAP32[$247>>2] = $251;
     $$4376 = $244;
    } else {
     $$4376 = $$3375;
    }
    $252 = (($6) + ($241<<2)|0);
    HEAP32[$252>>2] = $$1335;
    $$0380$ph = $237;$$1373$ph448 = $$4376;$$2352$ph449 = $241;$$2387$ph447 = $239;
   }
   L119: while(1) {
    $289 = (($$6378$ph) + 1)|0;
    $287 = $289 & 127;
    $290 = (($$6378$ph) + 127)|0;
    $291 = $290 & 127;
    $292 = (($6) + ($291<<2)|0);
    $$1381$ph558 = $$1381$ph;$$4354$ph559 = $$4354$ph;$$4389$ph = $$4389$ph445;
    while(1) {
     $265 = ($$4389$ph|0)==(18);
     $293 = ($$4389$ph|0)>(27);
     $$425 = $293 ? 9 : 1;
     $$1381 = $$1381$ph558;$$4354 = $$4354$ph559;
     while(1) {
      $$0336486 = 0;
      while(1) {
       $253 = (($$0336486) + ($$4354))|0;
       $254 = $253 & 127;
       $255 = ($254|0)==($$6378$ph|0);
       if ($255) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $256 = (($6) + ($254<<2)|0);
       $257 = HEAP32[$256>>2]|0;
       $258 = (8996 + ($$0336486<<2)|0);
       $259 = HEAP32[$258>>2]|0;
       $260 = ($257>>>0)<($259>>>0);
       if ($260) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $261 = ($257>>>0)>($259>>>0);
       if ($261) {
        break;
       }
       $262 = (($$0336486) + 1)|0;
       $263 = ($262|0)<(2);
       if ($263) {
        $$0336486 = $262;
       } else {
        $$1337 = $262;
        label = 88;
        break;
       }
      }
      if ((label|0) == 88) {
       label = 0;
       $264 = ($$1337|0)==(2);
       $or$cond11 = $265 & $264;
       if ($or$cond11) {
        $$0365484 = 0.0;$$4485 = 0;$$9483 = $$6378$ph;
        break L119;
       }
      }
      $266 = (($$425) + ($$1381))|0;
      $267 = ($$4354|0)==($$6378$ph|0);
      if ($267) {
       $$1381 = $266;$$4354 = $$6378$ph;
      } else {
       break;
      }
     }
     $268 = 1 << $$425;
     $269 = (($268) + -1)|0;
     $270 = 1000000000 >>> $$425;
     $$0332490 = 0;$$5355488 = $$4354;$$5390487 = $$4389$ph;$$6489 = $$4354;
     while(1) {
      $271 = (($6) + ($$6489<<2)|0);
      $272 = HEAP32[$271>>2]|0;
      $273 = $272 & $269;
      $274 = $272 >>> $$425;
      $275 = (($274) + ($$0332490))|0;
      HEAP32[$271>>2] = $275;
      $276 = Math_imul($273, $270)|0;
      $277 = ($$6489|0)==($$5355488|0);
      $278 = ($275|0)==(0);
      $or$cond426 = $277 & $278;
      $279 = (($$5355488) + 1)|0;
      $280 = $279 & 127;
      $281 = (($$5390487) + -9)|0;
      $$$5390 = $or$cond426 ? $281 : $$5390487;
      $$$5355 = $or$cond426 ? $280 : $$5355488;
      $282 = (($$6489) + 1)|0;
      $283 = $282 & 127;
      $284 = ($283|0)==($$6378$ph|0);
      if ($284) {
       break;
      } else {
       $$0332490 = $276;$$5355488 = $$$5355;$$5390487 = $$$5390;$$6489 = $283;
      }
     }
     $285 = ($276|0)==(0);
     if ($285) {
      $$1381$ph558 = $266;$$4354$ph559 = $$$5355;$$4389$ph = $$$5390;
      continue;
     }
     $286 = ($287|0)==($$$5355|0);
     if (!($286)) {
      break;
     }
     $294 = HEAP32[$292>>2]|0;
     $295 = $294 | 1;
     HEAP32[$292>>2] = $295;
     $$1381$ph558 = $266;$$4354$ph559 = $$$5355;$$4389$ph = $$$5390;
    }
    $288 = (($6) + ($$6378$ph<<2)|0);
    HEAP32[$288>>2] = $276;
    $$1381$ph = $266;$$4354$ph = $$$5355;$$4389$ph445 = $$$5390;$$6378$ph = $287;
   }
   while(1) {
    $296 = (($$4485) + ($$4354))|0;
    $297 = $296 & 127;
    $298 = ($297|0)==($$9483|0);
    $299 = (($$9483) + 1)|0;
    $300 = $299 & 127;
    if ($298) {
     $301 = (($300) + -1)|0;
     $302 = (($6) + ($301<<2)|0);
     HEAP32[$302>>2] = 0;
     $$10 = $300;
    } else {
     $$10 = $$9483;
    }
    $303 = $$0365484 * 1.0E+9;
    $304 = (($6) + ($297<<2)|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = (+($305>>>0));
    $307 = $303 + $306;
    $308 = (($$4485) + 1)|0;
    $exitcond = ($308|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $$0365484 = $307;$$4485 = $308;$$9483 = $$10;
    }
   }
   $309 = (+($4|0));
   $310 = $309 * $307;
   $311 = (($$1381) + 53)|0;
   $312 = (($311) - ($3))|0;
   $313 = ($312|0)<($2|0);
   $314 = ($312|0)>(0);
   $$ = $314 ? $312 : 0;
   $$0333 = $313 ? $$ : $2;
   $315 = ($$0333|0)<(53);
   if ($315) {
    $316 = (105 - ($$0333))|0;
    $317 = (+_scalbn(1.0,$316));
    $318 = (+_copysignl($317,$310));
    $319 = (53 - ($$0333))|0;
    $320 = (+_scalbn(1.0,$319));
    $321 = (+_fmodl($310,$320));
    $322 = $310 - $321;
    $323 = $318 + $322;
    $$0360 = $318;$$0361 = $321;$$1366 = $323;
   } else {
    $$0360 = 0.0;$$0361 = 0.0;$$1366 = $310;
   }
   $324 = (($$4354) + 2)|0;
   $325 = $324 & 127;
   $326 = ($325|0)==($$10|0);
   if ($326) {
    $$3364 = $$0361;
   } else {
    $327 = (($6) + ($325<<2)|0);
    $328 = HEAP32[$327>>2]|0;
    $329 = ($328>>>0)<(500000000);
    do {
     if ($329) {
      $330 = ($328|0)==(0);
      if ($330) {
       $331 = (($$4354) + 3)|0;
       $332 = $331 & 127;
       $333 = ($332|0)==($$10|0);
       if ($333) {
        $$1362 = $$0361;
        break;
       }
      }
      $334 = $309 * 0.25;
      $335 = $334 + $$0361;
      $$1362 = $335;
     } else {
      $336 = ($328|0)==(500000000);
      if (!($336)) {
       $337 = $309 * 0.75;
       $338 = $337 + $$0361;
       $$1362 = $338;
       break;
      }
      $339 = (($$4354) + 3)|0;
      $340 = $339 & 127;
      $341 = ($340|0)==($$10|0);
      if ($341) {
       $342 = $309 * 0.5;
       $343 = $342 + $$0361;
       $$1362 = $343;
       break;
      } else {
       $344 = $309 * 0.75;
       $345 = $344 + $$0361;
       $$1362 = $345;
       break;
      }
     }
    } while(0);
    $346 = (53 - ($$0333))|0;
    $347 = ($346|0)>(1);
    if ($347) {
     $348 = (+_fmodl($$1362,1.0));
     $349 = $348 != 0.0;
     if ($349) {
      $$3364 = $$1362;
     } else {
      $350 = $$1362 + 1.0;
      $$3364 = $350;
     }
    } else {
     $$3364 = $$1362;
    }
   }
   $351 = $$1366 + $$3364;
   $352 = $351 - $$0360;
   $353 = $311 & 2147483647;
   $354 = (-2 - ($sum))|0;
   $355 = ($353|0)>($354|0);
   do {
    if ($355) {
     $356 = (+Math_abs((+$352)));
     $357 = !($356 >= 9007199254740992.0);
     $358 = $352 * 0.5;
     $not$ = $357 ^ 1;
     $359 = $not$&1;
     $$3383 = (($359) + ($$1381))|0;
     $$2367 = $357 ? $352 : $358;
     $360 = (($$3383) + 50)|0;
     $361 = ($360|0)>($7|0);
     if (!($361)) {
      $362 = ($$0333|0)!=($312|0);
      $narrow = $362 | $357;
      $$2371$v = $313 & $narrow;
      $363 = $$3364 != 0.0;
      $or$cond14 = $363 & $$2371$v;
      if (!($or$cond14)) {
       $$3368 = $$2367;$$4384 = $$3383;
       break;
      }
     }
     $364 = (___errno_location()|0);
     HEAP32[$364>>2] = 34;
     $$3368 = $$2367;$$4384 = $$3383;
    } else {
     $$3368 = $352;$$4384 = $$1381;
    }
   } while(0);
   $365 = (+_scalbnl($$3368,$$4384));
   $$1 = $365;
  }
 } while(0);
 STACKTOP = sp;return (+$$1);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04861 = 0, $$049 = 0, $$1$be = 0, $$160 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $$lcssa = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 switch ($11|0) {
 case 43: case 45:  {
  $12 = ($11|0)==(45);
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $$0 = $13;$$049 = $22;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    $$0 = $13;$$049 = $22;
   }
  } else {
   $$0 = $13;$$049 = $22;
  }
  break;
 }
 default: {
  $$0 = 0;$$049 = $11;
 }
 }
 $29 = (($$049) + -48)|0;
 $30 = ($29>>>0)>(9);
 if ($30) {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $100 = -2147483648;$101 = 0;
  } else {
   $33 = HEAP32[$2>>2]|0;
   $34 = ((($33)) + -1|0);
   HEAP32[$2>>2] = $34;
   $100 = -2147483648;$101 = 0;
  }
 } else {
  $$04861 = 0;$$160 = $$049;
  while(1) {
   $35 = ($$04861*10)|0;
   $36 = (($$160) + -48)|0;
   $37 = (($36) + ($35))|0;
   $38 = HEAP32[$2>>2]|0;
   $39 = HEAP32[$4>>2]|0;
   $40 = ($38>>>0)<($39>>>0);
   if ($40) {
    $41 = ((($38)) + 1|0);
    HEAP32[$2>>2] = $41;
    $42 = HEAP8[$38>>0]|0;
    $43 = $42&255;
    $$1$be = $43;
   } else {
    $44 = (___shgetc($0)|0);
    $$1$be = $44;
   }
   $45 = (($$1$be) + -48)|0;
   $46 = ($45>>>0)<(10);
   $47 = ($37|0)<(214748364);
   $48 = $46 & $47;
   if ($48) {
    $$04861 = $37;$$160 = $$1$be;
   } else {
    break;
   }
  }
  $49 = ($37|0)<(0);
  $50 = $49 << 31 >> 31;
  $51 = (($$1$be) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   $$254 = $$1$be;$56 = $37;$57 = $50;
   while(1) {
    $58 = (___muldi3(($56|0),($57|0),10,0)|0);
    $59 = tempRet0;
    $60 = ($$254|0)<(0);
    $61 = $60 << 31 >> 31;
    $62 = (_i64Add(($$254|0),($61|0),-48,-1)|0);
    $63 = tempRet0;
    $64 = (_i64Add(($62|0),($63|0),($58|0),($59|0))|0);
    $65 = tempRet0;
    $66 = HEAP32[$2>>2]|0;
    $67 = HEAP32[$4>>2]|0;
    $68 = ($66>>>0)<($67>>>0);
    if ($68) {
     $69 = ((($66)) + 1|0);
     HEAP32[$2>>2] = $69;
     $70 = HEAP8[$66>>0]|0;
     $71 = $70&255;
     $$2$be = $71;
    } else {
     $72 = (___shgetc($0)|0);
     $$2$be = $72;
    }
    $73 = (($$2$be) + -48)|0;
    $74 = ($73>>>0)<(10);
    $75 = ($65|0)<(21474836);
    $76 = ($64>>>0)<(2061584302);
    $77 = ($65|0)==(21474836);
    $78 = $77 & $76;
    $79 = $75 | $78;
    $80 = $74 & $79;
    if ($80) {
     $$254 = $$2$be;$56 = $64;$57 = $65;
    } else {
     $$2$lcssa = $$2$be;$94 = $64;$95 = $65;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be;$94 = $37;$95 = $50;
  }
  $53 = (($$2$lcssa) + -48)|0;
  $54 = ($53>>>0)<(10);
  $55 = HEAP32[$4>>2]|0;
  if ($54) {
   $83 = $55;
   while(1) {
    $81 = HEAP32[$2>>2]|0;
    $82 = ($81>>>0)<($83>>>0);
    if ($82) {
     $84 = ((($81)) + 1|0);
     HEAP32[$2>>2] = $84;
     $85 = HEAP8[$81>>0]|0;
     $86 = $85&255;
     $$3$be = $86;$102 = $83;
    } else {
     $87 = (___shgetc($0)|0);
     $$pre = HEAP32[$4>>2]|0;
     $$3$be = $87;$102 = $$pre;
    }
    $88 = (($$3$be) + -48)|0;
    $89 = ($88>>>0)<(10);
    if ($89) {
     $83 = $102;
    } else {
     $$lcssa = $102;
     break;
    }
   }
  } else {
   $$lcssa = $55;
  }
  $90 = ($$lcssa|0)==(0|0);
  if (!($90)) {
   $91 = HEAP32[$2>>2]|0;
   $92 = ((($91)) + -1|0);
   HEAP32[$2>>2] = $92;
  }
  $93 = ($$0|0)!=(0);
  $96 = (_i64Subtract(0,0,($94|0),($95|0))|0);
  $97 = tempRet0;
  $98 = $93 ? $96 : $94;
  $99 = $93 ? $97 : $95;
  $100 = $99;$101 = $98;
 }
 tempRet0 = ($100);
 return ($101|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$$ = 0, $$0 = 0.0, $$020 = 0, $$1 = 0, $$1$ = 0, $$21 = 0.0, $$22 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0;
 var $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($4|0)>(1023);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $$ = $8 ? $7 : 1023;
  $$$ = $5 ? $$ : $4;
  $$21 = $5 ? $6 : $3;
  $$0 = $$21;$$020 = $$$;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($11|0)<(-1022);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $$1 = $15 ? $14 : -1022;
   $$1$ = $12 ? $$1 : $11;
   $$22 = $12 ? $13 : $10;
   $$0 = $$22;$$020 = $$1$;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = tempRet0;
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = tempRet0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = tempRet0;
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = (___DOUBLE_BITS_272($1)|0);
   $19 = tempRet0;
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(2146435072);
   $22 = ($18>>>0)>(0);
   $23 = ($20|0)==(2146435072);
   $24 = $23 & $22;
   $25 = $21 | $24;
   $26 = ($8|0)==(2047);
   $or$cond = $26 | $25;
   if ($or$cond) {
    label = 3;
   } else {
    $29 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $30 = tempRet0;
    $31 = ($30>>>0)>($14>>>0);
    $32 = ($29>>>0)>($13>>>0);
    $33 = ($30|0)==($14|0);
    $34 = $33 & $32;
    $35 = $31 | $34;
    if (!($35)) {
     $36 = ($29|0)==($13|0);
     $37 = ($30|0)==($14|0);
     $38 = $36 & $37;
     $39 = $0 * 0.0;
     $$ = $38 ? $39 : $0;
     return (+$$);
    }
    $40 = ($8|0)==(0);
    if ($40) {
     $41 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $42 = tempRet0;
     $43 = ($42|0)>(-1);
     $44 = ($41>>>0)>(4294967295);
     $45 = ($42|0)==(-1);
     $46 = $45 & $44;
     $47 = $43 | $46;
     if ($47) {
      $$073100 = 0;$49 = $41;$50 = $42;
      while(1) {
       $48 = (($$073100) + -1)|0;
       $51 = (_bitshift64Shl(($49|0),($50|0),1)|0);
       $52 = tempRet0;
       $53 = ($52|0)>(-1);
       $54 = ($51>>>0)>(4294967295);
       $55 = ($52|0)==(-1);
       $56 = $55 & $54;
       $57 = $53 | $56;
       if ($57) {
        $$073100 = $48;$49 = $51;$50 = $52;
       } else {
        $$073$lcssa = $48;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $58 = (1 - ($$073$lcssa))|0;
     $59 = (_bitshift64Shl(($2|0),($3|0),($58|0))|0);
     $60 = tempRet0;
     $$174 = $$073$lcssa;$87 = $59;$88 = $60;
    } else {
     $61 = $3 & 1048575;
     $62 = $61 | 1048576;
     $$174 = $8;$87 = $2;$88 = $62;
    }
    $63 = ($11|0)==(0);
    if ($63) {
     $64 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $65 = tempRet0;
     $66 = ($65|0)>(-1);
     $67 = ($64>>>0)>(4294967295);
     $68 = ($65|0)==(-1);
     $69 = $68 & $67;
     $70 = $66 | $69;
     if ($70) {
      $$07194 = 0;$72 = $64;$73 = $65;
      while(1) {
       $71 = (($$07194) + -1)|0;
       $74 = (_bitshift64Shl(($72|0),($73|0),1)|0);
       $75 = tempRet0;
       $76 = ($75|0)>(-1);
       $77 = ($74>>>0)>(4294967295);
       $78 = ($75|0)==(-1);
       $79 = $78 & $77;
       $80 = $76 | $79;
       if ($80) {
        $$07194 = $71;$72 = $74;$73 = $75;
       } else {
        $$071$lcssa = $71;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $81 = (1 - ($$071$lcssa))|0;
     $82 = (_bitshift64Shl(($4|0),($5|0),($81|0))|0);
     $83 = tempRet0;
     $$172$ph = $$071$lcssa;$89 = $82;$90 = $83;
    } else {
     $84 = $5 & 1048575;
     $85 = $84 | 1048576;
     $$172$ph = $11;$89 = $4;$90 = $85;
    }
    $86 = ($$174|0)>($$172$ph|0);
    $91 = (_i64Subtract(($87|0),($88|0),($89|0),($90|0))|0);
    $92 = tempRet0;
    $93 = ($92|0)>(-1);
    $94 = ($91>>>0)>(4294967295);
    $95 = ($92|0)==(-1);
    $96 = $95 & $94;
    $97 = $93 | $96;
    L23: do {
     if ($86) {
      $$27586 = $$174;$101 = $92;$156 = $97;$157 = $87;$158 = $88;$99 = $91;
      while(1) {
       if ($156) {
        $98 = ($99|0)==(0);
        $100 = ($101|0)==(0);
        $102 = $98 & $100;
        if ($102) {
         break;
        } else {
         $104 = $99;$105 = $101;
        }
       } else {
        $104 = $157;$105 = $158;
       }
       $106 = (_bitshift64Shl(($104|0),($105|0),1)|0);
       $107 = tempRet0;
       $108 = (($$27586) + -1)|0;
       $109 = ($108|0)>($$172$ph|0);
       $110 = (_i64Subtract(($106|0),($107|0),($89|0),($90|0))|0);
       $111 = tempRet0;
       $112 = ($111|0)>(-1);
       $113 = ($110>>>0)>(4294967295);
       $114 = ($111|0)==(-1);
       $115 = $114 & $113;
       $116 = $112 | $115;
       if ($109) {
        $$27586 = $108;$101 = $111;$156 = $116;$157 = $106;$158 = $107;$99 = $110;
       } else {
        $$275$lcssa = $108;$$lcssa = $116;$118 = $110;$120 = $111;$159 = $106;$160 = $107;
        break L23;
       }
      }
      $103 = $0 * 0.0;
      $$070 = $103;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $97;$118 = $91;$120 = $92;$159 = $87;$160 = $88;
     }
    } while(0);
    if ($$lcssa) {
     $117 = ($118|0)==(0);
     $119 = ($120|0)==(0);
     $121 = $117 & $119;
     if ($121) {
      $129 = $0 * 0.0;
      $$070 = $129;
      break;
     } else {
      $123 = $120;$125 = $118;
     }
    } else {
     $123 = $160;$125 = $159;
    }
    $122 = ($123>>>0)<(1048576);
    $124 = ($125>>>0)<(0);
    $126 = ($123|0)==(1048576);
    $127 = $126 & $124;
    $128 = $122 | $127;
    if ($128) {
     $$37683 = $$275$lcssa;$130 = $125;$131 = $123;
     while(1) {
      $132 = (_bitshift64Shl(($130|0),($131|0),1)|0);
      $133 = tempRet0;
      $134 = (($$37683) + -1)|0;
      $135 = ($133>>>0)<(1048576);
      $136 = ($132>>>0)<(0);
      $137 = ($133|0)==(1048576);
      $138 = $137 & $136;
      $139 = $135 | $138;
      if ($139) {
       $$37683 = $134;$130 = $132;$131 = $133;
      } else {
       $$376$lcssa = $134;$141 = $132;$142 = $133;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$141 = $125;$142 = $123;
    }
    $140 = ($$376$lcssa|0)>(0);
    if ($140) {
     $143 = (_i64Add(($141|0),($142|0),0,-1048576)|0);
     $144 = tempRet0;
     $145 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $146 = tempRet0;
     $147 = $143 | $145;
     $148 = $144 | $146;
     $153 = $148;$154 = $147;
    } else {
     $149 = (1 - ($$376$lcssa))|0;
     $150 = (_bitshift64Lshr(($141|0),($142|0),($149|0))|0);
     $151 = tempRet0;
     $153 = $151;$154 = $150;
    }
    $152 = $153 | $12;
    HEAP32[tempDoublePtr>>2] = $154;HEAP32[tempDoublePtr+4>>2] = $152;$155 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $155;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $27 = $0 * $1;
  $28 = $27 / $27;
  $$070 = $28;
 }
 return (+$$070);
}
function ___DOUBLE_BITS_272($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _fmaxf($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$0 = 0.0, $$unshifted = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___FLOAT_BITS_269($0)|0);
 $3 = $2 & 2147483647;
 $4 = ($3>>>0)>(2139095040);
 do {
  if ($4) {
   $$0 = $1;
  } else {
   $5 = (___FLOAT_BITS_269($1)|0);
   $6 = $5 & 2147483647;
   $7 = ($6>>>0)>(2139095040);
   if ($7) {
    $$0 = $0;
   } else {
    $$unshifted = $5 ^ $2;
    $8 = ($$unshifted|0)<(0);
    if ($8) {
     $9 = ($2|0)<(0);
     $10 = $9 ? $1 : $0;
     $$0 = $10;
     break;
    } else {
     $11 = $0 < $1;
     $12 = $11 ? $1 : $0;
     $$0 = $12;
     break;
    }
   }
  }
 } while(0);
 return (+$$0);
}
function ___FLOAT_BITS_269($0) {
 $0 = +$0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 return ($1|0);
}
function _fminf($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$0 = 0.0, $$unshifted = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___FLOAT_BITS_271($0)|0);
 $3 = $2 & 2147483647;
 $4 = ($3>>>0)>(2139095040);
 do {
  if ($4) {
   $$0 = $1;
  } else {
   $5 = (___FLOAT_BITS_271($1)|0);
   $6 = $5 & 2147483647;
   $7 = ($6>>>0)>(2139095040);
   if ($7) {
    $$0 = $0;
   } else {
    $$unshifted = $5 ^ $2;
    $8 = ($$unshifted|0)<(0);
    if ($8) {
     $9 = ($2|0)<(0);
     $10 = $9 ? $0 : $1;
     $$0 = $10;
     break;
    } else {
     $11 = $0 < $1;
     $12 = $11 ? $0 : $1;
     $$0 = $12;
     break;
    }
   }
  }
 } while(0);
 return (+$$0);
}
function ___FLOAT_BITS_271($0) {
 $0 = +$0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 return ($1|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  _memcpy(($3|0),($0|0),($2|0))|0;
  $$0 = $3;
 }
 return ($$0|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $7 = HEAP32[$$pre>>2]|0;
   $8 = ((($5)) + 112|0);
   HEAP32[$8>>2] = $7;
  }
  $9 = HEAP32[$$pre>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $12 = (___pthread_self_613()|0);
   $13 = ((($12)) + 232|0);
   $$sink = $13;
  } else {
   $11 = ((($9)) + 116|0);
   $$sink = $11;
  }
  HEAP32[$$sink>>2] = $5;
 }
 return;
}
function ___pthread_self_613() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 1023]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $memchr = (_memchr(28008,$3,4)|0);
 $4 = ($memchr|0)==(0|0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
 } else {
  $6 = (___fmodeflags($1)|0);
  $7 = $0;
  $8 = $6 | 32768;
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $8;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $9 = (___syscall5(5,($vararg_buffer|0))|0);
  $10 = (___syscall_ret($9)|0);
  $11 = ($10|0)<(0);
  if ($11) {
   $$0 = 0;
  } else {
   $12 = $6 & 524288;
   $13 = ($12|0)==(0);
   if (!($13)) {
    HEAP32[$vararg_buffer3>>2] = $10;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $14 = (___fdopen($10,$1)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    HEAP32[$vararg_buffer8>>2] = $10;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $14;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $not$ = ($3<<24>>24)!=(114);
 $$ = $not$&1;
 $$0 = $2 ? $$ : 2;
 $4 = (_strchr($0,120)|0);
 $5 = ($4|0)==(0|0);
 $6 = $$0 | 128;
 $$0$ = $5 ? $$0 : $6;
 $7 = (_strchr($0,101)|0);
 $8 = ($7|0)==(0|0);
 $9 = $$0$ | 524288;
 $$2 = $8 ? $$0$ : $9;
 $10 = ($3<<24>>24)==(114);
 $11 = $$2 | 64;
 $$2$ = $10 ? $$2 : $11;
 $12 = ($3<<24>>24)==(119);
 $13 = $$2$ | 512;
 $$4 = $12 ? $13 : $$2$;
 $14 = ($3<<24>>24)==(97);
 $15 = $$4 | 1024;
 $$$4 = $14 ? $15 : $$4;
 return ($$$4|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre31 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $memchr = (_memchr(28008,$4,4)|0);
 $5 = ($memchr|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (_malloc(1156)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
  } else {
   dest=$7; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $9 = (_strchr($1,43)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ($3<<24>>24)==(114);
    $12 = $11 ? 8 : 4;
    HEAP32[$7>>2] = $12;
   }
   $13 = (_strchr($1,101)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $16 = $3;
   } else {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$1>>0]|0;
    $16 = $$pre;
   }
   $15 = ($16<<24>>24)==(97);
   if ($15) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $17 = (___syscall221(221,($vararg_buffer3|0))|0);
    $18 = $17 & 1024;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = $17 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $20;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $21 = HEAP32[$7>>2]|0;
    $22 = $21 | 128;
    HEAP32[$7>>2] = $22;
    $29 = $22;
   } else {
    $$pre31 = HEAP32[$7>>2]|0;
    $29 = $$pre31;
   }
   $23 = ((($7)) + 60|0);
   HEAP32[$23>>2] = $0;
   $24 = ((($7)) + 132|0);
   $25 = ((($7)) + 44|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($7)) + 48|0);
   HEAP32[$26>>2] = 1024;
   $27 = ((($7)) + 75|0);
   HEAP8[$27>>0] = -1;
   $28 = $29 & 8;
   $30 = ($28|0)==(0);
   if ($30) {
    $31 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $31;
    $32 = (___syscall54(54,($vararg_buffer12|0))|0);
    $33 = ($32|0)==(0);
    if ($33) {
     HEAP8[$27>>0] = 10;
    }
   }
   $34 = ((($7)) + 32|0);
   HEAP32[$34>>2] = 777;
   $35 = ((($7)) + 36|0);
   HEAP32[$35>>2] = 486;
   $36 = ((($7)) + 40|0);
   HEAP32[$36>>2] = 487;
   $37 = ((($7)) + 12|0);
   HEAP32[$37>>2] = 485;
   $38 = HEAP32[(31616)>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = ((($7)) + 76|0);
    HEAP32[$40>>2] = -1;
   }
   $41 = (___ofl_add($7)|0);
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((31676|0));
 return (31684|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((31676|0));
 return;
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $29 = $4;
 } else {
  $29 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  if (!($16)) {
   $17 = ((($15)) + 52|0);
   HEAP32[$17>>2] = $12;
  }
  $18 = HEAP32[$8>>2]|0;
  $19 = ($18|0)==($0|0);
  if ($19) {
   HEAP32[$8>>2] = $15;
  }
  ___ofl_unlock();
 }
 $20 = (_fflush($0)|0);
 $21 = ((($0)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (FUNCTION_TABLE_ii[$22 & 1023]($0)|0);
 $24 = $23 | $20;
 $25 = ((($0)) + 92|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  _free($26);
 }
 if ($7) {
  $28 = ($29|0)==(0);
  if (!($28)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($24|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[2209]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[2209]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $26 = $17;
     } else {
      $26 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $25 = ($26|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 1023]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 1023]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _fseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___fseeko($0,$1,$2)|0);
 return ($3|0);
}
function ___fseeko($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $7 = (___lockfile($0)|0);
  $phitmp = ($7|0)==(0);
  $8 = (___fseeko_unlocked($0,$1,$2)|0);
  if ($phitmp) {
   $9 = $8;
  } else {
   ___unlockfile($0);
   $9 = $8;
  }
 } else {
  $6 = (___fseeko_unlocked($0,$1,$2)|0);
  $9 = $6;
 }
 return ($9|0);
}
function ___fseeko_unlocked($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($1) - ($5))|0;
  $9 = (($8) + ($7))|0;
  $$019 = $9;
 } else {
  $$019 = $1;
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 if ($14) {
  $15 = ((($0)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  (FUNCTION_TABLE_iiii[$16 & 1023]($0,0,0)|0);
  $17 = HEAP32[$10>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $19 = ((($0)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $20 = ((($0)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 1023]($0,$$019,$2)|0);
  $23 = ($22|0)<(0);
  if ($23) {
   $$0 = -1;
  } else {
   $24 = ((($0)) + 8|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($0)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$0>>2]|0;
   $27 = $26 & -17;
   HEAP32[$0>>2] = $27;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _srand($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -1)|0;
 $2 = 28944;
 $3 = $2;
 HEAP32[$3>>2] = $1;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 return;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 28944;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 28944;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 return ($14|0);
}
function ___ftello($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($0)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___ftello_unlocked($0)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   $7 = $6;
  }
 } else {
  $4 = (___ftello_unlocked($0)|0);
  $7 = $4;
 }
 return ($7|0);
}
function ___ftello_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 128;
 $5 = ($4|0)==(0);
 if ($5) {
  $11 = 1;
 } else {
  $6 = ((($0)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7>>>0)>($9>>>0);
  $phitmp = $10 ? 2 : 1;
  $11 = $phitmp;
 }
 $12 = (FUNCTION_TABLE_iiii[$2 & 1023]($0,0,$11)|0);
 $13 = ($12|0)<(0);
 if ($13) {
  $$0 = $12;
 } else {
  $14 = ((($0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($0)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($12) - ($15))|0;
  $23 = (($22) + ($17))|0;
  $24 = (($23) + ($19))|0;
  $25 = (($24) - ($21))|0;
  $$0 = $25;
 }
 return ($$0|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 $5 = $0&255;
 $6 = $0 & 255;
 if ($4) {
  label = 3;
 } else {
  $7 = (___lockfile($1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   label = 3;
  } else {
   $20 = ((($1)) + 75|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($6|0)==($22|0);
   if ($23) {
    label = 10;
   } else {
    $24 = ((($1)) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($1)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25>>>0)<($27>>>0);
    if ($28) {
     $29 = ((($25)) + 1|0);
     HEAP32[$24>>2] = $29;
     HEAP8[$25>>0] = $5;
     $31 = $6;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($1,$0)|0);
    $31 = $30;
   }
   ___unlockfile($1);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($6|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $5;
     $$0 = $6;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054$ph = 0, $$05460 = 0, $$056$ph = 0, $$05659 = 0, $$57 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $36 = $9;
 } else {
  $36 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19;
 $21 = (($17) - ($20))|0;
 $22 = ($21|0)>(0);
 $23 = ($21>>>0)<($4>>>0);
 $$57 = $23 ? $21 : $4;
 if ($22) {
  $24 = (($4) - ($$57))|0;
  $25 = (($0) + ($$57)|0);
  _memcpy(($0|0),($19|0),($$57|0))|0;
  $26 = (($19) + ($$57)|0);
  HEAP32[$18>>2] = $26;
  $$054$ph = $24;$$056$ph = $25;
 } else {
  $$054$ph = $4;$$056$ph = $0;
 }
 $27 = ($$054$ph|0)==(0);
 L7: do {
  if ($27) {
   label = 13;
  } else {
   $28 = ((($3)) + 32|0);
   $$05460 = $$054$ph;$$05659 = $$056$ph;
   while(1) {
    $29 = (___toread($3)|0);
    $30 = ($29|0)==(0);
    if (!($30)) {
     break;
    }
    $31 = HEAP32[$28>>2]|0;
    $32 = (FUNCTION_TABLE_iiii[$31 & 1023]($3,$$05659,$$05460)|0);
    $33 = (($32) + 1)|0;
    $34 = ($33>>>0)<(2);
    if ($34) {
     break;
    }
    $39 = (($$05460) - ($32))|0;
    $40 = (($$05659) + ($32)|0);
    $41 = ($39|0)==(0);
    if ($41) {
     label = 13;
     break L7;
    } else {
     $$05460 = $39;$$05659 = $40;
    }
   }
   $35 = ($36|0)==(0);
   if (!($35)) {
    ___unlockfile($3);
   }
   $37 = (($4) - ($$05460))|0;
   $38 = (($37>>>0) / ($1>>>0))&-1;
   $$0 = $38;
  }
 } while(0);
 if ((label|0) == 13) {
  $42 = ($36|0)==(0);
  if ($42) {
   $$0 = $$;
  } else {
   ___unlockfile($3);
   $$0 = $$;
  }
 }
 return ($$0|0);
}
function _ftell($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ftello($0)|0);
 return ($1|0);
}
function _printf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[2177]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 STACKTOP = sp;return ($3|0);
}
function _putchar($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[2177]|0;
 $2 = (_fputc($0,$1)|0);
 return ($2|0);
}
function _vprintf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[2177]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 return ($3|0);
}
function _atof($0) {
 $0 = $0|0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_strtod($0,0));
 return (+$1);
}
function _strtod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox($0,$1,1));
 return (+$2);
}
function _strtox($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $0;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = (-1);
 $6 = ((($3)) + 44|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($3)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($3,0);
 $8 = (+___floatscan($3,$2,1));
 $9 = ((($3)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (($13) + ($10))|0;
 $15 = ($1|0)==(0|0);
 if (!($15)) {
  $16 = ($14|0)!=(0);
  $17 = (($0) + ($14)|0);
  $18 = $16 ? $17 : $0;
  HEAP32[$1>>2] = $18;
 }
 STACKTOP = sp;return (+$8);
}
function __ZNSt3__212__next_primeEj($0) {
 $0 = $0|0;
 var $$$0337 = 0, $$$342 = 0, $$$343 = 0, $$$4 = 0, $$0 = 0, $$0328 = 0, $$0334 = 0, $$0337 = 0, $$1 = 0, $$1336$sink = 0, $$2332 = 0, $$341 = 0, $$342 = 0, $$4 = 0, $$5 = 0, $$6 = 0, $$8 = 0, $$sink = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $not$ = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 8|0;
 $2 = sp;
 $3 = sp + 16|0;
 $4 = sp + 12|0;
 HEAP32[$3>>2] = $0;
 $5 = ($0>>>0)<(212);
 do {
  if ($5) {
   $6 = (__ZNSt3__213__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_(9004,(9196),$3,$2)|0);
   $7 = HEAP32[$6>>2]|0;
   $$8 = $7;
  } else {
   $8 = ($0>>>0)>(4294967291);
   if ($8) {
    $9 = (___cxa_allocate_exception(8)|0);
    __THREW__ = 0;
    invoke_vii(778,($9|0),(28012|0));
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     $12 = ___cxa_find_matching_catch_2()|0;
     $13 = tempRet0;
     ___cxa_free_exception(($9|0));
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[$9>>2] = (9584);
     ___cxa_throw(($9|0),(2024|0),(509|0));
     // unreachable;
    }
   }
   $14 = (($0>>>0) / 210)&-1;
   $15 = ($14*210)|0;
   $16 = (($0) - ($15))|0;
   HEAP32[$4>>2] = $16;
   $17 = (__ZNSt3__213__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_(9196,(9388),$4,$1)|0);
   $18 = $17;
   $19 = (($18) - (9196))|0;
   $20 = $19 >> 2;
   $$0328 = 0;$$0337 = $14;$$1336$sink = $20;$$sink = $15;
   L10: while(1) {
    $21 = (9196 + ($$1336$sink<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($22) + ($$sink))|0;
    $$0334 = 5;
    while(1) {
     $24 = ($$0334>>>0)<(47);
     if (!($24)) {
      $$0 = 211;$$4 = $$0328;
      label = 12;
      break;
     }
     $25 = (9004 + ($$0334<<2)|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = (($23>>>0) / ($26>>>0))&-1;
     $28 = ($27>>>0)<($26>>>0);
     if ($28) {
      label = 110;
      break L10;
     }
     $29 = Math_imul($27, $26)|0;
     $not$ = ($23|0)==($29|0);
     $30 = (($$0334) + 1)|0;
     if ($not$) {
      $$6 = $$0328;
      break;
     } else {
      $$0334 = $30;
     }
    }
    L16: do {
     if ((label|0) == 12) {
      L17: while(1) {
       label = 0;
       $31 = (($23>>>0) / ($$0>>>0))&-1;
       $32 = ($31>>>0)<($$0>>>0);
       do {
        if ($32) {
         $$1 = $$0;$$2332 = 1;$$5 = $23;
        } else {
         $33 = Math_imul($31, $$0)|0;
         $34 = ($23|0)==($33|0);
         if ($34) {
          $$1 = $$0;$$2332 = 9;$$5 = $$4;
         } else {
          $35 = (($$0) + 10)|0;
          $36 = (($23>>>0) / ($35>>>0))&-1;
          $37 = ($36>>>0)<($35>>>0);
          if ($37) {
           $$1 = $35;$$2332 = 1;$$5 = $23;
          } else {
           $38 = Math_imul($36, $35)|0;
           $39 = ($23|0)==($38|0);
           if ($39) {
            $$1 = $35;$$2332 = 9;$$5 = $$4;
           } else {
            $40 = (($$0) + 12)|0;
            $41 = (($23>>>0) / ($40>>>0))&-1;
            $42 = ($41>>>0)<($40>>>0);
            if ($42) {
             $$1 = $40;$$2332 = 1;$$5 = $23;
            } else {
             $43 = Math_imul($41, $40)|0;
             $44 = ($23|0)==($43|0);
             if ($44) {
              $$1 = $40;$$2332 = 9;$$5 = $$4;
             } else {
              $45 = (($$0) + 16)|0;
              $46 = (($23>>>0) / ($45>>>0))&-1;
              $47 = ($46>>>0)<($45>>>0);
              if ($47) {
               $$1 = $45;$$2332 = 1;$$5 = $23;
              } else {
               $48 = Math_imul($46, $45)|0;
               $49 = ($23|0)==($48|0);
               if ($49) {
                $$1 = $45;$$2332 = 9;$$5 = $$4;
               } else {
                $50 = (($$0) + 18)|0;
                $51 = (($23>>>0) / ($50>>>0))&-1;
                $52 = ($51>>>0)<($50>>>0);
                if ($52) {
                 $$1 = $50;$$2332 = 1;$$5 = $23;
                } else {
                 $53 = Math_imul($51, $50)|0;
                 $54 = ($23|0)==($53|0);
                 if ($54) {
                  $$1 = $50;$$2332 = 9;$$5 = $$4;
                 } else {
                  $55 = (($$0) + 22)|0;
                  $56 = (($23>>>0) / ($55>>>0))&-1;
                  $57 = ($56>>>0)<($55>>>0);
                  if ($57) {
                   $$1 = $55;$$2332 = 1;$$5 = $23;
                  } else {
                   $58 = Math_imul($56, $55)|0;
                   $59 = ($23|0)==($58|0);
                   if ($59) {
                    $$1 = $55;$$2332 = 9;$$5 = $$4;
                   } else {
                    $60 = (($$0) + 28)|0;
                    $61 = (($23>>>0) / ($60>>>0))&-1;
                    $62 = ($61>>>0)<($60>>>0);
                    if ($62) {
                     $$1 = $60;$$2332 = 1;$$5 = $23;
                    } else {
                     $63 = Math_imul($61, $60)|0;
                     $64 = ($23|0)==($63|0);
                     if ($64) {
                      $$1 = $60;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $65 = (($$0) + 30)|0;
                     $66 = (($23>>>0) / ($65>>>0))&-1;
                     $67 = ($66>>>0)<($65>>>0);
                     if ($67) {
                      $$1 = $65;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $68 = Math_imul($66, $65)|0;
                     $69 = ($23|0)==($68|0);
                     if ($69) {
                      $$1 = $65;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $70 = (($$0) + 36)|0;
                     $71 = (($23>>>0) / ($70>>>0))&-1;
                     $72 = ($71>>>0)<($70>>>0);
                     if ($72) {
                      $$1 = $70;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $73 = Math_imul($71, $70)|0;
                     $74 = ($23|0)==($73|0);
                     if ($74) {
                      $$1 = $70;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $75 = (($$0) + 40)|0;
                     $76 = (($23>>>0) / ($75>>>0))&-1;
                     $77 = ($76>>>0)<($75>>>0);
                     if ($77) {
                      $$1 = $75;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $78 = Math_imul($76, $75)|0;
                     $79 = ($23|0)==($78|0);
                     if ($79) {
                      $$1 = $75;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $80 = (($$0) + 42)|0;
                     $81 = (($23>>>0) / ($80>>>0))&-1;
                     $82 = ($81>>>0)<($80>>>0);
                     if ($82) {
                      $$1 = $80;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $83 = Math_imul($81, $80)|0;
                     $84 = ($23|0)==($83|0);
                     if ($84) {
                      $$1 = $80;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $85 = (($$0) + 46)|0;
                     $86 = (($23>>>0) / ($85>>>0))&-1;
                     $87 = ($86>>>0)<($85>>>0);
                     if ($87) {
                      $$1 = $85;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $88 = Math_imul($86, $85)|0;
                     $89 = ($23|0)==($88|0);
                     if ($89) {
                      $$1 = $85;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $90 = (($$0) + 52)|0;
                     $91 = (($23>>>0) / ($90>>>0))&-1;
                     $92 = ($91>>>0)<($90>>>0);
                     if ($92) {
                      $$1 = $90;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $93 = Math_imul($91, $90)|0;
                     $94 = ($23|0)==($93|0);
                     if ($94) {
                      $$1 = $90;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $95 = (($$0) + 58)|0;
                     $96 = (($23>>>0) / ($95>>>0))&-1;
                     $97 = ($96>>>0)<($95>>>0);
                     if ($97) {
                      $$1 = $95;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $98 = Math_imul($96, $95)|0;
                     $99 = ($23|0)==($98|0);
                     if ($99) {
                      $$1 = $95;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $100 = (($$0) + 60)|0;
                     $101 = (($23>>>0) / ($100>>>0))&-1;
                     $102 = ($101>>>0)<($100>>>0);
                     if ($102) {
                      $$1 = $100;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $103 = Math_imul($101, $100)|0;
                     $104 = ($23|0)==($103|0);
                     if ($104) {
                      $$1 = $100;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $105 = (($$0) + 66)|0;
                     $106 = (($23>>>0) / ($105>>>0))&-1;
                     $107 = ($106>>>0)<($105>>>0);
                     if ($107) {
                      $$1 = $105;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $108 = Math_imul($106, $105)|0;
                     $109 = ($23|0)==($108|0);
                     if ($109) {
                      $$1 = $105;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $110 = (($$0) + 70)|0;
                     $111 = (($23>>>0) / ($110>>>0))&-1;
                     $112 = ($111>>>0)<($110>>>0);
                     if ($112) {
                      $$1 = $110;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $113 = Math_imul($111, $110)|0;
                     $114 = ($23|0)==($113|0);
                     if ($114) {
                      $$1 = $110;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $115 = (($$0) + 72)|0;
                     $116 = (($23>>>0) / ($115>>>0))&-1;
                     $117 = ($116>>>0)<($115>>>0);
                     if ($117) {
                      $$1 = $115;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $118 = Math_imul($116, $115)|0;
                     $119 = ($23|0)==($118|0);
                     if ($119) {
                      $$1 = $115;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $120 = (($$0) + 78)|0;
                     $121 = (($23>>>0) / ($120>>>0))&-1;
                     $122 = ($121>>>0)<($120>>>0);
                     if ($122) {
                      $$1 = $120;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $123 = Math_imul($121, $120)|0;
                     $124 = ($23|0)==($123|0);
                     if ($124) {
                      $$1 = $120;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $125 = (($$0) + 82)|0;
                     $126 = (($23>>>0) / ($125>>>0))&-1;
                     $127 = ($126>>>0)<($125>>>0);
                     if ($127) {
                      $$1 = $125;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $128 = Math_imul($126, $125)|0;
                     $129 = ($23|0)==($128|0);
                     if ($129) {
                      $$1 = $125;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $130 = (($$0) + 88)|0;
                     $131 = (($23>>>0) / ($130>>>0))&-1;
                     $132 = ($131>>>0)<($130>>>0);
                     if ($132) {
                      $$1 = $130;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $133 = Math_imul($131, $130)|0;
                     $134 = ($23|0)==($133|0);
                     if ($134) {
                      $$1 = $130;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $135 = (($$0) + 96)|0;
                     $136 = (($23>>>0) / ($135>>>0))&-1;
                     $137 = ($136>>>0)<($135>>>0);
                     if ($137) {
                      $$1 = $135;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $138 = Math_imul($136, $135)|0;
                     $139 = ($23|0)==($138|0);
                     if ($139) {
                      $$1 = $135;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $140 = (($$0) + 100)|0;
                     $141 = (($23>>>0) / ($140>>>0))&-1;
                     $142 = ($141>>>0)<($140>>>0);
                     if ($142) {
                      $$1 = $140;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $143 = Math_imul($141, $140)|0;
                     $144 = ($23|0)==($143|0);
                     if ($144) {
                      $$1 = $140;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $145 = (($$0) + 102)|0;
                     $146 = (($23>>>0) / ($145>>>0))&-1;
                     $147 = ($146>>>0)<($145>>>0);
                     if ($147) {
                      $$1 = $145;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $148 = Math_imul($146, $145)|0;
                     $149 = ($23|0)==($148|0);
                     if ($149) {
                      $$1 = $145;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $150 = (($$0) + 106)|0;
                     $151 = (($23>>>0) / ($150>>>0))&-1;
                     $152 = ($151>>>0)<($150>>>0);
                     if ($152) {
                      $$1 = $150;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $153 = Math_imul($151, $150)|0;
                     $154 = ($23|0)==($153|0);
                     if ($154) {
                      $$1 = $150;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $155 = (($$0) + 108)|0;
                     $156 = (($23>>>0) / ($155>>>0))&-1;
                     $157 = ($156>>>0)<($155>>>0);
                     if ($157) {
                      $$1 = $155;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $158 = Math_imul($156, $155)|0;
                     $159 = ($23|0)==($158|0);
                     if ($159) {
                      $$1 = $155;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $160 = (($$0) + 112)|0;
                     $161 = (($23>>>0) / ($160>>>0))&-1;
                     $162 = ($161>>>0)<($160>>>0);
                     if ($162) {
                      $$1 = $160;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $163 = Math_imul($161, $160)|0;
                     $164 = ($23|0)==($163|0);
                     if ($164) {
                      $$1 = $160;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $165 = (($$0) + 120)|0;
                     $166 = (($23>>>0) / ($165>>>0))&-1;
                     $167 = ($166>>>0)<($165>>>0);
                     if ($167) {
                      $$1 = $165;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $168 = Math_imul($166, $165)|0;
                     $169 = ($23|0)==($168|0);
                     if ($169) {
                      $$1 = $165;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $170 = (($$0) + 126)|0;
                     $171 = (($23>>>0) / ($170>>>0))&-1;
                     $172 = ($171>>>0)<($170>>>0);
                     if ($172) {
                      $$1 = $170;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $173 = Math_imul($171, $170)|0;
                     $174 = ($23|0)==($173|0);
                     if ($174) {
                      $$1 = $170;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $175 = (($$0) + 130)|0;
                     $176 = (($23>>>0) / ($175>>>0))&-1;
                     $177 = ($176>>>0)<($175>>>0);
                     if ($177) {
                      $$1 = $175;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $178 = Math_imul($176, $175)|0;
                     $179 = ($23|0)==($178|0);
                     if ($179) {
                      $$1 = $175;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $180 = (($$0) + 136)|0;
                     $181 = (($23>>>0) / ($180>>>0))&-1;
                     $182 = ($181>>>0)<($180>>>0);
                     if ($182) {
                      $$1 = $180;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $183 = Math_imul($181, $180)|0;
                     $184 = ($23|0)==($183|0);
                     if ($184) {
                      $$1 = $180;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $185 = (($$0) + 138)|0;
                     $186 = (($23>>>0) / ($185>>>0))&-1;
                     $187 = ($186>>>0)<($185>>>0);
                     if ($187) {
                      $$1 = $185;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $188 = Math_imul($186, $185)|0;
                     $189 = ($23|0)==($188|0);
                     if ($189) {
                      $$1 = $185;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $190 = (($$0) + 142)|0;
                     $191 = (($23>>>0) / ($190>>>0))&-1;
                     $192 = ($191>>>0)<($190>>>0);
                     if ($192) {
                      $$1 = $190;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $193 = Math_imul($191, $190)|0;
                     $194 = ($23|0)==($193|0);
                     if ($194) {
                      $$1 = $190;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $195 = (($$0) + 148)|0;
                     $196 = (($23>>>0) / ($195>>>0))&-1;
                     $197 = ($196>>>0)<($195>>>0);
                     if ($197) {
                      $$1 = $195;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $198 = Math_imul($196, $195)|0;
                     $199 = ($23|0)==($198|0);
                     if ($199) {
                      $$1 = $195;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $200 = (($$0) + 150)|0;
                     $201 = (($23>>>0) / ($200>>>0))&-1;
                     $202 = ($201>>>0)<($200>>>0);
                     if ($202) {
                      $$1 = $200;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $203 = Math_imul($201, $200)|0;
                     $204 = ($23|0)==($203|0);
                     if ($204) {
                      $$1 = $200;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $205 = (($$0) + 156)|0;
                     $206 = (($23>>>0) / ($205>>>0))&-1;
                     $207 = ($206>>>0)<($205>>>0);
                     if ($207) {
                      $$1 = $205;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $208 = Math_imul($206, $205)|0;
                     $209 = ($23|0)==($208|0);
                     if ($209) {
                      $$1 = $205;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $210 = (($$0) + 162)|0;
                     $211 = (($23>>>0) / ($210>>>0))&-1;
                     $212 = ($211>>>0)<($210>>>0);
                     if ($212) {
                      $$1 = $210;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $213 = Math_imul($211, $210)|0;
                     $214 = ($23|0)==($213|0);
                     if ($214) {
                      $$1 = $210;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $215 = (($$0) + 166)|0;
                     $216 = (($23>>>0) / ($215>>>0))&-1;
                     $217 = ($216>>>0)<($215>>>0);
                     if ($217) {
                      $$1 = $215;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $218 = Math_imul($216, $215)|0;
                     $219 = ($23|0)==($218|0);
                     if ($219) {
                      $$1 = $215;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $220 = (($$0) + 168)|0;
                     $221 = (($23>>>0) / ($220>>>0))&-1;
                     $222 = ($221>>>0)<($220>>>0);
                     if ($222) {
                      $$1 = $220;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $223 = Math_imul($221, $220)|0;
                     $224 = ($23|0)==($223|0);
                     if ($224) {
                      $$1 = $220;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $225 = (($$0) + 172)|0;
                     $226 = (($23>>>0) / ($225>>>0))&-1;
                     $227 = ($226>>>0)<($225>>>0);
                     if ($227) {
                      $$1 = $225;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $228 = Math_imul($226, $225)|0;
                     $229 = ($23|0)==($228|0);
                     if ($229) {
                      $$1 = $225;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $230 = (($$0) + 178)|0;
                     $231 = (($23>>>0) / ($230>>>0))&-1;
                     $232 = ($231>>>0)<($230>>>0);
                     if ($232) {
                      $$1 = $230;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $233 = Math_imul($231, $230)|0;
                     $234 = ($23|0)==($233|0);
                     if ($234) {
                      $$1 = $230;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $235 = (($$0) + 180)|0;
                     $236 = (($23>>>0) / ($235>>>0))&-1;
                     $237 = ($236>>>0)<($235>>>0);
                     if ($237) {
                      $$1 = $235;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $238 = Math_imul($236, $235)|0;
                     $239 = ($23|0)==($238|0);
                     if ($239) {
                      $$1 = $235;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $240 = (($$0) + 186)|0;
                     $241 = (($23>>>0) / ($240>>>0))&-1;
                     $242 = ($241>>>0)<($240>>>0);
                     if ($242) {
                      $$1 = $240;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $243 = Math_imul($241, $240)|0;
                     $244 = ($23|0)==($243|0);
                     if ($244) {
                      $$1 = $240;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $245 = (($$0) + 190)|0;
                     $246 = (($23>>>0) / ($245>>>0))&-1;
                     $247 = ($246>>>0)<($245>>>0);
                     if ($247) {
                      $$1 = $245;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $248 = Math_imul($246, $245)|0;
                     $249 = ($23|0)==($248|0);
                     if ($249) {
                      $$1 = $245;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $250 = (($$0) + 192)|0;
                     $251 = (($23>>>0) / ($250>>>0))&-1;
                     $252 = ($251>>>0)<($250>>>0);
                     if ($252) {
                      $$1 = $250;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $253 = Math_imul($251, $250)|0;
                     $254 = ($23|0)==($253|0);
                     if ($254) {
                      $$1 = $250;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $255 = (($$0) + 196)|0;
                     $256 = (($23>>>0) / ($255>>>0))&-1;
                     $257 = ($256>>>0)<($255>>>0);
                     if ($257) {
                      $$1 = $255;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $258 = Math_imul($256, $255)|0;
                     $259 = ($23|0)==($258|0);
                     if ($259) {
                      $$1 = $255;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $260 = (($$0) + 198)|0;
                     $261 = (($23>>>0) / ($260>>>0))&-1;
                     $262 = ($261>>>0)<($260>>>0);
                     if ($262) {
                      $$1 = $260;$$2332 = 1;$$5 = $23;
                      break;
                     }
                     $263 = Math_imul($261, $260)|0;
                     $264 = ($23|0)==($263|0);
                     if ($264) {
                      $$1 = $260;$$2332 = 9;$$5 = $$4;
                      break;
                     }
                     $265 = (($$0) + 208)|0;
                     $266 = (($23>>>0) / ($265>>>0))&-1;
                     $267 = ($266>>>0)<($265>>>0);
                     $268 = Math_imul($266, $265)|0;
                     $269 = ($23|0)==($268|0);
                     $270 = (($$0) + 210)|0;
                     $$342 = $269 ? 9 : 0;
                     $$$342 = $267 ? 1 : $$342;
                     $$$4 = $267 ? $23 : $$4;
                     $271 = $267 | $269;
                     $$$343 = $271 ? $265 : $270;
                     $$1 = $$$343;$$2332 = $$$342;$$5 = $$$4;
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       } while(0);
       $trunc = $$2332&255;
       $trunc$clear = $trunc & 15;
       switch ($trunc$clear<<24>>24) {
       case 9:  {
        $$6 = $$5;
        break L16;
        break;
       }
       case 0:  {
        $$0 = $$1;$$4 = $$5;
        label = 12;
        break;
       }
       default: {
        break L17;
       }
       }
      }
      $cond = ($$2332|0)==(0);
      if ($cond) {
       $$6 = $$5;
      } else {
       label = 111;
       break L10;
      }
     }
    } while(0);
    $272 = (($$1336$sink) + 1)|0;
    $273 = ($272|0)==(48);
    $274 = $273&1;
    $$$0337 = (($274) + ($$0337))|0;
    $$341 = $273 ? 0 : $272;
    $275 = ($$$0337*210)|0;
    $$0328 = $$6;$$0337 = $$$0337;$$1336$sink = $$341;$$sink = $275;
   }
   if ((label|0) == 110) {
    HEAP32[$3>>2] = $23;
    $$8 = $23;
    break;
   }
   else if ((label|0) == 111) {
    HEAP32[$3>>2] = $23;
    $$8 = $$5;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$8|0);
}
function __ZNSt3__213__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$$0 = 0, $$0 = 0, $$014 = 0, $$neg19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $1;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = HEAP32[$2>>2]|0;
 $$0 = $0;$$014 = $7;
 while(1) {
  $9 = ($$014|0)==(0);
  if ($9) {
   break;
  }
  $10 = (($$014|0) / 2)&-1;
  $11 = (($$0) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12>>>0)<($8>>>0);
  $14 = ((($11)) + 4|0);
  $$neg19 = (($$014) + -1)|0;
  $15 = (($$neg19) - ($10))|0;
  $$ = $13 ? $15 : $10;
  $$$0 = $13 ? $14 : $$0;
  $$0 = $$$0;$$014 = $$;
 }
 return ($$0|0);
}
function __ZNSt3__211char_traitsIcE6assignERcRKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 HEAP8[$0>>0] = $2;
 return;
}
function __ZNSt3__211char_traitsIcE11to_int_typeEc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&255;
 return ($1|0);
}
function __ZNSt3__211char_traitsIcE6assignEPcjc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0);
 if (!($3)) {
  $4 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($2)|0);
  $5 = $4&255;
  _memset(($0|0),($5|0),($1|0))|0;
 }
 return ($0|0);
}
function __ZNSt3__211char_traitsIcE6lengthEPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 return ($1|0);
}
function __ZNSt3__211char_traitsIcE4copyEPcPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _memcpy(($0|0),($1|0),($2|0))|0;
 }
 return ($0|0);
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(568,($1|0),(28034|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  ___cxa_free_exception(($1|0));
  ___resumeException($4|0);
  // unreachable;
 } else {
  HEAP32[$1>>2] = (9544);
  ___cxa_throw(($1|0),(1992|0),(506|0));
  // unreachable;
 }
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(568,($1|0),(28034|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  ___cxa_free_exception(($1|0));
  ___resumeException($4|0);
  // unreachable;
 } else {
  HEAP32[$1>>2] = (9564);
  ___cxa_throw(($1|0),(2008|0),(506|0));
  // unreachable;
 }
}
function __ZNSt3__211char_traitsIcE7compareEPKcS3_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
 } else {
  $4 = (_memcmp($0,$1,$2)|0);
  $$0 = $4;
 }
 return ($$0|0);
}
function __Znwj($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $$ = $1 ? 1 : $0;
 while(1) {
  $2 = (_malloc($$)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   label = 6;
   break;
  }
  $4 = (__ZSt15get_new_handlerv()|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$4 & 1023]();
 }
 if ((label|0) == 5) {
  $6 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($6);
  ___cxa_throw(($6|0),(1944|0),(503|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  return ($2|0);
 }
 return (0)|0;
}
function __Znaj($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj($0)|0);
 return ($1|0);
}
function __ZdlPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZNSt3__218__libcpp_refstringC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = (($2) + 13)|0;
 $4 = (__Znwj($3)|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($4)|0);
 $8 = (($2) + 1)|0;
 _memcpy(($7|0),($1|0),($8|0))|0;
 HEAP32[$0>>2] = $7;
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 return ($1|0);
}
function __ZNSt11logic_errorC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9504);
 $2 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(779,($2|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  ___resumeException($5|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNSt13runtime_errorC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9524);
 $2 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(779,($2|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  ___resumeException($5|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(568,($1|0),(28041|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  ___cxa_free_exception(($1|0));
  ___resumeException($4|0);
  // unreachable;
 } else {
  HEAP32[$1>>2] = (9544);
  ___cxa_throw(($1|0),(1992|0),(506|0));
  // unreachable;
 }
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(568,($1|0),(28041|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  ___cxa_free_exception(($1|0));
  ___resumeException($4|0);
  // unreachable;
 } else {
  HEAP32[$1>>2] = (9564);
  ___cxa_throw(($1|0),(2008|0),(506|0));
  // unreachable;
 }
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = HEAP32[$1>>2]|0;
  $7 = ((($1)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8>>>0)>(4294967279);
  if ($9) {
   __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
   // unreachable;
  }
  $10 = ($8>>>0)<(11);
  if ($10) {
   $11 = $8&255;
   $12 = ((($0)) + 11|0);
   HEAP8[$12>>0] = $11;
   $$0$i = $0;
  } else {
   $13 = (($8) + 16)|0;
   $14 = $13 & -16;
   $15 = (__Znwj($14)|0);
   HEAP32[$0>>2] = $15;
   $16 = $14 | -2147483648;
   $17 = ((($0)) + 8|0);
   HEAP32[$17>>2] = $16;
   $18 = ((($0)) + 4|0);
   HEAP32[$18>>2] = $8;
   $$0$i = $15;
  }
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i,$6,$8)|0);
  $19 = (($$0$i) + ($8)|0);
  HEAP8[$2>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($19,$2);
 } else {
  ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $6 = ((($1)) + 11|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)<(0);
 $9 = ((($1)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $7&255;
 $12 = $8 ? $10 : $11;
 $13 = ($12>>>0)<($2>>>0);
 if ($13) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
  // unreachable;
 }
 $14 = HEAP32[$1>>2]|0;
 $15 = $8 ? $14 : $1;
 $16 = (($15) + ($2)|0);
 $17 = (($12) - ($2))|0;
 $18 = ($17>>>0)<($3>>>0);
 $$sroa$speculated = $18 ? $17 : $3;
 $19 = ($$sroa$speculated>>>0)>(4294967279);
 if ($19) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $20 = ($$sroa$speculated>>>0)<(11);
 if ($20) {
  $21 = $$sroa$speculated&255;
  $22 = ((($0)) + 11|0);
  HEAP8[$22>>0] = $21;
  $$0$i = $0;
 } else {
  $23 = (($$sroa$speculated) + 16)|0;
  $24 = $23 & -16;
  $25 = (__Znwj($24)|0);
  HEAP32[$0>>2] = $25;
  $26 = $24 | -2147483648;
  $27 = ((($0)) + 8|0);
  HEAP32[$27>>2] = $26;
  $28 = ((($0)) + 4|0);
  HEAP32[$28>>2] = $$sroa$speculated;
  $$0$i = $25;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i,$16,$$sroa$speculated)|0);
 $29 = (($$0$i) + ($$sroa$speculated)|0);
 HEAP8[$5>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($29,$5);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 if (!($2)) {
  $3 = ((($1)) + 11|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)<(0);
  $6 = HEAP32[$1>>2]|0;
  $7 = $5 ? $6 : $1;
  $8 = ((($1)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $4&255;
  $11 = $5 ? $9 : $10;
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($0,$7,$11)|0);
 }
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $11 = $phitmp$i;
 } else {
  $11 = 10;
 }
 $10 = ($11>>>0)<($2>>>0);
 do {
  if ($10) {
   if ($6) {
    $19 = ((($0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $20;
   } else {
    $21 = $5&255;
    $23 = $21;
   }
   $22 = (($2) - ($11))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$11,$22,$23,0,$23,$2,$1);
  } else {
   if ($6) {
    $12 = HEAP32[$0>>2]|0;
    $13 = $12;
   } else {
    $13 = $0;
   }
   (__ZNSt3__211char_traitsIcE4moveEPcPKcj($13,$1,$2)|0);
   $14 = (($13) + ($2)|0);
   HEAP8[$3>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($14,$3);
   $15 = HEAP8[$4>>0]|0;
   $16 = ($15<<24>>24)<(0);
   if ($16) {
    $17 = ((($0)) + 4|0);
    HEAP32[$17>>2] = $2;
    break;
   } else {
    $18 = $2&255;
    HEAP8[$4>>0] = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__211char_traitsIcE4moveEPcPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _memmove(($0|0),($1|0),($2|0))|0;
 }
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $9 = (-18 - ($1))|0;
 $10 = ($9>>>0)<($2>>>0);
 if ($10) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $11 = ((($0)) + 11|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)<(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $25 = $14;
 } else {
  $25 = $0;
 }
 $15 = ($1>>>0)<(2147483623);
 if ($15) {
  $16 = (($2) + ($1))|0;
  $17 = $1 << 1;
  $18 = ($16>>>0)<($17>>>0);
  $$sroa$speculated = $18 ? $17 : $16;
  $19 = ($$sroa$speculated>>>0)<(11);
  $20 = (($$sroa$speculated) + 16)|0;
  $21 = $20 & -16;
  $phitmp = $19 ? 11 : $21;
  $22 = $phitmp;
 } else {
  $22 = -17;
 }
 $23 = (__Znwj($22)|0);
 $24 = ($4|0)==(0);
 if (!($24)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($23,$25,$4)|0);
 }
 $26 = ($6|0)==(0);
 if (!($26)) {
  $27 = (($23) + ($4)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($27,$7,$6)|0);
 }
 $28 = (($3) - ($5))|0;
 $29 = (($28) - ($4))|0;
 $30 = ($29|0)==(0);
 if (!($30)) {
  $31 = (($23) + ($4)|0);
  $32 = (($31) + ($6)|0);
  $33 = (($25) + ($4)|0);
  $34 = (($33) + ($5)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($32,$34,$29)|0);
 }
 $35 = ($1|0)==(10);
 if (!($35)) {
  __ZdlPv($25);
 }
 HEAP32[$0>>2] = $23;
 $36 = $22 | -2147483648;
 $37 = ((($0)) + 8|0);
 HEAP32[$37>>2] = $36;
 $38 = (($28) + ($6))|0;
 $39 = ((($0)) + 4|0);
 HEAP32[$39>>2] = $38;
 $40 = (($23) + ($38)|0);
 HEAP8[$8>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($40,$8);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$016 = 0, $$01739 = 0, $$018$off037 = 0, $$1404753 = 0, $$141 = 0, $$phitmp$i = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, $phitmp$i21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(4294967279);
 if ($2) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($0)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 2147483647;
  $phitmp$i = (($8) + -1)|0;
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;$18 = $phitmp$i;
 } else {
  $11 = $4&255;
  $13 = $11;$18 = 10;
 }
 $12 = ($13>>>0)>($1>>>0);
 $$sroa$speculated = $12 ? $13 : $1;
 $14 = ($$sroa$speculated>>>0)<(11);
 $15 = (($$sroa$speculated) + 16)|0;
 $16 = $15 & -16;
 $phitmp$i21 = (($16) + -1)|0;
 $$phitmp$i = $14 ? 10 : $phitmp$i21;
 $17 = ($$phitmp$i|0)==($18|0);
 L8: do {
  if (!($17)) {
   do {
    if ($14) {
     $28 = HEAP32[$0>>2]|0;
     if ($5) {
      $$01739 = $28;$$018$off037 = 0;$$141 = $0;
      label = 17;
     } else {
      $29 = $4&255;
      $30 = (($29) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($0,$28,$30)|0);
      __ZdlPv($28);
      label = 19;
     }
    } else {
     $19 = ($$phitmp$i>>>0)>($18>>>0);
     $20 = (($$phitmp$i) + 1)|0;
     if ($19) {
      $21 = (__Znwj($20)|0);
      $$016 = $21;
     } else {
      __THREW__ = 0;
      $22 = (invoke_ii(527,($20|0))|0);
      $23 = __THREW__; __THREW__ = 0;
      $24 = $23&1;
      if ($24) {
       $25 = ___cxa_find_matching_catch_3(0|0)|0;
       $26 = tempRet0;
       (___cxa_begin_catch(($25|0))|0);
       ___cxa_end_catch();
       break L8;
      } else {
       $$016 = $22;
      }
     }
     if ($5) {
      $27 = HEAP32[$0>>2]|0;
      $$01739 = $27;$$018$off037 = 1;$$141 = $$016;
      label = 17;
      break;
     } else {
      $31 = $4&255;
      $32 = (($31) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$016,$0,$32)|0);
      $$1404753 = $$016;
      label = 18;
      break;
     }
    }
   } while(0);
   if ((label|0) == 17) {
    $33 = ((($0)) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($34) + 1)|0;
    (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$141,$$01739,$35)|0);
    __ZdlPv($$01739);
    if ($$018$off037) {
     $$1404753 = $$141;
     label = 18;
    } else {
     label = 19;
    }
   }
   if ((label|0) == 18) {
    $36 = (($$phitmp$i) + 1)|0;
    $37 = $36 | -2147483648;
    $38 = ((($0)) + 8|0);
    HEAP32[$38>>2] = $37;
    $39 = ((($0)) + 4|0);
    HEAP32[$39>>2] = $13;
    HEAP32[$0>>2] = $$1404753;
    break;
   }
   else if ((label|0) == 19) {
    $40 = $13&255;
    HEAP8[$3>>0] = $40;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc($1)|0);
 $3 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($0,$1,$2)|0);
 return ($3|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 1|0;
 $4 = sp;
 $5 = ((($0)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 } else {
  $10 = $6&255;
  $12 = $10;
 }
 $11 = ($12>>>0)<($1>>>0);
 do {
  if ($11) {
   $13 = (($1) - ($12))|0;
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($0,$13,$2)|0);
  } else {
   if ($7) {
    $14 = HEAP32[$0>>2]|0;
    $15 = (($14) + ($1)|0);
    HEAP8[$3>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($15,$3);
    $16 = ((($0)) + 4|0);
    HEAP32[$16>>2] = $1;
    break;
   } else {
    $17 = (($0) + ($1)|0);
    HEAP8[$4>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($17,$4);
    $18 = $1&255;
    HEAP8[$5>>0] = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1|0)==(0);
 if (!($4)) {
  $5 = ((($0)) + 11|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)<(0);
  if ($7) {
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9 & 2147483647;
   $phitmp$i = (($10) + -1)|0;
   $11 = ((($0)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $15 = $phitmp$i;$16 = $12;
  } else {
   $13 = $6&255;
   $15 = 10;$16 = $13;
  }
  $14 = (($15) - ($16))|0;
  $17 = ($14>>>0)<($1>>>0);
  $18 = (($16) + ($1))|0;
  if ($17) {
   $19 = (($18) - ($15))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0,$15,$19,$16,$16,0,0);
   $$pre = HEAP8[$5>>0]|0;
   $21 = $$pre;
  } else {
   $21 = $6;
  }
  $20 = ($21<<24>>24)<(0);
  if ($20) {
   $22 = HEAP32[$0>>2]|0;
   $24 = $22;
  } else {
   $24 = $0;
  }
  $23 = (($24) + ($16)|0);
  (__ZNSt3__211char_traitsIcE6assignEPcjc($23,$1,$2)|0);
  $25 = HEAP8[$5>>0]|0;
  $26 = ($25<<24>>24)<(0);
  if ($26) {
   $27 = ((($0)) + 4|0);
   HEAP32[$27>>2] = $18;
  } else {
   $28 = $18&255;
   HEAP8[$5>>0] = $28;
  }
  $29 = (($24) + ($18)|0);
  HEAP8[$3>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($29,$3);
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (-17 - ($1))|0;
 $8 = ($7>>>0)<($2>>>0);
 if ($8) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 11|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)<(0);
 if ($11) {
  $12 = HEAP32[$0>>2]|0;
  $23 = $12;
 } else {
  $23 = $0;
 }
 $13 = ($1>>>0)<(2147483623);
 if ($13) {
  $14 = (($2) + ($1))|0;
  $15 = $1 << 1;
  $16 = ($14>>>0)<($15>>>0);
  $$sroa$speculated = $16 ? $15 : $14;
  $17 = ($$sroa$speculated>>>0)<(11);
  $18 = (($$sroa$speculated) + 16)|0;
  $19 = $18 & -16;
  $phitmp = $17 ? 11 : $19;
  $20 = $phitmp;
 } else {
  $20 = -17;
 }
 $21 = (__Znwj($20)|0);
 $22 = ($4|0)==(0);
 if (!($22)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($21,$23,$4)|0);
 }
 $24 = (($3) - ($5))|0;
 $25 = (($24) - ($4))|0;
 $26 = ($25|0)==(0);
 if (!($26)) {
  $27 = (($21) + ($4)|0);
  $28 = (($27) + ($6)|0);
  $29 = (($23) + ($4)|0);
  $30 = (($29) + ($5)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($28,$30,$25)|0);
 }
 $31 = ($1|0)==(10);
 if (!($31)) {
  __ZdlPv($23);
 }
 HEAP32[$0>>2] = $21;
 $32 = $20 | -2147483648;
 $33 = ((($0)) + 8|0);
 HEAP32[$33>>2] = $32;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $phitmp$i;$15 = $11;
 } else {
  $12 = $5&255;
  $14 = 10;$15 = $12;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($2>>>0);
 $17 = (($15) + ($2))|0;
 if ($16) {
  $27 = (($17) - ($14))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$14,$27,$15,$15,0,$2,$1);
 } else {
  $18 = ($2|0)==(0);
  if (!($18)) {
   if ($6) {
    $19 = HEAP32[$0>>2]|0;
    $21 = $19;
   } else {
    $21 = $0;
   }
   $20 = (($21) + ($15)|0);
   (__ZNSt3__211char_traitsIcE4copyEPcPKcj($20,$1,$2)|0);
   $22 = HEAP8[$4>>0]|0;
   $23 = ($22<<24>>24)<(0);
   if ($23) {
    $24 = ((($0)) + 4|0);
    HEAP32[$24>>2] = $17;
   } else {
    $25 = $17&255;
    HEAP8[$4>>0] = $25;
   }
   $26 = (($21) + ($17)|0);
   HEAP8[$3>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($26,$3);
  }
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc($1)|0);
 $3 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($0,$1,$2)|0);
 return ($3|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 1|0;
 $3 = sp;
 HEAP8[$2>>0] = $1;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $8 = ((($0)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 2147483647;
  $11 = (($10) + -1)|0;
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $$018 = $13;$$019 = $11;
 } else {
  $7 = $5&255;
  $$018 = $7;$$019 = 10;
 }
 $14 = ($$018|0)==($$019|0);
 if ($14) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0,$$019,1,$$019,$$019,0,0);
  $15 = HEAP8[$4>>0]|0;
  $16 = ($15<<24>>24)<(0);
  $17 = (($$019) + 1)|0;
  if ($16) {
   $23 = $17;
   label = 8;
  } else {
   $20 = $17;
   label = 7;
  }
 } else {
  $18 = (($$018) + 1)|0;
  if ($6) {
   $23 = $18;
   label = 8;
  } else {
   $20 = $18;
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $19 = $20&255;
  HEAP8[$4>>0] = $19;
  $$pn = $0;
 }
 else if ((label|0) == 8) {
  $21 = HEAP32[$0>>2]|0;
  $22 = ((($0)) + 4|0);
  HEAP32[$22>>2] = $23;
  $$pn = $21;
 }
 $$0 = (($$pn) + ($$018)|0);
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0,$2);
 $24 = ((($$0)) + 1|0);
 HEAP8[$3>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($24,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKcj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ((($0)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 } else {
  $10 = $6&255;
  $12 = $10;
 }
 $11 = ($12>>>0)<($1>>>0);
 if ($11) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
  // unreachable;
 }
 if ($7) {
  $13 = ((($0)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & 2147483647;
  $phitmp$i = (($15) + -1)|0;
  $17 = $phitmp$i;
 } else {
  $17 = 10;
 }
 $16 = (($17) - ($12))|0;
 $18 = ($16>>>0)<($3>>>0);
 $19 = (($12) + ($3))|0;
 if ($18) {
  $36 = (($19) - ($17))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$17,$36,$12,$1,0,$3,$2);
 } else {
  $20 = ($3|0)==(0);
  if (!($20)) {
   if ($7) {
    $21 = HEAP32[$0>>2]|0;
    $25 = $21;
   } else {
    $25 = $0;
   }
   $22 = (($12) - ($1))|0;
   $23 = ($22|0)==(0);
   $24 = (($25) + ($1)|0);
   if ($23) {
    $$1 = $2;
   } else {
    $26 = (($24) + ($3)|0);
    $27 = ($24>>>0)<=($2>>>0);
    $28 = (($25) + ($12)|0);
    $29 = ($28>>>0)>($2>>>0);
    $or$cond = $27 & $29;
    $30 = (($2) + ($3)|0);
    $$0 = $or$cond ? $30 : $2;
    (__ZNSt3__211char_traitsIcE4moveEPcPKcj($26,$24,$22)|0);
    $$1 = $$0;
   }
   (__ZNSt3__211char_traitsIcE4moveEPcPKcj($24,$$1,$3)|0);
   $31 = HEAP8[$5>>0]|0;
   $32 = ($31<<24>>24)<(0);
   if ($32) {
    $33 = ((($0)) + 4|0);
    HEAP32[$33>>2] = $19;
   } else {
    $34 = $19&255;
    HEAP8[$5>>0] = $34;
   }
   $35 = (($25) + ($19)|0);
   HEAP8[$4>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($35,$4);
  }
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEjj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($0)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $11 = $8;
 } else {
  $9 = $5&255;
  $11 = $9;
 }
 $10 = ($11>>>0)<($1>>>0);
 if ($10) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
  // unreachable;
 }
 $12 = ($2|0)==(0);
 if (!($12)) {
  if ($6) {
   $13 = HEAP32[$0>>2]|0;
   $19 = $13;
  } else {
   $19 = $0;
  }
  $14 = (($11) - ($1))|0;
  $15 = ($14>>>0)<($2>>>0);
  $$sroa$speculated = $15 ? $14 : $2;
  $16 = (($14) - ($$sroa$speculated))|0;
  $17 = ($16|0)==(0);
  if ($17) {
   $23 = $5;
  } else {
   $18 = (($19) + ($1)|0);
   $20 = (($18) + ($$sroa$speculated)|0);
   (__ZNSt3__211char_traitsIcE4moveEPcPKcj($18,$20,$16)|0);
   $$pre = HEAP8[$4>>0]|0;
   $23 = $$pre;
  }
  $21 = (($11) - ($$sroa$speculated))|0;
  $22 = ($23<<24>>24)<(0);
  if ($22) {
   $24 = ((($0)) + 4|0);
   HEAP32[$24>>2] = $21;
  } else {
   $25 = $21&255;
   HEAP8[$4>>0] = $25;
  }
  $26 = (($19) + ($21)|0);
  HEAP8[$3>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($26,$3);
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__211char_traitsIcE4findEPKcjRS2_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0);
 if ($3) {
  $$0 = 0;
 } else {
  $4 = HEAP8[$2>>0]|0;
  $5 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($4)|0);
  $6 = (_memchr($0,$5,$1)|0);
  $$0 = $6;
 }
 return ($$0|0);
}
function __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = HEAP32[$0>>2]|0;
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;$14 = $7;
 } else {
  $10 = $5&255;
  $12 = $10;$14 = $0;
 }
 HEAP8[$3>>0] = $1;
 $11 = ($12>>>0)>($2>>>0);
 if ($11) {
  $13 = (($14) + ($2)|0);
  $15 = (($12) - ($2))|0;
  $16 = (__ZNSt3__211char_traitsIcE4findEPKcjRS2_($13,$15,$3)|0);
  $17 = ($16|0)==(0|0);
  $18 = $16;
  $19 = $14;
  $20 = (($18) - ($19))|0;
  $$0$i = $17 ? -1 : $20;
  $$1$i = $$0$i;
 } else {
  $$1$i = -1;
 }
 STACKTOP = sp;return ($$1$i|0);
}
function __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$sroa$speculated = 0, $$sroa$speculated19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 } else {
  $10 = $6&255;
  $12 = $10;
 }
 $11 = ($12>>>0)<($1>>>0);
 $13 = ($4|0)==(-1);
 $or$cond = $13 | $11;
 if ($or$cond) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
  // unreachable;
 }
 $14 = (($12) - ($1))|0;
 $15 = ($14>>>0)<($2>>>0);
 $$sroa$speculated = $15 ? $14 : $2;
 if ($7) {
  $16 = HEAP32[$0>>2]|0;
  $18 = $16;
 } else {
  $18 = $0;
 }
 $17 = (($18) + ($1)|0);
 $19 = ($$sroa$speculated>>>0)>($4>>>0);
 $$sroa$speculated19 = $19 ? $4 : $$sroa$speculated;
 $20 = (__ZNSt3__211char_traitsIcE7compareEPKcS3_j($17,$3,$$sroa$speculated19)|0);
 $21 = ($20|0)==(0);
 if ($21) {
  $22 = ($$sroa$speculated>>>0)<($4>>>0);
  $$ = $19&1;
  $$$ = $22 ? -1 : $$;
  return ($$$|0);
 } else {
  return ($20|0);
 }
 return (0)|0;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0;
 var $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $1 = (___cxa_get_globals_fast()|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($3)) + 80|0);
   $6 = ((($3)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if (!($16)) {
    $36 = HEAP32[2348]|0;
    HEAP32[$vararg_buffer7>>2] = $36;
    _abort_message(28140,$vararg_buffer7);
    // unreachable;
   }
   $17 = ($9|0)==(1126902529);
   $18 = ($12|0)==(1129074247);
   $19 = $17 & $18;
   if ($19) {
    $20 = ((($3)) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21;
   } else {
    $22 = $5;
   }
   HEAP32[$0>>2] = $22;
   $23 = HEAP32[$3>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[470]|0;
   $27 = ((($26)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (FUNCTION_TABLE_iiii[$28 & 1023](1880,$23,$0)|0);
   $30 = HEAP32[2348]|0;
   if ($29) {
    $31 = HEAP32[$0>>2]|0;
    $32 = HEAP32[$31>>2]|0;
    $33 = ((($32)) + 8|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (FUNCTION_TABLE_ii[$34 & 1023]($31)|0);
    HEAP32[$vararg_buffer>>2] = $30;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $25;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $35;
    _abort_message(28054,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = $30;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $25;
    _abort_message(28099,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(28178,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_once((31688|0),(780|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[7923]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(28329,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _abort_message($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[2084]|0;
 (_vfprintf($2,$0,$1)|0);
 (_fputc(10,$2)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 if ($4) {
  $$2 = 1;
 } else {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $$2 = 0;
  } else {
   $6 = (___dynamic_cast($1,1904,1888,0)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$2 = 0;
   } else {
    $8 = ((($3)) + 4|0);
    dest=$8; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$3>>2] = $6;
    $9 = ((($3)) + 8|0);
    HEAP32[$9>>2] = $0;
    $10 = ((($3)) + 12|0);
    HEAP32[$10>>2] = -1;
    $11 = ((($3)) + 48|0);
    HEAP32[$11>>2] = 1;
    $12 = HEAP32[$6>>2]|0;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_viiii[$14 & 1023]($6,$3,$15,1);
    $16 = ((($3)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = ((($3)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$2>>2] = $20;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if ($9) {
    $10 = ((($1)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==($2|0);
    $13 = ((($1)) + 32|0);
    if (!($12)) {
     $14 = ((($1)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($2|0);
     if (!($16)) {
      HEAP32[$13>>2] = $3;
      HEAP32[$14>>2] = $2;
      $18 = ((($1)) + 40|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = (($19) + 1)|0;
      HEAP32[$18>>2] = $20;
      $21 = ((($1)) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($22|0)==(1);
      if ($23) {
       $24 = ((($1)) + 24|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = ($25|0)==(2);
       if ($26) {
        $27 = ((($1)) + 54|0);
        HEAP8[$27>>0] = 1;
       }
      }
      $28 = ((($1)) + 44|0);
      HEAP32[$28>>2] = 4;
      break;
     }
    }
    $17 = ($3|0)==(1);
    if ($17) {
     HEAP32[$13>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 }
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 return ($3|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = ((($1)) + 36|0);
 $8 = ((($1)) + 24|0);
 do {
  if ($6) {
   HEAP32[$4>>2] = $2;
   HEAP32[$8>>2] = $3;
   HEAP32[$7>>2] = 1;
  } else {
   $9 = ($5|0)==($2|0);
   if (!($9)) {
    $12 = HEAP32[$7>>2]|0;
    $13 = (($12) + 1)|0;
    HEAP32[$7>>2] = $13;
    HEAP32[$8>>2] = 2;
    $14 = ((($1)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $10 = HEAP32[$8>>2]|0;
   $11 = ($10|0)==(2);
   if ($11) {
    HEAP32[$8>>2] = $3;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($2|0);
 if ($6) {
  $7 = ((($1)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(1);
  if (!($9)) {
   HEAP32[$7>>2] = $3;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 53|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($3|0);
 do {
  if ($8) {
   $9 = ((($1)) + 52|0);
   HEAP8[$9>>0] = 1;
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   $13 = ((($1)) + 54|0);
   $14 = ((($1)) + 48|0);
   $15 = ((($1)) + 24|0);
   $16 = ((($1)) + 36|0);
   if ($12) {
    HEAP32[$10>>2] = $2;
    HEAP32[$15>>2] = $4;
    HEAP32[$16>>2] = 1;
    $17 = HEAP32[$14>>2]|0;
    $18 = ($17|0)==(1);
    $19 = ($4|0)==(1);
    $or$cond = $18 & $19;
    if (!($or$cond)) {
     break;
    }
    HEAP8[$13>>0] = 1;
    break;
   }
   $20 = ($11|0)==($2|0);
   if (!($20)) {
    $27 = HEAP32[$16>>2]|0;
    $28 = (($27) + 1)|0;
    HEAP32[$16>>2] = $28;
    HEAP8[$13>>0] = 1;
    break;
   }
   $21 = HEAP32[$15>>2]|0;
   $22 = ($21|0)==(2);
   if ($22) {
    HEAP32[$15>>2] = $4;
    $26 = $4;
   } else {
    $26 = $21;
   }
   $23 = HEAP32[$14>>2]|0;
   $24 = ($23|0)==(1);
   $25 = ($26|0)==(1);
   $or$cond22 = $24 & $25;
   if ($or$cond22) {
    HEAP8[$13>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$33 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + -8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($0) + ($7)|0);
 $9 = ((($5)) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$4>>2] = $2;
 $11 = ((($4)) + 4|0);
 HEAP32[$11>>2] = $0;
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($4)) + 16|0);
 $15 = ((($4)) + 20|0);
 $16 = ((($4)) + 24|0);
 $17 = ((($4)) + 28|0);
 $18 = ((($4)) + 32|0);
 $19 = ((($4)) + 40|0);
 dest=$14; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$14+36>>1]=0|0;HEAP8[$14+38>>0]=0|0;
 $20 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10,$2,0)|0);
 L1: do {
  if ($20) {
   $21 = ((($4)) + 48|0);
   HEAP32[$21>>2] = 1;
   $22 = HEAP32[$10>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_viiiiii[$24 & 1023]($10,$4,$8,$8,1,0);
   $25 = HEAP32[$16>>2]|0;
   $26 = ($25|0)==(1);
   $$ = $26 ? $8 : 0;
   $$0 = $$;
  } else {
   $27 = ((($4)) + 36|0);
   $28 = HEAP32[$10>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_viiiii[$30 & 1023]($10,$4,$8,1,0);
   $31 = HEAP32[$27>>2]|0;
   switch ($31|0) {
   case 0:  {
    $32 = HEAP32[$19>>2]|0;
    $33 = ($32|0)==(1);
    $34 = HEAP32[$17>>2]|0;
    $35 = ($34|0)==(1);
    $or$cond = $33 & $35;
    $36 = HEAP32[$18>>2]|0;
    $37 = ($36|0)==(1);
    $or$cond28 = $or$cond & $37;
    $38 = HEAP32[$15>>2]|0;
    $$33 = $or$cond28 ? $38 : 0;
    $$0 = $$33;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $39 = HEAP32[$16>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $41 = HEAP32[$19>>2]|0;
    $42 = ($41|0)==(0);
    $43 = HEAP32[$17>>2]|0;
    $44 = ($43|0)==(1);
    $or$cond30 = $42 & $44;
    $45 = HEAP32[$18>>2]|0;
    $46 = ($45|0)==(1);
    $or$cond32 = $or$cond30 & $46;
    if (!($or$cond32)) {
     $$0 = 0;
     break;
    }
   }
   $47 = HEAP32[$14>>2]|0;
   $$0 = $47;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiiii[$13 & 1023]($10,$1,$2,$3,$4,$5);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$037$off038 = 0, $$037$off039 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   $10 = ((($0)) + 8|0);
   if (!($9)) {
    $41 = HEAP32[$10>>2]|0;
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($42)) + 24|0);
    $44 = HEAP32[$43>>2]|0;
    FUNCTION_TABLE_viiiii[$44 & 1023]($41,$1,$2,$3,$4);
    break;
   }
   $11 = ((($1)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($2|0);
   $14 = ((($1)) + 32|0);
   if (!($13)) {
    $15 = ((($1)) + 20|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==($2|0);
    if (!($17)) {
     HEAP32[$14>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     if ($21) {
      break;
     }
     $22 = ((($1)) + 52|0);
     HEAP8[$22>>0] = 0;
     $23 = ((($1)) + 53|0);
     HEAP8[$23>>0] = 0;
     $24 = HEAP32[$10>>2]|0;
     $25 = HEAP32[$24>>2]|0;
     $26 = ((($25)) + 20|0);
     $27 = HEAP32[$26>>2]|0;
     FUNCTION_TABLE_viiiiii[$27 & 1023]($24,$1,$2,$2,1,$4);
     $28 = HEAP8[$23>>0]|0;
     $29 = ($28<<24>>24)==(0);
     if ($29) {
      $$037$off038 = 4;
      label = 11;
     } else {
      $30 = HEAP8[$22>>0]|0;
      $not$ = ($30<<24>>24)==(0);
      if ($not$) {
       $$037$off038 = 3;
       label = 11;
      } else {
       $$037$off039 = 3;
      }
     }
     if ((label|0) == 11) {
      HEAP32[$15>>2] = $2;
      $31 = ((($1)) + 40|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + 1)|0;
      HEAP32[$31>>2] = $33;
      $34 = ((($1)) + 36|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($35|0)==(1);
      if ($36) {
       $37 = ((($1)) + 24|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = ($38|0)==(2);
       if ($39) {
        $40 = ((($1)) + 54|0);
        HEAP8[$40>>0] = 1;
        $$037$off039 = $$037$off038;
       } else {
        $$037$off039 = $$037$off038;
       }
      } else {
       $$037$off039 = $$037$off038;
      }
     }
     HEAP32[$19>>2] = $$037$off039;
     break;
    }
   }
   $18 = ($3|0)==(1);
   if ($18) {
    HEAP32[$14>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 } else {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiii[$11 & 1023]($8,$1,$2,$3);
 }
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((31692|0),(781|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(28378,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _free($0);
 $1 = HEAP32[7923]|0;
 $2 = (_pthread_setspecific(($1|0),(0|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  _abort_message(28428,$vararg_buffer);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(782)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $20 = ___cxa_find_matching_catch_3(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = (__ZSt13get_terminatev()|0);
 __ZSt11__terminatePFvvE($19);
 // unreachable;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($0|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  __THREW__ = 0;
  invoke_vii(783,(28481|0),($vararg_buffer|0));
  $3 = __THREW__; __THREW__ = 0;
 }
 $4 = ___cxa_find_matching_catch_3(0|0)|0;
 $5 = tempRet0;
 (___cxa_begin_catch(($4|0))|0);
 __THREW__ = 0;
 invoke_vii(783,(28521|0),($vararg_buffer1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = ___cxa_find_matching_catch_3(0|0)|0;
 $8 = tempRet0;
 __THREW__ = 0;
 invoke_v(784);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch_3(0|0)|0;
  $12 = tempRet0;
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  ___clang_call_terminate($7);
  // unreachable;
 }
}
function __ZSt13get_terminatev() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2347]|0;HEAP32[2347] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9bad_allocD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9bad_allocD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt9bad_alloc4whatEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (28571|0);
}
function __ZNSt9exceptionD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt9exception4whatEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (28599|0);
}
function __ZNSt11logic_errorD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9504);
 $1 = ((($0)) + 4|0);
 __ZNSt3__218__libcpp_refstringD2Ev($1);
 return;
}
function __ZNSt11logic_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt11logic_error4whatEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = (__ZNKSt3__218__libcpp_refstring5c_strEv($1)|0);
 return ($2|0);
}
function __ZNKSt3__218__libcpp_refstring5c_strEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt3__218__libcpp_refstringD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0)|0);
 if ($1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1116($2)|0);
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($5+-1)|0);
  $6 = (($5) + -1)|0;
  $7 = ($6|0)<(0);
  if ($7) {
   __ZdlPv($3);
  }
 }
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1116($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + -12|0);
 return ($1|0);
}
function __ZNSt13runtime_errorD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9524);
 $1 = ((($0)) + 4|0);
 __ZNSt3__218__libcpp_refstringD2Ev($1);
 return;
}
function __ZNSt13runtime_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt13runtime_error4whatEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = (__ZNKSt3__218__libcpp_refstring5c_strEv($1)|0);
 return ($2|0);
}
function __ZNSt12length_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt12out_of_rangeD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt14overflow_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 return ($3|0);
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($1)) + 52|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ((($1)) + 53|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ((($0)) + 16|0);
  $14 = ((($0)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (((($0)) + 16|0) + ($15<<3)|0);
  HEAP8[$9>>0] = 0;
  HEAP8[$11>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($13,$1,$2,$3,$4,$5);
  $17 = ($15|0)>(1);
  L4: do {
   if ($17) {
    $18 = ((($0)) + 24|0);
    $19 = ((($1)) + 24|0);
    $20 = ((($1)) + 54|0);
    $21 = ((($0)) + 8|0);
    $$0 = $18;
    while(1) {
     $22 = HEAP8[$20>>0]|0;
     $23 = ($22<<24>>24)==(0);
     if (!($23)) {
      break L4;
     }
     $24 = HEAP8[$9>>0]|0;
     $25 = ($24<<24>>24)==(0);
     if ($25) {
      $31 = HEAP8[$11>>0]|0;
      $32 = ($31<<24>>24)==(0);
      if (!($32)) {
       $33 = HEAP32[$21>>2]|0;
       $34 = $33 & 1;
       $35 = ($34|0)==(0);
       if ($35) {
        break L4;
       }
      }
     } else {
      $26 = HEAP32[$19>>2]|0;
      $27 = ($26|0)==(1);
      if ($27) {
       break L4;
      }
      $28 = HEAP32[$21>>2]|0;
      $29 = $28 & 2;
      $30 = ($29|0)==(0);
      if ($30) {
       break L4;
      }
     }
     HEAP8[$9>>0] = 0;
     HEAP8[$11>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0,$1,$2,$3,$4,$5);
     $36 = ((($$0)) + 8|0);
     $37 = ($36>>>0)<($16>>>0);
     if ($37) {
      $$0 = $36;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$9>>0] = $10;
  HEAP8[$11>>0] = $12;
 }
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 L1: do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   $10 = ((($0)) + 12|0);
   $11 = ((($1)) + 24|0);
   $12 = ((($1)) + 36|0);
   $13 = ((($1)) + 54|0);
   $14 = ((($0)) + 8|0);
   $15 = ((($0)) + 16|0);
   if (!($9)) {
    $55 = HEAP32[$10>>2]|0;
    $56 = (((($0)) + 16|0) + ($55<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15,$1,$2,$3,$4);
    $57 = ((($0)) + 24|0);
    $58 = ($55|0)>(1);
    if (!($58)) {
     break;
    }
    $59 = HEAP32[$14>>2]|0;
    $60 = $59 & 2;
    $61 = ($60|0)==(0);
    if ($61) {
     $62 = HEAP32[$12>>2]|0;
     $63 = ($62|0)==(1);
     if ($63) {
      $$0 = $57;
     } else {
      $68 = $59 & 1;
      $69 = ($68|0)==(0);
      if ($69) {
       $$2 = $57;
       while(1) {
        $78 = HEAP8[$13>>0]|0;
        $79 = ($78<<24>>24)==(0);
        if (!($79)) {
         break L1;
        }
        $80 = HEAP32[$12>>2]|0;
        $81 = ($80|0)==(1);
        if ($81) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2,$1,$2,$3,$4);
        $82 = ((($$2)) + 8|0);
        $83 = ($82>>>0)<($56>>>0);
        if ($83) {
         $$2 = $82;
        } else {
         break L1;
        }
       }
      } else {
       $$1 = $57;
      }
      while(1) {
       $70 = HEAP8[$13>>0]|0;
       $71 = ($70<<24>>24)==(0);
       if (!($71)) {
        break L1;
       }
       $72 = HEAP32[$12>>2]|0;
       $73 = ($72|0)==(1);
       if ($73) {
        $74 = HEAP32[$11>>2]|0;
        $75 = ($74|0)==(1);
        if ($75) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1,$1,$2,$3,$4);
       $76 = ((($$1)) + 8|0);
       $77 = ($76>>>0)<($56>>>0);
       if ($77) {
        $$1 = $76;
       } else {
        break L1;
       }
      }
     }
    } else {
     $$0 = $57;
    }
    while(1) {
     $64 = HEAP8[$13>>0]|0;
     $65 = ($64<<24>>24)==(0);
     if (!($65)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0,$1,$2,$3,$4);
     $66 = ((($$0)) + 8|0);
     $67 = ($66>>>0)<($56>>>0);
     if ($67) {
      $$0 = $66;
     } else {
      break L1;
     }
    }
   }
   $16 = ((($1)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==($2|0);
   $19 = ((($1)) + 32|0);
   if (!($18)) {
    $20 = ((($1)) + 20|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==($2|0);
    if (!($22)) {
     HEAP32[$19>>2] = $3;
     $24 = ((($1)) + 44|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)==(4);
     if ($26) {
      break;
     }
     $27 = HEAP32[$10>>2]|0;
     $28 = (((($0)) + 16|0) + ($27<<3)|0);
     $29 = ((($1)) + 52|0);
     $30 = ((($1)) + 53|0);
     $$081$off0 = 0;$$084 = $15;$$085$off0 = 0;
     L29: while(1) {
      $31 = ($$084>>>0)<($28>>>0);
      if (!($31)) {
       $$283$off0 = $$081$off0;
       label = 18;
       break;
      }
      HEAP8[$29>>0] = 0;
      HEAP8[$30>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084,$1,$2,$2,1,$4);
      $32 = HEAP8[$13>>0]|0;
      $33 = ($32<<24>>24)==(0);
      if (!($33)) {
       $$283$off0 = $$081$off0;
       label = 18;
       break;
      }
      $34 = HEAP8[$30>>0]|0;
      $35 = ($34<<24>>24)==(0);
      do {
       if ($35) {
        $$182$off0 = $$081$off0;$$186$off0 = $$085$off0;
       } else {
        $36 = HEAP8[$29>>0]|0;
        $37 = ($36<<24>>24)==(0);
        if ($37) {
         $43 = HEAP32[$14>>2]|0;
         $44 = $43 & 1;
         $45 = ($44|0)==(0);
         if ($45) {
          $$283$off0 = 1;
          label = 18;
          break L29;
         } else {
          $$182$off0 = 1;$$186$off0 = $$085$off0;
          break;
         }
        }
        $38 = HEAP32[$11>>2]|0;
        $39 = ($38|0)==(1);
        if ($39) {
         label = 23;
         break L29;
        }
        $40 = HEAP32[$14>>2]|0;
        $41 = $40 & 2;
        $42 = ($41|0)==(0);
        if ($42) {
         label = 23;
         break L29;
        } else {
         $$182$off0 = 1;$$186$off0 = 1;
        }
       }
      } while(0);
      $46 = ((($$084)) + 8|0);
      $$081$off0 = $$182$off0;$$084 = $46;$$085$off0 = $$186$off0;
     }
     do {
      if ((label|0) == 18) {
       if (!($$085$off0)) {
        HEAP32[$20>>2] = $2;
        $47 = ((($1)) + 40|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = (($48) + 1)|0;
        HEAP32[$47>>2] = $49;
        $50 = HEAP32[$12>>2]|0;
        $51 = ($50|0)==(1);
        if ($51) {
         $52 = HEAP32[$11>>2]|0;
         $53 = ($52|0)==(2);
         if ($53) {
          HEAP8[$13>>0] = 1;
          if ($$283$off0) {
           label = 23;
           break;
          } else {
           $54 = 4;
           break;
          }
         }
        }
       }
       if ($$283$off0) {
        label = 23;
       } else {
        $54 = 4;
       }
      }
     } while(0);
     if ((label|0) == 23) {
      $54 = 3;
     }
     HEAP32[$24>>2] = $54;
     break;
    }
   }
   $23 = ($3|0)==(1);
   if ($23) {
    HEAP32[$19>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 L1: do {
  if ($6) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
  } else {
   $7 = ((($0)) + 16|0);
   $8 = ((($0)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (((($0)) + 16|0) + ($9<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($7,$1,$2,$3);
   $11 = ($9|0)>(1);
   if ($11) {
    $12 = ((($0)) + 24|0);
    $13 = ((($1)) + 54|0);
    $$0 = $12;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0,$1,$2,$3);
     $14 = HEAP8[$13>>0]|0;
     $15 = ($14<<24>>24)==(0);
     if (!($15)) {
      break L1;
     }
     $16 = ((($$0)) + 8|0);
     $17 = ($16>>>0)<($10>>>0);
     if ($17) {
      $$0 = $16;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >> 8;
 $7 = $5 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = $6;
 } else {
  $9 = HEAP32[$2>>2]|0;
  $10 = (($9) + ($6)|0);
  $11 = HEAP32[$10>>2]|0;
  $$0 = $11;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($2) + ($$0)|0);
 $17 = $5 & 2;
 $18 = ($17|0)!=(0);
 $19 = $18 ? $3 : 2;
 FUNCTION_TABLE_viiii[$15 & 1023]($12,$1,$16,$19);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >> 8;
 $9 = $7 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = $8;
 } else {
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($8)|0);
  $13 = HEAP32[$12>>2]|0;
  $$0 = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($3) + ($$0)|0);
 $19 = $7 & 2;
 $20 = ($19|0)!=(0);
 $21 = $20 ? $4 : 2;
 FUNCTION_TABLE_viiiiii[$17 & 1023]($14,$1,$2,$18,$21,$5);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 >> 8;
 $8 = $6 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = $7;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + ($7)|0);
  $12 = HEAP32[$11>>2]|0;
  $$0 = $12;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($2) + ($$0)|0);
 $18 = $6 & 2;
 $19 = ($18|0)!=(0);
 $20 = $19 ? $3 : 2;
 FUNCTION_TABLE_viiiii[$16 & 1023]($13,$1,$17,$20,$4);
 return;
}
function ___cxa_guard_acquire($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(1);
 if ($2) {
  $$0 = 0;
 } else {
  HEAP8[$0>>0] = 1;
  $$0 = 1;
 }
 return ($$0|0);
}
function ___cxa_guard_release($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___cxa_guard_abort($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9484);
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7924]|0;HEAP32[7924] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function ___cxa_can_catch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 1023]($0,$1,$3)|0);
 $9 = $8&1;
 if ($8) {
  $10 = HEAP32[$3>>2]|0;
  HEAP32[$2>>2] = $10;
 }
 STACKTOP = sp;return ($9|0);
}
function ___cxa_is_pointer_type($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $4 = 0;
 } else {
  $2 = (___dynamic_cast($0,1904,2056,0)|0);
  $phitmp = ($2|0)!=(0|0);
  $4 = $phitmp;
 }
 $3 = $4&1;
 return ($3|0);
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_ctpop_i32(x) {
    // http://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetParallel
    // http://bits.stephan-brumme.com/countBits.html
    x = x | 0;
    x = x - ((x >>> 1) & 0x55555555) | 0;
    x = (x & 0x33333333) + ((x >>> 2) & 0x33333333) | 0;
    return (Math_imul((x + (x >>> 4) & 252645135 /* 0xF0F0F0F, but hits uglify parse bug? */), 0x1010101) >>> 24) | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}

  
function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_vid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  FUNCTION_TABLE_vid[index&1023](a1|0,+a2);
}


function dynCall_viiidid(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=a5|0; a6=+a6;
  FUNCTION_TABLE_viiidid[index&1023](a1|0,a2|0,a3|0,+a4,a5|0,+a6);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&1023](a1|0);
}


function dynCall_viiidii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiidii[index&1023](a1|0,a2|0,a3|0,+a4,a5|0,a6|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&1023](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1023](a1|0)|0;
}


function dynCall_ddddd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=+a1; a2=+a2; a3=+a3; a4=+a4;
  return +FUNCTION_TABLE_ddddd[index&1023](+a1,+a2,+a3,+a4);
}


function dynCall_viiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
  FUNCTION_TABLE_viiiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0);
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_viiidd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=+a5;
  FUNCTION_TABLE_viiidd[index&1023](a1|0,a2|0,a3|0,+a4,+a5);
}


function dynCall_viddi(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=a4|0;
  FUNCTION_TABLE_viddi[index&511](a1|0,+a2,+a3,a4|0);
}


function dynCall_vidd(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3;
  FUNCTION_TABLE_vidd[index&1023](a1|0,+a2,+a3);
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&1023](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  FUNCTION_TABLE_viiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
}


function dynCall_diii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return +FUNCTION_TABLE_diii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_viiiiidd(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6; a7=+a7;
  FUNCTION_TABLE_viiiiidd[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,+a6,+a7);
}


function dynCall_di(index,a1) {
  index = index|0;
  a1=a1|0;
  return +FUNCTION_TABLE_di[index&1023](a1|0);
}


function dynCall_vidddd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5;
  FUNCTION_TABLE_vidddd[index&1023](a1|0,+a2,+a3,+a4,+a5);
}


function dynCall_iid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  return FUNCTION_TABLE_iid[index&1023](a1|0,+a2)|0;
}


function dynCall_viiddd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=+a5;
  FUNCTION_TABLE_viiddd[index&1023](a1|0,a2|0,+a3,+a4,+a5);
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&1023](a1|0,a2|0)|0;
}


function dynCall_dii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return +FUNCTION_TABLE_dii[index&0](a1|0,a2|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_d(index) {
  index = index|0;
  
  return +FUNCTION_TABLE_d[index&1023]();
}


function dynCall_did(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  return +FUNCTION_TABLE_did[index&1023](a1|0,+a2);
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&1023](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&1023]()|0;
}


function dynCall_viiid(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
  FUNCTION_TABLE_viiid[index&511](a1|0,a2|0,a3|0,+a4);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&1023]();
}


function dynCall_viid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  FUNCTION_TABLE_viid[index&1023](a1|0,a2|0,+a3);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&1023](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(0);
}
function _glFramebufferTexture2D__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _glFramebufferTexture2D(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function b1(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(1);
}
function b2(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3;p4 = p4|0;p5 = +p5; nullFunc_viiidid(2);
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function _glCompileShader__wrapper(p0) {
 p0 = p0|0; _glCompileShader(p0|0);
}
function _glDeleteShader__wrapper(p0) {
 p0 = p0|0; _glDeleteShader(p0|0);
}
function __emval_decref__wrapper(p0) {
 p0 = p0|0; __emval_decref(p0|0);
}
function __emval_run_destructors__wrapper(p0) {
 p0 = p0|0; __emval_run_destructors(p0|0);
}
function __emval_incref__wrapper(p0) {
 p0 = p0|0; __emval_incref(p0|0);
}
function b4(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3;p4 = p4|0;p5 = p5|0; nullFunc_viiidii(4);
}
function b5(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(5);
}
function _glDeleteTextures__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _glDeleteTextures(p0|0,p1|0);
}
function _glDeleteFramebuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _glDeleteFramebuffers(p0|0,p1|0);
}
function _glGetIntegerv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _glGetIntegerv(p0|0,p1|0);
}
function _glGenTextures__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _glGenTextures(p0|0,p1|0);
}
function _glBindTexture__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _glBindTexture(p0|0,p1|0);
}
function _glGenFramebuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _glGenFramebuffers(p0|0,p1|0);
}
function _glBindFramebuffer__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _glBindFramebuffer(p0|0,p1|0);
}
function b6(p0) {
 p0 = p0|0; nullFunc_ii(6);return 0;
}
function __emval_new_cstring__wrapper(p0) {
 p0 = p0|0; return __emval_new_cstring(p0|0)|0;
}
function __emval_get_global__wrapper(p0) {
 p0 = p0|0; return __emval_get_global(p0|0)|0;
}
function b7(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; nullFunc_ddddd(7);return +0;
}
function b8(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_viiiiiiiiiii(8);
}
function b9(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(9);return 0;
}
function b10(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3;p4 = +p4; nullFunc_viiidd(10);
}
function b11(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = p3|0; nullFunc_viddi(11);
}
function b12(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(12);
}
function b13(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(13);return 0;
}
function b14(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_viiiiiiii(14);
}
function b15(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(15);return +0;
}
function __emval_as__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; return +__emval_as(p0|0,p1|0,p2|0);
}
function b16(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5;p6 = +p6; nullFunc_viiiiidd(16);
}
function b17(p0) {
 p0 = p0|0; nullFunc_di(17);return +0;
}
function b18(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; nullFunc_vidddd(18);
}
function b19(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_iid(19);return 0;
}
function b20(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = +p4; nullFunc_viiddd(20);
}
function b21(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(21);
}
function b22(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(22);return 0;
}
function _glGetUniformLocation__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _glGetUniformLocation(p0|0,p1|0)|0;
}
function __emval_take_value__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return __emval_take_value(p0|0,p1|0)|0;
}
function __emval_get_property__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return __emval_get_property(p0|0,p1|0)|0;
}
function __emval_get_method_caller__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return __emval_get_method_caller(p0|0,p1|0)|0;
}
function b23(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_dii(23);return +0;
}
function b24(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(24);
}
function b25() {
 ; nullFunc_d(25);return +0;
}
function b26(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_did(26);return +0;
}
function b27(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(27);return 0;
}
function __emval_new__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return __emval_new(p0|0,p1|0,p2|0,p3|0)|0;
}
function b28() {
 ; nullFunc_i(28);return 0;
}
function b29(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3; nullFunc_viiid(29);
}
function b30(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(30);
}
function _glGetShaderiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _glGetShaderiv(p0|0,p1|0,p2|0);
}
function _glTexParameteri__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _glTexParameteri(p0|0,p1|0,p2|0);
}
function __emval_set_property__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; __emval_set_property(p0|0,p1|0,p2|0);
}
function ___cxa_throw__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; ___cxa_throw(p0|0,p1|0,p2|0);
}
function b31() {
 ; nullFunc_v(31);
}
function ___cxa_pure_virtual__wrapper() {
 ; ___cxa_pure_virtual();
}
function ___cxa_end_catch__wrapper() {
 ; ___cxa_end_catch();
}
function b32(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_viid(32);
}
function b33(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(33);
}
function ___assert_fail__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; ___assert_fail(p0|0,p1|0,p2|0,p3|0);
}
function _glShaderSource__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glShaderSource(p0|0,p1|0,p2|0,p3|0);
}
function _glGetShaderInfoLog__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glGetShaderInfoLog(p0|0,p1|0,p2|0,p3|0);
}
function _glScissor__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glScissor(p0|0,p1|0,p2|0,p3|0);
}
function _glDrawElements__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glDrawElements(p0|0,p1|0,p2|0,p3|0);
}
function __emval_call_void_method__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; __emval_call_void_method(p0|0,p1|0,p2|0,p3|0);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_viiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b0,b0,b0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,_glFramebufferTexture2D__wrapper,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN10emscripten8internal7InvokerIvJiiiiEE6invokeEPFviiiiEiiii,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_vid = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,__ZN4View19scrollStartFadeAnimEf,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,__ZN14AlphaAnimation5applyEf,b1,b1,__ZN17DelegateAnimation5applyEf,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,__ZN8RenderOp8setAlphaEf,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN9GLProgram8setAlphaEf,b1,b1,b1,b1,b1,b1,b1,__ZN14CachedUniform2IfE3setEf,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN21GLProgramRoundRectOne9setRadiusEf,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN15TextureRenderOp8setAlphaEf,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,__Z16stringFromDoubled,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_viiidid = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN17RoundRectRenderOpC2EP4Viewjfjf,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,__ZN18MainViewControllerD2Ev,__ZN18MainViewControllerD0Ev,b3,b3,__ZN14ViewController16detachFromWindowEv,b3,__ZN14ViewController12onWillResumeEv,__ZN14ViewController11onDidResumeEv,__ZN14ViewController11onWillPauseEv,__ZN14ViewController10onDidPauseEv,__ZN14ViewController19onBackButtonClickedEv,__ZN18MainViewController18onGameStateChangedEv,__ZN18MainViewController21onGameNumFlagsChangedEv,__ZN18MainViewController25onGameNumRemainingChangedEv,b3,__ZThn24_N18MainViewController18onGameStateChangedEv,__ZThn24_N18MainViewController21onGameNumFlagsChangedEv,__ZThn24_N18MainViewController25onGameNumRemainingChangedEv,b3,__ZNSt3__210__function6__baseIFbP4Viewii6_POINTEED2Ev,__ZNSt3__210__function6__funcIZN18MainViewControllerC1EvEUlP4Viewii6_POINTE_NS_9allocatorIS6_EEFbS4_iiS5_EED0Ev,b3,b3,__ZNSt3__210__function6__funcIZN18MainViewControllerC1EvEUlP4Viewii6_POINTE_NS_9allocatorIS6_EEFbS4_iiS5_EE7destroyEv,__ZNSt3__210__function6__funcIZN18MainViewControllerC1EvEUlP4Viewii6_POINTE_NS_9allocatorIS6_EEFbS4_iiS5_EE18destroy_deallocateEv,b3,b3,b3
,__ZN8GameViewD2Ev,__ZN8GameViewD0Ev,b3,b3,__ZN4View15updateRenderOpsEv,b3,b3,b3,__ZN4View16updateScrollbarsEv,__ZN4View20updateEffectiveAlphaEv,__ZN4View19updateEffectiveTintEv,__ZN4View28onEffectiveTintColourChangedEv,b3,b3,b3,b3,b3,__ZN4View14setNeedsLayoutEv,b3,__ZN4View6layoutEv,__ZN4View21invalidateContentSizeEv,b3,b3,b3,b3,b3,b3,b3,__ZN4View16detachFromWindowEv,b3
,b3,b3,__ZN4View18updateBackgroundOpEv,b3,b3,b3,__ZN4View16removeFromParentEv,b3,__ZN4View30removeSubviewsNotInVisibleAreaEv,b3,b3,b3,b3,b3,__ZN4View18setNeedsFullRedrawEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN4View20resignFirstResponderEv,b3
,b3,b3,b3,b3,__ZNSt3__210__function6__baseIFvvEED2Ev,__ZNSt3__210__function6__funcIZN8GameView12onTouchEventEii6_POINTE3__0NS_9allocatorIS4_EEFvvEED0Ev,b3,b3,__ZNSt3__210__function6__funcIZN8GameView12onTouchEventEii6_POINTE3__0NS_9allocatorIS4_EEFvvEE7destroyEv,__ZNSt3__210__function6__funcIZN8GameView12onTouchEventEii6_POINTE3__0NS_9allocatorIS4_EEFvvEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN8GameView12onTouchEventEii6_POINTE3__0NS_9allocatorIS4_EEFvvEEclEv,b3,b3,__ZN3AppD2Ev,__ZN3AppD0Ev,__ZN14NavigationItemD2Ev,__ZN14NavigationItemD0Ev,__ZN8StyleMapD2Ev,__ZN8StyleMapD0Ev,__ZN14StyleValueUberD2Ev,__ZN14StyleValueUberD0Ev,__ZN7URLDataD2Ev,__ZN7URLDataD0Ev,__ZN10URLRequestD2Ev,__ZN10URLRequestD0Ev,__ZN14ViewControllerD2Ev,__ZN14ViewControllerD0Ev,__ZN6ObjectD2Ev,__ZN6ObjectD0Ev,__ZNSt9exceptionD2Ev
,__ZNSt3__217bad_function_callD0Ev,b3,__ZN5TimerD2Ev,__ZN5TimerD0Ev,__ZN5Timer4stopEv,__ZN4DataD2Ev,__ZN4DataD0Ev,b3,b3,b3,b3,b3,b3,__ZN11KeyValueMapD2Ev,__ZN11KeyValueMapD0Ev,b3,b3,b3,b3,__ZN9AnimationD2Ev,__ZN9AnimationD0Ev,b3,b3,__ZN9Animation4stopEv,__ZN9Animation5pauseEv,__ZN9Animation7unpauseEv,b3,b3,__ZN14AlphaAnimationD2Ev,__ZN14AlphaAnimationD0Ev
,__ZN14AlphaAnimation4stopEv,b3,__ZN17DelegateAnimationD2Ev,__ZN17DelegateAnimationD0Ev,b3,__ZN6BitmapD2Ev,__ZN6BitmapD0Ev,__ZN6Bitmap4bindEv,b3,b3,b3,b3,__ZN4FontD2Ev,__ZN4FontD0Ev,__ZN5GlyphD0Ev,__ZN8ItemPoolD2Ev,__ZN10QuadBufferD0Ev,b3,__ZN8ItemPoolD0Ev,b3,__ZN11RenderBatchD2Ev,__ZN11RenderBatchD0Ev,__ZN8RenderOpD2Ev,__ZN8RenderOpD0Ev,b3,b3,b3,b3,b3,b3
,b3,b3,b3,__ZN17RenderOpMultiRectD2Ev,__ZN17RenderOpMultiRectD0Ev,b3,b3,__ZN12BlurRenderOpD2Ev,__ZN12BlurRenderOpD0Ev,b3,b3,b3,__ZN13GLProgramBlurD0Ev,__ZN13GLProgramBlur4loadEv,__ZN9GLProgram13findVariablesEv,b3,b3,__ZN9GLProgram16lazyLoadUniformsEv,b3,b3,b3,__ZN17GLProgramPostBlurD0Ev,__ZN17GLProgramPostBlur4loadEv,__ZN14CachedUniform2IfE3useEv,b3,__ZN12UniformFloat4loadEv,__ZN14CachedUniform2IiE3useEv,b3,__ZN10UniformInt4loadEv,__ZN18GLProgramSolidFillD0Ev
,__ZN18GLProgramSolidFill4loadEv,__ZN21ColorRectFillRenderOpD0Ev,__ZN17RoundRectRenderOpD0Ev,b3,b3,b3,b3,b3,__ZN21GLProgramRoundRectOneD0Ev,__ZN21GLProgramRoundRectOne4loadEv,__ZN21GLProgramRoundRectOne13findVariablesEv,__ZN18GLProgramRoundRect16lazyLoadUniformsEv,b3,__ZN21GLProgramRoundRectTwoD0Ev,__ZN21GLProgramRoundRectTwo4loadEv,__ZN21GLProgramRoundRectTwo13findVariablesEv,b3,__ZN13UniformColour4loadEv,__ZN14CachedUniform2I7Vector4E3useEv,b3,__ZN13UniformFloat44loadEv,__ZN12TextRenderOpD2Ev,__ZN12TextRenderOpD0Ev,b3,b3,b3,__ZN18GLProgramTextGlyphD0Ev,__ZN18GLProgramTextGlyph4loadEv,__ZN20SimpleBitmapProviderD2Ev,__ZN20SimpleBitmapProviderD0Ev
,b3,b3,b3,__ZN19AsyncBitmapProviderD2Ev,__ZN19AsyncBitmapProviderD0Ev,b3,b3,b3,__ZN15TextureRenderOpD2Ev,__ZN15TextureRenderOpD0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZN15TextureRenderOp15onBitmapChangedEv,__ZThn72_N15TextureRenderOp15onBitmapChangedEv,__ZN16GLProgramTextureD0Ev,__ZN16GLProgramTexture4loadEv,__ZN21GLProgramTextureAlphaD0Ev,__ZN21GLProgramTextureAlpha4loadEv,__ZN20GLProgramTextureTintD0Ev,__ZN20GLProgramTextureTint4loadEv,__ZN25GLProgramTextureTintAlphaD0Ev,__ZN25GLProgramTextureTintAlpha4loadEv,__ZNSt3__210__function6__baseIFvP6BitmapEED2Ev,__ZNSt3__210__function6__funcIZN19AsyncBitmapProviderC1EPKcE3__0NS_9allocatorIS5_EEFvP6BitmapEED0Ev
,b3,b3,__ZNSt3__210__function6__funcIZN19AsyncBitmapProviderC1EPKcE3__0NS_9allocatorIS5_EEFvP6BitmapEE7destroyEv,__ZNSt3__210__function6__funcIZN19AsyncBitmapProviderC1EPKcE3__0NS_9allocatorIS5_EEFvP6BitmapEE18destroy_deallocateEv,b3,b3,b3,__ZNSt3__210__function6__funcIZN15TextureRenderOpC1EP4ViewPKciE3__1NS_9allocatorIS7_EEFvP6BitmapEED0Ev,b3,b3,__ZNSt3__210__function6__funcIZN15TextureRenderOpC1EP4ViewPKciE3__1NS_9allocatorIS7_EEFvP6BitmapEE7destroyEv,__ZNSt3__210__function6__funcIZN15TextureRenderOpC1EP4ViewPKciE3__1NS_9allocatorIS7_EEFvP6BitmapEE18destroy_deallocateEv,b3,b3,b3,__ZN7SurfaceD2Ev,__ZN7SurfaceD0Ev,__ZN22PrivateSurfaceRenderOpD2Ev,__ZN22PrivateSurfaceRenderOpD0Ev,b3,b3,__ZN12TextRendererD2Ev,__ZN12TextRendererD0Ev,__ZN9AtlasNodeD0Ev,__ZN9AtlasPageD2Ev,__ZN9AtlasPageD0Ev,__ZN5AtlasD2Ev,__ZN5AtlasD0Ev,__ZN6WindowD2Ev,__ZN6WindowD0Ev
,b3,__ZN6Window14setNeedsLayoutEv,b3,__ZN6Window4drawEv,__ZN6Window13requestRedrawEv,b3,b3,b3,__ZNSt3__210__function6__funcIZN6Window13MotionTracker18dispatchInputEventEil6_POINTPS2_E3__0NS_9allocatorIS6_EEFvvEED0Ev,b3,b3,__ZNSt3__210__function6__funcIZN6Window13MotionTracker18dispatchInputEventEil6_POINTPS2_E3__0NS_9allocatorIS6_EEFvvEE7destroyEv,__ZNSt3__210__function6__funcIZN6Window13MotionTracker18dispatchInputEventEil6_POINTPS2_E3__0NS_9allocatorIS6_EEFvvEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN6Window13MotionTracker18dispatchInputEventEil6_POINTPS2_E3__0NS_9allocatorIS6_EEFvvEEclEv,b3,b3,__ZN8OSBitmapD2Ev,__ZN8OSBitmapD0Ev,b3,b3,__ZN8OSBitmap4bindEv,__ZN7WebFontD2Ev,__ZN7WebFontD0Ev,b3,__ZN13NativeRequestD2Ev,__ZN13NativeRequestD0Ev,__ZN7OSTimerD0Ev,__ZN7OSTimer4stopEv,__ZN6ButtonD2Ev,__ZN6ButtonD0Ev
,__ZN5Label15updateRenderOpsEv,__ZN5Label28onEffectiveTintColourChangedEv,__ZN5Label6layoutEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN13ToolbarButtonD2Ev,__ZN13ToolbarButtonD0Ev,b3,b3,__ZN8EditTextD2Ev,__ZN8EditTextD0Ev,__ZN8EditText15updateRenderOpsEv,b3,__ZN8EditText6layoutEv,__ZN8EditText16detachFromWindowEv,b3,b3,b3,b3,b3
,b3,__ZN8EditText14deleteBackwardEv,b3,b3,b3,b3,b3,b3,__ZThn444_N8EditText14deleteBackwardEv,b3,b3,b3,b3,b3,__ZNSt3__210__function6__funcINS_6__bindIM8EditTextFvvEJPS3_EEENS_9allocatorIS7_EEFvvEED0Ev,b3,b3,__ZNSt3__210__function6__funcINS_6__bindIM8EditTextFvvEJPS3_EEENS_9allocatorIS7_EEFvvEE7destroyEv,__ZNSt3__210__function6__funcINS_6__bindIM8EditTextFvvEJPS3_EEENS_9allocatorIS7_EEFvvEE18destroy_deallocateEv,__ZNSt3__210__function6__funcINS_6__bindIM8EditTextFvvEJPS3_EEENS_9allocatorIS7_EEFvvEEclEv,b3,b3,__ZN9ImageViewD2Ev,__ZN9ImageViewD0Ev,__ZN9ImageView28onEffectiveTintColourChangedEv,__ZN9ImageView6layoutEv,b3,__ZN9ImageView16detachFromWindowEv,b3,b3
,b3,__ZN5LabelD2Ev,__ZN5LabelD0Ev,__ZN12LinearLayoutD2Ev,__ZN12LinearLayoutD0Ev,b3,__ZN12LinearLayout6layoutEv,b3,b3,b3,b3,b3,__ZN8ListViewD2Ev,__ZN8ListViewD0Ev,b3,b3,b3,b3,b3,b3,__ZN8ListView18removeAllItemViewsEv,b3,__ZN8ListView6reloadEv,b3,b3,__ZN8ListView18updateVisibleItemsEv,b3,__ZN4ViewD2Ev,__ZN13NavigationBarD0Ev,b3
,b3,b3,b3,b3,__ZN9ScrollbarD0Ev,b3,b3,b3,b3,__ZN9SearchBoxD2Ev,__ZN9SearchBoxD0Ev,b3,__ZN9SearchBox6layoutEv,b3,b3,b3,__ZNSt3__210__function6__baseIFvfEED2Ev,__ZNSt3__210__function6__funcIZN9SearchBox20becomeFirstResponderEvE3__0NS_9allocatorIS3_EEFvfEED0Ev,b3,b3,__ZNSt3__210__function6__funcIZN9SearchBox20becomeFirstResponderEvE3__0NS_9allocatorIS3_EEFvfEE7destroyEv,__ZNSt3__210__function6__funcIZN9SearchBox20becomeFirstResponderEvE3__0NS_9allocatorIS3_EEFvfEE18destroy_deallocateEv,b3,b3,b3,__ZN16SegmentedControlD2Ev,__ZN16SegmentedControlD0Ev,__ZN16SegmentedControl15updateRenderOpsEv,__ZN16SegmentedControl28onEffectiveTintColourChangedEv,b3
,__ZN16SegmentedControl6layoutEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN4ViewD0Ev,__ZNSt3__210__function6__baseIFvP9AnimationEED2Ev,__ZNSt3__210__function6__funcIZN4View12animateAlphaEffE3__2NS_9allocatorIS3_EEFvP9AnimationEED0Ev,b3,b3,__ZNSt3__210__function6__funcIZN4View12animateAlphaEffE3__2NS_9allocatorIS3_EEFvP9AnimationEE7destroyEv,__ZNSt3__210__function6__funcIZN4View12animateAlphaEffE3__2NS_9allocatorIS3_EEFvP9AnimationEE18destroy_deallocateEv,b3,b3,b3,__ZNSt3__210__function6__funcIZN4View16updateScrollbarsEvE3__1NS_9allocatorIS3_EEFvvEED0Ev,b3,b3,__ZNSt3__210__function6__funcIZN4View16updateScrollbarsEvE3__1NS_9allocatorIS3_EEFvvEE7destroyEv,__ZNSt3__210__function6__funcIZN4View16updateScrollbarsEvE3__1NS_9allocatorIS3_EEFvvEE18destroy_deallocateEv,__ZNSt3__210__function6__funcIZN4View16updateScrollbarsEvE3__1NS_9allocatorIS3_EEFvvEEclEv,b3,b3,__ZNSt3__210__function6__funcIZN4View19scrollStartFadeAnimEfE3__0NS_9allocatorIS3_EEFvfEED0Ev,b3
,b3,__ZNSt3__210__function6__funcIZN4View19scrollStartFadeAnimEfE3__0NS_9allocatorIS3_EEFvfEE7destroyEv,__ZNSt3__210__function6__funcIZN4View19scrollStartFadeAnimEfE3__0NS_9allocatorIS3_EEFvfEE18destroy_deallocateEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b3,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b3
,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,b3,__ZNSt12length_errorD0Ev,__ZNSt12out_of_rangeD0Ev,__ZNSt14overflow_errorD0Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,b3,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b3,b3,b3,__ZN6Styles9loadAssetERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZN18MainViewControllerC2Ev,b3,b3,__ZN6Object7releaseEv,__ZN6Object6retainEv,b3,b3,b3,b3,__ZN4Game7restartEv,b3,b3,b3,b3,__ZN8GameViewC2Ev,b3,b3
,__ZN12LinearLayoutC2Ev,b3,b3,__ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP4FontNS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN12Utf8Iterator14skipWhitespaceEv,b3,b3,__ZN6ObjectC2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,__ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv,b3,b3,b3,b3,b3,b3,b3,b3,__ZN8MruCacheINSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEED2Ev,__ZNSt3__210__list_impI6ObjPtrI10URLRequestENS_9allocatorIS3_EEED2Ev,__ZN6ObjPtrI10URLRequestED2Ev,__ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE6ObjPtrI10URLRequestENS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEED2Ev,b3,b3,b3,b3,b3,b3,__ZN14NavigationItemC2Ev,__ZNSt3__210__list_impIP6ObjectNS_9allocatorIS2_EEED2Ev,b3,b3,b3,b3
,b3,b3,__ZN6ObjPtrI5AtlasED2Ev,b3,b3,b3,_glCompileShader__wrapper,b3,b3,_glDeleteShader__wrapper,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN11RenderBatchC2Ev,b3,b3,__ZNSt3__25dequeIP4FontNS_9allocatorIS2_EEE19__add_back_capacityEv,__ZNSt3__25dequeIjNS_9allocatorIjEEE19__add_back_capacityEv,b3,b3,b3,__ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,__ZN7SurfaceC2Ev,__ZN10QuadBufferC2Ev,__emval_decref__wrapper,b3,b3,b3,b3,b3,b3,b3,b3,__emval_run_destructors__wrapper,b3,__emval_incref__wrapper,b3,b3,b3,b3,__ZN6BitmapC2Ev,b3,b3,__ZL21onImageLoadedFromDataP8OSBitmap,__ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEED2Ev,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,__ZN13NativeRequest11OnImageLoadEPS_,__ZN13NativeRequest7OnErrorEPS_,b3,b3,b3,b3,b3,__ZN4DataC2Ev,b3,b3,b3,b3,b3,__ZN10emscripten8internal7InvokerIvJEE6invokeEPFvvE,b3,__ZN10emscripten3valD2Ev,b3,__ZN7OSTimer8dispatchEPS_,__ZN6WindowC2Ev,b3,b3,b3,b3,b3,b3,b3,b3
,b3,__ZN4ViewC2Ev,__ZN5LabelC2Ev,__ZN8EditText11blinkCursorEv,b3,b3,b3,b3,b3,b3,b3,__ZN9ImageViewC2Ev,b3,b3,b3,b3,b3,b3,__ZN12TextRendererC2Ev,__ZN6Styles15defaultFontNameEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN8ListViewC2Ev
,b3,b3,b3,__ZN13NavigationBarC2Ev,__ZN9AnimationC2Ev,b3,b3,__ZN9SearchBoxC2Ev,b3,b3,b3,b3,b3,b3,__ZN16SegmentedControlC2Ev,b3,b3,b3,b3,b3,b3,b3,__Z10stringTrimRNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b3,b3,__ZN8RenderOp18rebatchIfNecessaryEv,b3,b3,b3,b3
,b3,b3,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_viiidii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN17RoundRectRenderOpC2EP4ViewjfjPf,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_vii = [b5,b5,b5,__ZN14ViewController7setViewEP4View,__ZN14ViewController14attachToWindowEP6Window,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN18MainViewController18onCellStateChangedER4Cell,b5,b5,b5,__ZThn24_N18MainViewController18onCellStateChangedER4Cell,b5,b5,b5,__ZNKSt3__210__function6__funcIZN18MainViewControllerC1EvEUlP4Viewii6_POINTE_NS_9allocatorIS6_EEFbS4_iiS5_EE7__cloneEPNS0_6__baseIS9_EE,b5,b5,b5,b5,b5
,b5,b5,__ZN4View20setUsePrivateSurfaceEb,__ZN4View20updatePrivateSurfaceEb,b5,b5,__ZN4View16setContentOffsetE6_POINT,__ZN4View15setScrollInsetsE11_EDGEINSETS,b5,b5,b5,b5,__ZN4View9getBoundsEv,__ZN4View20getBoundsWithPaddingEv,__ZN4View10setPaddingE11_EDGEINSETS,b5,b5,b5,b5,b5,b5,b5,__ZN4View10setGravityE7GRAVITY,b5,b5,b5,__ZN4View13setVisibilityEi,__ZN4View14attachToWindowEP6Window,b5,__ZN4View13setBackgroundEP8RenderOp
,b5,__ZN4View19setBackgroundColourEj,b5,__ZN4View10addSubviewEPS_,b5,__ZN4View13removeSubviewEPS_,b5,b5,b5,b5,__ZN4View11addRenderOpEP8RenderOp,b5,__ZN4View14removeRenderOpEP8RenderOp,__ZN4View13setTintColourEj,b5,__ZN4View14invalidateRectERK4RECT,__ZN4View8setStateE8STATESET,__ZN4View14onStateChangedE8STATESET,b5,__ZN4View10setPressedEb,__ZN4View10setEnabledEb,b5,b5,b5,b5,b5,b5,b5,b5,b5
,__ZN4View16setAnimTranslateE6_POINT,__ZN4View16applyStyleValuesERKNSt3__26vectorINS0_4pairINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP10StyleValueEENS6_ISB_EEEE,b5,b5,b5,b5,b5,__ZNKSt3__210__function6__funcIZN8GameView12onTouchEventEii6_POINTE3__0NS_9allocatorIS4_EEFvvEE7__cloneEPNS0_6__baseIS7_EE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN9Animation4tickEl,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,__ZN6Bitmap23readSelfFromKeyValueMapEPK11KeyValueMap,__ZN6Bitmap22writeSelfToKeyValueMapEP11KeyValueMap,__ZThn8_N6Bitmap23readSelfFromKeyValueMapEPK11KeyValueMap,__ZThn8_N6Bitmap22writeSelfToKeyValueMapEP11KeyValueMap,b5,b5,b5,b5,b5,__ZN10QuadBuffer6resizeEi,b5,__ZN8ItemPool6resizeEi,b5,b5,b5,b5,b5,b5,__ZN8RenderOp7setRectERK4RECT,b5,b5,__ZN8RenderOp7asQuadsEP5_QUAD
,b5,b5,__ZN8RenderOp9setColourEj,b5,b5,b5,__ZN17RenderOpMultiRect7asQuadsEP5_QUAD,b5,b5,__ZN12BlurRenderOp7setRectERK4RECT,b5,__ZN12BlurRenderOp7asQuadsEP5_QUAD,b5,b5,b5,__ZN9GLProgram3useEP6Window,b5,b5,__ZN9GLProgram6setMvpERK7Matrix4,b5,__ZN13GLProgramBlur12setTexOffsetE6_POINT,b5,b5,b5,b5,b5,b5,__ZN14CachedUniform2IiE3setEi,b5,b5
,b5,b5,b5,b5,__ZN17RoundRectRenderOp7setRectERK4RECT,b5,__ZN17RoundRectRenderOp7asQuadsEP5_QUAD,__ZN17RoundRectRenderOp15setStrokeColourEj,b5,b5,b5,b5,b5,b5,b5,b5,__ZN21GLProgramRoundRectTwo8setRadiiEPf,b5,b5,__ZN14CachedUniform2I7Vector4E3setES0_,b5,b5,b5,b5,b5,__ZN12TextRenderOp7asQuadsEP5_QUAD,b5,b5,b5,b5
,b5,__ZN20SimpleBitmapProvider11addCallbackEPN14BitmapProvider8CallbackE,__ZN20SimpleBitmapProvider14removeCallbackEPN14BitmapProvider8CallbackE,b5,b5,b5,__ZN19AsyncBitmapProvider11addCallbackEPN14BitmapProvider8CallbackE,__ZN19AsyncBitmapProvider14removeCallbackEPN14BitmapProvider8CallbackE,b5,b5,b5,b5,__ZN15TextureRenderOp7asQuadsEP5_QUAD,b5,__ZN15TextureRenderOp9setColourEj,__ZN15TextureRenderOp10setTexRectERK4RECT,__ZN15TextureRenderOp9setBitmapEP6Bitmap,__ZN15TextureRenderOp17setBitmapProviderEP14BitmapProvider,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,__ZNKSt3__210__function6__funcIZN19AsyncBitmapProviderC1EPKcE3__0NS_9allocatorIS5_EEFvP6BitmapEE7__cloneEPNS0_6__baseISA_EE,b5,b5,__ZNSt3__210__function6__funcIZN19AsyncBitmapProviderC1EPKcE3__0NS_9allocatorIS5_EEFvP6BitmapEEclEOS9_,b5,b5,b5,b5,__ZNKSt3__210__function6__funcIZN15TextureRenderOpC1EP4ViewPKciE3__1NS_9allocatorIS7_EEFvP6BitmapEE7__cloneEPNS0_6__baseISC_EE,b5,b5,__ZNSt3__210__function6__funcIZN15TextureRenderOpC1EP4ViewPKciE3__1NS_9allocatorIS7_EEFvP6BitmapEEclEOSB_,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,__ZN6Window21setRootViewControllerEP14ViewController,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__210__function6__funcIZN6Window13MotionTracker18dispatchInputEventEil6_POINTPS2_E3__0NS_9allocatorIS6_EEFvvEE7__cloneEPNS0_6__baseIS9_EE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,__ZN5Label10setGravityE7GRAVITY,b5,__ZN6Button16applyStyleValuesERKNSt3__26vectorINS0_4pairINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP10StyleValueEENS6_ISB_EEEE,b5,b5,__ZN5Label7setTextERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b5,__ZN5Label13setTextColourEj,__ZN5Label7setFontEP4Font,__ZN5Label11setMaxLinesEi,__ZN5Label8setStyleENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b5,b5,b5,b5,b5,b5,b5,__ZN8EditText10setPaddingE11_EDGEINSETS,b5,b5,b5,b5,b5,b5,__ZN8EditText7setTextENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__210__function6__funcINS_6__bindIM8EditTextFvvEJPS3_EEENS_9allocatorIS7_EEFvvEE7__cloneEPNS0_6__baseISA_EE,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN9ImageView14attachToWindowEP6Window,b5,b5,__ZN9ImageView16onUrlRequestLoadEP7URLData
,__ZThn324_N9ImageView16onUrlRequestLoadEP7URLData,b5,b5,b5,b5,b5,b5,__ZN12LinearLayout10addSubviewEP4View,__ZN12LinearLayout13removeSubviewEP4View,b5,b5,b5,b5,b5,__ZN8ListView16setContentOffsetE6_POINT,b5,b5,__ZN8ListView13removeSubviewEP4View,b5,__ZN8ListView10setAdapterEP12IListAdapter,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN13NavigationBar13setBackgroundEP8RenderOp
,__ZN13NavigationBar19setBackgroundColourEj,__ZN13NavigationBar17addNavigationItemEP14NavigationItem,__ZN13NavigationBar20removeNavigationItemEP14NavigationItem,__ZN13NavigationBar14setBlurEnabledEb,b5,b5,b5,b5,b5,b5,b5,__ZN9SearchBox10setPaddingE11_EDGEINSETS,b5,b5,__ZN9SearchBox7setTextENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZN9SearchBox28setSearchTextChangedDelegateENSt3__28functionIFvPS_RKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEEEE,b5,b5,b5,__ZNKSt3__210__function6__funcIZN9SearchBox20becomeFirstResponderEvE3__0NS_9allocatorIS3_EEFvfEE7__cloneEPNS0_6__baseIS6_EE,b5,b5,__ZNSt3__210__function6__funcIZN9SearchBox20becomeFirstResponderEvE3__0NS_9allocatorIS3_EEFvfEEclEOf,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,__ZN16SegmentedControl10addSegmentERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZN16SegmentedControl13setTextColourEj,__ZN16SegmentedControl21setSelectedTextColourEj,__ZN16SegmentedControl26setSegmentSelectedDelegateENSt3__28functionIFviEEE,__ZN16SegmentedControl12onSegmentTapEi,__ZN16SegmentedControl18setSelectedSegmentEi,__ZN16SegmentedControl15setPressedIndexEi,b5,b5,b5,b5,__ZNKSt3__210__function6__funcIZN4View12animateAlphaEffE3__2NS_9allocatorIS3_EEFvP9AnimationEE7__cloneEPNS0_6__baseIS8_EE,b5,b5,__ZNSt3__210__function6__funcIZN4View12animateAlphaEffE3__2NS_9allocatorIS3_EEFvP9AnimationEEclEOS7_,b5,b5,b5,b5,__ZNKSt3__210__function6__funcIZN4View16updateScrollbarsEvE3__1NS_9allocatorIS3_EEFvvEE7__cloneEPNS0_6__baseIS6_EE,b5,b5,b5,b5,b5,b5,b5
,__ZNKSt3__210__function6__funcIZN4View19scrollStartFadeAnimEfE3__0NS_9allocatorIS3_EEFvfEE7__cloneEPNS0_6__baseIS6_EE,b5,b5,__ZNSt3__210__function6__funcIZN4View19scrollStartFadeAnimEfE3__0NS_9allocatorIS3_EEFvfEEclEOf,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN19AsyncBitmapProviderC2EPKc,b5,b5,b5,b5,b5,__ZN8GameView7setGameEP4Game,b5,b5,__ZN14ClassRegistrarI8GameViewEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b5,b5,b5,b5,__ZN15TextureRenderOpC2EP4View
,b5,b5,b5,b5,__ZN12Utf8IteratorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b5,b5,b5,__ZN12Utf8Iterator15nextToEndOfLineEv,b5,b5,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__Z21stringAppendCodepointRNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEDi,b5,b5,b5,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_,__ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP14StyleValueUberEENS5_ISA_EEE21__push_back_slow_pathISA_EEvOT_,__ZNSt11logic_errorC2EPKc
,b5,b5,__Z13stringFromInti,b5,b5,b5,b5,b5,b5,b5,__ZN12Utf8IteratorC2EPK4Data,b5,b5,__ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10StyleValueEENS5_ISA_EEE21__push_back_slow_pathIRKSA_EEvOT_,b5,b5,b5,b5,b5,__ZNSt3__26vectorIP19IURLRequestDelegateNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_,b5,b5,b5,__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_15__list_iteratorIN8MruCacheIS7_E5ENTRYEPvEEEENS_22__unordered_map_hasherIS7_SE_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SE_NS_8equal_toIS7_EELb1EEENS5_ISE_EEE6rehashEj,b5,b5,b5,b5,b5,_glDeleteTextures__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__26vectorI4RECTNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_,b5,b5,b5,b5,b5,b5,b5,b5,__ZN8ItemPool4freeEPNS_5AllocE,__ZN8RenderOp11surfaceRectEv,b5,__ZN6REGION7addRectE4RECT,__ZN6Window19glEnableScissorTestEb,b5,b5,__ZN7Surface14removeRenderOpEP8RenderOp,__ZN7Surface11addRenderOpEP8RenderOp,_glDeleteFramebuffers__wrapper,b5
,_glGetIntegerv__wrapper,_glGenTextures__wrapper,_glBindTexture__wrapper,b5,_glGenFramebuffers__wrapper,_glBindFramebuffer__wrapper,b5,b5,b5,__ZN8RenderOp12setBlendModeEi,b5,b5,__ZNSt3__26vectorIN12TextRenderer8TEXTLINEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_,b5,b5,b5,b5,__ZNSt3__26vectorIN12TextRenderer9GLYPHINFOENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_,b5,b5,__ZNSt3__214__split_bufferIPP4FontRNS_9allocatorIS3_EEE9push_backEOS3_,__ZNSt3__214__split_bufferIPP4FontRNS_9allocatorIS3_EEE10push_frontERKS3_,__ZNSt3__214__split_bufferIPjRNS_9allocatorIS1_EEE9push_backEOS1_,__ZNSt3__214__split_bufferIPjRNS_9allocatorIS1_EEE10push_frontERKS1_,b5,b5,b5,b5,__ZNSt3__26vectorI6ObjPtrI9AtlasPageENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_,__ZNSt3__26vectorI6ObjPtrI9AtlasNodeENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,__ZN7URLDataC2EP6Bitmap,__ZN10URLRequest14dispatchOnLoadEP7URLData,b5,__ZN7URLDataC2EP4Data,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,b5,b5,__ZN14ClassRegistrarI6ButtonEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,__ZN14ClassRegistrarI13ToolbarButtonEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b5
,b5,b5,b5,b5,b5,b5,__ZN21ColorRectFillRenderOpC2EP4View,__ZN14ClassRegistrarI8EditTextEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b5,__ZN14ClassRegistrarI9ImageViewEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b5,b5,__ZN6Styles9getStringERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b5,b5,__ZNSt3__26vectorIcNS_9allocatorIcEEE8__appendEj,__ZN14ClassRegistrarI5LabelEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b5,b5,b5,b5,__ZN12TextRenderer14setDefaultFontEP4Font,__ZN12TextRenderer16setDefaultColourEj,__ZN12TextRenderer10setGravityE7GRAVITY,__ZN14ClassRegistrarI12LinearLayoutEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b5,b5,__ZN14ClassRegistrarI8ListViewEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b5,b5
,__ZN12BlurRenderOpC2EP4View,__ZN14ClassRegistrarI13NavigationBarEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b5,b5,b5,__ZN14ClassRegistrarI9SearchBoxEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b5,b5,__ZN12TextRenderer7setTextERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b5,__ZNSt3__26vectorIN16SegmentedControl7SegmentENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_,__ZNSt3__26vectorIN16SegmentedControl7SegmentENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE,__ZN14ClassRegistrarI16SegmentedControlEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b5,b5,b5,__ZN7SurfaceC2EP4View,__ZN9ScrollbarC2EP4View,__ZNSt3__26vectorINS_4pairI6ObjPtrI8RenderOpE8STATESETEENS_9allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_,b5,b5,__ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10StyleValueEENS5_ISA_EEE21__push_back_slow_pathISA_EEvOT_,b5,b5,__ZNSt3__214__split_bufferI6ObjPtrI4ViewERNS_9allocatorIS3_EEE9push_backEOS3_,b5,__ZN14ClassRegistrarI4ViewEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b5,b5,__ZNSt13runtime_errorC2EPKc
,__ZNSt3__218__libcpp_refstringC2EPKc,b5,b5,b5,_abort_message,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_ii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__210__function6__funcIZN18MainViewControllerC1EvEUlP4Viewii6_POINTE_NS_9allocatorIS6_EEFbS4_iiS5_EE7__cloneEv,b6,b6,b6,b6,b6,__ZNKSt3__210__function6__funcIZN18MainViewControllerC1EvEUlP4Viewii6_POINTE_NS_9allocatorIS6_EEFbS4_iiS5_EE11target_typeEv
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN4View9isPressedEv,b6,b6,__ZN4View11isTouchableEv,b6,b6,b6,__ZN4View23getKeyboardInputHandlerEv,__ZN4View20becomeFirstResponderEv,__ZN4View16isFirstResponderEv,b6,b6
,b6,b6,b6,b6,b6,b6,__ZNKSt3__210__function6__funcIZN8GameView12onTouchEventEii6_POINTE3__0NS_9allocatorIS4_EEFvvEE7__cloneEv,b6,b6,b6,b6,b6,__ZNKSt3__210__function6__funcIZN8GameView12onTouchEventEii6_POINTE3__0NS_9allocatorIS4_EEFvvEE11target_typeEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,__ZNKSt9exception4whatEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN8RenderOp8numQuadsEv,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,__ZN17RenderOpMultiRect8numQuadsEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,__ZNK20SimpleBitmapProvider9getBitmapEv,b6,b6,b6,b6,__ZNK19AsyncBitmapProvider9getBitmapEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,__ZNKSt3__210__function6__funcIZN19AsyncBitmapProviderC1EPKcE3__0NS_9allocatorIS5_EEFvP6BitmapEE7__cloneEv,b6,b6,b6,b6,b6,__ZNKSt3__210__function6__funcIZN19AsyncBitmapProviderC1EPKcE3__0NS_9allocatorIS5_EEFvP6BitmapEE11target_typeEv,b6,__ZNKSt3__210__function6__funcIZN15TextureRenderOpC1EP4ViewPKciE3__1NS_9allocatorIS7_EEFvP6BitmapEE7__cloneEv,b6,b6,b6,b6,b6,__ZNKSt3__210__function6__funcIZN15TextureRenderOpC1EP4ViewPKciE3__1NS_9allocatorIS7_EEFvP6BitmapEE11target_typeEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__210__function6__funcIZN6Window13MotionTracker18dispatchInputEventEil6_POINTPS2_E3__0NS_9allocatorIS6_EEFvvEE7__cloneEv,b6,b6,b6,b6,b6,__ZNKSt3__210__function6__funcIZN6Window13MotionTracker18dispatchInputEventEil6_POINTPS2_E3__0NS_9allocatorIS6_EEFvvEE11target_typeEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,__ZN5Label7getTextEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN8EditText23getKeyboardInputHandlerEv,__ZN8EditText20becomeFirstResponderEv,b6,b6
,b6,b6,__ZN8EditText13getTextLengthEv,__ZN8EditText17getSelectionStartEv,__ZN8EditText17getInsertionPointEv,b6,b6,b6,b6,__ZThn444_N8EditText13getTextLengthEv,__ZThn444_N8EditText17getSelectionStartEv,__ZThn444_N8EditText17getInsertionPointEv,b6,b6,b6,__ZNKSt3__210__function6__funcINS_6__bindIM8EditTextFvvEJPS3_EEENS_9allocatorIS7_EEFvvEE7__cloneEv,b6,b6,b6,b6,b6,__ZNKSt3__210__function6__funcINS_6__bindIM8EditTextFvvEJPS3_EEENS_9allocatorIS7_EEFvvEE11target_typeEv,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,__ZN9Scrollbar19computeScrollOffsetEv,b6,b6,b6,b6,b6,b6,b6,__ZN9SearchBox20becomeFirstResponderEv,b6,b6,b6,b6,__ZNKSt3__210__function6__funcIZN9SearchBox20becomeFirstResponderEvE3__0NS_9allocatorIS3_EEFvfEE7__cloneEv,b6,b6,b6,b6,b6,__ZNKSt3__210__function6__funcIZN9SearchBox20becomeFirstResponderEvE3__0NS_9allocatorIS3_EEFvfEE11target_typeEv,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__210__function6__funcIZN4View12animateAlphaEffE3__2NS_9allocatorIS3_EEFvP9AnimationEE7__cloneEv,b6,b6,b6,b6,b6,__ZNKSt3__210__function6__funcIZN4View12animateAlphaEffE3__2NS_9allocatorIS3_EEFvP9AnimationEE11target_typeEv,b6,__ZNKSt3__210__function6__funcIZN4View16updateScrollbarsEvE3__1NS_9allocatorIS3_EEFvvEE7__cloneEv,b6,b6,b6,b6,b6,__ZNKSt3__210__function6__funcIZN4View16updateScrollbarsEvE3__1NS_9allocatorIS3_EEFvvEE11target_typeEv,b6,__ZNKSt3__210__function6__funcIZN4View19scrollStartFadeAnimEfE3__0NS_9allocatorIS3_EEFvfEE7__cloneEv
,b6,b6,b6,b6,b6,__ZNKSt3__210__function6__funcIZN4View19scrollStartFadeAnimEfE3__0NS_9allocatorIS3_EEFvfEE11target_typeEv,___stdio_close,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt9bad_alloc4whatEv,b6,b6,__ZNKSt11logic_error4whatEv
,b6,b6,__ZNKSt13runtime_error4whatEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN6ObjectnwEj,b6,b6,b6,__Znwj,__ZN6Styles13layoutInflateERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN12Utf8Iterator4nextEv,__ZN12Utf8Iterator4peekEv,b6,b6,b6,b6,__Z14stringParseIntRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b6,b6,b6,b6,b6,b6,b6,b6,b6
,__ZN14StyleValueUber6selectEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__Z9DYNCREATERKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN4RECT7isEmptyEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,__emval_new_cstring__wrapper,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__emval_get_global__wrapper,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN6Styles9getColourERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN6Styles7getFontERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_ddddd = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__Z6linearffff,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_viiiiiiiiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN10emscripten8internal12MethodCallerIvJiiRiS2_S2_iS2_S2_RNS_3valEEE4callEPNS0_7_EM_VALEPKcOiSA_S2_S2_S2_SA_S2_S2_S4_,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iiiiii = [b9,b9,b9,b9,b9,b9,__ZN14ViewController18dispatchTouchEventEiil6_POINT,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNSt3__210__function6__funcIZN18MainViewControllerC1EvEUlP4Viewii6_POINTE_NS_9allocatorIS6_EEFbS4_iiS5_EEclEOS4_OiSC_OS5_,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN4View18dispatchInputEventEiil6_POINT,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viiidd = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,__Z16MEASURESPEC_MakeiP4Viewff,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_viddi = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,__ZN9Scrollbar11startScrollEffi,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11];
var FUNCTION_TABLE_vidd = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZN4View7measureEff,b12,b12,__ZN8GameView17updateContentSizeEff,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZN4View12animateAlphaEff
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,__ZN5Label17updateContentSizeEff,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZN4View17updateContentSizeEff,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,__ZN12LinearLayout7measureEff,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZN8ListView7measureEff,__ZN8ListView17updateContentSizeEff,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,__ZN9Scrollbar11startScrollEff,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZN16SegmentedControl7measureEff
,b12,__ZN16SegmentedControl17updateContentSizeEff,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__Z10POINT_Makeff,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_iiii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN4View7hitTestE6_POINTPS0_,b13,b13,b13,b13,b13,b13,b13
,b13,b13,__ZN4View15applyStyleValueERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP10StyleValue,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN7WebFont11createGlyphEDiP5Atlas,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,__ZN6Button15applyStyleValueERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP10StyleValue,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN5Label15applyStyleValueERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP10StyleValue,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN12LinearLayout15applyStyleValueERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP10StyleValue,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN8ListView11indexToViewEx,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,___stdio_write,___stdio_seek,___stdout_write,_sn_write,b13,b13,b13,b13,b13,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN5Timer5startERKNSt3__28functionIFvvEEEib,b13,b13,__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFP4ViewvEEENS_19__map_value_compareIS7_SC_NS_4lessIS7_EELb1EEENS5_ISC_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISN_EERKT_,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__Z14stringEndsWithRNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKS5_b,b13,b13,__Z16stringStartsWithRNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKS5_b,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZL20findContainedCornersRK4RECTS1_R7CORNERS,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__Z15oakBitmapCreateiii,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISJ_EERKT_
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEjj,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__26vectorI6ObjPtrI4ViewENS_9allocatorIS3_EEE6insertENS_11__wrap_iterIPKS3_EEOS3_,b13,b13,b13,b13,b13,b13,b13,b13,___stdio_read,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13];
var FUNCTION_TABLE_viiiiiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN10emscripten8internal12MethodCallerIvJiiRiS2_S2_RNS_3valEEE4callEPNS0_7_EM_VALEPKcOiSA_S2_S2_S2_S4_,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14];
var FUNCTION_TABLE_diii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__emval_as__wrapper,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15];
var FUNCTION_TABLE_viiiiidd = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN8ListView14createItemViewExbff,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16];
var FUNCTION_TABLE_di = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__Z17stringParseDoubleRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNK4RECT4leftEv,__ZNK4RECT3topEv,b17,__ZNK4RECT6bottomEv,__ZNK4RECT5rightEv,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZN6Styles8getFloatERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__Z20stringParseDimensionNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17];
var FUNCTION_TABLE_vidddd = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,__ZN9Scrollbar5flingEffff,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__Z9RECT_Makeffff,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18];
var FUNCTION_TABLE_iid = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,__Z10oakFontGetRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEf,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19];
var FUNCTION_TABLE_viiddd = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,__Z14ALIGNSPEC_MakeP4Viewfff,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20];
var FUNCTION_TABLE_viiiiiii = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,__ZN10emscripten8internal12MethodCallerIvJRNS_3valES2_S2_S2_S2_EE4callEPNS0_7_EM_VALEPKcS3_OS2_S9_S9_S9_,__ZN10emscripten8internal12MethodCallerINS_3valEJS2_S2_S2_S2_EE4callEPNS0_7_EM_VALEPKcOS2_S8_S8_S8_,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21];
var FUNCTION_TABLE_iii = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__210__function6__funcIZN18MainViewControllerC1EvEUlP4Viewii6_POINTE_NS_9allocatorIS6_EEFbS4_iiS5_EE6targetERKSt9type_info,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZN4View22subviewContainingPointE6_POINT,__ZN4View29indexOfSubviewContainingPointE6_POINT,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,__ZN4View14indexOfSubviewEPS_,b22,__ZN4View12findViewByIdERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__210__function6__funcIZN8GameView12onTouchEventEii6_POINTE3__0NS_9allocatorIS4_EEFvvEE6targetERKSt9type_info,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,__ZN4Data18readSelfFromStreamEP6Stream,__ZN4Data17writeSelfToStreamEP6Stream,__ZThn8_N4Data18readSelfFromStreamEP6Stream,__ZThn8_N4Data17writeSelfToStreamEP6Stream,__ZN11KeyValueMap7Variant18readSelfFromStreamEP6Stream,__ZN11KeyValueMap7Variant17writeSelfToStreamEP6Stream,b22,b22,__ZN11KeyValueMap18readSelfFromStreamEP6Stream,__ZN11KeyValueMap17writeSelfToStreamEP6Stream,__ZThn8_N11KeyValueMap18readSelfFromStreamEP6Stream,__ZThn8_N11KeyValueMap17writeSelfToStreamEP6Stream,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZN8RenderOp12canMergeWithEPKS_,b22,b22,__ZN8RenderOp10intersectsEPS_,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,__ZN17RoundRectRenderOp12canMergeWithEPK8RenderOp,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZN12TextRenderOp12canMergeWithEPK8RenderOp,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZN15TextureRenderOp12canMergeWithEPK8RenderOp,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,__ZNKSt3__210__function6__funcIZN19AsyncBitmapProviderC1EPKcE3__0NS_9allocatorIS5_EEFvP6BitmapEE6targetERKSt9type_info,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__210__function6__funcIZN15TextureRenderOpC1EP4ViewPKciE3__1NS_9allocatorIS7_EEFvP6BitmapEE6targetERKSt9type_info,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,__ZN6Window17setFirstResponderEP4View,b22,b22,b22,b22,b22,b22,__ZNKSt3__210__function6__funcIZN6Window13MotionTracker18dispatchInputEventEil6_POINTPS2_E3__0NS_9allocatorIS6_EEFvvEE6targetERKSt9type_info,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__210__function6__funcINS_6__bindIM8EditTextFvvEJPS3_EEENS_9allocatorIS7_EEFvvEE6targetERKSt9type_info,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__210__function6__funcIZN9SearchBox20becomeFirstResponderEvE3__0NS_9allocatorIS3_EEFvfEE6targetERKSt9type_info,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__210__function6__funcIZN4View12animateAlphaEffE3__2NS_9allocatorIS3_EEFvP9AnimationEE6targetERKSt9type_info,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__210__function6__funcIZN4View16updateScrollbarsEvE3__1NS_9allocatorIS3_EEFvvEE6targetERKSt9type_info,b22,b22,b22
,b22,b22,b22,b22,__ZNKSt3__210__function6__funcIZN4View19scrollStartFadeAnimEfE3__0NS_9allocatorIS3_EEFvfEE6targetERKSt9type_info,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,__ZN8StyleMap5parseER12Utf8Iterator,b22,b22,b22,__Z17stringIndexOfCharRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEDi,b22,b22,b22,b22,b22,b22,b22,__Z18stringContainsCharRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEDi,b22,b22,b22,b22,b22,b22,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_,__ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP14StyleValueUberNS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEixERSC_,b22,b22,b22,b22
,b22,__ZN8StyleMap8getValueERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b22,b22,b22,b22,__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP4FontEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE4findIS7_EENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEEiEERKT_,b22,__ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP4FontNS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEixERSC_,b22,b22,__ZL19inflateFromResourceNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10StyleValueEEP4View,b22,b22,b22,b22,b22,b22,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,b22,b22,__ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_15__list_iteratorIN8MruCacheIS6_E5ENTRYEPvEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SC_EEEEEixERSI_,__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_15__list_iteratorIN8MruCacheIS7_E5ENTRYEPvEEEENS_22__unordered_map_hasherIS7_SE_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SE_NS_8equal_toIS7_EELb1EEENS5_ISE_EEE14__erase_uniqueIS7_EEjRKT_,b22,b22,b22,b22,b22,b22,b22
,__ZNK11KeyValueMap6getIntERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b22,b22,b22,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc,b22,b22,b22,b22,b22,b22,b22,__ZNK4RECT10intersectsERKS_,b22,b22,b22,b22,b22,b22,b22,b22,__ZN6REGION10intersectsE4RECT,b22,b22,b22,b22,b22,b22,b22,_glGetUniformLocation__wrapper,b22,b22,b22,b22,b22,b22,b22,__ZN3App9loadAssetEPKc,b22,b22,b22,b22,b22,b22,b22,__ZN4Font8getGlyphEDi,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,__emval_take_value__wrapper,b22,b22,b22,__emval_get_property__wrapper,b22,b22,__emval_get_method_caller__wrapper,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22];
var FUNCTION_TABLE_dii = [b23];
var FUNCTION_TABLE_viiiiii = [b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,__ZN6Window18dispatchInputEventEiilii,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b24,b24,b24,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN11KeyValueMap7VariantEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE25__emplace_unique_key_argsIS7_JRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSL_IJEEEEEENS_4pairINS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEEiEEbEERKT_DpOT0_,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZN15TextureRenderOpC2EP4ViewRK4RECTP6BitmapPS3_j,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24];
var FUNCTION_TABLE_d = [b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZN6Styles15defaultFontSizeEv,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25];
var FUNCTION_TABLE_did = [b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZN3App2dpEf,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26];
var FUNCTION_TABLE_iiiii = [b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZN8GameView12onTouchEventEii6_POINT,b27,b27,b27,b27,b27
,b27,b27,b27,__ZN4View24applyStyleValueFromChildERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP10StyleValuePS_,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,__ZN6Button12onTouchEventEii6_POINT,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZN13ToolbarButton12onTouchEventEii6_POINT,b27,b27,b27,b27,b27,b27,__ZN8EditText12onTouchEventEii6_POINT,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZN4View12onTouchEventEii6_POINT,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZN12LinearLayout24applyStyleValueFromChildERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP10StyleValueP4View,b27,b27,b27,b27,b27,b27,b27,__ZN8ListView12onTouchEventEii6_POINT,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,__ZN16SegmentedControl12onTouchEventEii6_POINT,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__emval_new__wrapper,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,__ZN5Atlas7reserveEiii,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKcj,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27];
var FUNCTION_TABLE_i = [b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZN14ClassRegistrarI8GameViewE7createTEv,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZN14ClassRegistrarI6ButtonE7createTEv
,__ZN14ClassRegistrarI13ToolbarButtonE7createTEv,b28,b28,b28,b28,b28,b28,b28,__ZN14ClassRegistrarI8EditTextE7createTEv,b28,__ZN14ClassRegistrarI9ImageViewE7createTEv,b28,b28,b28,b28,b28,b28,__ZN14ClassRegistrarI5LabelE7createTEv,b28,b28,b28,b28,b28,b28,b28,__ZN14ClassRegistrarI12LinearLayoutE7createTEv,b28,b28,__ZN14ClassRegistrarI8ListViewE7createTEv,b28
,b28,b28,__ZN14ClassRegistrarI13NavigationBarE7createTEv,b28,b28,b28,__ZN14ClassRegistrarI9SearchBoxE7createTEv,b28,b28,b28,b28,b28,b28,__ZN14ClassRegistrarI16SegmentedControlE7createTEv,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZN14ClassRegistrarI4ViewE7createTEv,b28,b28
,b28,b28,b28,___cxa_get_globals_fast,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28];
var FUNCTION_TABLE_viiid = [b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,__ZN6Window13resizeSurfaceEiif,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29];
var FUNCTION_TABLE_viii = [b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN4View15setMeasureSpecsE12_MEASURESPECS0_,__ZN4View13setAlignSpecsE10_ALIGNSPECS0_,b30,b30,b30,b30,b30,b30,__ZN4View16mapPointToWindowE6_POINT,b30,b30,b30,b30,b30,b30
,__ZN4View13setBackgroundEP8RenderOp8STATESET,b30,b30,b30,__ZN4View13insertSubviewEPS_i,b30,b30,b30,b30,b30,b30,__ZN4View11addRenderOpEP8RenderOpb,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN9Animation5startEP6Windowi,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN8RenderOp6renderEP6WindowP7Surface,b30,b30
,__ZN8RenderOp17rectToSurfaceQuadE4RECTP5_QUAD,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN12BlurRenderOp6renderEP6WindowP7Surface,b30,b30,b30,b30,b30,b30,b30,b30,__ZN9GLProgram11loadShadersEPKcS1_,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,__ZN17RoundRectRenderOp6renderEP6WindowP7Surface,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN12TextRenderOp6renderEP6WindowP7Surface,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN15TextureRenderOp6renderEP6WindowP7Surface,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN22PrivateSurfaceRenderOp6renderEP6WindowP7Surface,__ZN22PrivateSurfaceRenderOp17rectToSurfaceQuadE4RECTP5_QUAD,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,__ZN6Window12offsetToViewEP4View,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN8OSBitmap4lockEP9PIXELDATAb,__ZN8OSBitmap6unlockEP9PIXELDATAb,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN5Label7setTextEPKcz,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,__ZN8EditText16setSelectedRangeEii,b30,b30,b30,b30,b30,__ZThn444_N8EditText16setSelectedRangeEii,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN8ListView16setSelectedIndexEx,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,__ZN3App3logEPKcz,b30,b30,b30,__Z15stringSubstringRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN14StyleValueUber8setValueERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP10StyleValue,b30,b30,b30
,b30,b30,b30,b30,__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,b30,b30,b30
,b30,__ZN11KeyValueMap6setIntERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,b30,b30,b30,b30,b30,_glGetShaderiv__wrapper,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,_glTexParameteri__wrapper,b30,b30,b30,b30,__Z23oakBitmapCreateFromDataPKviNSt3__28functionIFvP6BitmapEEE,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN12TextRenderOpC2EP4ViewP17_TEXTRENDERPARAMS,__ZN12TextRenderOp8addGlyphEP5GlyphRK4RECT,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,__emval_set_property__wrapper,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN10emscripten3val3setIA6_cfEEvRKT_RKT0_,__ZN10emscripten3val3setIA7_cfEEvRKT_RKT0_,b30,b30,__Z13base64_encodePKcj,b30
,b30,__ZN7WebFont15setGlyphMetricsEPS_P5Glyphi,b30,b30,b30,b30,b30,__ZN8OSBitmapC2EN10emscripten3valEb,b30,b30,b30,b30,b30,__ZL17oak_setWindowSizeiii,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,___cxa_throw__wrapper,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30];
var FUNCTION_TABLE_v = [b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,___cxa_pure_virtual__wrapper,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,__ZL25default_terminate_handlerv,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,__ZL7appMainv,b31,b31,b31,b31,__Z14oakMessageLoopv,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b31,b31,b31,___cxa_end_catch__wrapper,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31];
var FUNCTION_TABLE_viid = [b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,__ZN12LinearLayout9setWeightEP4Viewf,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,__ZN7WebFontC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEf,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,__ZN14AlphaAnimationC2EP4Viewf,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32];
var FUNCTION_TABLE_viiii = [b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZN9Animation5startEP6Windowii,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,__ZN8EditText10insertTextENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEii,b33,b33,b33,b33,__ZN8EditText11textInRangeEii,b33,__ZThn444_N8EditText10insertTextENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEii,b33,b33,b33,b33,b33,__ZThn444_N8EditText11textInRangeEii,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZN8ListView9onItemTapEP4Viewx,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b33,b33,b33,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b33,b33,b33,b33,b33,b33,b33,b33,__ZN4GameC2EPNS_8CallbackEii,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__Z15stringSubstringRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEii,b33,b33,b33,b33,b33,b33,b33,b33,b33,___assert_fail__wrapper,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZN10URLRequestC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP19IURLRequestDelegatei,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,__ZN5AtlasC2Eiii,b33,_glShaderSource__wrapper,b33,b33,_glGetShaderInfoLog__wrapper,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,_glScissor__wrapper,_glDrawElements__wrapper,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZNSt3__26__treeI17_TEXTRENDERPARAMSNS_4lessIS1_EENS_9allocatorIS1_EEE25__emplace_unique_key_argsIS1_JRKS1_EEENS_4pairINS_15__tree_iteratorIS1_PNS_11__tree_nodeIS1_PvEEiEEbEERKT_DpOT0_,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZN9AtlasPageC2Eiii,b33,b33
,b33,b33,b33,b33,__ZN10emscripten8internal12MethodCallerINS_3valEJS2_EE4callEPNS0_7_EM_VALEPKcOS2_,b33,b33,b33,b33,b33,b33,b33,b33,b33,__emval_call_void_method__wrapper,b33,b33,__ZN8OSBitmapC2Eiii,b33,b33,b33,b33,b33,b33,b33,b33,b33,__Z17stringExtractUpToRNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKS5_b,b33,b33
,__ZN5GlyphC2EP4FontDit,b33,b33,b33,b33,__ZN13NativeRequest10OnProgressEPS_iii,__ZN13NativeRequest6OnDoneEPS_Phii,b33,b33,b33,b33,b33,__ZN10emscripten8internal7InvokerIvJiiiEE6invokeEPFviiiEiii,b33,b33,__ZL13oak_userEventiiii,b33,b33,b33,__ZN5TimerC2ERKNSt3__28functionIFvvEEEib,b33,b33,b33,b33,b33,b33,__ZN21ColorRectFillRenderOpC2EP4ViewRK4RECTj,b33,b33,b33
,b33,b33,b33,b33,b33,__ZN15TextureRenderOpC2EP4ViewPKci,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33];

  return { _bitshift64Lshr: _bitshift64Lshr, dynCall_viiiiidd: dynCall_viiiiidd, dynCall_viiiiiiiiiii: dynCall_viiiiiiiiiii, _sbrk: _sbrk, _memcpy: _memcpy, __GLOBAL__sub_I_edittext_cpp: __GLOBAL__sub_I_edittext_cpp, __GLOBAL__sub_I_listview_cpp: __GLOBAL__sub_I_listview_cpp, dynCall_vi: dynCall_vi, dynCall_di: dynCall_di, __GLOBAL__sub_I_renderop_blur_cpp: __GLOBAL__sub_I_renderop_blur_cpp, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_iiii: dynCall_iiii, _emscripten_get_global_libc: _emscripten_get_global_libc, dynCall_iiiiii: dynCall_iiiiii, stackSave: stackSave, runPostSets: runPostSets, ___cxa_can_catch: ___cxa_can_catch, _free: _free, dynCall_viiiii: dynCall_viiiii, __GLOBAL__sub_I_styles_cpp: __GLOBAL__sub_I_styles_cpp, dynCall_viiiiii: dynCall_viiiiii, dynCall_viddi: dynCall_viddi, __GLOBAL__sub_I_font_cpp: __GLOBAL__sub_I_font_cpp, _main: _main, setThrew: setThrew, dynCall_iiiii: dynCall_iiiii, ___cxa_is_pointer_type: ___cxa_is_pointer_type, dynCall_viiddd: dynCall_viiddd, dynCall_diii: dynCall_diii, stackAlloc: stackAlloc, dynCall_ddddd: dynCall_ddddd, getTempRet0: getTempRet0, __GLOBAL__sub_I_navigationbar_cpp: __GLOBAL__sub_I_navigationbar_cpp, __GLOBAL__sub_I_linearlayout_cpp: __GLOBAL__sub_I_linearlayout_cpp, __GLOBAL__sub_I_renderop_fillrect_cpp: __GLOBAL__sub_I_renderop_fillrect_cpp, dynCall_viiii: dynCall_viiii, _llvm_bswap_i32: _llvm_bswap_i32, __GLOBAL__sub_I_button_cpp: __GLOBAL__sub_I_button_cpp, establishStackSpace: establishStackSpace, dynCall_viid: dynCall_viid, _dispatchMainWindowDraw: _dispatchMainWindowDraw, dynCall_viiid: dynCall_viiid, dynCall_vidddd: dynCall_vidddd, __GLOBAL__sub_I_gameview_cpp: __GLOBAL__sub_I_gameview_cpp, dynCall_iid: dynCall_iid, dynCall_iii: dynCall_iii, __GLOBAL__sub_I_imageview_cpp: __GLOBAL__sub_I_imageview_cpp, _memset: _memset, dynCall_viiidd: dynCall_viiidd, dynCall_viiiiiii: dynCall_viiiiiii, _i64Subtract: _i64Subtract, setTempRet0: setTempRet0, __GLOBAL__sub_I_view_cpp: __GLOBAL__sub_I_view_cpp, __GLOBAL__sub_I_segmentedcontrol_cpp: __GLOBAL__sub_I_segmentedcontrol_cpp, __GLOBAL__sub_I_renderop_text_cpp: __GLOBAL__sub_I_renderop_text_cpp, __GLOBAL__sub_I_userdefaults_cpp: __GLOBAL__sub_I_userdefaults_cpp, dynCall_vidd: dynCall_vidd, dynCall_i: dynCall_i, dynCall_d: dynCall_d, __GLOBAL__sub_I_renderop_roundrect_cpp: __GLOBAL__sub_I_renderop_roundrect_cpp, _llvm_ctpop_i32: _llvm_ctpop_i32, _malloc: _malloc, __GLOBAL__sub_I_renderop_texture_cpp: __GLOBAL__sub_I_renderop_texture_cpp, dynCall_did: dynCall_did, dynCall_dii: dynCall_dii, dynCall_v: dynCall_v, ___udivdi3: ___udivdi3, __GLOBAL__sub_I_label_cpp: __GLOBAL__sub_I_label_cpp, dynCall_vid: dynCall_vid, __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, __GLOBAL__sub_I_web_cpp: __GLOBAL__sub_I_web_cpp, __GLOBAL__sub_I_urlrequest_cpp: __GLOBAL__sub_I_urlrequest_cpp, __GLOBAL__sub_I_canvas_cpp: __GLOBAL__sub_I_canvas_cpp, ___muldi3: ___muldi3, __GLOBAL__sub_I_app_cpp: __GLOBAL__sub_I_app_cpp, dynCall_vii: dynCall_vii, ___uremdi3: ___uremdi3, dynCall_viiidid: dynCall_viiidid, _i64Add: _i64Add, dynCall_viiidii: dynCall_viiidii, __GLOBAL__sub_I_searchbox_cpp: __GLOBAL__sub_I_searchbox_cpp, stackRestore: stackRestore, ___getTypeName: ___getTypeName, dynCall_viii: dynCall_viii, ___errno_location: ___errno_location, __GLOBAL__sub_I_object_cpp: __GLOBAL__sub_I_object_cpp, dynCall_ii: dynCall_ii, _memmove: _memmove };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real___GLOBAL__sub_I_linearlayout_cpp = asm["__GLOBAL__sub_I_linearlayout_cpp"]; asm["__GLOBAL__sub_I_linearlayout_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_linearlayout_cpp.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real___GLOBAL__sub_I_label_cpp = asm["__GLOBAL__sub_I_label_cpp"]; asm["__GLOBAL__sub_I_label_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_label_cpp.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real___GLOBAL__sub_I_gameview_cpp = asm["__GLOBAL__sub_I_gameview_cpp"]; asm["__GLOBAL__sub_I_gameview_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_gameview_cpp.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real___GLOBAL__sub_I_listview_cpp = asm["__GLOBAL__sub_I_listview_cpp"]; asm["__GLOBAL__sub_I_listview_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_listview_cpp.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real___GLOBAL__sub_I_imageview_cpp = asm["__GLOBAL__sub_I_imageview_cpp"]; asm["__GLOBAL__sub_I_imageview_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_imageview_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_urlrequest_cpp = asm["__GLOBAL__sub_I_urlrequest_cpp"]; asm["__GLOBAL__sub_I_urlrequest_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_urlrequest_cpp.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real___GLOBAL__sub_I_renderop_blur_cpp = asm["__GLOBAL__sub_I_renderop_blur_cpp"]; asm["__GLOBAL__sub_I_renderop_blur_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_renderop_blur_cpp.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real___GLOBAL__sub_I_app_cpp = asm["__GLOBAL__sub_I_app_cpp"]; asm["__GLOBAL__sub_I_app_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_app_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_edittext_cpp = asm["__GLOBAL__sub_I_edittext_cpp"]; asm["__GLOBAL__sub_I_edittext_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_edittext_cpp.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real___GLOBAL__sub_I_font_cpp = asm["__GLOBAL__sub_I_font_cpp"]; asm["__GLOBAL__sub_I_font_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_font_cpp.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real___GLOBAL__sub_I_bind_cpp = asm["__GLOBAL__sub_I_bind_cpp"]; asm["__GLOBAL__sub_I_bind_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_bind_cpp.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real___GLOBAL__sub_I_view_cpp = asm["__GLOBAL__sub_I_view_cpp"]; asm["__GLOBAL__sub_I_view_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_view_cpp.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real___GLOBAL__sub_I_searchbox_cpp = asm["__GLOBAL__sub_I_searchbox_cpp"]; asm["__GLOBAL__sub_I_searchbox_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_searchbox_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_segmentedcontrol_cpp = asm["__GLOBAL__sub_I_segmentedcontrol_cpp"]; asm["__GLOBAL__sub_I_segmentedcontrol_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_segmentedcontrol_cpp.apply(null, arguments);
};

var real__emscripten_get_global_libc = asm["_emscripten_get_global_libc"]; asm["_emscripten_get_global_libc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_get_global_libc.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____getTypeName.apply(null, arguments);
};

var real___GLOBAL__sub_I_navigationbar_cpp = asm["__GLOBAL__sub_I_navigationbar_cpp"]; asm["__GLOBAL__sub_I_navigationbar_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_navigationbar_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_canvas_cpp = asm["__GLOBAL__sub_I_canvas_cpp"]; asm["__GLOBAL__sub_I_canvas_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_canvas_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_renderop_fillrect_cpp = asm["__GLOBAL__sub_I_renderop_fillrect_cpp"]; asm["__GLOBAL__sub_I_renderop_fillrect_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_renderop_fillrect_cpp.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real___GLOBAL__sub_I_userdefaults_cpp = asm["__GLOBAL__sub_I_userdefaults_cpp"]; asm["__GLOBAL__sub_I_userdefaults_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_userdefaults_cpp.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real___GLOBAL__sub_I_button_cpp = asm["__GLOBAL__sub_I_button_cpp"]; asm["__GLOBAL__sub_I_button_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_button_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_object_cpp = asm["__GLOBAL__sub_I_object_cpp"]; asm["__GLOBAL__sub_I_object_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_object_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real___GLOBAL__sub_I_styles_cpp = asm["__GLOBAL__sub_I_styles_cpp"]; asm["__GLOBAL__sub_I_styles_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_styles_cpp.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real___GLOBAL__sub_I_web_cpp = asm["__GLOBAL__sub_I_web_cpp"]; asm["__GLOBAL__sub_I_web_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_web_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_renderop_text_cpp = asm["__GLOBAL__sub_I_renderop_text_cpp"]; asm["__GLOBAL__sub_I_renderop_text_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_renderop_text_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_renderop_roundrect_cpp = asm["__GLOBAL__sub_I_renderop_roundrect_cpp"]; asm["__GLOBAL__sub_I_renderop_roundrect_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_renderop_roundrect_cpp.apply(null, arguments);
};

var real__llvm_ctpop_i32 = asm["_llvm_ctpop_i32"]; asm["_llvm_ctpop_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_ctpop_i32.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real___GLOBAL__sub_I_renderop_texture_cpp = asm["__GLOBAL__sub_I_renderop_texture_cpp"]; asm["__GLOBAL__sub_I_renderop_texture_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_renderop_texture_cpp.apply(null, arguments);
};

var real__dispatchMainWindowDraw = asm["_dispatchMainWindowDraw"]; asm["_dispatchMainWindowDraw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dispatchMainWindowDraw.apply(null, arguments);
};
var _main = Module["_main"] = asm["_main"];
var __GLOBAL__sub_I_linearlayout_cpp = Module["__GLOBAL__sub_I_linearlayout_cpp"] = asm["__GLOBAL__sub_I_linearlayout_cpp"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var __GLOBAL__sub_I_label_cpp = Module["__GLOBAL__sub_I_label_cpp"] = asm["__GLOBAL__sub_I_label_cpp"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var __GLOBAL__sub_I_gameview_cpp = Module["__GLOBAL__sub_I_gameview_cpp"] = asm["__GLOBAL__sub_I_gameview_cpp"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var __GLOBAL__sub_I_listview_cpp = Module["__GLOBAL__sub_I_listview_cpp"] = asm["__GLOBAL__sub_I_listview_cpp"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var __GLOBAL__sub_I_imageview_cpp = Module["__GLOBAL__sub_I_imageview_cpp"] = asm["__GLOBAL__sub_I_imageview_cpp"];
var _memset = Module["_memset"] = asm["_memset"];
var __GLOBAL__sub_I_urlrequest_cpp = Module["__GLOBAL__sub_I_urlrequest_cpp"] = asm["__GLOBAL__sub_I_urlrequest_cpp"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var __GLOBAL__sub_I_renderop_blur_cpp = Module["__GLOBAL__sub_I_renderop_blur_cpp"] = asm["__GLOBAL__sub_I_renderop_blur_cpp"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var __GLOBAL__sub_I_app_cpp = Module["__GLOBAL__sub_I_app_cpp"] = asm["__GLOBAL__sub_I_app_cpp"];
var __GLOBAL__sub_I_edittext_cpp = Module["__GLOBAL__sub_I_edittext_cpp"] = asm["__GLOBAL__sub_I_edittext_cpp"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var __GLOBAL__sub_I_font_cpp = Module["__GLOBAL__sub_I_font_cpp"] = asm["__GLOBAL__sub_I_font_cpp"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var __GLOBAL__sub_I_view_cpp = Module["__GLOBAL__sub_I_view_cpp"] = asm["__GLOBAL__sub_I_view_cpp"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var __GLOBAL__sub_I_searchbox_cpp = Module["__GLOBAL__sub_I_searchbox_cpp"] = asm["__GLOBAL__sub_I_searchbox_cpp"];
var __GLOBAL__sub_I_segmentedcontrol_cpp = Module["__GLOBAL__sub_I_segmentedcontrol_cpp"] = asm["__GLOBAL__sub_I_segmentedcontrol_cpp"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var __GLOBAL__sub_I_navigationbar_cpp = Module["__GLOBAL__sub_I_navigationbar_cpp"] = asm["__GLOBAL__sub_I_navigationbar_cpp"];
var __GLOBAL__sub_I_canvas_cpp = Module["__GLOBAL__sub_I_canvas_cpp"] = asm["__GLOBAL__sub_I_canvas_cpp"];
var __GLOBAL__sub_I_renderop_fillrect_cpp = Module["__GLOBAL__sub_I_renderop_fillrect_cpp"] = asm["__GLOBAL__sub_I_renderop_fillrect_cpp"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var __GLOBAL__sub_I_userdefaults_cpp = Module["__GLOBAL__sub_I_userdefaults_cpp"] = asm["__GLOBAL__sub_I_userdefaults_cpp"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var __GLOBAL__sub_I_button_cpp = Module["__GLOBAL__sub_I_button_cpp"] = asm["__GLOBAL__sub_I_button_cpp"];
var __GLOBAL__sub_I_object_cpp = Module["__GLOBAL__sub_I_object_cpp"] = asm["__GLOBAL__sub_I_object_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var __GLOBAL__sub_I_styles_cpp = Module["__GLOBAL__sub_I_styles_cpp"] = asm["__GLOBAL__sub_I_styles_cpp"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var __GLOBAL__sub_I_web_cpp = Module["__GLOBAL__sub_I_web_cpp"] = asm["__GLOBAL__sub_I_web_cpp"];
var __GLOBAL__sub_I_renderop_text_cpp = Module["__GLOBAL__sub_I_renderop_text_cpp"] = asm["__GLOBAL__sub_I_renderop_text_cpp"];
var __GLOBAL__sub_I_renderop_roundrect_cpp = Module["__GLOBAL__sub_I_renderop_roundrect_cpp"] = asm["__GLOBAL__sub_I_renderop_roundrect_cpp"];
var _llvm_ctpop_i32 = Module["_llvm_ctpop_i32"] = asm["_llvm_ctpop_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var __GLOBAL__sub_I_renderop_texture_cpp = Module["__GLOBAL__sub_I_renderop_texture_cpp"] = asm["__GLOBAL__sub_I_renderop_texture_cpp"];
var _dispatchMainWindowDraw = Module["_dispatchMainWindowDraw"] = asm["_dispatchMainWindowDraw"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_viiidid = Module["dynCall_viiidid"] = asm["dynCall_viiidid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_viiidii = Module["dynCall_viiidii"] = asm["dynCall_viiidii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_ddddd = Module["dynCall_ddddd"] = asm["dynCall_ddddd"];
var dynCall_viiiiiiiiiii = Module["dynCall_viiiiiiiiiii"] = asm["dynCall_viiiiiiiiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiidd = Module["dynCall_viiidd"] = asm["dynCall_viiidd"];
var dynCall_viddi = Module["dynCall_viddi"] = asm["dynCall_viddi"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_viiiiidd = Module["dynCall_viiiiidd"] = asm["dynCall_viiiiidd"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_vidddd = Module["dynCall_vidddd"] = asm["dynCall_vidddd"];
var dynCall_iid = Module["dynCall_iid"] = asm["dynCall_iid"];
var dynCall_viiddd = Module["dynCall_viiddd"] = asm["dynCall_viiddd"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_d = Module["dynCall_d"] = asm["dynCall_d"];
var dynCall_did = Module["dynCall_did"] = asm["dynCall_did"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_viiid = Module["dynCall_viiid"] = asm["dynCall_viiid"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;
Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];
Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];


// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;







/**
 * @constructor
 * @extends {Error}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



if (typeof window === "object" && (typeof ENVIRONMENT_IS_PTHREAD === 'undefined' || !ENVIRONMENT_IS_PTHREAD)) {
  function emrun_register_handlers() {
    // When C code exit()s, we may still have remaining stdout and stderr messages in flight. In that case, we can't close
    // the browser until all those XHRs have finished, so the following state variables track that all communication is done,
    // after which we can close.
    var emrun_num_post_messages_in_flight = 0;
    var emrun_should_close_itself = false;
    function postExit(msg) {
      var http = new XMLHttpRequest();
      http.onreadystatechange = function() {
        if (http.readyState == 4 /*DONE*/) {
          try {
            // Try closing the current browser window, since it exit()ed itself. This can shut down the browser process
            // and emrun does not need to kill the whole browser process.
            if (typeof window !== 'undefined' && window.close) window.close();
          } catch(e) {}
        }
      }
      http.open("POST", "stdio.html", true);
      http.send(msg);
    }
    function post(msg) {
      var http = new XMLHttpRequest();
      ++emrun_num_post_messages_in_flight;
      http.onreadystatechange = function() {
        if (http.readyState == 4 /*DONE*/) {
          if (--emrun_num_post_messages_in_flight == 0 && emrun_should_close_itself) postExit('^exit^'+EXITSTATUS);
        }
      }
      http.open("POST", "stdio.html", true);
      http.send(msg);
    }
    // If the address contains localhost, or we are running the page from port 6931, we can assume we're running the test runner and should post stdout logs.
    if (document.URL.search("localhost") != -1 || document.URL.search(":6931/") != -1) {
      var emrun_http_sequence_number = 1;
      var prevPrint = Module['print'];
      var prevErr = Module['printErr'];
      function emrun_exit() { if (emrun_num_post_messages_in_flight == 0) postExit('^exit^'+EXITSTATUS); else emrun_should_close_itself = true; };
      Module['addOnExit'](emrun_exit);
      Module['print'] = function emrun_print(text) { post('^out^'+(emrun_http_sequence_number++)+'^'+encodeURIComponent(text)); prevPrint(text); }
      Module['printErr'] = function emrun_printErr(text) { post('^err^'+(emrun_http_sequence_number++)+'^'+encodeURIComponent(text)); prevErr(text); }

      // Notify emrun web server that this browser has successfully launched the page.
      post('^pageload^');
    }
  }

  // POSTs the given binary data represented as a (typed) array data back to the emrun-based web server.
  // To use from C code, call e.g. EM_ASM({emrun_file_dump("file.dat", HEAPU8.subarray($0, $0 + $1));}, my_data_pointer, my_data_pointer_byte_length);
  function emrun_file_dump(filename, data) {
    var http = new XMLHttpRequest();
    Module['print']('Dumping out file "' + filename + '" with ' + data.length + ' bytes of data.');
    http.open("POST", "stdio.html?file=" + filename, true);
    http.send(data); // XXX  this does not work in workers, for some odd reason (issue #2681)
  }

  if (typeof Module !== 'undefined' && typeof document !== 'undefined') emrun_register_handlers();
}

